
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e610  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e57c  0800e7e0  0800e7e0  0000f7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cd5c  0801cd5c  0001e0b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801cd5c  0801cd5c  0001dd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cd64  0801cd64  0001e0b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cd64  0801cd64  0001dd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cd68  0801cd68  0001dd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0801cd6c  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c58  200000b4  0801ce20  0001e0b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d0c  0801ce20  0001ed0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e0b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fe1e  00000000  00000000  0001e0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000073cf  00000000  00000000  0004df02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002848  00000000  00000000  000552d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f0e  00000000  00000000  00057b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003123c  00000000  00000000  00059a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036165  00000000  00000000  0008ac6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119161  00000000  00000000  000c0dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d9f30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b224  00000000  00000000  001d9f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001e5198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e7c8 	.word	0x0800e7c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800e7c8 	.word	0x0800e7c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_ADC1_Init+0xa0>)
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000602:	f004 ffb3 	bl	800556c <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800060c:	f002 fbac 	bl	8002d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000622:	f005 f94d 	bl	80058c0 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800062c:	f002 fb9c 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000d0 	.word	0x200000d0
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_ADC3_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC3_Init+0x98>)
 800065e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_ADC3_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_ADC3_Init+0xa0>)
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a6:	f004 ff61 	bl	800556c <HAL_ADC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006b0:	f002 fb5a 	bl	8002d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006c6:	f005 f8fb 	bl	80058c0 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006d0:	f002 fb4a 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000118 	.word	0x20000118
 80006e0:	40012200 	.word	0x40012200
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d124      	bne.n	8000754 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <HAL_ADC_MspInit+0xd0>)
 800074e:	f006 fa23 	bl	8006b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000752:	e029      	b.n	80007a8 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <HAL_ADC_MspInit+0xd4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d124      	bne.n	80007a8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800078e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <HAL_ADC_MspInit+0xd8>)
 80007a4:	f006 f9f8 	bl	8006b98 <HAL_GPIO_Init>
}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012000 	.word	0x40012000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40012200 	.word	0x40012200
 80007c0:	40021400 	.word	0x40021400

080007c4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <MX_DAC_Init+0x50>)
 80007d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007da:	f005 fba3 	bl	8005f24 <HAL_DAC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007e4:	f002 fac0 	bl	8002d68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007f8:	f005 fc1a 	bl	8006030 <HAL_DAC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000802:	f002 fab1 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000160 	.word	0x20000160
 8000814:	40007400 	.word	0x40007400

08000818 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_DAC_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000844:	6413      	str	r3, [r2, #64]	@ 0x40
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800086a:	2310      	movs	r3, #16
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <HAL_DAC_MspInit+0x8c>)
 800087e:	f006 f98b 	bl	8006b98 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	2036      	movs	r0, #54	@ 0x36
 8000888:	f005 fb22 	bl	8005ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800088c:	2036      	movs	r0, #54	@ 0x36
 800088e:	f005 fb3b 	bl	8005f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40007400 	.word	0x40007400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <MX_DMA2D_Init+0x60>)
 80008b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008de:	f005 fdbf 	bl	8006460 <HAL_DMA2D_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008e8:	f002 fa3e 	bl	8002d68 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008ec:	2101      	movs	r1, #1
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008f0:	f006 f824 	bl	800693c <HAL_DMA2D_ConfigLayer>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008fa:	f002 fa35 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000174 	.word	0x20000174
 8000908:	4002b000 	.word	0x4002b000

0800090c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <HAL_DMA2D_MspInit+0x44>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d113      	bne.n	8000946 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	205a      	movs	r0, #90	@ 0x5a
 800093c:	f005 fac8 	bl	8005ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000940:	205a      	movs	r0, #90	@ 0x5a
 8000942:	f005 fae1 	bl	8005f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	4002b000 	.word	0x4002b000
 8000954:	40023800 	.word	0x40023800

08000958 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000972:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <MX_FMC_Init+0x9c>)
 8000974:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_FMC_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000984:	2204      	movs	r2, #4
 8000986:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_FMC_Init+0x98>)
 800098a:	2210      	movs	r2, #16
 800098c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000990:	2240      	movs	r2, #64	@ 0x40
 8000992:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000996:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800099a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_FMC_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009bc:	2307      	movs	r3, #7
 80009be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009c4:	2307      	movs	r3, #7
 80009c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009da:	f009 fa37 	bl	8009e4c <HAL_SDRAM_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009e4:	f002 f9c0 	bl	8002d68 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200001b4 	.word	0x200001b4
 80009f4:	a0000140 	.word	0xa0000140

080009f8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d16d      	bne.n	8000af0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a14:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a1a:	4b38      	ldr	r3, [pc, #224]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a1e:	4a37      	ldr	r2, [pc, #220]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a32:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a36:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a44:	230c      	movs	r3, #12
 8000a46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482c      	ldr	r0, [pc, #176]	@ (8000b00 <HAL_FMC_MspInit+0x108>)
 8000a4e:	f006 f8a3 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a52:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a56:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a64:	230c      	movs	r3, #12
 8000a66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4825      	ldr	r0, [pc, #148]	@ (8000b04 <HAL_FMC_MspInit+0x10c>)
 8000a6e:	f006 f893 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a72:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a76:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a84:	230c      	movs	r3, #12
 8000a86:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <HAL_FMC_MspInit+0x110>)
 8000a8e:	f006 f883 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a92:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a96:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4817      	ldr	r0, [pc, #92]	@ (8000b0c <HAL_FMC_MspInit+0x114>)
 8000aae:	f006 f873 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ab2:	2328      	movs	r3, #40	@ 0x28
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4811      	ldr	r0, [pc, #68]	@ (8000b10 <HAL_FMC_MspInit+0x118>)
 8000acc:	f006 f864 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480a      	ldr	r0, [pc, #40]	@ (8000b14 <HAL_FMC_MspInit+0x11c>)
 8000aea:	f006 f855 	bl	8006b98 <HAL_GPIO_Init>
 8000aee:	e000      	b.n	8000af2 <HAL_FMC_MspInit+0xfa>
    return;
 8000af0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001e8 	.word	0x200001e8
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40021400 	.word	0x40021400
 8000b10:	40021c00 	.word	0x40021c00
 8000b14:	40020800 	.word	0x40020800

08000b18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b20:	f7ff ff6a 	bl	80009f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <vApplicationGetIdleTaskMemory+0x30>)
 8000b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200003fc 	.word	0x200003fc
 8000b5c:	20000450 	.word	0x20000450

08000b60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b0a6      	sub	sp, #152	@ 0x98
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 8000b72:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00a fd3f 	bl	800b5fa <osMutexCreate>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a31      	ldr	r2, [pc, #196]	@ (8000c44 <MX_FREERTOS_Init+0xe4>)
 8000b80:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b82:	4b31      	ldr	r3, [pc, #196]	@ (8000c48 <MX_FREERTOS_Init+0xe8>)
 8000b84:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8000b88:	461d      	mov	r5, r3
 8000b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b96:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00a fccc 	bl	800b53a <osThreadCreate>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a29      	ldr	r2, [pc, #164]	@ (8000c4c <MX_FREERTOS_Init+0xec>)
 8000ba6:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 8000ba8:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <MX_FREERTOS_Init+0xf0>)
 8000baa:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8000bbc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00a fcb9 	bl	800b53a <osThreadCreate>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a22      	ldr	r2, [pc, #136]	@ (8000c54 <MX_FREERTOS_Init+0xf4>)
 8000bcc:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 8000bce:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <MX_FREERTOS_Init+0xf8>)
 8000bd0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 8000be2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00a fca6 	bl	800b53a <osThreadCreate>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c5c <MX_FREERTOS_Init+0xfc>)
 8000bf2:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_FREERTOS_Init+0x100>)
 8000bf6:	f107 0420 	add.w	r4, r7, #32
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f00a fc93 	bl	800b53a <osThreadCreate>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a13      	ldr	r2, [pc, #76]	@ (8000c64 <MX_FREERTOS_Init+0x104>)
 8000c18:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <MX_FREERTOS_Init+0x108>)
 8000c1c:	1d3c      	adds	r4, r7, #4
 8000c1e:	461d      	mov	r5, r3
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f00a fc82 	bl	800b53a <osThreadCreate>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <MX_FREERTOS_Init+0x10c>)
 8000c3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c3c:	bf00      	nop
 8000c3e:	3798      	adds	r7, #152	@ 0x98
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}
 8000c44:	200003f8 	.word	0x200003f8
 8000c48:	0800e7ec 	.word	0x0800e7ec
 8000c4c:	200003e4 	.word	0x200003e4
 8000c50:	0800e814 	.word	0x0800e814
 8000c54:	200003e8 	.word	0x200003e8
 8000c58:	0800e840 	.word	0x0800e840
 8000c5c:	200003ec 	.word	0x200003ec
 8000c60:	0800e86c 	.word	0x0800e86c
 8000c64:	200003f0 	.word	0x200003f0
 8000c68:	0800e898 	.word	0x0800e898
 8000c6c:	200003f4 	.word	0x200003f4

08000c70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f00a fcaa 	bl	800b5d2 <osDelay>
 8000c7e:	e7fb      	b.n	8000c78 <StartDefaultTask+0x8>

08000c80 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0b6      	sub	sp, #216	@ 0xd8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if (gameOver || gamePaused || !gameStarted) {
 8000c88:	4bbb      	ldr	r3, [pc, #748]	@ (8000f78 <StartDisplayTask+0x2f8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d107      	bne.n	8000ca0 <StartDisplayTask+0x20>
 8000c90:	4bba      	ldr	r3, [pc, #744]	@ (8000f7c <StartDisplayTask+0x2fc>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d103      	bne.n	8000ca0 <StartDisplayTask+0x20>
 8000c98:	4bb9      	ldr	r3, [pc, #740]	@ (8000f80 <StartDisplayTask+0x300>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <StartDisplayTask+0x26>
      displayGameStatus();
 8000ca0:	f000 feb0 	bl	8001a04 <displayGameStatus>
 8000ca4:	e1f0      	b.n	8001088 <StartDisplayTask+0x408>
    }
    else {
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8000ca6:	48b7      	ldr	r0, [pc, #732]	@ (8000f84 <StartDisplayTask+0x304>)
 8000ca8:	f002 fc82 	bl	80035b0 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 8000cac:	f002 fbe8 	bl	8003480 <BSP_LCD_GetXSize>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f002 fdf8 	bl	80038b0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 8000cc0:	f002 fbde 	bl	8003480 <BSP_LCD_GetXSize>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f240 1101 	movw	r1, #257	@ 0x101
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f002 fdee 	bl	80038b0 <BSP_LCD_DrawHLine>

      char directionText[100];
      // on affiche la direction
      switch (direction) {
 8000cd4:	4bac      	ldr	r3, [pc, #688]	@ (8000f88 <StartDisplayTask+0x308>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d827      	bhi.n	8000d2c <StartDisplayTask+0xac>
 8000cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce4 <StartDisplayTask+0x64>)
 8000cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce2:	bf00      	nop
 8000ce4:	08000cf5 	.word	0x08000cf5
 8000ce8:	08000d03 	.word	0x08000d03
 8000cec:	08000d11 	.word	0x08000d11
 8000cf0:	08000d1f 	.word	0x08000d1f
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	49a4      	ldr	r1, [pc, #656]	@ (8000f8c <StartDisplayTask+0x30c>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00c fcb0 	bl	800d660 <siprintf>
          break;
 8000d00:	e014      	b.n	8000d2c <StartDisplayTask+0xac>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	49a2      	ldr	r1, [pc, #648]	@ (8000f90 <StartDisplayTask+0x310>)
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f00c fca9 	bl	800d660 <siprintf>
          break;
 8000d0e:	e00d      	b.n	8000d2c <StartDisplayTask+0xac>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	499f      	ldr	r1, [pc, #636]	@ (8000f94 <StartDisplayTask+0x314>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00c fca2 	bl	800d660 <siprintf>
          break;
 8000d1c:	e006      	b.n	8000d2c <StartDisplayTask+0xac>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	499d      	ldr	r1, [pc, #628]	@ (8000f98 <StartDisplayTask+0x318>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f00c fc9b 	bl	800d660 <siprintf>
          break;
 8000d2a:	bf00      	nop
      }
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 8000d2c:	f107 0208 	add.w	r2, r7, #8
 8000d30:	2303      	movs	r3, #3
 8000d32:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000d36:	2000      	movs	r0, #0
 8000d38:	f002 fcf2 	bl	8003720 <BSP_LCD_DisplayStringAt>

      // On affiche le score a la suite de la direction
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 8000d3c:	4b97      	ldr	r3, [pc, #604]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d46:	4996      	ldr	r1, [pc, #600]	@ (8000fa0 <StartDisplayTask+0x320>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00c fc89 	bl	800d660 <siprintf>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 8000d4e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000d52:	2303      	movs	r3, #3
 8000d54:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000d58:	20c8      	movs	r0, #200	@ 0xc8
 8000d5a:	f002 fce1 	bl	8003720 <BSP_LCD_DisplayStringAt>


      // On affiche la tête du snake
      switch (headPart) {
 8000d5e:	4b91      	ldr	r3, [pc, #580]	@ (8000fa4 <StartDisplayTask+0x324>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d83a      	bhi.n	8000ddc <StartDisplayTask+0x15c>
 8000d66:	a201      	add	r2, pc, #4	@ (adr r2, 8000d6c <StartDisplayTask+0xec>)
 8000d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6c:	08000d95 	.word	0x08000d95
 8000d70:	08000d7d 	.word	0x08000d7d
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dc5 	.word	0x08000dc5
        case HeadBottom:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 8000d7c:	4b8a      	ldr	r3, [pc, #552]	@ (8000fa8 <StartDisplayTask+0x328>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	015b      	lsls	r3, r3, #5
 8000d82:	4618      	mov	r0, r3
 8000d84:	4b88      	ldr	r3, [pc, #544]	@ (8000fa8 <StartDisplayTask+0x328>)
 8000d86:	785b      	ldrb	r3, [r3, #1]
 8000d88:	015b      	lsls	r3, r3, #5
 8000d8a:	4a88      	ldr	r2, [pc, #544]	@ (8000fac <StartDisplayTask+0x32c>)
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f002 fe35 	bl	80039fc <BSP_LCD_DrawBitmap>
          break;
 8000d92:	e023      	b.n	8000ddc <StartDisplayTask+0x15c>
        case HeadTop:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 8000d94:	4b84      	ldr	r3, [pc, #528]	@ (8000fa8 <StartDisplayTask+0x328>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	015b      	lsls	r3, r3, #5
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	4b82      	ldr	r3, [pc, #520]	@ (8000fa8 <StartDisplayTask+0x328>)
 8000d9e:	785b      	ldrb	r3, [r3, #1]
 8000da0:	015b      	lsls	r3, r3, #5
 8000da2:	4a83      	ldr	r2, [pc, #524]	@ (8000fb0 <StartDisplayTask+0x330>)
 8000da4:	4619      	mov	r1, r3
 8000da6:	f002 fe29 	bl	80039fc <BSP_LCD_DrawBitmap>
          break;
 8000daa:	e017      	b.n	8000ddc <StartDisplayTask+0x15c>
        case HeadLeft:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 8000dac:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa8 <StartDisplayTask+0x328>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	015b      	lsls	r3, r3, #5
 8000db2:	4618      	mov	r0, r3
 8000db4:	4b7c      	ldr	r3, [pc, #496]	@ (8000fa8 <StartDisplayTask+0x328>)
 8000db6:	785b      	ldrb	r3, [r3, #1]
 8000db8:	015b      	lsls	r3, r3, #5
 8000dba:	4a7e      	ldr	r2, [pc, #504]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f002 fe1d 	bl	80039fc <BSP_LCD_DrawBitmap>
          break;
 8000dc2:	e00b      	b.n	8000ddc <StartDisplayTask+0x15c>
        case HeadRight:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 8000dc4:	4b78      	ldr	r3, [pc, #480]	@ (8000fa8 <StartDisplayTask+0x328>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	015b      	lsls	r3, r3, #5
 8000dca:	4618      	mov	r0, r3
 8000dcc:	4b76      	ldr	r3, [pc, #472]	@ (8000fa8 <StartDisplayTask+0x328>)
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	015b      	lsls	r3, r3, #5
 8000dd2:	4a79      	ldr	r2, [pc, #484]	@ (8000fb8 <StartDisplayTask+0x338>)
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f002 fe11 	bl	80039fc <BSP_LCD_DrawBitmap>
          break;
 8000dda:	bf00      	nop
      }


      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000de2:	e08e      	b.n	8000f02 <StartDisplayTask+0x282>
        switch (snakeBodyParts[i]) {
 8000de4:	4a75      	ldr	r2, [pc, #468]	@ (8000fbc <StartDisplayTask+0x33c>)
 8000de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000dea:	4413      	add	r3, r2
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	f200 8082 	bhi.w	8000ef8 <StartDisplayTask+0x278>
 8000df4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <StartDisplayTask+0x17c>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000e15 	.word	0x08000e15
 8000e00:	08000e3b 	.word	0x08000e3b
 8000e04:	08000e61 	.word	0x08000e61
 8000e08:	08000e87 	.word	0x08000e87
 8000e0c:	08000ead 	.word	0x08000ead
 8000e10:	08000ed3 	.word	0x08000ed3
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 8000e14:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e1a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e1e:	015b      	lsls	r3, r3, #5
 8000e20:	4618      	mov	r0, r3
 8000e22:	4a67      	ldr	r2, [pc, #412]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	785b      	ldrb	r3, [r3, #1]
 8000e2e:	015b      	lsls	r3, r3, #5
 8000e30:	4a64      	ldr	r2, [pc, #400]	@ (8000fc4 <StartDisplayTask+0x344>)
 8000e32:	4619      	mov	r1, r3
 8000e34:	f002 fde2 	bl	80039fc <BSP_LCD_DrawBitmap>
            break;
 8000e38:	e05e      	b.n	8000ef8 <StartDisplayTask+0x278>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 8000e3a:	4a61      	ldr	r2, [pc, #388]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e40:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e44:	015b      	lsls	r3, r3, #5
 8000e46:	4618      	mov	r0, r3
 8000e48:	4a5d      	ldr	r2, [pc, #372]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	785b      	ldrb	r3, [r3, #1]
 8000e54:	015b      	lsls	r3, r3, #5
 8000e56:	4a5c      	ldr	r2, [pc, #368]	@ (8000fc8 <StartDisplayTask+0x348>)
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f002 fdcf 	bl	80039fc <BSP_LCD_DrawBitmap>
            break;
 8000e5e:	e04b      	b.n	8000ef8 <StartDisplayTask+0x278>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 8000e60:	4a57      	ldr	r2, [pc, #348]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e66:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e6a:	015b      	lsls	r3, r3, #5
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	4a54      	ldr	r2, [pc, #336]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000e70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	015b      	lsls	r3, r3, #5
 8000e7c:	4a53      	ldr	r2, [pc, #332]	@ (8000fcc <StartDisplayTask+0x34c>)
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f002 fdbc 	bl	80039fc <BSP_LCD_DrawBitmap>
            break;
 8000e84:	e038      	b.n	8000ef8 <StartDisplayTask+0x278>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 8000e86:	4a4e      	ldr	r2, [pc, #312]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e8c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e90:	015b      	lsls	r3, r3, #5
 8000e92:	4618      	mov	r0, r3
 8000e94:	4a4a      	ldr	r2, [pc, #296]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	785b      	ldrb	r3, [r3, #1]
 8000ea0:	015b      	lsls	r3, r3, #5
 8000ea2:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd0 <StartDisplayTask+0x350>)
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f002 fda9 	bl	80039fc <BSP_LCD_DrawBitmap>
            break;
 8000eaa:	e025      	b.n	8000ef8 <StartDisplayTask+0x278>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 8000eac:	4a44      	ldr	r2, [pc, #272]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000eb2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000eb6:	015b      	lsls	r3, r3, #5
 8000eb8:	4618      	mov	r0, r3
 8000eba:	4a41      	ldr	r2, [pc, #260]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	785b      	ldrb	r3, [r3, #1]
 8000ec6:	015b      	lsls	r3, r3, #5
 8000ec8:	4a42      	ldr	r2, [pc, #264]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f002 fd96 	bl	80039fc <BSP_LCD_DrawBitmap>
            break;
 8000ed0:	e012      	b.n	8000ef8 <StartDisplayTask+0x278>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 8000ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ed8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000edc:	015b      	lsls	r3, r3, #5
 8000ede:	4618      	mov	r0, r3
 8000ee0:	4a37      	ldr	r2, [pc, #220]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	785b      	ldrb	r3, [r3, #1]
 8000eec:	015b      	lsls	r3, r3, #5
 8000eee:	4a3a      	ldr	r2, [pc, #232]	@ (8000fd8 <StartDisplayTask+0x358>)
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f002 fd83 	bl	80039fc <BSP_LCD_DrawBitmap>
            break;
 8000ef6:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 8000ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000efc:	3301      	adds	r3, #1
 8000efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	f6ff af69 	blt.w	8000de4 <StartDisplayTask+0x164>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 8000f12:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <StartDisplayTask+0x35c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d876      	bhi.n	8001008 <StartDisplayTask+0x388>
 8000f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f20 <StartDisplayTask+0x2a0>)
 8000f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f20:	08000f31 	.word	0x08000f31
 8000f24:	08000f49 	.word	0x08000f49
 8000f28:	08000f61 	.word	0x08000f61
 8000f2c:	08000ff1 	.word	0x08000ff1
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 8000f30:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <StartDisplayTask+0x360>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	015b      	lsls	r3, r3, #5
 8000f36:	4618      	mov	r0, r3
 8000f38:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <StartDisplayTask+0x360>)
 8000f3a:	785b      	ldrb	r3, [r3, #1]
 8000f3c:	015b      	lsls	r3, r3, #5
 8000f3e:	4a29      	ldr	r2, [pc, #164]	@ (8000fe4 <StartDisplayTask+0x364>)
 8000f40:	4619      	mov	r1, r3
 8000f42:	f002 fd5b 	bl	80039fc <BSP_LCD_DrawBitmap>
          break;
 8000f46:	e05f      	b.n	8001008 <StartDisplayTask+0x388>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <StartDisplayTask+0x360>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	015b      	lsls	r3, r3, #5
 8000f4e:	4618      	mov	r0, r3
 8000f50:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <StartDisplayTask+0x360>)
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	015b      	lsls	r3, r3, #5
 8000f56:	4a24      	ldr	r2, [pc, #144]	@ (8000fe8 <StartDisplayTask+0x368>)
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f002 fd4f 	bl	80039fc <BSP_LCD_DrawBitmap>
          break;
 8000f5e:	e053      	b.n	8001008 <StartDisplayTask+0x388>
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 8000f60:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <StartDisplayTask+0x360>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	015b      	lsls	r3, r3, #5
 8000f66:	4618      	mov	r0, r3
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <StartDisplayTask+0x360>)
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	015b      	lsls	r3, r3, #5
 8000f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fec <StartDisplayTask+0x36c>)
 8000f70:	4619      	mov	r1, r3
 8000f72:	f002 fd43 	bl	80039fc <BSP_LCD_DrawBitmap>
          break;
 8000f76:	e047      	b.n	8001008 <StartDisplayTask+0x388>
 8000f78:	200002a8 	.word	0x200002a8
 8000f7c:	200002ac 	.word	0x200002ac
 8000f80:	200002b0 	.word	0x200002b0
 8000f84:	ffa52a2a 	.word	0xffa52a2a
 8000f88:	20000224 	.word	0x20000224
 8000f8c:	0800e8b4 	.word	0x0800e8b4
 8000f90:	0800e8c8 	.word	0x0800e8c8
 8000f94:	0800e8dc 	.word	0x0800e8dc
 8000f98:	0800e8f0 	.word	0x0800e8f0
 8000f9c:	200002a0 	.word	0x200002a0
 8000fa0:	0800e904 	.word	0x0800e904
 8000fa4:	20000225 	.word	0x20000225
 8000fa8:	20000004 	.word	0x20000004
 8000fac:	08011bc0 	.word	0x08011bc0
 8000fb0:	0801284c 	.word	0x0801284c
 8000fb4:	080134d8 	.word	0x080134d8
 8000fb8:	08014164 	.word	0x08014164
 8000fbc:	20000228 	.word	0x20000228
 8000fc0:	200002b4 	.word	0x200002b4
 8000fc4:	0800f61c 	.word	0x0800f61c
 8000fc8:	080102a8 	.word	0x080102a8
 8000fcc:	08010f34 	.word	0x08010f34
 8000fd0:	08014df0 	.word	0x08014df0
 8000fd4:	08015a7c 	.word	0x08015a7c
 8000fd8:	08016708 	.word	0x08016708
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	08017394 	.word	0x08017394
 8000fe8:	08018020 	.word	0x08018020
 8000fec:	08018cac 	.word	0x08018cac
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 8000ff0:	4b27      	ldr	r3, [pc, #156]	@ (8001090 <StartDisplayTask+0x410>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	015b      	lsls	r3, r3, #5
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <StartDisplayTask+0x410>)
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	015b      	lsls	r3, r3, #5
 8000ffe:	4a25      	ldr	r2, [pc, #148]	@ (8001094 <StartDisplayTask+0x414>)
 8001000:	4619      	mov	r1, r3
 8001002:	f002 fcfb 	bl	80039fc <BSP_LCD_DrawBitmap>
          break;
 8001006:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <StartDisplayTask+0x418>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d11a      	bne.n	8001046 <StartDisplayTask+0x3c6>
 8001010:	4b22      	ldr	r3, [pc, #136]	@ (800109c <StartDisplayTask+0x41c>)
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	4b22      	ldr	r3, [pc, #136]	@ (80010a0 <StartDisplayTask+0x420>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d105      	bne.n	8001028 <StartDisplayTask+0x3a8>
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <StartDisplayTask+0x41c>)
 800101e:	785a      	ldrb	r2, [r3, #1]
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <StartDisplayTask+0x420>)
 8001022:	785b      	ldrb	r3, [r3, #1]
 8001024:	429a      	cmp	r2, r3
 8001026:	d00e      	beq.n	8001046 <StartDisplayTask+0x3c6>
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 8001028:	481e      	ldr	r0, [pc, #120]	@ (80010a4 <StartDisplayTask+0x424>)
 800102a:	f002 fac1 	bl	80035b0 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 800102e:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <StartDisplayTask+0x420>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	015b      	lsls	r3, r3, #5
 8001034:	b298      	uxth	r0, r3
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <StartDisplayTask+0x420>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	b299      	uxth	r1, r3
 800103e:	2320      	movs	r3, #32
 8001040:	2220      	movs	r2, #32
 8001042:	f002 fd8d 	bl	8003b60 <BSP_LCD_FillRect>
      }
      // On affiche la pomme
      for (int i = 0; i < NBApple; i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800104c:	e016      	b.n	800107c <StartDisplayTask+0x3fc>
        BSP_LCD_DrawBitmap(applePosition[i][0]*32, applePosition[i][1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 800104e:	4a16      	ldr	r2, [pc, #88]	@ (80010a8 <StartDisplayTask+0x428>)
 8001050:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001054:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001058:	015b      	lsls	r3, r3, #5
 800105a:	4618      	mov	r0, r3
 800105c:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <StartDisplayTask+0x428>)
 800105e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	015b      	lsls	r3, r3, #5
 800106a:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <StartDisplayTask+0x42c>)
 800106c:	4619      	mov	r1, r3
 800106e:	f002 fcc5 	bl	80039fc <BSP_LCD_DrawBitmap>
      for (int i = 0; i < NBApple; i++) {
 8001072:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001076:	3301      	adds	r3, #1
 8001078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800107c:	231e      	movs	r3, #30
 800107e:	461a      	mov	r2, r3
 8001080:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001084:	4293      	cmp	r3, r2
 8001086:	dbe2      	blt.n	800104e <StartDisplayTask+0x3ce>
      }
    }

    osDelay(100);
 8001088:	2064      	movs	r0, #100	@ 0x64
 800108a:	f00a faa2 	bl	800b5d2 <osDelay>
    if (gameOver || gamePaused || !gameStarted) {
 800108e:	e5fb      	b.n	8000c88 <StartDisplayTask+0x8>
 8001090:	20000008 	.word	0x20000008
 8001094:	08019938 	.word	0x08019938
 8001098:	200002a4 	.word	0x200002a4
 800109c:	20000004 	.word	0x20000004
 80010a0:	200003a4 	.word	0x200003a4
 80010a4:	ff81cd4b 	.word	0xff81cd4b
 80010a8:	200003a8 	.word	0x200003a8
 80010ac:	0800e990 	.word	0x0800e990

080010b0 <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 80010b8:	4b30      	ldr	r3, [pc, #192]	@ (800117c <StartJoystickTask+0xcc>)
 80010ba:	2208      	movs	r2, #8
 80010bc:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80010be:	492f      	ldr	r1, [pc, #188]	@ (800117c <StartJoystickTask+0xcc>)
 80010c0:	482f      	ldr	r0, [pc, #188]	@ (8001180 <StartJoystickTask+0xd0>)
 80010c2:	f004 fbfd 	bl	80058c0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 80010c6:	482e      	ldr	r0, [pc, #184]	@ (8001180 <StartJoystickTask+0xd0>)
 80010c8:	f004 fa94 	bl	80055f4 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 80010cc:	bf00      	nop
 80010ce:	2164      	movs	r1, #100	@ 0x64
 80010d0:	482b      	ldr	r0, [pc, #172]	@ (8001180 <StartJoystickTask+0xd0>)
 80010d2:	f004 fb5d 	bl	8005790 <HAL_ADC_PollForConversion>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f8      	bne.n	80010ce <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 80010dc:	4828      	ldr	r0, [pc, #160]	@ (8001180 <StartJoystickTask+0xd0>)
 80010de:	f004 fbe2 	bl	80058a6 <HAL_ADC_GetValue>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a27      	ldr	r2, [pc, #156]	@ (8001184 <StartJoystickTask+0xd4>)
 80010e6:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 80010e8:	4827      	ldr	r0, [pc, #156]	@ (8001188 <StartJoystickTask+0xd8>)
 80010ea:	f004 fa83 	bl	80055f4 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 80010ee:	bf00      	nop
 80010f0:	2164      	movs	r1, #100	@ 0x64
 80010f2:	4825      	ldr	r0, [pc, #148]	@ (8001188 <StartJoystickTask+0xd8>)
 80010f4:	f004 fb4c 	bl	8005790 <HAL_ADC_PollForConversion>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f8      	bne.n	80010f0 <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 80010fe:	4822      	ldr	r0, [pc, #136]	@ (8001188 <StartJoystickTask+0xd8>)
 8001100:	f004 fbd1 	bl	80058a6 <HAL_ADC_GetValue>
 8001104:	4603      	mov	r3, r0
 8001106:	4a21      	ldr	r2, [pc, #132]	@ (800118c <StartJoystickTask+0xdc>)
 8001108:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <StartJoystickTask+0xd4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001112:	d207      	bcs.n	8001124 <StartJoystickTask+0x74>
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <StartJoystickTask+0xe0>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <StartJoystickTask+0x74>
      direction = Down;
 800111c:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <StartJoystickTask+0xe4>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e027      	b.n	8001174 <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <StartJoystickTask+0xd4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800112c:	4293      	cmp	r3, r2
 800112e:	d907      	bls.n	8001140 <StartJoystickTask+0x90>
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <StartJoystickTask+0xe0>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d003      	beq.n	8001140 <StartJoystickTask+0x90>
      direction = Up;
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <StartJoystickTask+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e019      	b.n	8001174 <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <StartJoystickTask+0xdc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001148:	d207      	bcs.n	800115a <StartJoystickTask+0xaa>
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <StartJoystickTask+0xe0>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d003      	beq.n	800115a <StartJoystickTask+0xaa>
      direction = Right;
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <StartJoystickTask+0xe4>)
 8001154:	2203      	movs	r2, #3
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e00c      	b.n	8001174 <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <StartJoystickTask+0xdc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001162:	4293      	cmp	r3, r2
 8001164:	d906      	bls.n	8001174 <StartJoystickTask+0xc4>
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <StartJoystickTask+0xe0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d002      	beq.n	8001174 <StartJoystickTask+0xc4>
      direction = Left;
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <StartJoystickTask+0xe4>)
 8001170:	2202      	movs	r2, #2
 8001172:	701a      	strb	r2, [r3, #0]
    }
    osDelay(1);
 8001174:	2001      	movs	r0, #1
 8001176:	f00a fa2c 	bl	800b5d2 <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 800117a:	e79d      	b.n	80010b8 <StartJoystickTask+0x8>
 800117c:	200007a8 	.word	0x200007a8
 8001180:	20000118 	.word	0x20000118
 8001184:	2000021c 	.word	0x2000021c
 8001188:	200000d0 	.word	0x200000d0
 800118c:	20000220 	.word	0x20000220
 8001190:	20000225 	.word	0x20000225
 8001194:	20000224 	.word	0x20000224

08001198 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  /* Infinite loop */
  for(;;)
  {
    if (!gameOver && !gamePaused && gameStarted) {
 80011a0:	4b8c      	ldr	r3, [pc, #560]	@ (80013d4 <StartManageBodyParts+0x23c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f040 8265 	bne.w	8001674 <StartManageBodyParts+0x4dc>
 80011aa:	4b8b      	ldr	r3, [pc, #556]	@ (80013d8 <StartManageBodyParts+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f040 8260 	bne.w	8001674 <StartManageBodyParts+0x4dc>
 80011b4:	4b89      	ldr	r3, [pc, #548]	@ (80013dc <StartManageBodyParts+0x244>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 825b 	beq.w	8001674 <StartManageBodyParts+0x4dc>
      oldTailPosition[0] = snakeTailPosition[0];
 80011be:	4b88      	ldr	r3, [pc, #544]	@ (80013e0 <StartManageBodyParts+0x248>)
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	4b88      	ldr	r3, [pc, #544]	@ (80013e4 <StartManageBodyParts+0x24c>)
 80011c4:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 80011c6:	4b86      	ldr	r3, [pc, #536]	@ (80013e0 <StartManageBodyParts+0x248>)
 80011c8:	785a      	ldrb	r2, [r3, #1]
 80011ca:	4b86      	ldr	r3, [pc, #536]	@ (80013e4 <StartManageBodyParts+0x24c>)
 80011cc:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 80011ce:	4b86      	ldr	r3, [pc, #536]	@ (80013e8 <StartManageBodyParts+0x250>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	723b      	strb	r3, [r7, #8]
      oldHeadPosition[1] = snakeHeadPosition[1];
 80011d4:	4b84      	ldr	r3, [pc, #528]	@ (80013e8 <StartManageBodyParts+0x250>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	727b      	strb	r3, [r7, #9]


      // la tête
      switch (direction) {
 80011da:	4b84      	ldr	r3, [pc, #528]	@ (80013ec <StartManageBodyParts+0x254>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d832      	bhi.n	8001248 <StartManageBodyParts+0xb0>
 80011e2:	a201      	add	r2, pc, #4	@ (adr r2, 80011e8 <StartManageBodyParts+0x50>)
 80011e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e8:	080011f9 	.word	0x080011f9
 80011ec:	0800120d 	.word	0x0800120d
 80011f0:	08001221 	.word	0x08001221
 80011f4:	08001235 	.word	0x08001235
        case Up:
          headPart = HeadTop;
 80011f8:	4b7d      	ldr	r3, [pc, #500]	@ (80013f0 <StartManageBodyParts+0x258>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 80011fe:	4b7a      	ldr	r3, [pc, #488]	@ (80013e8 <StartManageBodyParts+0x250>)
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	3b01      	subs	r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b78      	ldr	r3, [pc, #480]	@ (80013e8 <StartManageBodyParts+0x250>)
 8001208:	705a      	strb	r2, [r3, #1]
          break;
 800120a:	e01d      	b.n	8001248 <StartManageBodyParts+0xb0>
        case Down:
          headPart = HeadBottom;
 800120c:	4b78      	ldr	r3, [pc, #480]	@ (80013f0 <StartManageBodyParts+0x258>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 8001212:	4b75      	ldr	r3, [pc, #468]	@ (80013e8 <StartManageBodyParts+0x250>)
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	3301      	adds	r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b73      	ldr	r3, [pc, #460]	@ (80013e8 <StartManageBodyParts+0x250>)
 800121c:	705a      	strb	r2, [r3, #1]
          break;
 800121e:	e013      	b.n	8001248 <StartManageBodyParts+0xb0>
        case Left:
          headPart = HeadLeft;
 8001220:	4b73      	ldr	r3, [pc, #460]	@ (80013f0 <StartManageBodyParts+0x258>)
 8001222:	2202      	movs	r2, #2
 8001224:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 8001226:	4b70      	ldr	r3, [pc, #448]	@ (80013e8 <StartManageBodyParts+0x250>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3b01      	subs	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b6e      	ldr	r3, [pc, #440]	@ (80013e8 <StartManageBodyParts+0x250>)
 8001230:	701a      	strb	r2, [r3, #0]
          break;
 8001232:	e009      	b.n	8001248 <StartManageBodyParts+0xb0>
        case Right:
          headPart = HeadRight;
 8001234:	4b6e      	ldr	r3, [pc, #440]	@ (80013f0 <StartManageBodyParts+0x258>)
 8001236:	2203      	movs	r2, #3
 8001238:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 800123a:	4b6b      	ldr	r3, [pc, #428]	@ (80013e8 <StartManageBodyParts+0x250>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b69      	ldr	r3, [pc, #420]	@ (80013e8 <StartManageBodyParts+0x250>)
 8001244:	701a      	strb	r2, [r3, #0]
          break;
 8001246:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001248:	4b67      	ldr	r3, [pc, #412]	@ (80013e8 <StartManageBodyParts+0x250>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	220f      	movs	r2, #15
 800124e:	4293      	cmp	r3, r2
 8001250:	d204      	bcs.n	800125c <StartManageBodyParts+0xc4>
 8001252:	4b65      	ldr	r3, [pc, #404]	@ (80013e8 <StartManageBodyParts+0x250>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	2208      	movs	r2, #8
 8001258:	4293      	cmp	r3, r2
 800125a:	d304      	bcc.n	8001266 <StartManageBodyParts+0xce>
        gameOver = 1;
 800125c:	4b5d      	ldr	r3, [pc, #372]	@ (80013d4 <StartManageBodyParts+0x23c>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

        displayGameStatus();
 8001262:	f000 fbcf 	bl	8001a04 <displayGameStatus>
      }
      for (int i = 0; i < snakeSize; i++) {
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	e018      	b.n	800129e <StartManageBodyParts+0x106>
        if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 800126c:	4b5e      	ldr	r3, [pc, #376]	@ (80013e8 <StartManageBodyParts+0x250>)
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	4960      	ldr	r1, [pc, #384]	@ (80013f4 <StartManageBodyParts+0x25c>)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001278:	429a      	cmp	r2, r3
 800127a:	d10d      	bne.n	8001298 <StartManageBodyParts+0x100>
 800127c:	4b5a      	ldr	r3, [pc, #360]	@ (80013e8 <StartManageBodyParts+0x250>)
 800127e:	785a      	ldrb	r2, [r3, #1]
 8001280:	495c      	ldr	r1, [pc, #368]	@ (80013f4 <StartManageBodyParts+0x25c>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	440b      	add	r3, r1
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	429a      	cmp	r2, r3
 800128c:	d104      	bne.n	8001298 <StartManageBodyParts+0x100>
          gameOver = 1;
 800128e:	4b51      	ldr	r3, [pc, #324]	@ (80013d4 <StartManageBodyParts+0x23c>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]

          displayGameStatus();
 8001294:	f000 fbb6 	bl	8001a04 <displayGameStatus>
      for (int i = 0; i < snakeSize; i++) {
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	3301      	adds	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	4b56      	ldr	r3, [pc, #344]	@ (80013f8 <StartManageBodyParts+0x260>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	4293      	cmp	r3, r2
 80012a8:	dbe0      	blt.n	800126c <StartManageBodyParts+0xd4>
      }


      
      // on vérifie si on a mangé la pomme avant de bouger le corps et la queue
      appleEaten = 0;
 80012aa:	4b54      	ldr	r3, [pc, #336]	@ (80013fc <StartManageBodyParts+0x264>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NBApple; i++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	e0c9      	b.n	800144a <StartManageBodyParts+0x2b2>
        if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1]) {
 80012b6:	4b4c      	ldr	r3, [pc, #304]	@ (80013e8 <StartManageBodyParts+0x250>)
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	4951      	ldr	r1, [pc, #324]	@ (8001400 <StartManageBodyParts+0x268>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	f040 80be 	bne.w	8001444 <StartManageBodyParts+0x2ac>
 80012c8:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <StartManageBodyParts+0x250>)
 80012ca:	785a      	ldrb	r2, [r3, #1]
 80012cc:	494c      	ldr	r1, [pc, #304]	@ (8001400 <StartManageBodyParts+0x268>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	440b      	add	r3, r1
 80012d4:	785b      	ldrb	r3, [r3, #1]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	f040 80b4 	bne.w	8001444 <StartManageBodyParts+0x2ac>
          snakeSize++;
 80012dc:	4b46      	ldr	r3, [pc, #280]	@ (80013f8 <StartManageBodyParts+0x260>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <StartManageBodyParts+0x260>)
 80012e6:	701a      	strb	r2, [r3, #0]
          appleEaten = 1;
 80012e8:	4b44      	ldr	r3, [pc, #272]	@ (80013fc <StartManageBodyParts+0x264>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

          // Generate a random apple position until it is not occupied by the snake
          do {
            applePosition[i][0] = rand() % gridSizeX;
 80012ee:	f00c f8b7 	bl	800d460 <rand>
 80012f2:	4603      	mov	r3, r0
 80012f4:	220f      	movs	r2, #15
 80012f6:	fb93 f1f2 	sdiv	r1, r3, r2
 80012fa:	fb01 f202 	mul.w	r2, r1, r2
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	b2d9      	uxtb	r1, r3
 8001302:	4a3f      	ldr	r2, [pc, #252]	@ (8001400 <StartManageBodyParts+0x268>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            applePosition[i][1] = rand() % gridSizeY;
 800130a:	f00c f8a9 	bl	800d460 <rand>
 800130e:	4603      	mov	r3, r0
 8001310:	2208      	movs	r2, #8
 8001312:	fb93 f1f2 	sdiv	r1, r3, r2
 8001316:	fb01 f202 	mul.w	r2, r1, r2
 800131a:	1a9b      	subs	r3, r3, r2
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4a38      	ldr	r2, [pc, #224]	@ (8001400 <StartManageBodyParts+0x268>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	460a      	mov	r2, r1
 8001328:	705a      	strb	r2, [r3, #1]
          } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 800132a:	4a35      	ldr	r2, [pc, #212]	@ (8001400 <StartManageBodyParts+0x268>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001332:	4933      	ldr	r1, [pc, #204]	@ (8001400 <StartManageBodyParts+0x268>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	440b      	add	r3, r1
 800133a:	785b      	ldrb	r3, [r3, #1]
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f000 fa64 	bl	800180c <isSnakePosition>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1d1      	bne.n	80012ee <StartManageBodyParts+0x156>
 800134a:	4a2d      	ldr	r2, [pc, #180]	@ (8001400 <StartManageBodyParts+0x268>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8001352:	4a2b      	ldr	r2, [pc, #172]	@ (8001400 <StartManageBodyParts+0x268>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f000 fa9f 	bl	80018a4 <isApplePosition>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1c0      	bne.n	80012ee <StartManageBodyParts+0x156>

          // on ajoute un bodyPart juste derrière la tête
          for (int i = snakeSize - 1; i > 0; i--) {
 800136c:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <StartManageBodyParts+0x260>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e020      	b.n	80013b8 <StartManageBodyParts+0x220>
            snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3b01      	subs	r3, #1
 800137a:	4a22      	ldr	r2, [pc, #136]	@ (8001404 <StartManageBodyParts+0x26c>)
 800137c:	5cd1      	ldrb	r1, [r2, r3]
 800137e:	4a21      	ldr	r2, [pc, #132]	@ (8001404 <StartManageBodyParts+0x26c>)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	4413      	add	r3, r2
 8001384:	460a      	mov	r2, r1
 8001386:	701a      	strb	r2, [r3, #0]
            snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3b01      	subs	r3, #1
 800138c:	4a19      	ldr	r2, [pc, #100]	@ (80013f4 <StartManageBodyParts+0x25c>)
 800138e:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001392:	4a18      	ldr	r2, [pc, #96]	@ (80013f4 <StartManageBodyParts+0x25c>)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3b01      	subs	r3, #1
 800139e:	4a15      	ldr	r2, [pc, #84]	@ (80013f4 <StartManageBodyParts+0x25c>)
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	7859      	ldrb	r1, [r3, #1]
 80013a6:	4a13      	ldr	r2, [pc, #76]	@ (80013f4 <StartManageBodyParts+0x25c>)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	460a      	mov	r2, r1
 80013b0:	705a      	strb	r2, [r3, #1]
          for (int i = snakeSize - 1; i > 0; i--) {
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dcdb      	bgt.n	8001376 <StartManageBodyParts+0x1de>
          }
          uint8_t backX;
          uint8_t backY;

          if (snakeSize > 1) {
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <StartManageBodyParts+0x260>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d920      	bls.n	8001408 <StartManageBodyParts+0x270>
            backX = snakeBodyPosition[0][0];
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <StartManageBodyParts+0x25c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	74fb      	strb	r3, [r7, #19]
            backY = snakeBodyPosition[0][1];
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <StartManageBodyParts+0x25c>)
 80013ce:	785b      	ldrb	r3, [r3, #1]
 80013d0:	74bb      	strb	r3, [r7, #18]
 80013d2:	e01f      	b.n	8001414 <StartManageBodyParts+0x27c>
 80013d4:	200002a8 	.word	0x200002a8
 80013d8:	200002ac 	.word	0x200002ac
 80013dc:	200002b0 	.word	0x200002b0
 80013e0:	20000008 	.word	0x20000008
 80013e4:	200003a4 	.word	0x200003a4
 80013e8:	20000004 	.word	0x20000004
 80013ec:	20000224 	.word	0x20000224
 80013f0:	20000225 	.word	0x20000225
 80013f4:	200002b4 	.word	0x200002b4
 80013f8:	200002a0 	.word	0x200002a0
 80013fc:	200002a4 	.word	0x200002a4
 8001400:	200003a8 	.word	0x200003a8
 8001404:	20000228 	.word	0x20000228
          }
          else {
            backX = snakeTailPosition[0];
 8001408:	4b9c      	ldr	r3, [pc, #624]	@ (800167c <StartManageBodyParts+0x4e4>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	74fb      	strb	r3, [r7, #19]
            backY = snakeTailPosition[1];
 800140e:	4b9b      	ldr	r3, [pc, #620]	@ (800167c <StartManageBodyParts+0x4e4>)
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	74bb      	strb	r3, [r7, #18]
          }

          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8001414:	4b9a      	ldr	r3, [pc, #616]	@ (8001680 <StartManageBodyParts+0x4e8>)
 8001416:	7818      	ldrb	r0, [r3, #0]
 8001418:	4b99      	ldr	r3, [pc, #612]	@ (8001680 <StartManageBodyParts+0x4e8>)
 800141a:	7859      	ldrb	r1, [r3, #1]
 800141c:	7a3b      	ldrb	r3, [r7, #8]
 800141e:	7a7a      	ldrb	r2, [r7, #9]
 8001420:	7cbd      	ldrb	r5, [r7, #18]
 8001422:	7cfc      	ldrb	r4, [r7, #19]
 8001424:	9201      	str	r2, [sp, #4]
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	462b      	mov	r3, r5
 800142a:	4622      	mov	r2, r4
 800142c:	f000 f98e 	bl	800174c <whatBodyPart>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	4b93      	ldr	r3, [pc, #588]	@ (8001684 <StartManageBodyParts+0x4ec>)
 8001436:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001438:	7a3a      	ldrb	r2, [r7, #8]
 800143a:	4b93      	ldr	r3, [pc, #588]	@ (8001688 <StartManageBodyParts+0x4f0>)
 800143c:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 800143e:	7a7a      	ldrb	r2, [r7, #9]
 8001440:	4b91      	ldr	r3, [pc, #580]	@ (8001688 <StartManageBodyParts+0x4f0>)
 8001442:	705a      	strb	r2, [r3, #1]
      for (int i = 0; i < NBApple; i++) {
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	3301      	adds	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	231e      	movs	r3, #30
 800144c:	461a      	mov	r2, r3
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4293      	cmp	r3, r2
 8001452:	f6ff af30 	blt.w	80012b6 <StartManageBodyParts+0x11e>
        }
      }


      if (!appleEaten) {
 8001456:	4b8d      	ldr	r3, [pc, #564]	@ (800168c <StartManageBodyParts+0x4f4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 810a 	bne.w	8001674 <StartManageBodyParts+0x4dc>
        // on met a jour la position de la queue
        if (snakeSize > 0) {
 8001460:	4b8b      	ldr	r3, [pc, #556]	@ (8001690 <StartManageBodyParts+0x4f8>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d011      	beq.n	800148c <StartManageBodyParts+0x2f4>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8001468:	4b89      	ldr	r3, [pc, #548]	@ (8001690 <StartManageBodyParts+0x4f8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	3b01      	subs	r3, #1
 800146e:	4a86      	ldr	r2, [pc, #536]	@ (8001688 <StartManageBodyParts+0x4f0>)
 8001470:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001474:	4b81      	ldr	r3, [pc, #516]	@ (800167c <StartManageBodyParts+0x4e4>)
 8001476:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8001478:	4b85      	ldr	r3, [pc, #532]	@ (8001690 <StartManageBodyParts+0x4f8>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	4a82      	ldr	r2, [pc, #520]	@ (8001688 <StartManageBodyParts+0x4f0>)
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	785a      	ldrb	r2, [r3, #1]
 8001486:	4b7d      	ldr	r3, [pc, #500]	@ (800167c <StartManageBodyParts+0x4e4>)
 8001488:	705a      	strb	r2, [r3, #1]
 800148a:	e005      	b.n	8001498 <StartManageBodyParts+0x300>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 800148c:	7a3a      	ldrb	r2, [r7, #8]
 800148e:	4b7b      	ldr	r3, [pc, #492]	@ (800167c <StartManageBodyParts+0x4e4>)
 8001490:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 8001492:	7a7a      	ldrb	r2, [r7, #9]
 8001494:	4b79      	ldr	r3, [pc, #484]	@ (800167c <StartManageBodyParts+0x4e4>)
 8001496:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 8001498:	4b7d      	ldr	r3, [pc, #500]	@ (8001690 <StartManageBodyParts+0x4f8>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	e020      	b.n	80014e4 <StartManageBodyParts+0x34c>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	4a77      	ldr	r2, [pc, #476]	@ (8001684 <StartManageBodyParts+0x4ec>)
 80014a8:	5cd1      	ldrb	r1, [r2, r3]
 80014aa:	4a76      	ldr	r2, [pc, #472]	@ (8001684 <StartManageBodyParts+0x4ec>)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	460a      	mov	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	4a73      	ldr	r2, [pc, #460]	@ (8001688 <StartManageBodyParts+0x4f0>)
 80014ba:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80014be:	4a72      	ldr	r2, [pc, #456]	@ (8001688 <StartManageBodyParts+0x4f0>)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001688 <StartManageBodyParts+0x4f0>)
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	7859      	ldrb	r1, [r3, #1]
 80014d2:	4a6d      	ldr	r2, [pc, #436]	@ (8001688 <StartManageBodyParts+0x4f0>)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	460a      	mov	r2, r1
 80014dc:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	dcdb      	bgt.n	80014a2 <StartManageBodyParts+0x30a>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 80014ea:	4b69      	ldr	r3, [pc, #420]	@ (8001690 <StartManageBodyParts+0x4f8>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80a1 	beq.w	8001636 <StartManageBodyParts+0x49e>
          // On met a jour le premier bodyPart
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 80014f4:	4b62      	ldr	r3, [pc, #392]	@ (8001680 <StartManageBodyParts+0x4e8>)
 80014f6:	7818      	ldrb	r0, [r3, #0]
 80014f8:	4b61      	ldr	r3, [pc, #388]	@ (8001680 <StartManageBodyParts+0x4e8>)
 80014fa:	7859      	ldrb	r1, [r3, #1]
 80014fc:	4b62      	ldr	r3, [pc, #392]	@ (8001688 <StartManageBodyParts+0x4f0>)
 80014fe:	781c      	ldrb	r4, [r3, #0]
 8001500:	4b61      	ldr	r3, [pc, #388]	@ (8001688 <StartManageBodyParts+0x4f0>)
 8001502:	785d      	ldrb	r5, [r3, #1]
 8001504:	7a3b      	ldrb	r3, [r7, #8]
 8001506:	7a7a      	ldrb	r2, [r7, #9]
 8001508:	9201      	str	r2, [sp, #4]
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	462b      	mov	r3, r5
 800150e:	4622      	mov	r2, r4
 8001510:	f000 f91c 	bl	800174c <whatBodyPart>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b5a      	ldr	r3, [pc, #360]	@ (8001684 <StartManageBodyParts+0x4ec>)
 800151a:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 800151c:	7a3a      	ldrb	r2, [r7, #8]
 800151e:	4b5a      	ldr	r3, [pc, #360]	@ (8001688 <StartManageBodyParts+0x4f0>)
 8001520:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001522:	7a7a      	ldrb	r2, [r7, #9]
 8001524:	4b58      	ldr	r3, [pc, #352]	@ (8001688 <StartManageBodyParts+0x4f0>)
 8001526:	705a      	strb	r2, [r3, #1]

          // On met a jour la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001528:	4b59      	ldr	r3, [pc, #356]	@ (8001690 <StartManageBodyParts+0x4f8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3b01      	subs	r3, #1
 800152e:	4a55      	ldr	r2, [pc, #340]	@ (8001684 <StartManageBodyParts+0x4ec>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	2b05      	cmp	r3, #5
 8001534:	f200 809e 	bhi.w	8001674 <StartManageBodyParts+0x4dc>
 8001538:	a201      	add	r2, pc, #4	@ (adr r2, 8001540 <StartManageBodyParts+0x3a8>)
 800153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153e:	bf00      	nop
 8001540:	08001559 	.word	0x08001559
 8001544:	0800157d 	.word	0x0800157d
 8001548:	080015a1 	.word	0x080015a1
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015eb 	.word	0x080015eb
 8001554:	08001611 	.word	0x08001611
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001558:	4b4d      	ldr	r3, [pc, #308]	@ (8001690 <StartManageBodyParts+0x4f8>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	3b01      	subs	r3, #1
 800155e:	4a4a      	ldr	r2, [pc, #296]	@ (8001688 <StartManageBodyParts+0x4f0>)
 8001560:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001564:	4b45      	ldr	r3, [pc, #276]	@ (800167c <StartManageBodyParts+0x4e4>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d103      	bne.n	8001574 <StartManageBodyParts+0x3dc>
                tailPart = TailTop;
 800156c:	4b49      	ldr	r3, [pc, #292]	@ (8001694 <StartManageBodyParts+0x4fc>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001572:	e07f      	b.n	8001674 <StartManageBodyParts+0x4dc>
                tailPart = TailRight;
 8001574:	4b47      	ldr	r3, [pc, #284]	@ (8001694 <StartManageBodyParts+0x4fc>)
 8001576:	2203      	movs	r2, #3
 8001578:	701a      	strb	r2, [r3, #0]
              break;
 800157a:	e07b      	b.n	8001674 <StartManageBodyParts+0x4dc>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 800157c:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <StartManageBodyParts+0x4f8>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a41      	ldr	r2, [pc, #260]	@ (8001688 <StartManageBodyParts+0x4f0>)
 8001584:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001588:	4b3c      	ldr	r3, [pc, #240]	@ (800167c <StartManageBodyParts+0x4e4>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d103      	bne.n	8001598 <StartManageBodyParts+0x400>
                tailPart = TailTop;
 8001590:	4b40      	ldr	r3, [pc, #256]	@ (8001694 <StartManageBodyParts+0x4fc>)
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 8001596:	e06d      	b.n	8001674 <StartManageBodyParts+0x4dc>
                tailPart = TailLeft;
 8001598:	4b3e      	ldr	r3, [pc, #248]	@ (8001694 <StartManageBodyParts+0x4fc>)
 800159a:	2202      	movs	r2, #2
 800159c:	701a      	strb	r2, [r3, #0]
              break;
 800159e:	e069      	b.n	8001674 <StartManageBodyParts+0x4dc>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 80015a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <StartManageBodyParts+0x4f8>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a38      	ldr	r2, [pc, #224]	@ (8001688 <StartManageBodyParts+0x4f0>)
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	785a      	ldrb	r2, [r3, #1]
 80015ae:	4b33      	ldr	r3, [pc, #204]	@ (800167c <StartManageBodyParts+0x4e4>)
 80015b0:	785b      	ldrb	r3, [r3, #1]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d203      	bcs.n	80015be <StartManageBodyParts+0x426>
                tailPart = TailTop;
 80015b6:	4b37      	ldr	r3, [pc, #220]	@ (8001694 <StartManageBodyParts+0x4fc>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 80015bc:	e05a      	b.n	8001674 <StartManageBodyParts+0x4dc>
                tailPart = TailBottom;
 80015be:	4b35      	ldr	r3, [pc, #212]	@ (8001694 <StartManageBodyParts+0x4fc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
              break;
 80015c4:	e056      	b.n	8001674 <StartManageBodyParts+0x4dc>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 80015c6:	4b32      	ldr	r3, [pc, #200]	@ (8001690 <StartManageBodyParts+0x4f8>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001688 <StartManageBodyParts+0x4f0>)
 80015ce:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <StartManageBodyParts+0x4e4>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d203      	bcs.n	80015e2 <StartManageBodyParts+0x44a>
                tailPart = TailLeft;
 80015da:	4b2e      	ldr	r3, [pc, #184]	@ (8001694 <StartManageBodyParts+0x4fc>)
 80015dc:	2202      	movs	r2, #2
 80015de:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 80015e0:	e048      	b.n	8001674 <StartManageBodyParts+0x4dc>
                tailPart = TailRight;
 80015e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001694 <StartManageBodyParts+0x4fc>)
 80015e4:	2203      	movs	r2, #3
 80015e6:	701a      	strb	r2, [r3, #0]
              break;
 80015e8:	e044      	b.n	8001674 <StartManageBodyParts+0x4dc>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 80015ea:	4b29      	ldr	r3, [pc, #164]	@ (8001690 <StartManageBodyParts+0x4f8>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	4a25      	ldr	r2, [pc, #148]	@ (8001688 <StartManageBodyParts+0x4f0>)
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	785a      	ldrb	r2, [r3, #1]
 80015f8:	4b20      	ldr	r3, [pc, #128]	@ (800167c <StartManageBodyParts+0x4e4>)
 80015fa:	785b      	ldrb	r3, [r3, #1]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d103      	bne.n	8001608 <StartManageBodyParts+0x470>
                tailPart = TailRight;
 8001600:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <StartManageBodyParts+0x4fc>)
 8001602:	2203      	movs	r2, #3
 8001604:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001606:	e035      	b.n	8001674 <StartManageBodyParts+0x4dc>
                tailPart = TailBottom;
 8001608:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <StartManageBodyParts+0x4fc>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
              break;
 800160e:	e031      	b.n	8001674 <StartManageBodyParts+0x4dc>
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001610:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <StartManageBodyParts+0x4f8>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	3b01      	subs	r3, #1
 8001616:	4a1c      	ldr	r2, [pc, #112]	@ (8001688 <StartManageBodyParts+0x4f0>)
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	785a      	ldrb	r2, [r3, #1]
 800161e:	4b17      	ldr	r3, [pc, #92]	@ (800167c <StartManageBodyParts+0x4e4>)
 8001620:	785b      	ldrb	r3, [r3, #1]
 8001622:	429a      	cmp	r2, r3
 8001624:	d103      	bne.n	800162e <StartManageBodyParts+0x496>
                tailPart = TailLeft;
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <StartManageBodyParts+0x4fc>)
 8001628:	2202      	movs	r2, #2
 800162a:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 800162c:	e022      	b.n	8001674 <StartManageBodyParts+0x4dc>
                tailPart = TailBottom;
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <StartManageBodyParts+0x4fc>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
              break;
 8001634:	e01e      	b.n	8001674 <StartManageBodyParts+0x4dc>
          }
        }
        else {
          switch (headPart) {
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <StartManageBodyParts+0x500>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d81a      	bhi.n	8001674 <StartManageBodyParts+0x4dc>
 800163e:	a201      	add	r2, pc, #4	@ (adr r2, 8001644 <StartManageBodyParts+0x4ac>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	08001655 	.word	0x08001655
 8001648:	0800165d 	.word	0x0800165d
 800164c:	08001665 	.word	0x08001665
 8001650:	0800166d 	.word	0x0800166d
            case HeadTop:
              tailPart = TailTop;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <StartManageBodyParts+0x4fc>)
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
              break;
 800165a:	e00b      	b.n	8001674 <StartManageBodyParts+0x4dc>
            case HeadBottom:
              tailPart = TailBottom;
 800165c:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <StartManageBodyParts+0x4fc>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
              break;
 8001662:	e007      	b.n	8001674 <StartManageBodyParts+0x4dc>
            case HeadLeft:
              tailPart = TailLeft;
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <StartManageBodyParts+0x4fc>)
 8001666:	2202      	movs	r2, #2
 8001668:	701a      	strb	r2, [r3, #0]
              break;
 800166a:	e003      	b.n	8001674 <StartManageBodyParts+0x4dc>
            case HeadRight:
              tailPart = TailRight;
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <StartManageBodyParts+0x4fc>)
 800166e:	2203      	movs	r2, #3
 8001670:	701a      	strb	r2, [r3, #0]
              break;
 8001672:	bf00      	nop
          }
        }
      }
    }

    osDelay(250);
 8001674:	20fa      	movs	r0, #250	@ 0xfa
 8001676:	f009 ffac 	bl	800b5d2 <osDelay>
    if (!gameOver && !gamePaused && gameStarted) {
 800167a:	e591      	b.n	80011a0 <StartManageBodyParts+0x8>
 800167c:	20000008 	.word	0x20000008
 8001680:	20000004 	.word	0x20000004
 8001684:	20000228 	.word	0x20000228
 8001688:	200002b4 	.word	0x200002b4
 800168c:	200002a4 	.word	0x200002a4
 8001690:	200002a0 	.word	0x200002a0
 8001694:	20000000 	.word	0x20000000
 8001698:	20000225 	.word	0x20000225

0800169c <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    if (!gameStarted)
 80016a4:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <StartTsHandlerTask+0x98>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <StartTsHandlerTask+0x14>
      rand();
 80016ac:	f00b fed8 	bl	800d460 <rand>
    

    BSP_TS_GetState(&TS_State);
 80016b0:	4821      	ldr	r0, [pc, #132]	@ (8001738 <StartTsHandlerTask+0x9c>)
 80016b2:	f002 ff21 	bl	80044f8 <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <StartTsHandlerTask+0x9c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d12b      	bne.n	8001716 <StartTsHandlerTask+0x7a>
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <StartTsHandlerTask+0xa0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d027      	beq.n	8001716 <StartTsHandlerTask+0x7a>
      if (gameOver) {
 80016c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <StartTsHandlerTask+0xa4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <StartTsHandlerTask+0x44>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80016ce:	481d      	ldr	r0, [pc, #116]	@ (8001744 <StartTsHandlerTask+0xa8>)
 80016d0:	f001 ffba 	bl	8003648 <BSP_LCD_Clear>
        gameOver = 0;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <StartTsHandlerTask+0xa4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
        restartGame();
 80016da:	f000 f917 	bl	800190c <restartGame>
 80016de:	e01a      	b.n	8001716 <StartTsHandlerTask+0x7a>
      }
      else if (gamePaused) {
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <StartTsHandlerTask+0xac>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <StartTsHandlerTask+0x5a>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80016e8:	4816      	ldr	r0, [pc, #88]	@ (8001744 <StartTsHandlerTask+0xa8>)
 80016ea:	f001 ffad 	bl	8003648 <BSP_LCD_Clear>
        gamePaused = 0;
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <StartTsHandlerTask+0xac>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e00f      	b.n	8001716 <StartTsHandlerTask+0x7a>
      }
      else if (!gameStarted) {
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <StartTsHandlerTask+0x98>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d108      	bne.n	8001710 <StartTsHandlerTask+0x74>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80016fe:	4811      	ldr	r0, [pc, #68]	@ (8001744 <StartTsHandlerTask+0xa8>)
 8001700:	f001 ffa2 	bl	8003648 <BSP_LCD_Clear>
        restartGame();
 8001704:	f000 f902 	bl	800190c <restartGame>
        gameStarted = 1;
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <StartTsHandlerTask+0x98>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e002      	b.n	8001716 <StartTsHandlerTask+0x7a>
      }
      else {
        gamePaused = 1;
 8001710:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <StartTsHandlerTask+0xac>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]
      }
    }

    if (TS_State.touchDetected) {
 8001716:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <StartTsHandlerTask+0x9c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <StartTsHandlerTask+0x8a>
      screenPressed = 1;
 800171e:	4b07      	ldr	r3, [pc, #28]	@ (800173c <StartTsHandlerTask+0xa0>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e002      	b.n	800172c <StartTsHandlerTask+0x90>
    }
    else {
      screenPressed = 0;
 8001726:	4b05      	ldr	r3, [pc, #20]	@ (800173c <StartTsHandlerTask+0xa0>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 800172c:	200a      	movs	r0, #10
 800172e:	f009 ff50 	bl	800b5d2 <osDelay>
    if (!gameStarted)
 8001732:	e7b7      	b.n	80016a4 <StartTsHandlerTask+0x8>
 8001734:	200002b0 	.word	0x200002b0
 8001738:	200001ec 	.word	0x200001ec
 800173c:	20000218 	.word	0x20000218
 8001740:	200002a8 	.word	0x200002a8
 8001744:	ff81cd4b 	.word	0xff81cd4b
 8001748:	200002ac 	.word	0x200002ac

0800174c <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 800174c:	b490      	push	{r4, r7}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4604      	mov	r4, r0
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4623      	mov	r3, r4
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	4603      	mov	r3, r0
 8001760:	71bb      	strb	r3, [r7, #6]
 8001762:	460b      	mov	r3, r1
 8001764:	717b      	strb	r3, [r7, #5]
 8001766:	4613      	mov	r3, r2
 8001768:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	797b      	ldrb	r3, [r7, #5]
 800176e:	429a      	cmp	r2, r3
 8001770:	d101      	bne.n	8001776 <whatBodyPart+0x2a>
    return BottomTop;
 8001772:	2302      	movs	r3, #2
 8001774:	e045      	b.n	8001802 <whatBodyPart+0xb6>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 8001776:	79ba      	ldrb	r2, [r7, #6]
 8001778:	793b      	ldrb	r3, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d101      	bne.n	8001782 <whatBodyPart+0x36>
    return LeftRight;
 800177e:	2303      	movs	r3, #3
 8001780:	e03f      	b.n	8001802 <whatBodyPart+0xb6>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY)
 8001782:	79fa      	ldrb	r2, [r7, #7]
 8001784:	797b      	ldrb	r3, [r7, #5]
 8001786:	429a      	cmp	r2, r3
 8001788:	d20b      	bcs.n	80017a2 <whatBodyPart+0x56>
 800178a:	79ba      	ldrb	r2, [r7, #6]
 800178c:	793b      	ldrb	r3, [r7, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	d907      	bls.n	80017a2 <whatBodyPart+0x56>
    if (missingX == frontX)
 8001792:	7c3a      	ldrb	r2, [r7, #16]
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	429a      	cmp	r2, r3
 8001798:	d101      	bne.n	800179e <whatBodyPart+0x52>
      return BottomRight;
 800179a:	2301      	movs	r3, #1
 800179c:	e031      	b.n	8001802 <whatBodyPart+0xb6>
    else
      return LeftTop;
 800179e:	2304      	movs	r3, #4
 80017a0:	e02f      	b.n	8001802 <whatBodyPart+0xb6>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY)
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	797b      	ldrb	r3, [r7, #5]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20b      	bcs.n	80017c2 <whatBodyPart+0x76>
 80017aa:	79ba      	ldrb	r2, [r7, #6]
 80017ac:	793b      	ldrb	r3, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d207      	bcs.n	80017c2 <whatBodyPart+0x76>
    if (missingX == frontX)
 80017b2:	7c3a      	ldrb	r2, [r7, #16]
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d101      	bne.n	80017be <whatBodyPart+0x72>
      return RightTop;
 80017ba:	2305      	movs	r3, #5
 80017bc:	e021      	b.n	8001802 <whatBodyPart+0xb6>
    else
      return BottomLeft;
 80017be:	2300      	movs	r3, #0
 80017c0:	e01f      	b.n	8001802 <whatBodyPart+0xb6>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY)
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	797b      	ldrb	r3, [r7, #5]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d90b      	bls.n	80017e2 <whatBodyPart+0x96>
 80017ca:	79ba      	ldrb	r2, [r7, #6]
 80017cc:	793b      	ldrb	r3, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d207      	bcs.n	80017e2 <whatBodyPart+0x96>
    if (missingX == frontX)
 80017d2:	7c3a      	ldrb	r2, [r7, #16]
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d101      	bne.n	80017de <whatBodyPart+0x92>
      return LeftTop;
 80017da:	2304      	movs	r3, #4
 80017dc:	e011      	b.n	8001802 <whatBodyPart+0xb6>
    else
      return BottomRight;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <whatBodyPart+0xb6>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY)
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	797b      	ldrb	r3, [r7, #5]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d90b      	bls.n	8001802 <whatBodyPart+0xb6>
 80017ea:	79ba      	ldrb	r2, [r7, #6]
 80017ec:	793b      	ldrb	r3, [r7, #4]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d907      	bls.n	8001802 <whatBodyPart+0xb6>
    if (missingX == frontX)
 80017f2:	7c3a      	ldrb	r2, [r7, #16]
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d101      	bne.n	80017fe <whatBodyPart+0xb2>
      return BottomLeft;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e001      	b.n	8001802 <whatBodyPart+0xb6>
    else
      return RightTop;
 80017fe:	2305      	movs	r3, #5
 8001800:	e7ff      	b.n	8001802 <whatBodyPart+0xb6>
  
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bc90      	pop	{r4, r7}
 800180a:	4770      	bx	lr

0800180c <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	460a      	mov	r2, r1
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	4613      	mov	r3, r2
 800181a:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <isSnakePosition+0x88>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	429a      	cmp	r2, r3
 8001824:	d106      	bne.n	8001834 <isSnakePosition+0x28>
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <isSnakePosition+0x88>)
 8001828:	785b      	ldrb	r3, [r3, #1]
 800182a:	79ba      	ldrb	r2, [r7, #6]
 800182c:	429a      	cmp	r2, r3
 800182e:	d101      	bne.n	8001834 <isSnakePosition+0x28>
    return 1;
 8001830:	2301      	movs	r3, #1
 8001832:	e029      	b.n	8001888 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e013      	b.n	8001862 <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 800183a:	4a17      	ldr	r2, [pc, #92]	@ (8001898 <isSnakePosition+0x8c>)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	429a      	cmp	r2, r3
 8001846:	d109      	bne.n	800185c <isSnakePosition+0x50>
 8001848:	4a13      	ldr	r2, [pc, #76]	@ (8001898 <isSnakePosition+0x8c>)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	785b      	ldrb	r3, [r3, #1]
 8001852:	79ba      	ldrb	r2, [r7, #6]
 8001854:	429a      	cmp	r2, r3
 8001856:	d101      	bne.n	800185c <isSnakePosition+0x50>
      return 1;
 8001858:	2301      	movs	r3, #1
 800185a:	e015      	b.n	8001888 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <isSnakePosition+0x90>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4293      	cmp	r3, r2
 800186c:	dbe5      	blt.n	800183a <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <isSnakePosition+0x94>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	79fa      	ldrb	r2, [r7, #7]
 8001874:	429a      	cmp	r2, r3
 8001876:	d106      	bne.n	8001886 <isSnakePosition+0x7a>
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <isSnakePosition+0x94>)
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	79ba      	ldrb	r2, [r7, #6]
 800187e:	429a      	cmp	r2, r3
 8001880:	d101      	bne.n	8001886 <isSnakePosition+0x7a>
    return 1;
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <isSnakePosition+0x7c>

  return 0;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	20000004 	.word	0x20000004
 8001898:	200002b4 	.word	0x200002b4
 800189c:	200002a0 	.word	0x200002a0
 80018a0:	20000008 	.word	0x20000008

080018a4 <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	460b      	mov	r3, r1
 80018b0:	71bb      	strb	r3, [r7, #6]
 80018b2:	4613      	mov	r3, r2
 80018b4:	717b      	strb	r3, [r7, #5]
  for (int i = 0; i < NBApple; i++) {
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e018      	b.n	80018ee <isApplePosition+0x4a>
    if (i == appleIndex)
 80018bc:	797b      	ldrb	r3, [r7, #5]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d010      	beq.n	80018e6 <isApplePosition+0x42>
      continue;

    if (x == applePosition[i][0] && y == applePosition[i][1])
 80018c4:	4a10      	ldr	r2, [pc, #64]	@ (8001908 <isApplePosition+0x64>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80018cc:	79fa      	ldrb	r2, [r7, #7]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d10a      	bne.n	80018e8 <isApplePosition+0x44>
 80018d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <isApplePosition+0x64>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	785b      	ldrb	r3, [r3, #1]
 80018dc:	79ba      	ldrb	r2, [r7, #6]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d102      	bne.n	80018e8 <isApplePosition+0x44>
      return 1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e009      	b.n	80018fa <isApplePosition+0x56>
      continue;
 80018e6:	bf00      	nop
  for (int i = 0; i < NBApple; i++) {
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	231e      	movs	r3, #30
 80018f0:	461a      	mov	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4293      	cmp	r3, r2
 80018f6:	dbe1      	blt.n	80018bc <isApplePosition+0x18>
  }

  return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	200003a8 	.word	0x200003a8

0800190c <restartGame>:

void restartGame()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  snakeSize = 0;
 8001912:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <restartGame+0xd8>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 8001918:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <restartGame+0xdc>)
 800191a:	2207      	movs	r2, #7
 800191c:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 800191e:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <restartGame+0xdc>)
 8001920:	2206      	movs	r2, #6
 8001922:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 8001924:	4b31      	ldr	r3, [pc, #196]	@ (80019ec <restartGame+0xe0>)
 8001926:	2207      	movs	r2, #7
 8001928:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 800192a:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <restartGame+0xe0>)
 800192c:	2207      	movs	r2, #7
 800192e:	705a      	strb	r2, [r3, #1]
  direction = Up;
 8001930:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <restartGame+0xe4>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 8001936:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <restartGame+0xe8>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 800193c:	4b2e      	ldr	r3, [pc, #184]	@ (80019f8 <restartGame+0xec>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < NBApple; i++) {
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	e041      	b.n	80019cc <restartGame+0xc0>
    do {
      applePosition[i][0] = rand() % gridSizeX;
 8001948:	f00b fd8a 	bl	800d460 <rand>
 800194c:	4603      	mov	r3, r0
 800194e:	220f      	movs	r2, #15
 8001950:	fb93 f1f2 	sdiv	r1, r3, r2
 8001954:	fb01 f202 	mul.w	r2, r1, r2
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	b2d9      	uxtb	r1, r3
 800195c:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <restartGame+0xf0>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      applePosition[i][1] = rand() % gridSizeY;
 8001964:	f00b fd7c 	bl	800d460 <rand>
 8001968:	4603      	mov	r3, r0
 800196a:	2208      	movs	r2, #8
 800196c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001970:	fb01 f202 	mul.w	r2, r1, r2
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	b2d9      	uxtb	r1, r3
 8001978:	4a20      	ldr	r2, [pc, #128]	@ (80019fc <restartGame+0xf0>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	460a      	mov	r2, r1
 8001982:	705a      	strb	r2, [r3, #1]
    } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001984:	4a1d      	ldr	r2, [pc, #116]	@ (80019fc <restartGame+0xf0>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800198c:	491b      	ldr	r1, [pc, #108]	@ (80019fc <restartGame+0xf0>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	440b      	add	r3, r1
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	4619      	mov	r1, r3
 8001998:	4610      	mov	r0, r2
 800199a:	f7ff ff37 	bl	800180c <isSnakePosition>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1d1      	bne.n	8001948 <restartGame+0x3c>
 80019a4:	4a15      	ldr	r2, [pc, #84]	@ (80019fc <restartGame+0xf0>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 80019ac:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <restartGame+0xf0>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff ff72 	bl	80018a4 <isApplePosition>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1c0      	bne.n	8001948 <restartGame+0x3c>
  for (int i = 0; i < NBApple; i++) {
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3301      	adds	r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	231e      	movs	r3, #30
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4293      	cmp	r3, r2
 80019d4:	dbb8      	blt.n	8001948 <restartGame+0x3c>
  }

  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80019d6:	480a      	ldr	r0, [pc, #40]	@ (8001a00 <restartGame+0xf4>)
 80019d8:	f001 fe36 	bl	8003648 <BSP_LCD_Clear>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200002a0 	.word	0x200002a0
 80019e8:	20000004 	.word	0x20000004
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000224 	.word	0x20000224
 80019f4:	20000225 	.word	0x20000225
 80019f8:	20000000 	.word	0x20000000
 80019fc:	200003a8 	.word	0x200003a8
 8001a00:	ff81cd4b 	.word	0xff81cd4b

08001a04 <displayGameStatus>:

void displayGameStatus()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  if (gameOver) {
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <displayGameStatus+0xa4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d015      	beq.n	8001a3c <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8001a10:	4826      	ldr	r0, [pc, #152]	@ (8001aac <displayGameStatus+0xa8>)
 8001a12:	f001 fdcd 	bl	80035b0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001a16:	4826      	ldr	r0, [pc, #152]	@ (8001ab0 <displayGameStatus+0xac>)
 8001a18:	f001 fdfc 	bl	8003614 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	4a25      	ldr	r2, [pc, #148]	@ (8001ab4 <displayGameStatus+0xb0>)
 8001a20:	2164      	movs	r1, #100	@ 0x64
 8001a22:	2000      	movs	r0, #0
 8001a24:	f001 fe7c 	bl	8003720 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8001a28:	4823      	ldr	r0, [pc, #140]	@ (8001ab8 <displayGameStatus+0xb4>)
 8001a2a:	f001 fdf3 	bl	8003614 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4a22      	ldr	r2, [pc, #136]	@ (8001abc <displayGameStatus+0xb8>)
 8001a32:	2182      	movs	r1, #130	@ 0x82
 8001a34:	2000      	movs	r0, #0
 8001a36:	f001 fe73 	bl	8003720 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
  }
}
 8001a3a:	e032      	b.n	8001aa2 <displayGameStatus+0x9e>
  else if (gamePaused) {
 8001a3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <displayGameStatus+0xbc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d015      	beq.n	8001a70 <displayGameStatus+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8001a44:	4819      	ldr	r0, [pc, #100]	@ (8001aac <displayGameStatus+0xa8>)
 8001a46:	f001 fdb3 	bl	80035b0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001a4a:	4819      	ldr	r0, [pc, #100]	@ (8001ab0 <displayGameStatus+0xac>)
 8001a4c:	f001 fde2 	bl	8003614 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8001a50:	2301      	movs	r3, #1
 8001a52:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac4 <displayGameStatus+0xc0>)
 8001a54:	2164      	movs	r1, #100	@ 0x64
 8001a56:	2000      	movs	r0, #0
 8001a58:	f001 fe62 	bl	8003720 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8001a5c:	4816      	ldr	r0, [pc, #88]	@ (8001ab8 <displayGameStatus+0xb4>)
 8001a5e:	f001 fdd9 	bl	8003614 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 8001a62:	2301      	movs	r3, #1
 8001a64:	4a18      	ldr	r2, [pc, #96]	@ (8001ac8 <displayGameStatus+0xc4>)
 8001a66:	2182      	movs	r1, #130	@ 0x82
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f001 fe59 	bl	8003720 <BSP_LCD_DisplayStringAt>
}
 8001a6e:	e018      	b.n	8001aa2 <displayGameStatus+0x9e>
  else if (!gameStarted) {
 8001a70:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <displayGameStatus+0xc8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d114      	bne.n	8001aa2 <displayGameStatus+0x9e>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8001a78:	480c      	ldr	r0, [pc, #48]	@ (8001aac <displayGameStatus+0xa8>)
 8001a7a:	f001 fd99 	bl	80035b0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001a7e:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <displayGameStatus+0xac>)
 8001a80:	f001 fdc8 	bl	8003614 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 8001a84:	2301      	movs	r3, #1
 8001a86:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <displayGameStatus+0xcc>)
 8001a88:	2164      	movs	r1, #100	@ 0x64
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f001 fe48 	bl	8003720 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8001a90:	4809      	ldr	r0, [pc, #36]	@ (8001ab8 <displayGameStatus+0xb4>)
 8001a92:	f001 fdbf 	bl	8003614 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 8001a96:	2301      	movs	r3, #1
 8001a98:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad4 <displayGameStatus+0xd0>)
 8001a9a:	2182      	movs	r1, #130	@ 0x82
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f001 fe3f 	bl	8003720 <BSP_LCD_DisplayStringAt>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200002a8 	.word	0x200002a8
 8001aac:	ffa52a2a 	.word	0xffa52a2a
 8001ab0:	20000034 	.word	0x20000034
 8001ab4:	0800e910 	.word	0x0800e910
 8001ab8:	2000003c 	.word	0x2000003c
 8001abc:	0800e91c 	.word	0x0800e91c
 8001ac0:	200002ac 	.word	0x200002ac
 8001ac4:	0800e938 	.word	0x0800e938
 8001ac8:	0800e944 	.word	0x0800e944
 8001acc:	200002b0 	.word	0x200002b0
 8001ad0:	0800e960 	.word	0x0800e960
 8001ad4:	0800e96c 	.word	0x0800e96c

08001ad8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8001ae2:	20c8      	movs	r0, #200	@ 0xc8
 8001ae4:	f001 fc50 	bl	8003388 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001ae8:	f000 fa7a 	bl	8001fe0 <ft5336_I2C_InitializeIfRequired>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001b20:	f000 fa5e 	bl	8001fe0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e010      	b.n	8001b4c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	21a8      	movs	r1, #168	@ 0xa8
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 fc0b 	bl	800334c <TS_IO_Read>
 8001b36:	4603      	mov	r3, r0
 8001b38:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8001b3a:	7b7b      	ldrb	r3, [r7, #13]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b51      	cmp	r3, #81	@ 0x51
 8001b40:	d101      	bne.n	8001b46 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d802      	bhi.n	8001b58 <ft5336_ReadID+0x4e>
 8001b52:	7bbb      	ldrb	r3, [r7, #14]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0e8      	beq.n	8001b2a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001b58:	7b7b      	ldrb	r3, [r7, #13]
 8001b5a:	b2db      	uxtb	r3, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fa45 	bl	8002000 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f933 	bl	8001de4 <ft5336_TS_DisableIT>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 fbd5 	bl	800334c <TS_IO_Read>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d901      	bls.n	8001bbe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <ft5336_TS_DetectTouch+0x50>)
 8001bc4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <ft5336_TS_DetectTouch+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	b2db      	uxtb	r3, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000650 	.word	0x20000650

08001bdc <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8001db4 <ft5336_TS_GetXY+0x1d8>)
 8001c00:	789a      	ldrb	r2, [r3, #2]
 8001c02:	4b6c      	ldr	r3, [pc, #432]	@ (8001db4 <ft5336_TS_GetXY+0x1d8>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	f080 80cf 	bcs.w	8001daa <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001c0c:	4b69      	ldr	r3, [pc, #420]	@ (8001db4 <ft5336_TS_GetXY+0x1d8>)
 8001c0e:	789b      	ldrb	r3, [r3, #2]
 8001c10:	2b09      	cmp	r3, #9
 8001c12:	d871      	bhi.n	8001cf8 <ft5336_TS_GetXY+0x11c>
 8001c14:	a201      	add	r2, pc, #4	@ (adr r2, 8001c1c <ft5336_TS_GetXY+0x40>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c45 	.word	0x08001c45
 8001c20:	08001c57 	.word	0x08001c57
 8001c24:	08001c69 	.word	0x08001c69
 8001c28:	08001c7b 	.word	0x08001c7b
 8001c2c:	08001c8d 	.word	0x08001c8d
 8001c30:	08001c9f 	.word	0x08001c9f
 8001c34:	08001cb1 	.word	0x08001cb1
 8001c38:	08001cc3 	.word	0x08001cc3
 8001c3c:	08001cd5 	.word	0x08001cd5
 8001c40:	08001ce7 	.word	0x08001ce7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001c44:	2304      	movs	r3, #4
 8001c46:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001c4c:	2306      	movs	r3, #6
 8001c4e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001c50:	2305      	movs	r3, #5
 8001c52:	753b      	strb	r3, [r7, #20]
      break;
 8001c54:	e051      	b.n	8001cfa <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001c56:	230a      	movs	r3, #10
 8001c58:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001c5a:	2309      	movs	r3, #9
 8001c5c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001c5e:	230c      	movs	r3, #12
 8001c60:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001c62:	230b      	movs	r3, #11
 8001c64:	753b      	strb	r3, [r7, #20]
      break;
 8001c66:	e048      	b.n	8001cfa <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001c68:	2310      	movs	r3, #16
 8001c6a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001c70:	2312      	movs	r3, #18
 8001c72:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001c74:	2311      	movs	r3, #17
 8001c76:	753b      	strb	r3, [r7, #20]
      break;
 8001c78:	e03f      	b.n	8001cfa <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001c7a:	2316      	movs	r3, #22
 8001c7c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001c7e:	2315      	movs	r3, #21
 8001c80:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001c82:	2318      	movs	r3, #24
 8001c84:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001c86:	2317      	movs	r3, #23
 8001c88:	753b      	strb	r3, [r7, #20]
      break;
 8001c8a:	e036      	b.n	8001cfa <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001c8c:	231c      	movs	r3, #28
 8001c8e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001c90:	231b      	movs	r3, #27
 8001c92:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001c94:	231e      	movs	r3, #30
 8001c96:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001c98:	231d      	movs	r3, #29
 8001c9a:	753b      	strb	r3, [r7, #20]
      break;
 8001c9c:	e02d      	b.n	8001cfa <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001c9e:	2322      	movs	r3, #34	@ 0x22
 8001ca0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001ca2:	2321      	movs	r3, #33	@ 0x21
 8001ca4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001ca6:	2324      	movs	r3, #36	@ 0x24
 8001ca8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001caa:	2323      	movs	r3, #35	@ 0x23
 8001cac:	753b      	strb	r3, [r7, #20]
      break;
 8001cae:	e024      	b.n	8001cfa <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001cb0:	2328      	movs	r3, #40	@ 0x28
 8001cb2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001cb4:	2327      	movs	r3, #39	@ 0x27
 8001cb6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001cb8:	232a      	movs	r3, #42	@ 0x2a
 8001cba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001cbc:	2329      	movs	r3, #41	@ 0x29
 8001cbe:	753b      	strb	r3, [r7, #20]
      break;
 8001cc0:	e01b      	b.n	8001cfa <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001cc2:	232e      	movs	r3, #46	@ 0x2e
 8001cc4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001cc6:	232d      	movs	r3, #45	@ 0x2d
 8001cc8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001cca:	2330      	movs	r3, #48	@ 0x30
 8001ccc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001cce:	232f      	movs	r3, #47	@ 0x2f
 8001cd0:	753b      	strb	r3, [r7, #20]
      break;
 8001cd2:	e012      	b.n	8001cfa <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001cd4:	2334      	movs	r3, #52	@ 0x34
 8001cd6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001cd8:	2333      	movs	r3, #51	@ 0x33
 8001cda:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001cdc:	2336      	movs	r3, #54	@ 0x36
 8001cde:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001ce0:	2335      	movs	r3, #53	@ 0x35
 8001ce2:	753b      	strb	r3, [r7, #20]
      break;
 8001ce4:	e009      	b.n	8001cfa <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001ce6:	233a      	movs	r3, #58	@ 0x3a
 8001ce8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001cea:	2339      	movs	r3, #57	@ 0x39
 8001cec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001cee:	233c      	movs	r3, #60	@ 0x3c
 8001cf0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001cf2:	233b      	movs	r3, #59	@ 0x3b
 8001cf4:	753b      	strb	r3, [r7, #20]
      break;
 8001cf6:	e000      	b.n	8001cfa <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001cf8:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001cfa:	89fb      	ldrh	r3, [r7, #14]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	7dfa      	ldrb	r2, [r7, #23]
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 fb22 	bl	800334c <TS_IO_Read>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001d0c:	7cfb      	ldrb	r3, [r7, #19]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b29      	ldr	r3, [pc, #164]	@ (8001db8 <ft5336_TS_GetXY+0x1dc>)
 8001d14:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	7dba      	ldrb	r2, [r7, #22]
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 fb14 	bl	800334c <TS_IO_Read>
 8001d24:	4603      	mov	r3, r0
 8001d26:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001d28:	7cfb      	ldrb	r3, [r7, #19]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001d32:	b21a      	sxth	r2, r3
 8001d34:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <ft5336_TS_GetXY+0x1dc>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b1d      	ldr	r3, [pc, #116]	@ (8001db8 <ft5336_TS_GetXY+0x1dc>)
 8001d42:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <ft5336_TS_GetXY+0x1dc>)
 8001d46:	881a      	ldrh	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001d4c:	89fb      	ldrh	r3, [r7, #14]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	7d7a      	ldrb	r2, [r7, #21]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 faf9 	bl	800334c <TS_IO_Read>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001d5e:	7cfb      	ldrb	r3, [r7, #19]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <ft5336_TS_GetXY+0x1dc>)
 8001d66:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001d68:	89fb      	ldrh	r3, [r7, #14]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	7d3a      	ldrb	r2, [r7, #20]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 faeb 	bl	800334c <TS_IO_Read>
 8001d76:	4603      	mov	r3, r0
 8001d78:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001d7a:	7cfb      	ldrb	r3, [r7, #19]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <ft5336_TS_GetXY+0x1dc>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <ft5336_TS_GetXY+0x1dc>)
 8001d94:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <ft5336_TS_GetXY+0x1dc>)
 8001d98:	881a      	ldrh	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001d9e:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <ft5336_TS_GetXY+0x1d8>)
 8001da0:	789b      	ldrb	r3, [r3, #2]
 8001da2:	3301      	adds	r3, #1
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <ft5336_TS_GetXY+0x1d8>)
 8001da8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000650 	.word	0x20000650
 8001db8:	20000654 	.word	0x20000654

08001dbc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	21a4      	movs	r1, #164	@ 0xa4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fa9e 	bl	8003318 <TS_IO_Write>
}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	21a4      	movs	r1, #164	@ 0xa4
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 fa8a 	bl	8003318 <TS_IO_Write>
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	6039      	str	r1, [r7, #0]
 8001e44:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 fa7b 	bl	800334c <TS_IO_Read>
 8001e56:	4603      	mov	r3, r0
 8001e58:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4603      	mov	r3, r0
 8001e7a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001e8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc4 <ft5336_TS_GetTouchInfo+0x158>)
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4293      	cmp	r3, r2
 8001e96:	f080 8090 	bcs.w	8001fba <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	d85d      	bhi.n	8001f5c <ft5336_TS_GetTouchInfo+0xf0>
 8001ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ea8 <ft5336_TS_GetTouchInfo+0x3c>)
 8001ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea6:	bf00      	nop
 8001ea8:	08001ed1 	.word	0x08001ed1
 8001eac:	08001edf 	.word	0x08001edf
 8001eb0:	08001eed 	.word	0x08001eed
 8001eb4:	08001efb 	.word	0x08001efb
 8001eb8:	08001f09 	.word	0x08001f09
 8001ebc:	08001f17 	.word	0x08001f17
 8001ec0:	08001f25 	.word	0x08001f25
 8001ec4:	08001f33 	.word	0x08001f33
 8001ec8:	08001f41 	.word	0x08001f41
 8001ecc:	08001f4f 	.word	0x08001f4f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	757b      	strb	r3, [r7, #21]
      break;
 8001edc:	e03f      	b.n	8001f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001ede:	2309      	movs	r3, #9
 8001ee0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001ee2:	230d      	movs	r3, #13
 8001ee4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8001ee6:	230e      	movs	r3, #14
 8001ee8:	757b      	strb	r3, [r7, #21]
      break;
 8001eea:	e038      	b.n	8001f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001eec:	230f      	movs	r3, #15
 8001eee:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001ef0:	2313      	movs	r3, #19
 8001ef2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001ef4:	2314      	movs	r3, #20
 8001ef6:	757b      	strb	r3, [r7, #21]
      break;
 8001ef8:	e031      	b.n	8001f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001efa:	2315      	movs	r3, #21
 8001efc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001efe:	2319      	movs	r3, #25
 8001f00:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001f02:	231a      	movs	r3, #26
 8001f04:	757b      	strb	r3, [r7, #21]
      break;
 8001f06:	e02a      	b.n	8001f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001f08:	231b      	movs	r3, #27
 8001f0a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001f0c:	231f      	movs	r3, #31
 8001f0e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001f10:	2320      	movs	r3, #32
 8001f12:	757b      	strb	r3, [r7, #21]
      break;
 8001f14:	e023      	b.n	8001f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001f16:	2321      	movs	r3, #33	@ 0x21
 8001f18:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001f1a:	2325      	movs	r3, #37	@ 0x25
 8001f1c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001f1e:	2326      	movs	r3, #38	@ 0x26
 8001f20:	757b      	strb	r3, [r7, #21]
      break;
 8001f22:	e01c      	b.n	8001f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001f24:	2327      	movs	r3, #39	@ 0x27
 8001f26:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001f28:	232b      	movs	r3, #43	@ 0x2b
 8001f2a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001f2c:	232c      	movs	r3, #44	@ 0x2c
 8001f2e:	757b      	strb	r3, [r7, #21]
      break;
 8001f30:	e015      	b.n	8001f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001f32:	232d      	movs	r3, #45	@ 0x2d
 8001f34:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001f36:	2331      	movs	r3, #49	@ 0x31
 8001f38:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001f3a:	2332      	movs	r3, #50	@ 0x32
 8001f3c:	757b      	strb	r3, [r7, #21]
      break;
 8001f3e:	e00e      	b.n	8001f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001f40:	2333      	movs	r3, #51	@ 0x33
 8001f42:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001f44:	2337      	movs	r3, #55	@ 0x37
 8001f46:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001f48:	2338      	movs	r3, #56	@ 0x38
 8001f4a:	757b      	strb	r3, [r7, #21]
      break;
 8001f4c:	e007      	b.n	8001f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001f4e:	2339      	movs	r3, #57	@ 0x39
 8001f50:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001f52:	233d      	movs	r3, #61	@ 0x3d
 8001f54:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001f56:	233e      	movs	r3, #62	@ 0x3e
 8001f58:	757b      	strb	r3, [r7, #21]
      break;
 8001f5a:	e000      	b.n	8001f5e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001f5c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	7dfa      	ldrb	r2, [r7, #23]
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f001 f9f0 	bl	800334c <TS_IO_Read>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001f70:	7d3b      	ldrb	r3, [r7, #20]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	119b      	asrs	r3, r3, #6
 8001f76:	f003 0203 	and.w	r2, r3, #3
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001f7e:	89fb      	ldrh	r3, [r7, #14]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	7dba      	ldrb	r2, [r7, #22]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f9e0 	bl	800334c <TS_IO_Read>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001f90:	7d3b      	ldrb	r3, [r7, #20]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001f9a:	89fb      	ldrh	r3, [r7, #14]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	7d7a      	ldrb	r2, [r7, #21]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f001 f9d2 	bl	800334c <TS_IO_Read>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001fac:	7d3b      	ldrb	r3, [r7, #20]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	111b      	asrs	r3, r3, #4
 8001fb2:	f003 0204 	and.w	r2, r3, #4
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000650 	.word	0x20000650

08001fc8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001fcc:	4b03      	ldr	r3, [pc, #12]	@ (8001fdc <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000650 	.word	0x20000650

08001fe0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001fe4:	f7ff fff0 	bl	8001fc8 <ft5336_Get_I2C_InitializedStatus>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d104      	bne.n	8001ff8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001fee:	f001 f989 	bl	8003304 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001ff2:	4b02      	ldr	r3, [pc, #8]	@ (8001ffc <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000650 	.word	0x20000650

08002000 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b090      	sub	sp, #64	@ 0x40
 8002020:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002032:	4baf      	ldr	r3, [pc, #700]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4aae      	ldr	r2, [pc, #696]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002038:	f043 0310 	orr.w	r3, r3, #16
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4bac      	ldr	r3, [pc, #688]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800204a:	4ba9      	ldr	r3, [pc, #676]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	4aa8      	ldr	r2, [pc, #672]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002054:	6313      	str	r3, [r2, #48]	@ 0x30
 8002056:	4ba6      	ldr	r3, [pc, #664]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	4ba3      	ldr	r3, [pc, #652]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	4aa2      	ldr	r2, [pc, #648]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	@ 0x30
 800206e:	4ba0      	ldr	r3, [pc, #640]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207a:	4b9d      	ldr	r3, [pc, #628]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	4a9c      	ldr	r2, [pc, #624]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	6313      	str	r3, [r2, #48]	@ 0x30
 8002086:	4b9a      	ldr	r3, [pc, #616]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	4b97      	ldr	r3, [pc, #604]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a96      	ldr	r2, [pc, #600]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b94      	ldr	r3, [pc, #592]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	4b91      	ldr	r3, [pc, #580]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	4a90      	ldr	r2, [pc, #576]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b6:	4b8e      	ldr	r3, [pc, #568]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80020c2:	4b8b      	ldr	r3, [pc, #556]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4a8a      	ldr	r2, [pc, #552]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4b88      	ldr	r3, [pc, #544]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80020da:	4b85      	ldr	r3, [pc, #532]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a84      	ldr	r2, [pc, #528]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b82      	ldr	r3, [pc, #520]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80020f2:	4b7f      	ldr	r3, [pc, #508]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	4a7e      	ldr	r2, [pc, #504]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 80020f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fe:	4b7c      	ldr	r3, [pc, #496]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800210a:	4b79      	ldr	r3, [pc, #484]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a78      	ldr	r2, [pc, #480]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002110:	f043 0320 	orr.w	r3, r3, #32
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b76      	ldr	r3, [pc, #472]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002122:	4b73      	ldr	r3, [pc, #460]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a72      	ldr	r2, [pc, #456]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b70      	ldr	r3, [pc, #448]	@ (80022f0 <MX_GPIO_Init+0x2d4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800213a:	2200      	movs	r2, #0
 800213c:	2160      	movs	r1, #96	@ 0x60
 800213e:	486d      	ldr	r0, [pc, #436]	@ (80022f4 <MX_GPIO_Init+0x2d8>)
 8002140:	f004 ffe2 	bl	8007108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002144:	2201      	movs	r2, #1
 8002146:	2120      	movs	r1, #32
 8002148:	486b      	ldr	r0, [pc, #428]	@ (80022f8 <MX_GPIO_Init+0x2dc>)
 800214a:	f004 ffdd 	bl	8007108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	2108      	movs	r1, #8
 8002152:	4869      	ldr	r0, [pc, #420]	@ (80022f8 <MX_GPIO_Init+0x2dc>)
 8002154:	f004 ffd8 	bl	8007108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002158:	2201      	movs	r2, #1
 800215a:	2108      	movs	r1, #8
 800215c:	4867      	ldr	r0, [pc, #412]	@ (80022fc <MX_GPIO_Init+0x2e0>)
 800215e:	f004 ffd3 	bl	8007108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002168:	4865      	ldr	r0, [pc, #404]	@ (8002300 <MX_GPIO_Init+0x2e4>)
 800216a:	f004 ffcd 	bl	8007108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800216e:	2200      	movs	r2, #0
 8002170:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002174:	4863      	ldr	r0, [pc, #396]	@ (8002304 <MX_GPIO_Init+0x2e8>)
 8002176:	f004 ffc7 	bl	8007108 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	21c8      	movs	r1, #200	@ 0xc8
 800217e:	4862      	ldr	r0, [pc, #392]	@ (8002308 <MX_GPIO_Init+0x2ec>)
 8002180:	f004 ffc2 	bl	8007108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002184:	2308      	movs	r3, #8
 8002186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002188:	2300      	movs	r3, #0
 800218a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002190:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002194:	4619      	mov	r1, r3
 8002196:	4857      	ldr	r0, [pc, #348]	@ (80022f4 <MX_GPIO_Init+0x2d8>)
 8002198:	f004 fcfe 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800219c:	2304      	movs	r3, #4
 800219e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021ac:	2309      	movs	r3, #9
 80021ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80021b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021b4:	4619      	mov	r1, r3
 80021b6:	484f      	ldr	r0, [pc, #316]	@ (80022f4 <MX_GPIO_Init+0x2d8>)
 80021b8:	f004 fcee 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80021bc:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021ce:	230b      	movs	r3, #11
 80021d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021d6:	4619      	mov	r1, r3
 80021d8:	484b      	ldr	r0, [pc, #300]	@ (8002308 <MX_GPIO_Init+0x2ec>)
 80021da:	f004 fcdd 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80021de:	f643 0323 	movw	r3, #14371	@ 0x3823
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80021f0:	230a      	movs	r3, #10
 80021f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f8:	4619      	mov	r1, r3
 80021fa:	4844      	ldr	r0, [pc, #272]	@ (800230c <MX_GPIO_Init+0x2f0>)
 80021fc:	f004 fccc 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002210:	2308      	movs	r3, #8
 8002212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002218:	4619      	mov	r1, r3
 800221a:	4837      	ldr	r0, [pc, #220]	@ (80022f8 <MX_GPIO_Init+0x2dc>)
 800221c:	f004 fcbc 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002220:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002232:	230c      	movs	r3, #12
 8002234:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002236:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800223a:	4619      	mov	r1, r3
 800223c:	4834      	ldr	r0, [pc, #208]	@ (8002310 <MX_GPIO_Init+0x2f4>)
 800223e:	f004 fcab 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002242:	f248 1340 	movw	r3, #33088	@ 0x8140
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002248:	2300      	movs	r3, #0
 800224a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002254:	4619      	mov	r1, r3
 8002256:	482f      	ldr	r0, [pc, #188]	@ (8002314 <MX_GPIO_Init+0x2f8>)
 8002258:	f004 fc9e 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 800225c:	2360      	movs	r3, #96	@ 0x60
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800226c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002270:	4619      	mov	r1, r3
 8002272:	4820      	ldr	r0, [pc, #128]	@ (80022f4 <MX_GPIO_Init+0x2d8>)
 8002274:	f004 fc90 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002278:	2340      	movs	r3, #64	@ 0x40
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002288:	230a      	movs	r3, #10
 800228a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800228c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002290:	4619      	mov	r1, r3
 8002292:	481e      	ldr	r0, [pc, #120]	@ (800230c <MX_GPIO_Init+0x2f0>)
 8002294:	f004 fc80 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800229c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229e:	2300      	movs	r3, #0
 80022a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022aa:	4619      	mov	r1, r3
 80022ac:	481a      	ldr	r0, [pc, #104]	@ (8002318 <MX_GPIO_Init+0x2fc>)
 80022ae:	f004 fc73 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80022b2:	2340      	movs	r3, #64	@ 0x40
 80022b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022b6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80022ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80022c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022c4:	4619      	mov	r1, r3
 80022c6:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <MX_GPIO_Init+0x2dc>)
 80022c8:	f004 fc66 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 80022cc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80022d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022de:	230a      	movs	r3, #10
 80022e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022e6:	4619      	mov	r1, r3
 80022e8:	480a      	ldr	r0, [pc, #40]	@ (8002314 <MX_GPIO_Init+0x2f8>)
 80022ea:	f004 fc55 	bl	8006b98 <HAL_GPIO_Init>
 80022ee:	e015      	b.n	800231c <MX_GPIO_Init+0x300>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40022800 	.word	0x40022800
 8002300:	40022000 	.word	0x40022000
 8002304:	40021c00 	.word	0x40021c00
 8002308:	40021800 	.word	0x40021800
 800230c:	40020400 	.word	0x40020400
 8002310:	40020800 	.word	0x40020800
 8002314:	40020000 	.word	0x40020000
 8002318:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800231c:	23f0      	movs	r3, #240	@ 0xf0
 800231e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800232c:	230a      	movs	r3, #10
 800232e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002330:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002334:	4619      	mov	r1, r3
 8002336:	4891      	ldr	r0, [pc, #580]	@ (800257c <MX_GPIO_Init+0x560>)
 8002338:	f004 fc2e 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800233c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800234e:	230a      	movs	r3, #10
 8002350:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002356:	4619      	mov	r1, r3
 8002358:	4889      	ldr	r0, [pc, #548]	@ (8002580 <MX_GPIO_Init+0x564>)
 800235a:	f004 fc1d 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 800235e:	2328      	movs	r3, #40	@ 0x28
 8002360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	2301      	movs	r3, #1
 8002364:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002372:	4619      	mov	r1, r3
 8002374:	4883      	ldr	r0, [pc, #524]	@ (8002584 <MX_GPIO_Init+0x568>)
 8002376:	f004 fc0f 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800237a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800237e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800238c:	4619      	mov	r1, r3
 800238e:	487e      	ldr	r0, [pc, #504]	@ (8002588 <MX_GPIO_Init+0x56c>)
 8002390:	f004 fc02 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002394:	2308      	movs	r3, #8
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002398:	2301      	movs	r3, #1
 800239a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80023a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a8:	4619      	mov	r1, r3
 80023aa:	4878      	ldr	r0, [pc, #480]	@ (800258c <MX_GPIO_Init+0x570>)
 80023ac:	f004 fbf4 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 80023b0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80023b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b6:	2300      	movs	r3, #0
 80023b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023c2:	4619      	mov	r1, r3
 80023c4:	486e      	ldr	r0, [pc, #440]	@ (8002580 <MX_GPIO_Init+0x564>)
 80023c6:	f004 fbe7 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80023ca:	2310      	movs	r3, #16
 80023cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023da:	4619      	mov	r1, r3
 80023dc:	4869      	ldr	r0, [pc, #420]	@ (8002584 <MX_GPIO_Init+0x568>)
 80023de:	f004 fbdb 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80023e2:	2304      	movs	r3, #4
 80023e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023f2:	230c      	movs	r3, #12
 80023f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023fa:	4619      	mov	r1, r3
 80023fc:	4861      	ldr	r0, [pc, #388]	@ (8002584 <MX_GPIO_Init+0x568>)
 80023fe:	f004 fbcb 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002402:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8002406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002408:	2300      	movs	r3, #0
 800240a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002410:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002414:	4619      	mov	r1, r3
 8002416:	485e      	ldr	r0, [pc, #376]	@ (8002590 <MX_GPIO_Init+0x574>)
 8002418:	f004 fbbe 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 800241c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002422:	2301      	movs	r3, #1
 8002424:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002432:	4619      	mov	r1, r3
 8002434:	4851      	ldr	r0, [pc, #324]	@ (800257c <MX_GPIO_Init+0x560>)
 8002436:	f004 fbaf 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800243a:	f645 6340 	movw	r3, #24128	@ 0x5e40
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002440:	2301      	movs	r3, #1
 8002442:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800244c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002450:	4619      	mov	r1, r3
 8002452:	484f      	ldr	r0, [pc, #316]	@ (8002590 <MX_GPIO_Init+0x574>)
 8002454:	f004 fba0 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002458:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800245c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800245e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800246c:	4619      	mov	r1, r3
 800246e:	4843      	ldr	r0, [pc, #268]	@ (800257c <MX_GPIO_Init+0x560>)
 8002470:	f004 fb92 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002474:	2310      	movs	r3, #16
 8002476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002484:	230a      	movs	r3, #10
 8002486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002488:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800248c:	4619      	mov	r1, r3
 800248e:	4840      	ldr	r0, [pc, #256]	@ (8002590 <MX_GPIO_Init+0x574>)
 8002490:	f004 fb82 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002494:	23c8      	movs	r3, #200	@ 0xc8
 8002496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002498:	2301      	movs	r3, #1
 800249a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024a8:	4619      	mov	r1, r3
 80024aa:	4835      	ldr	r0, [pc, #212]	@ (8002580 <MX_GPIO_Init+0x564>)
 80024ac:	f004 fb74 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80024b0:	2305      	movs	r3, #5
 80024b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024c0:	230a      	movs	r3, #10
 80024c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024c8:	4619      	mov	r1, r3
 80024ca:	482f      	ldr	r0, [pc, #188]	@ (8002588 <MX_GPIO_Init+0x56c>)
 80024cc:	f004 fb64 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024d0:	2332      	movs	r3, #50	@ 0x32
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024e0:	230b      	movs	r3, #11
 80024e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024e8:	4619      	mov	r1, r3
 80024ea:	4827      	ldr	r0, [pc, #156]	@ (8002588 <MX_GPIO_Init+0x56c>)
 80024ec:	f004 fb54 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024f0:	2304      	movs	r3, #4
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002500:	2309      	movs	r3, #9
 8002502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002508:	4619      	mov	r1, r3
 800250a:	4822      	ldr	r0, [pc, #136]	@ (8002594 <MX_GPIO_Init+0x578>)
 800250c:	f004 fb44 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002510:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251e:	2303      	movs	r3, #3
 8002520:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002522:	2309      	movs	r3, #9
 8002524:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002526:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800252a:	4619      	mov	r1, r3
 800252c:	4815      	ldr	r0, [pc, #84]	@ (8002584 <MX_GPIO_Init+0x568>)
 800252e:	f004 fb33 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002532:	2386      	movs	r3, #134	@ 0x86
 8002534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002542:	230b      	movs	r3, #11
 8002544:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	4812      	ldr	r0, [pc, #72]	@ (8002598 <MX_GPIO_Init+0x57c>)
 800254e:	f004 fb23 	bl	8006b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002552:	2328      	movs	r3, #40	@ 0x28
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002562:	230a      	movs	r3, #10
 8002564:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800256a:	4619      	mov	r1, r3
 800256c:	480a      	ldr	r0, [pc, #40]	@ (8002598 <MX_GPIO_Init+0x57c>)
 800256e:	f004 fb13 	bl	8006b98 <HAL_GPIO_Init>

}
 8002572:	bf00      	nop
 8002574:	3740      	adds	r7, #64	@ 0x40
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40022000 	.word	0x40022000
 8002580:	40021800 	.word	0x40021800
 8002584:	40020c00 	.word	0x40020c00
 8002588:	40020800 	.word	0x40020800
 800258c:	40022800 	.word	0x40022800
 8002590:	40021c00 	.word	0x40021c00
 8002594:	40020400 	.word	0x40020400
 8002598:	40020000 	.word	0x40020000

0800259c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002614 <MX_I2C1_Init+0x78>)
 80025a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <MX_I2C1_Init+0x7c>)
 80025aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025ac:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025b2:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b8:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025be:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025d6:	480e      	ldr	r0, [pc, #56]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025d8:	f004 fdb0 	bl	800713c <HAL_I2C_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025e2:	f000 fbc1 	bl	8002d68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025e6:	2100      	movs	r1, #0
 80025e8:	4809      	ldr	r0, [pc, #36]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025ea:	f005 fb3d 	bl	8007c68 <HAL_I2CEx_ConfigAnalogFilter>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025f4:	f000 fbb8 	bl	8002d68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025f8:	2100      	movs	r1, #0
 80025fa:	4805      	ldr	r0, [pc, #20]	@ (8002610 <MX_I2C1_Init+0x74>)
 80025fc:	f005 fb7f 	bl	8007cfe <HAL_I2CEx_ConfigDigitalFilter>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002606:	f000 fbaf 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000658 	.word	0x20000658
 8002614:	40005400 	.word	0x40005400
 8002618:	00c0eaff 	.word	0x00c0eaff

0800261c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002620:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002622:	4a1c      	ldr	r2, [pc, #112]	@ (8002694 <MX_I2C3_Init+0x78>)
 8002624:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8002626:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002628:	4a1b      	ldr	r2, [pc, #108]	@ (8002698 <MX_I2C3_Init+0x7c>)
 800262a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800262c:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <MX_I2C3_Init+0x74>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002632:	4b17      	ldr	r3, [pc, #92]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002634:	2201      	movs	r2, #1
 8002636:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002638:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <MX_I2C3_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <MX_I2C3_Init+0x74>)
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002650:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002656:	480e      	ldr	r0, [pc, #56]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002658:	f004 fd70 	bl	800713c <HAL_I2C_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002662:	f000 fb81 	bl	8002d68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002666:	2100      	movs	r1, #0
 8002668:	4809      	ldr	r0, [pc, #36]	@ (8002690 <MX_I2C3_Init+0x74>)
 800266a:	f005 fafd 	bl	8007c68 <HAL_I2CEx_ConfigAnalogFilter>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002674:	f000 fb78 	bl	8002d68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002678:	2100      	movs	r1, #0
 800267a:	4805      	ldr	r0, [pc, #20]	@ (8002690 <MX_I2C3_Init+0x74>)
 800267c:	f005 fb3f 	bl	8007cfe <HAL_I2CEx_ConfigDigitalFilter>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002686:	f000 fb6f 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200006ac 	.word	0x200006ac
 8002694:	40005c00 	.word	0x40005c00
 8002698:	00c0eaff 	.word	0x00c0eaff

0800269c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b0ac      	sub	sp, #176	@ 0xb0
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b4:	f107 0318 	add.w	r3, r7, #24
 80026b8:	2284      	movs	r2, #132	@ 0x84
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f00b f832 	bl	800d726 <memset>
  if(i2cHandle->Instance==I2C1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a44      	ldr	r2, [pc, #272]	@ (80027d8 <HAL_I2C_MspInit+0x13c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d13d      	bne.n	8002748 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026d2:	2300      	movs	r3, #0
 80026d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d6:	f107 0318 	add.w	r3, r7, #24
 80026da:	4618      	mov	r0, r3
 80026dc:	f006 fbf0 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026e6:	f000 fb3f 	bl	8002d68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	4b3c      	ldr	r3, [pc, #240]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	4a3b      	ldr	r2, [pc, #236]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f6:	4b39      	ldr	r3, [pc, #228]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002702:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270a:	2312      	movs	r3, #18
 800270c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800271c:	2304      	movs	r3, #4
 800271e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002722:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002726:	4619      	mov	r1, r3
 8002728:	482d      	ldr	r0, [pc, #180]	@ (80027e0 <HAL_I2C_MspInit+0x144>)
 800272a:	f004 fa35 	bl	8006b98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800272e:	4b2b      	ldr	r3, [pc, #172]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	4a2a      	ldr	r2, [pc, #168]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 8002734:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002738:	6413      	str	r3, [r2, #64]	@ 0x40
 800273a:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002746:	e042      	b.n	80027ce <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a25      	ldr	r2, [pc, #148]	@ (80027e4 <HAL_I2C_MspInit+0x148>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d13d      	bne.n	80027ce <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002756:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800275e:	f107 0318 	add.w	r3, r7, #24
 8002762:	4618      	mov	r0, r3
 8002764:	f006 fbac 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800276e:	f000 fafb 	bl	8002d68 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002772:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	4a19      	ldr	r2, [pc, #100]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 8002778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800277c:	6313      	str	r3, [r2, #48]	@ 0x30
 800277e:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800278a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800278e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002792:	2312      	movs	r3, #18
 8002794:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002798:	2301      	movs	r3, #1
 800279a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027a4:	2304      	movs	r3, #4
 80027a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027ae:	4619      	mov	r1, r3
 80027b0:	480d      	ldr	r0, [pc, #52]	@ (80027e8 <HAL_I2C_MspInit+0x14c>)
 80027b2:	f004 f9f1 	bl	8006b98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	4a08      	ldr	r2, [pc, #32]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 80027bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_I2C_MspInit+0x140>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
}
 80027ce:	bf00      	nop
 80027d0:	37b0      	adds	r7, #176	@ 0xb0
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40005400 	.word	0x40005400
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40005c00 	.word	0x40005c00
 80027e8:	40021c00 	.word	0x40021c00

080027ec <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a15      	ldr	r2, [pc, #84]	@ (8002850 <HAL_I2C_MspDeInit+0x64>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d110      	bne.n	8002820 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_I2C_MspDeInit+0x68>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <HAL_I2C_MspDeInit+0x68>)
 8002804:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002808:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800280a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800280e:	4812      	ldr	r0, [pc, #72]	@ (8002858 <HAL_I2C_MspDeInit+0x6c>)
 8002810:	f004 fb6e 	bl	8006ef0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002814:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002818:	480f      	ldr	r0, [pc, #60]	@ (8002858 <HAL_I2C_MspDeInit+0x6c>)
 800281a:	f004 fb69 	bl	8006ef0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800281e:	e013      	b.n	8002848 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0d      	ldr	r2, [pc, #52]	@ (800285c <HAL_I2C_MspDeInit+0x70>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10e      	bne.n	8002848 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800282a:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <HAL_I2C_MspDeInit+0x68>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <HAL_I2C_MspDeInit+0x68>)
 8002830:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002834:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002836:	2180      	movs	r1, #128	@ 0x80
 8002838:	4809      	ldr	r0, [pc, #36]	@ (8002860 <HAL_I2C_MspDeInit+0x74>)
 800283a:	f004 fb59 	bl	8006ef0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800283e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002842:	4807      	ldr	r0, [pc, #28]	@ (8002860 <HAL_I2C_MspDeInit+0x74>)
 8002844:	f004 fb54 	bl	8006ef0 <HAL_GPIO_DeInit>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40005400 	.word	0x40005400
 8002854:	40023800 	.word	0x40023800
 8002858:	40020400 	.word	0x40020400
 800285c:	40005c00 	.word	0x40005c00
 8002860:	40021c00 	.word	0x40021c00

08002864 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08e      	sub	sp, #56	@ 0x38
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	2234      	movs	r2, #52	@ 0x34
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f00a ff58 	bl	800d726 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002876:	4b3a      	ldr	r3, [pc, #232]	@ (8002960 <MX_LTDC_Init+0xfc>)
 8002878:	4a3a      	ldr	r2, [pc, #232]	@ (8002964 <MX_LTDC_Init+0x100>)
 800287a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800287c:	4b38      	ldr	r3, [pc, #224]	@ (8002960 <MX_LTDC_Init+0xfc>)
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002882:	4b37      	ldr	r3, [pc, #220]	@ (8002960 <MX_LTDC_Init+0xfc>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002888:	4b35      	ldr	r3, [pc, #212]	@ (8002960 <MX_LTDC_Init+0xfc>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800288e:	4b34      	ldr	r3, [pc, #208]	@ (8002960 <MX_LTDC_Init+0xfc>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002894:	4b32      	ldr	r3, [pc, #200]	@ (8002960 <MX_LTDC_Init+0xfc>)
 8002896:	2228      	movs	r2, #40	@ 0x28
 8002898:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800289a:	4b31      	ldr	r3, [pc, #196]	@ (8002960 <MX_LTDC_Init+0xfc>)
 800289c:	2209      	movs	r2, #9
 800289e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80028a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002960 <MX_LTDC_Init+0xfc>)
 80028a2:	2235      	movs	r2, #53	@ 0x35
 80028a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80028a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002960 <MX_LTDC_Init+0xfc>)
 80028a8:	220b      	movs	r2, #11
 80028aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80028ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002960 <MX_LTDC_Init+0xfc>)
 80028ae:	f240 2215 	movw	r2, #533	@ 0x215
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80028b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002960 <MX_LTDC_Init+0xfc>)
 80028b6:	f240 121b 	movw	r2, #283	@ 0x11b
 80028ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80028bc:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <MX_LTDC_Init+0xfc>)
 80028be:	f240 2235 	movw	r2, #565	@ 0x235
 80028c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80028c4:	4b26      	ldr	r3, [pc, #152]	@ (8002960 <MX_LTDC_Init+0xfc>)
 80028c6:	f240 121d 	movw	r2, #285	@ 0x11d
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80028cc:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <MX_LTDC_Init+0xfc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80028d4:	4b22      	ldr	r3, [pc, #136]	@ (8002960 <MX_LTDC_Init+0xfc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80028dc:	4b20      	ldr	r3, [pc, #128]	@ (8002960 <MX_LTDC_Init+0xfc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80028e4:	481e      	ldr	r0, [pc, #120]	@ (8002960 <MX_LTDC_Init+0xfc>)
 80028e6:	f005 fa57 	bl	8007d98 <HAL_LTDC_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80028f0:	f000 fa3a 	bl	8002d68 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80028f8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80028fc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002902:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002906:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002908:	2302      	movs	r3, #2
 800290a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800290c:	23ff      	movs	r3, #255	@ 0xff
 800290e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002914:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002918:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800291a:	2307      	movs	r3, #7
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800291e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002924:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 800292a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800292e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	2200      	movs	r2, #0
 8002946:	4619      	mov	r1, r3
 8002948:	4805      	ldr	r0, [pc, #20]	@ (8002960 <MX_LTDC_Init+0xfc>)
 800294a:	f005 fbb7 	bl	80080bc <HAL_LTDC_ConfigLayer>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002954:	f000 fa08 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002958:	bf00      	nop
 800295a:	3738      	adds	r7, #56	@ 0x38
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000700 	.word	0x20000700
 8002964:	40016800 	.word	0x40016800

08002968 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0ae      	sub	sp, #184	@ 0xb8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002980:	f107 0320 	add.w	r3, r7, #32
 8002984:	2284      	movs	r2, #132	@ 0x84
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f00a fecc 	bl	800d726 <memset>
  if(ltdcHandle->Instance==LTDC)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6f      	ldr	r2, [pc, #444]	@ (8002b50 <HAL_LTDC_MspInit+0x1e8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	f040 80d6 	bne.w	8002b46 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800299a:	2308      	movs	r3, #8
 800299c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800299e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80029a2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80029a4:	2305      	movs	r3, #5
 80029a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80029a8:	2302      	movs	r3, #2
 80029aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80029ac:	2303      	movs	r3, #3
 80029ae:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80029b0:	2301      	movs	r3, #1
 80029b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80029b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ba:	f107 0320 	add.w	r3, r7, #32
 80029be:	4618      	mov	r0, r3
 80029c0:	f006 fa7e 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80029ca:	f000 f9cd 	bl	8002d68 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80029ce:	4b61      	ldr	r3, [pc, #388]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	4a60      	ldr	r2, [pc, #384]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 80029d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029da:	4b5e      	ldr	r3, [pc, #376]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 80029ec:	f043 0310 	orr.w	r3, r3, #16
 80029f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f2:	4b58      	ldr	r3, [pc, #352]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80029fe:	4b55      	ldr	r3, [pc, #340]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4a54      	ldr	r2, [pc, #336]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0a:	4b52      	ldr	r3, [pc, #328]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a16:	4b4f      	ldr	r3, [pc, #316]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	4a4e      	ldr	r2, [pc, #312]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a22:	4b4c      	ldr	r3, [pc, #304]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a2e:	4b49      	ldr	r3, [pc, #292]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	4a48      	ldr	r2, [pc, #288]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3a:	4b46      	ldr	r3, [pc, #280]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a46:	4b43      	ldr	r3, [pc, #268]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	4a42      	ldr	r2, [pc, #264]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a52:	4b40      	ldr	r3, [pc, #256]	@ (8002b54 <HAL_LTDC_MspInit+0x1ec>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002a5e:	2310      	movs	r3, #16
 8002a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a76:	230e      	movs	r3, #14
 8002a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002a7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4835      	ldr	r0, [pc, #212]	@ (8002b58 <HAL_LTDC_MspInit+0x1f0>)
 8002a84:	f004 f888 	bl	8006b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002a88:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002aa2:	230e      	movs	r3, #14
 8002aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002aa8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002aac:	4619      	mov	r1, r3
 8002aae:	482b      	ldr	r0, [pc, #172]	@ (8002b5c <HAL_LTDC_MspInit+0x1f4>)
 8002ab0:	f004 f872 	bl	8006b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002ab4:	23f7      	movs	r3, #247	@ 0xf7
 8002ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002acc:	230e      	movs	r3, #14
 8002ace:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ad2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4821      	ldr	r0, [pc, #132]	@ (8002b60 <HAL_LTDC_MspInit+0x1f8>)
 8002ada:	f004 f85d 	bl	8006b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002af8:	2309      	movs	r3, #9
 8002afa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002afe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4817      	ldr	r0, [pc, #92]	@ (8002b64 <HAL_LTDC_MspInit+0x1fc>)
 8002b06:	f004 f847 	bl	8006b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002b0a:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b24:	230e      	movs	r3, #14
 8002b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b2a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	480d      	ldr	r0, [pc, #52]	@ (8002b68 <HAL_LTDC_MspInit+0x200>)
 8002b32:	f004 f831 	bl	8006b98 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2105      	movs	r1, #5
 8002b3a:	2058      	movs	r0, #88	@ 0x58
 8002b3c:	f003 f9c8 	bl	8005ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002b40:	2058      	movs	r0, #88	@ 0x58
 8002b42:	f003 f9e1 	bl	8005f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002b46:	bf00      	nop
 8002b48:	37b8      	adds	r7, #184	@ 0xb8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40016800 	.word	0x40016800
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40022400 	.word	0x40022400
 8002b60:	40022800 	.word	0x40022800
 8002b64:	40021800 	.word	0x40021800
 8002b68:	40022000 	.word	0x40022000

08002b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b6c:	b598      	push	{r3, r4, r7, lr}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b70:	4b37      	ldr	r3, [pc, #220]	@ (8002c50 <main+0xe4>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b76:	4b36      	ldr	r3, [pc, #216]	@ (8002c50 <main+0xe4>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b7c:	f002 fca5 	bl	80054ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b80:	f000 f86e 	bl	8002c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b84:	f7ff fa4a 	bl	800201c <MX_GPIO_Init>
  MX_ADC3_Init();
 8002b88:	f7fd fd5c 	bl	8000644 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8002b8c:	f7fd fe8c 	bl	80008a8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8002b90:	f7fd fee2 	bl	8000958 <MX_FMC_Init>
  MX_I2C1_Init();
 8002b94:	f7ff fd02 	bl	800259c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002b98:	f7ff fd40 	bl	800261c <MX_I2C3_Init>
  MX_LTDC_Init();
 8002b9c:	f7ff fe62 	bl	8002864 <MX_LTDC_Init>
  MX_RTC_Init();
 8002ba0:	f000 f8e8 	bl	8002d74 <MX_RTC_Init>
  MX_SPI2_Init();
 8002ba4:	f000 f9b8 	bl	8002f18 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002ba8:	f002 f8a2 	bl	8004cf0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002bac:	f002 f8f4 	bl	8004d98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002bb0:	f002 f940 	bl	8004e34 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002bb4:	f002 f98c 	bl	8004ed0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002bb8:	f002 f9d8 	bl	8004f6c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002bbc:	f002 faec 	bl	8005198 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002bc0:	f002 fb1a 	bl	80051f8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002bc4:	f7fd fcec 	bl	80005a0 <MX_ADC1_Init>
  MX_DAC_Init();
 8002bc8:	f7fd fdfc 	bl	80007c4 <MX_DAC_Init>
  MX_UART7_Init();
 8002bcc:	f002 fab4 	bl	8005138 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8002bd0:	f000 fbe6 	bl	80033a0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8002bd4:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f000 fc79 	bl	80034d0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8002bde:	f000 fc4f 	bl	8003480 <BSP_LCD_GetXSize>
 8002be2:	4604      	mov	r4, r0
 8002be4:	f000 fc60 	bl	80034a8 <BSP_LCD_GetYSize>
 8002be8:	4603      	mov	r3, r0
 8002bea:	fb04 f303 	mul.w	r3, r4, r3
 8002bee:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f000 fc6a 	bl	80034d0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8002bfc:	f001 f82a 	bl	8003c54 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f000 fcc5 	bl	8003590 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8002c06:	4813      	ldr	r0, [pc, #76]	@ (8002c54 <main+0xe8>)
 8002c08:	f000 fd1e 	bl	8003648 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f000 fcbf 	bl	8003590 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f000 fd18 	bl	8003648 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 8002c18:	480f      	ldr	r0, [pc, #60]	@ (8002c58 <main+0xec>)
 8002c1a:	f000 fcfb 	bl	8003614 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002c1e:	480f      	ldr	r0, [pc, #60]	@ (8002c5c <main+0xf0>)
 8002c20:	f000 fcc6 	bl	80035b0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f000 fcdb 	bl	80035e0 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002c2a:	f000 fc29 	bl	8003480 <BSP_LCD_GetXSize>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	b29c      	uxth	r4, r3
 8002c32:	f000 fc39 	bl	80034a8 <BSP_LCD_GetYSize>
 8002c36:	4603      	mov	r3, r0
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f001 fc1b 	bl	8004478 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002c42:	f7fd ff8d 	bl	8000b60 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002c46:	f008 fc71 	bl	800b52c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <main+0xde>
 8002c4e:	bf00      	nop
 8002c50:	200007a8 	.word	0x200007a8
 8002c54:	ff81cd4b 	.word	0xff81cd4b
 8002c58:	2000003c 	.word	0x2000003c
 8002c5c:	ffa52a2a 	.word	0xffa52a2a

08002c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b094      	sub	sp, #80	@ 0x50
 8002c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c66:	f107 0320 	add.w	r3, r7, #32
 8002c6a:	2230      	movs	r2, #48	@ 0x30
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f00a fd59 	bl	800d726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c84:	f005 fc00 	bl	8008488 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c88:	4b2c      	ldr	r3, [pc, #176]	@ (8002d3c <SystemClock_Config+0xdc>)
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d3c <SystemClock_Config+0xdc>)
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c94:	4b29      	ldr	r3, [pc, #164]	@ (8002d3c <SystemClock_Config+0xdc>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca0:	4b27      	ldr	r3, [pc, #156]	@ (8002d40 <SystemClock_Config+0xe0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a26      	ldr	r2, [pc, #152]	@ (8002d40 <SystemClock_Config+0xe0>)
 8002ca6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b24      	ldr	r3, [pc, #144]	@ (8002d40 <SystemClock_Config+0xe0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002cb8:	2309      	movs	r3, #9
 8002cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002cd0:	2319      	movs	r3, #25
 8002cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002cd4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002cde:	2309      	movs	r3, #9
 8002ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce2:	f107 0320 	add.w	r3, r7, #32
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f005 fc2e 	bl	8008548 <HAL_RCC_OscConfig>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002cf2:	f000 f839 	bl	8002d68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002cf6:	f005 fbd7 	bl	80084a8 <HAL_PWREx_EnableOverDrive>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002d00:	f000 f832 	bl	8002d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d04:	230f      	movs	r3, #15
 8002d06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	2106      	movs	r1, #6
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 feb4 	bl	8008a90 <HAL_RCC_ClockConfig>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002d2e:	f000 f81b 	bl	8002d68 <Error_Handler>
  }
}
 8002d32:	bf00      	nop
 8002d34:	3750      	adds	r7, #80	@ 0x50
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40007000 	.word	0x40007000

08002d44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d56:	f002 fbc5 	bl	80054e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40001000 	.word	0x40001000

08002d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d6c:	b672      	cpsid	i
}
 8002d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <Error_Handler+0x8>

08002d74 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b090      	sub	sp, #64	@ 0x40
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002d8e:	463b      	mov	r3, r7
 8002d90:	2228      	movs	r2, #40	@ 0x28
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f00a fcc6 	bl	800d726 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d9a:	4b46      	ldr	r3, [pc, #280]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002d9c:	4a46      	ldr	r2, [pc, #280]	@ (8002eb8 <MX_RTC_Init+0x144>)
 8002d9e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002da0:	4b44      	ldr	r3, [pc, #272]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002da6:	4b43      	ldr	r3, [pc, #268]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002da8:	227f      	movs	r2, #127	@ 0x7f
 8002daa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002dac:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002dae:	22ff      	movs	r2, #255	@ 0xff
 8002db0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002db2:	4b40      	ldr	r3, [pc, #256]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002db8:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dc4:	483b      	ldr	r0, [pc, #236]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002dc6:	f006 fc6b 	bl	80096a0 <HAL_RTC_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002dd0:	f7ff ffca 	bl	8002d68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002dee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002df2:	2201      	movs	r2, #1
 8002df4:	4619      	mov	r1, r3
 8002df6:	482f      	ldr	r0, [pc, #188]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002df8:	f006 fcd6 	bl	80097a8 <HAL_RTC_SetTime>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002e02:	f7ff ffb1 	bl	8002d68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002e1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e22:	2201      	movs	r2, #1
 8002e24:	4619      	mov	r1, r3
 8002e26:	4823      	ldr	r0, [pc, #140]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002e28:	f006 fd58 	bl	80098dc <HAL_RTC_SetDate>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002e32:	f7ff ff99 	bl	8002d68 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002e66:	463b      	mov	r3, r7
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4811      	ldr	r0, [pc, #68]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002e6e:	f006 fdb9 	bl	80099e4 <HAL_RTC_SetAlarm>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002e78:	f7ff ff76 	bl	8002d68 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002e7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002e82:	463b      	mov	r3, r7
 8002e84:	2201      	movs	r2, #1
 8002e86:	4619      	mov	r1, r3
 8002e88:	480a      	ldr	r0, [pc, #40]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002e8a:	f006 fdab 	bl	80099e4 <HAL_RTC_SetAlarm>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002e94:	f7ff ff68 	bl	8002d68 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002e98:	2202      	movs	r2, #2
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4805      	ldr	r0, [pc, #20]	@ (8002eb4 <MX_RTC_Init+0x140>)
 8002e9e:	f006 ff6d 	bl	8009d7c <HAL_RTCEx_SetTimeStamp>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002ea8:	f7ff ff5e 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002eac:	bf00      	nop
 8002eae:	3740      	adds	r7, #64	@ 0x40
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	200007b8 	.word	0x200007b8
 8002eb8:	40002800 	.word	0x40002800

08002ebc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b0a4      	sub	sp, #144	@ 0x90
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ec4:	f107 030c 	add.w	r3, r7, #12
 8002ec8:	2284      	movs	r2, #132	@ 0x84
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f00a fc2a 	bl	800d726 <memset>
  if(rtcHandle->Instance==RTC)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8002f10 <HAL_RTC_MspInit+0x54>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d114      	bne.n	8002f06 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002edc:	2320      	movs	r3, #32
 8002ede:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ee0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ee6:	f107 030c 	add.w	r3, r7, #12
 8002eea:	4618      	mov	r0, r3
 8002eec:	f005 ffe8 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002ef6:	f7ff ff37 	bl	8002d68 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002efa:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <HAL_RTC_MspInit+0x58>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efe:	4a05      	ldr	r2, [pc, #20]	@ (8002f14 <HAL_RTC_MspInit+0x58>)
 8002f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f04:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002f06:	bf00      	nop
 8002f08:	3790      	adds	r7, #144	@ 0x90
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40002800 	.word	0x40002800
 8002f14:	40023800 	.word	0x40023800

08002f18 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f90 <MX_SPI2_Init+0x78>)
 8002f20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f22:	4b1a      	ldr	r3, [pc, #104]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002f30:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f32:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002f36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f38:	4b14      	ldr	r3, [pc, #80]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f3e:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002f44:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f46:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002f4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f52:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f58:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002f64:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f66:	2207      	movs	r2, #7
 8002f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f6a:	4b08      	ldr	r3, [pc, #32]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f70:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f72:	2208      	movs	r2, #8
 8002f74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f76:	4805      	ldr	r0, [pc, #20]	@ (8002f8c <MX_SPI2_Init+0x74>)
 8002f78:	f006 fff9 	bl	8009f6e <HAL_SPI_Init>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002f82:	f7ff fef1 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	200007d8 	.word	0x200007d8
 8002f90:	40003800 	.word	0x40003800

08002f94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	@ 0x28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a25      	ldr	r2, [pc, #148]	@ (8003048 <HAL_SPI_MspInit+0xb4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d144      	bne.n	8003040 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fb6:	4b25      	ldr	r3, [pc, #148]	@ (800304c <HAL_SPI_MspInit+0xb8>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	4a24      	ldr	r2, [pc, #144]	@ (800304c <HAL_SPI_MspInit+0xb8>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc2:	4b22      	ldr	r3, [pc, #136]	@ (800304c <HAL_SPI_MspInit+0xb8>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fce:	4b1f      	ldr	r3, [pc, #124]	@ (800304c <HAL_SPI_MspInit+0xb8>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800304c <HAL_SPI_MspInit+0xb8>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fda:	4b1c      	ldr	r3, [pc, #112]	@ (800304c <HAL_SPI_MspInit+0xb8>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe6:	4b19      	ldr	r3, [pc, #100]	@ (800304c <HAL_SPI_MspInit+0xb8>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	4a18      	ldr	r2, [pc, #96]	@ (800304c <HAL_SPI_MspInit+0xb8>)
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ff2:	4b16      	ldr	r3, [pc, #88]	@ (800304c <HAL_SPI_MspInit+0xb8>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002ffe:	2303      	movs	r3, #3
 8003000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300a:	2303      	movs	r3, #3
 800300c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800300e:	2305      	movs	r3, #5
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	480d      	ldr	r0, [pc, #52]	@ (8003050 <HAL_SPI_MspInit+0xbc>)
 800301a:	f003 fdbd 	bl	8006b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800301e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	2300      	movs	r3, #0
 800302e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003030:	2305      	movs	r3, #5
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4619      	mov	r1, r3
 800303a:	4806      	ldr	r0, [pc, #24]	@ (8003054 <HAL_SPI_MspInit+0xc0>)
 800303c:	f003 fdac 	bl	8006b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003040:	bf00      	nop
 8003042:	3728      	adds	r7, #40	@ 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40003800 	.word	0x40003800
 800304c:	40023800 	.word	0x40023800
 8003050:	40022000 	.word	0x40022000
 8003054:	40020400 	.word	0x40020400

08003058 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08c      	sub	sp, #48	@ 0x30
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a51      	ldr	r2, [pc, #324]	@ (80031a8 <I2Cx_MspInit+0x150>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d14d      	bne.n	8003104 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003068:	4b50      	ldr	r3, [pc, #320]	@ (80031ac <I2Cx_MspInit+0x154>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	4a4f      	ldr	r2, [pc, #316]	@ (80031ac <I2Cx_MspInit+0x154>)
 800306e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003072:	6313      	str	r3, [r2, #48]	@ 0x30
 8003074:	4b4d      	ldr	r3, [pc, #308]	@ (80031ac <I2Cx_MspInit+0x154>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003080:	2380      	movs	r3, #128	@ 0x80
 8003082:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003084:	2312      	movs	r3, #18
 8003086:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800308c:	2302      	movs	r3, #2
 800308e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003090:	2304      	movs	r3, #4
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4619      	mov	r1, r3
 800309a:	4845      	ldr	r0, [pc, #276]	@ (80031b0 <I2Cx_MspInit+0x158>)
 800309c:	f003 fd7c 	bl	8006b98 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80030a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80030a6:	f107 031c 	add.w	r3, r7, #28
 80030aa:	4619      	mov	r1, r3
 80030ac:	4840      	ldr	r0, [pc, #256]	@ (80031b0 <I2Cx_MspInit+0x158>)
 80030ae:	f003 fd73 	bl	8006b98 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80030b2:	4b3e      	ldr	r3, [pc, #248]	@ (80031ac <I2Cx_MspInit+0x154>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	4a3d      	ldr	r2, [pc, #244]	@ (80031ac <I2Cx_MspInit+0x154>)
 80030b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030be:	4b3b      	ldr	r3, [pc, #236]	@ (80031ac <I2Cx_MspInit+0x154>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80030ca:	4b38      	ldr	r3, [pc, #224]	@ (80031ac <I2Cx_MspInit+0x154>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4a37      	ldr	r2, [pc, #220]	@ (80031ac <I2Cx_MspInit+0x154>)
 80030d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030d4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80030d6:	4b35      	ldr	r3, [pc, #212]	@ (80031ac <I2Cx_MspInit+0x154>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4a34      	ldr	r2, [pc, #208]	@ (80031ac <I2Cx_MspInit+0x154>)
 80030dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80030e0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80030e2:	2200      	movs	r2, #0
 80030e4:	210f      	movs	r1, #15
 80030e6:	2048      	movs	r0, #72	@ 0x48
 80030e8:	f002 fef2 	bl	8005ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80030ec:	2048      	movs	r0, #72	@ 0x48
 80030ee:	f002 ff0b 	bl	8005f08 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	210f      	movs	r1, #15
 80030f6:	2049      	movs	r0, #73	@ 0x49
 80030f8:	f002 feea 	bl	8005ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80030fc:	2049      	movs	r0, #73	@ 0x49
 80030fe:	f002 ff03 	bl	8005f08 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003102:	e04d      	b.n	80031a0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003104:	4b29      	ldr	r3, [pc, #164]	@ (80031ac <I2Cx_MspInit+0x154>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	4a28      	ldr	r2, [pc, #160]	@ (80031ac <I2Cx_MspInit+0x154>)
 800310a:	f043 0302 	orr.w	r3, r3, #2
 800310e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003110:	4b26      	ldr	r3, [pc, #152]	@ (80031ac <I2Cx_MspInit+0x154>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800311c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003120:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003122:	2312      	movs	r3, #18
 8003124:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800312a:	2302      	movs	r3, #2
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800312e:	2304      	movs	r3, #4
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003132:	f107 031c 	add.w	r3, r7, #28
 8003136:	4619      	mov	r1, r3
 8003138:	481e      	ldr	r0, [pc, #120]	@ (80031b4 <I2Cx_MspInit+0x15c>)
 800313a:	f003 fd2d 	bl	8006b98 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800313e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003142:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003144:	f107 031c 	add.w	r3, r7, #28
 8003148:	4619      	mov	r1, r3
 800314a:	481a      	ldr	r0, [pc, #104]	@ (80031b4 <I2Cx_MspInit+0x15c>)
 800314c:	f003 fd24 	bl	8006b98 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003150:	4b16      	ldr	r3, [pc, #88]	@ (80031ac <I2Cx_MspInit+0x154>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	4a15      	ldr	r2, [pc, #84]	@ (80031ac <I2Cx_MspInit+0x154>)
 8003156:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800315a:	6413      	str	r3, [r2, #64]	@ 0x40
 800315c:	4b13      	ldr	r3, [pc, #76]	@ (80031ac <I2Cx_MspInit+0x154>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003168:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <I2Cx_MspInit+0x154>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	4a0f      	ldr	r2, [pc, #60]	@ (80031ac <I2Cx_MspInit+0x154>)
 800316e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003172:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003174:	4b0d      	ldr	r3, [pc, #52]	@ (80031ac <I2Cx_MspInit+0x154>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4a0c      	ldr	r2, [pc, #48]	@ (80031ac <I2Cx_MspInit+0x154>)
 800317a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800317e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003180:	2200      	movs	r2, #0
 8003182:	210f      	movs	r1, #15
 8003184:	201f      	movs	r0, #31
 8003186:	f002 fea3 	bl	8005ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800318a:	201f      	movs	r0, #31
 800318c:	f002 febc 	bl	8005f08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003190:	2200      	movs	r2, #0
 8003192:	210f      	movs	r1, #15
 8003194:	2020      	movs	r0, #32
 8003196:	f002 fe9b 	bl	8005ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800319a:	2020      	movs	r0, #32
 800319c:	f002 feb4 	bl	8005f08 <HAL_NVIC_EnableIRQ>
}
 80031a0:	bf00      	nop
 80031a2:	3730      	adds	r7, #48	@ 0x30
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	2000083c 	.word	0x2000083c
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40021c00 	.word	0x40021c00
 80031b4:	40020400 	.word	0x40020400

080031b8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f004 faa9 	bl	8007718 <HAL_I2C_GetState>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d125      	bne.n	8003218 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a14      	ldr	r2, [pc, #80]	@ (8003220 <I2Cx_Init+0x68>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a13      	ldr	r2, [pc, #76]	@ (8003224 <I2Cx_Init+0x6c>)
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e002      	b.n	80031e2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a12      	ldr	r2, [pc, #72]	@ (8003228 <I2Cx_Init+0x70>)
 80031e0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a11      	ldr	r2, [pc, #68]	@ (800322c <I2Cx_Init+0x74>)
 80031e6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ff23 	bl	8003058 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f003 ff92 	bl	800713c <HAL_I2C_Init>
  }
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	2000083c 	.word	0x2000083c
 8003224:	40005c00 	.word	0x40005c00
 8003228:	40005400 	.word	0x40005400
 800322c:	40912732 	.word	0x40912732

08003230 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	@ 0x28
 8003234:	af04      	add	r7, sp, #16
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	4608      	mov	r0, r1
 800323a:	4611      	mov	r1, r2
 800323c:	461a      	mov	r2, r3
 800323e:	4603      	mov	r3, r0
 8003240:	72fb      	strb	r3, [r7, #11]
 8003242:	460b      	mov	r3, r1
 8003244:	813b      	strh	r3, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800324e:	7afb      	ldrb	r3, [r7, #11]
 8003250:	b299      	uxth	r1, r3
 8003252:	88f8      	ldrh	r0, [r7, #6]
 8003254:	893a      	ldrh	r2, [r7, #8]
 8003256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800325a:	9302      	str	r3, [sp, #8]
 800325c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	4603      	mov	r3, r0
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f004 f93c 	bl	80074e4 <HAL_I2C_Mem_Read>
 800326c:	4603      	mov	r3, r0
 800326e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	4619      	mov	r1, r3
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f832 	bl	80032e4 <I2Cx_Error>
  }
  return status;    
 8003280:	7dfb      	ldrb	r3, [r7, #23]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b08a      	sub	sp, #40	@ 0x28
 800328e:	af04      	add	r7, sp, #16
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	4608      	mov	r0, r1
 8003294:	4611      	mov	r1, r2
 8003296:	461a      	mov	r2, r3
 8003298:	4603      	mov	r3, r0
 800329a:	72fb      	strb	r3, [r7, #11]
 800329c:	460b      	mov	r3, r1
 800329e:	813b      	strh	r3, [r7, #8]
 80032a0:	4613      	mov	r3, r2
 80032a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80032a8:	7afb      	ldrb	r3, [r7, #11]
 80032aa:	b299      	uxth	r1, r3
 80032ac:	88f8      	ldrh	r0, [r7, #6]
 80032ae:	893a      	ldrh	r2, [r7, #8]
 80032b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032b4:	9302      	str	r3, [sp, #8]
 80032b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	4603      	mov	r3, r0
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f003 fffb 	bl	80072bc <HAL_I2C_Mem_Write>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d004      	beq.n	80032da <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	4619      	mov	r1, r3
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f805 	bl	80032e4 <I2Cx_Error>
  }
  return status;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f003 ffb3 	bl	800725c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ff5e 	bl	80031b8 <I2Cx_Init>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003308:	4802      	ldr	r0, [pc, #8]	@ (8003314 <TS_IO_Init+0x10>)
 800330a:	f7ff ff55 	bl	80031b8 <I2Cx_Init>
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000083c 	.word	0x2000083c

08003318 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af02      	add	r7, sp, #8
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
 8003322:	460b      	mov	r3, r1
 8003324:	71bb      	strb	r3, [r7, #6]
 8003326:	4613      	mov	r3, r2
 8003328:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800332a:	79bb      	ldrb	r3, [r7, #6]
 800332c:	b29a      	uxth	r2, r3
 800332e:	79f9      	ldrb	r1, [r7, #7]
 8003330:	2301      	movs	r3, #1
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	1d7b      	adds	r3, r7, #5
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2301      	movs	r3, #1
 800333a:	4803      	ldr	r0, [pc, #12]	@ (8003348 <TS_IO_Write+0x30>)
 800333c:	f7ff ffa5 	bl	800328a <I2Cx_WriteMultiple>
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	2000083c 	.word	0x2000083c

0800334c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af02      	add	r7, sp, #8
 8003352:	4603      	mov	r3, r0
 8003354:	460a      	mov	r2, r1
 8003356:	71fb      	strb	r3, [r7, #7]
 8003358:	4613      	mov	r3, r2
 800335a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003360:	79bb      	ldrb	r3, [r7, #6]
 8003362:	b29a      	uxth	r2, r3
 8003364:	79f9      	ldrb	r1, [r7, #7]
 8003366:	2301      	movs	r3, #1
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	f107 030f 	add.w	r3, r7, #15
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2301      	movs	r3, #1
 8003372:	4804      	ldr	r0, [pc, #16]	@ (8003384 <TS_IO_Read+0x38>)
 8003374:	f7ff ff5c 	bl	8003230 <I2Cx_ReadMultiple>

  return read_value;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	2000083c 	.word	0x2000083c

08003388 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f002 f8c7 	bl	8005524 <HAL_Delay>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80033a4:	4b31      	ldr	r3, [pc, #196]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033a6:	2228      	movs	r2, #40	@ 0x28
 80033a8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80033aa:	4b30      	ldr	r3, [pc, #192]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033ac:	2209      	movs	r2, #9
 80033ae:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80033b0:	4b2e      	ldr	r3, [pc, #184]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033b2:	2235      	movs	r2, #53	@ 0x35
 80033b4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80033b6:	4b2d      	ldr	r3, [pc, #180]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033b8:	220b      	movs	r2, #11
 80033ba:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80033bc:	4b2b      	ldr	r3, [pc, #172]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033be:	f240 121b 	movw	r2, #283	@ 0x11b
 80033c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80033c4:	4b29      	ldr	r3, [pc, #164]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033c6:	f240 2215 	movw	r2, #533	@ 0x215
 80033ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80033cc:	4b27      	ldr	r3, [pc, #156]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033ce:	f240 121d 	movw	r2, #285	@ 0x11d
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80033d4:	4b25      	ldr	r3, [pc, #148]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033d6:	f240 2235 	movw	r2, #565	@ 0x235
 80033da:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80033dc:	2100      	movs	r1, #0
 80033de:	4823      	ldr	r0, [pc, #140]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033e0:	f000 fd30 	bl	8003e44 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80033e4:	4b21      	ldr	r3, [pc, #132]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033e6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80033ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80033ec:	4b1f      	ldr	r3, [pc, #124]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033ee:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80033f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80033f4:	4b1d      	ldr	r3, [pc, #116]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <BSP_LCD_Init+0xcc>)
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003404:	4b19      	ldr	r3, [pc, #100]	@ (800346c <BSP_LCD_Init+0xcc>)
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800340c:	4b17      	ldr	r3, [pc, #92]	@ (800346c <BSP_LCD_Init+0xcc>)
 800340e:	2200      	movs	r2, #0
 8003410:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003412:	4b16      	ldr	r3, [pc, #88]	@ (800346c <BSP_LCD_Init+0xcc>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003418:	4b14      	ldr	r3, [pc, #80]	@ (800346c <BSP_LCD_Init+0xcc>)
 800341a:	2200      	movs	r2, #0
 800341c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800341e:	4b13      	ldr	r3, [pc, #76]	@ (800346c <BSP_LCD_Init+0xcc>)
 8003420:	2200      	movs	r2, #0
 8003422:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003424:	4b11      	ldr	r3, [pc, #68]	@ (800346c <BSP_LCD_Init+0xcc>)
 8003426:	4a12      	ldr	r2, [pc, #72]	@ (8003470 <BSP_LCD_Init+0xd0>)
 8003428:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800342a:	4810      	ldr	r0, [pc, #64]	@ (800346c <BSP_LCD_Init+0xcc>)
 800342c:	f004 fe84 	bl	8008138 <HAL_LTDC_GetState>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003436:	2100      	movs	r1, #0
 8003438:	480c      	ldr	r0, [pc, #48]	@ (800346c <BSP_LCD_Init+0xcc>)
 800343a:	f000 fc29 	bl	8003c90 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800343e:	480b      	ldr	r0, [pc, #44]	@ (800346c <BSP_LCD_Init+0xcc>)
 8003440:	f004 fcaa 	bl	8007d98 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003444:	2201      	movs	r2, #1
 8003446:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800344a:	480a      	ldr	r0, [pc, #40]	@ (8003474 <BSP_LCD_Init+0xd4>)
 800344c:	f003 fe5c 	bl	8007108 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003450:	2201      	movs	r2, #1
 8003452:	2108      	movs	r1, #8
 8003454:	4808      	ldr	r0, [pc, #32]	@ (8003478 <BSP_LCD_Init+0xd8>)
 8003456:	f003 fe57 	bl	8007108 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800345a:	f000 fe57 	bl	800410c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800345e:	4807      	ldr	r0, [pc, #28]	@ (800347c <BSP_LCD_Init+0xdc>)
 8003460:	f000 f8d8 	bl	8003614 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000890 	.word	0x20000890
 8003470:	40016800 	.word	0x40016800
 8003474:	40022000 	.word	0x40022000
 8003478:	40022800 	.word	0x40022800
 800347c:	20000034 	.word	0x20000034

08003480 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003484:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <BSP_LCD_GetXSize+0x20>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a06      	ldr	r2, [pc, #24]	@ (80034a4 <BSP_LCD_GetXSize+0x24>)
 800348a:	2134      	movs	r1, #52	@ 0x34
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	3360      	adds	r3, #96	@ 0x60
 8003494:	681b      	ldr	r3, [r3, #0]
}
 8003496:	4618      	mov	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	20000978 	.word	0x20000978
 80034a4:	20000890 	.word	0x20000890

080034a8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80034ac:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <BSP_LCD_GetYSize+0x20>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a06      	ldr	r2, [pc, #24]	@ (80034cc <BSP_LCD_GetYSize+0x24>)
 80034b2:	2134      	movs	r1, #52	@ 0x34
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	3364      	adds	r3, #100	@ 0x64
 80034bc:	681b      	ldr	r3, [r3, #0]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	20000978 	.word	0x20000978
 80034cc:	20000890 	.word	0x20000890

080034d0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b090      	sub	sp, #64	@ 0x40
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	6039      	str	r1, [r7, #0]
 80034da:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80034e0:	f7ff ffce 	bl	8003480 <BSP_LCD_GetXSize>
 80034e4:	4603      	mov	r3, r0
 80034e6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80034ec:	f7ff ffdc 	bl	80034a8 <BSP_LCD_GetYSize>
 80034f0:	4603      	mov	r3, r0
 80034f2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 80034fc:	23ff      	movs	r3, #255	@ 0xff
 80034fe:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003516:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800351c:	2307      	movs	r3, #7
 800351e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003520:	f7ff ffae 	bl	8003480 <BSP_LCD_GetXSize>
 8003524:	4603      	mov	r3, r0
 8003526:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003528:	f7ff ffbe 	bl	80034a8 <BSP_LCD_GetYSize>
 800352c:	4603      	mov	r3, r0
 800352e:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003530:	88fa      	ldrh	r2, [r7, #6]
 8003532:	f107 030c 	add.w	r3, r7, #12
 8003536:	4619      	mov	r1, r3
 8003538:	4812      	ldr	r0, [pc, #72]	@ (8003584 <BSP_LCD_LayerDefaultInit+0xb4>)
 800353a:	f004 fdbf 	bl	80080bc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800353e:	88fa      	ldrh	r2, [r7, #6]
 8003540:	4911      	ldr	r1, [pc, #68]	@ (8003588 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3304      	adds	r3, #4
 800354e:	f04f 32ff 	mov.w	r2, #4294967295
 8003552:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	490c      	ldr	r1, [pc, #48]	@ (8003588 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3308      	adds	r3, #8
 8003564:	4a09      	ldr	r2, [pc, #36]	@ (800358c <BSP_LCD_LayerDefaultInit+0xbc>)
 8003566:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003568:	88fa      	ldrh	r2, [r7, #6]
 800356a:	4907      	ldr	r1, [pc, #28]	@ (8003588 <BSP_LCD_LayerDefaultInit+0xb8>)
 800356c:	4613      	mov	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800357a:	601a      	str	r2, [r3, #0]
}
 800357c:	bf00      	nop
 800357e:	3740      	adds	r7, #64	@ 0x40
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000890 	.word	0x20000890
 8003588:	2000097c 	.word	0x2000097c
 800358c:	20000034 	.word	0x20000034

08003590 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003598:	4a04      	ldr	r2, [pc, #16]	@ (80035ac <BSP_LCD_SelectLayer+0x1c>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6013      	str	r3, [r2, #0]
} 
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000978 	.word	0x20000978

080035b0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80035b8:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <BSP_LCD_SetTextColor+0x28>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4907      	ldr	r1, [pc, #28]	@ (80035dc <BSP_LCD_SetTextColor+0x2c>)
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	601a      	str	r2, [r3, #0]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	20000978 	.word	0x20000978
 80035dc:	2000097c 	.word	0x2000097c

080035e0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80035e8:	4b08      	ldr	r3, [pc, #32]	@ (800360c <BSP_LCD_SetBackColor+0x2c>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4908      	ldr	r1, [pc, #32]	@ (8003610 <BSP_LCD_SetBackColor+0x30>)
 80035ee:	4613      	mov	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3304      	adds	r3, #4
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000978 	.word	0x20000978
 8003610:	2000097c 	.word	0x2000097c

08003614 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800361c:	4b08      	ldr	r3, [pc, #32]	@ (8003640 <BSP_LCD_SetFont+0x2c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4908      	ldr	r1, [pc, #32]	@ (8003644 <BSP_LCD_SetFont+0x30>)
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3308      	adds	r3, #8
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000978 	.word	0x20000978
 8003644:	2000097c 	.word	0x2000097c

08003648 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af02      	add	r7, sp, #8
 800364e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003650:	4b0f      	ldr	r3, [pc, #60]	@ (8003690 <BSP_LCD_Clear+0x48>)
 8003652:	681c      	ldr	r4, [r3, #0]
 8003654:	4b0e      	ldr	r3, [pc, #56]	@ (8003690 <BSP_LCD_Clear+0x48>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a0e      	ldr	r2, [pc, #56]	@ (8003694 <BSP_LCD_Clear+0x4c>)
 800365a:	2134      	movs	r1, #52	@ 0x34
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	335c      	adds	r3, #92	@ 0x5c
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461e      	mov	r6, r3
 8003668:	f7ff ff0a 	bl	8003480 <BSP_LCD_GetXSize>
 800366c:	4605      	mov	r5, r0
 800366e:	f7ff ff1b 	bl	80034a8 <BSP_LCD_GetYSize>
 8003672:	4602      	mov	r2, r0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	2300      	movs	r3, #0
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	462a      	mov	r2, r5
 8003680:	4631      	mov	r1, r6
 8003682:	4620      	mov	r0, r4
 8003684:	f000 fcb2 	bl	8003fec <LL_FillBuffer>
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003690:	20000978 	.word	0x20000978
 8003694:	20000890 	.word	0x20000890

08003698 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	80fb      	strh	r3, [r7, #6]
 80036a2:	460b      	mov	r3, r1
 80036a4:	80bb      	strh	r3, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80036aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <BSP_LCD_DisplayChar+0x80>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	491b      	ldr	r1, [pc, #108]	@ (800371c <BSP_LCD_DisplayChar+0x84>)
 80036b0:	4613      	mov	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	3308      	adds	r3, #8
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80036c6:	4b14      	ldr	r3, [pc, #80]	@ (8003718 <BSP_LCD_DisplayChar+0x80>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4c14      	ldr	r4, [pc, #80]	@ (800371c <BSP_LCD_DisplayChar+0x84>)
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4423      	add	r3, r4
 80036d6:	3308      	adds	r3, #8
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80036dc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80036e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <BSP_LCD_DisplayChar+0x80>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4c0d      	ldr	r4, [pc, #52]	@ (800371c <BSP_LCD_DisplayChar+0x84>)
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4423      	add	r3, r4
 80036f0:	3308      	adds	r3, #8
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	889b      	ldrh	r3, [r3, #4]
 80036f6:	3307      	adds	r3, #7
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	da00      	bge.n	80036fe <BSP_LCD_DisplayChar+0x66>
 80036fc:	3307      	adds	r3, #7
 80036fe:	10db      	asrs	r3, r3, #3
 8003700:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003704:	18ca      	adds	r2, r1, r3
 8003706:	88b9      	ldrh	r1, [r7, #4]
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fbb6 	bl	8003e7c <DrawChar>
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}
 8003718:	20000978 	.word	0x20000978
 800371c:	2000097c 	.word	0x2000097c

08003720 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	60ba      	str	r2, [r7, #8]
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	81fb      	strh	r3, [r7, #14]
 800372e:	460b      	mov	r3, r1
 8003730:	81bb      	strh	r3, [r7, #12]
 8003732:	4613      	mov	r3, r2
 8003734:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003736:	2301      	movs	r3, #1
 8003738:	83fb      	strh	r3, [r7, #30]
 800373a:	2300      	movs	r3, #0
 800373c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800374a:	e002      	b.n	8003752 <BSP_LCD_DisplayStringAt+0x32>
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	3301      	adds	r3, #1
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	617a      	str	r2, [r7, #20]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f6      	bne.n	800374c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800375e:	f7ff fe8f 	bl	8003480 <BSP_LCD_GetXSize>
 8003762:	4601      	mov	r1, r0
 8003764:	4b50      	ldr	r3, [pc, #320]	@ (80038a8 <BSP_LCD_DisplayStringAt+0x188>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4850      	ldr	r0, [pc, #320]	@ (80038ac <BSP_LCD_DisplayStringAt+0x18c>)
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4403      	add	r3, r0
 8003774:	3308      	adds	r3, #8
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	889b      	ldrh	r3, [r3, #4]
 800377a:	fbb1 f3f3 	udiv	r3, r1, r3
 800377e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	2b03      	cmp	r3, #3
 8003784:	d01c      	beq.n	80037c0 <BSP_LCD_DisplayStringAt+0xa0>
 8003786:	2b03      	cmp	r3, #3
 8003788:	dc33      	bgt.n	80037f2 <BSP_LCD_DisplayStringAt+0xd2>
 800378a:	2b01      	cmp	r3, #1
 800378c:	d002      	beq.n	8003794 <BSP_LCD_DisplayStringAt+0x74>
 800378e:	2b02      	cmp	r3, #2
 8003790:	d019      	beq.n	80037c6 <BSP_LCD_DisplayStringAt+0xa6>
 8003792:	e02e      	b.n	80037f2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	1ad1      	subs	r1, r2, r3
 800379a:	4b43      	ldr	r3, [pc, #268]	@ (80038a8 <BSP_LCD_DisplayStringAt+0x188>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4843      	ldr	r0, [pc, #268]	@ (80038ac <BSP_LCD_DisplayStringAt+0x18c>)
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4403      	add	r3, r0
 80037aa:	3308      	adds	r3, #8
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	889b      	ldrh	r3, [r3, #4]
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	89fb      	ldrh	r3, [r7, #14]
 80037ba:	4413      	add	r3, r2
 80037bc:	83fb      	strh	r3, [r7, #30]
      break;
 80037be:	e01b      	b.n	80037f8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	83fb      	strh	r3, [r7, #30]
      break;
 80037c4:	e018      	b.n	80037f8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	b299      	uxth	r1, r3
 80037ce:	4b36      	ldr	r3, [pc, #216]	@ (80038a8 <BSP_LCD_DisplayStringAt+0x188>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4836      	ldr	r0, [pc, #216]	@ (80038ac <BSP_LCD_DisplayStringAt+0x18c>)
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4403      	add	r3, r0
 80037de:	3308      	adds	r3, #8
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	889b      	ldrh	r3, [r3, #4]
 80037e4:	fb11 f303 	smulbb	r3, r1, r3
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	89fb      	ldrh	r3, [r7, #14]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	83fb      	strh	r3, [r7, #30]
      break;
 80037f0:	e002      	b.n	80037f8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80037f2:	89fb      	ldrh	r3, [r7, #14]
 80037f4:	83fb      	strh	r3, [r7, #30]
      break;
 80037f6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80037f8:	8bfb      	ldrh	r3, [r7, #30]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <BSP_LCD_DisplayStringAt+0xe6>
 80037fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003802:	2b00      	cmp	r3, #0
 8003804:	da1d      	bge.n	8003842 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003806:	2301      	movs	r3, #1
 8003808:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800380a:	e01a      	b.n	8003842 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781a      	ldrb	r2, [r3, #0]
 8003810:	89b9      	ldrh	r1, [r7, #12]
 8003812:	8bfb      	ldrh	r3, [r7, #30]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff3f 	bl	8003698 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800381a:	4b23      	ldr	r3, [pc, #140]	@ (80038a8 <BSP_LCD_DisplayStringAt+0x188>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4923      	ldr	r1, [pc, #140]	@ (80038ac <BSP_LCD_DisplayStringAt+0x18c>)
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3308      	adds	r3, #8
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	889a      	ldrh	r2, [r3, #4]
 8003830:	8bfb      	ldrh	r3, [r7, #30]
 8003832:	4413      	add	r3, r2
 8003834:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3301      	adds	r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
    i++;
 800383c:	8bbb      	ldrh	r3, [r7, #28]
 800383e:	3301      	adds	r3, #1
 8003840:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf14      	ite	ne
 800384a:	2301      	movne	r3, #1
 800384c:	2300      	moveq	r3, #0
 800384e:	b2dc      	uxtb	r4, r3
 8003850:	f7ff fe16 	bl	8003480 <BSP_LCD_GetXSize>
 8003854:	8bb9      	ldrh	r1, [r7, #28]
 8003856:	4b14      	ldr	r3, [pc, #80]	@ (80038a8 <BSP_LCD_DisplayStringAt+0x188>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4d14      	ldr	r5, [pc, #80]	@ (80038ac <BSP_LCD_DisplayStringAt+0x18c>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	442b      	add	r3, r5
 8003866:	3308      	adds	r3, #8
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	889b      	ldrh	r3, [r3, #4]
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	1ac3      	subs	r3, r0, r3
 8003872:	b299      	uxth	r1, r3
 8003874:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <BSP_LCD_DisplayStringAt+0x188>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	480c      	ldr	r0, [pc, #48]	@ (80038ac <BSP_LCD_DisplayStringAt+0x18c>)
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4403      	add	r3, r0
 8003884:	3308      	adds	r3, #8
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	889b      	ldrh	r3, [r3, #4]
 800388a:	4299      	cmp	r1, r3
 800388c:	bf2c      	ite	cs
 800388e:	2301      	movcs	r3, #1
 8003890:	2300      	movcc	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	4023      	ands	r3, r4
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1b7      	bne.n	800380c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bdb0      	pop	{r4, r5, r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000978 	.word	0x20000978
 80038ac:	2000097c 	.word	0x2000097c

080038b0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80038b0:	b5b0      	push	{r4, r5, r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	4603      	mov	r3, r0
 80038b8:	80fb      	strh	r3, [r7, #6]
 80038ba:	460b      	mov	r3, r1
 80038bc:	80bb      	strh	r3, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80038c6:	4b26      	ldr	r3, [pc, #152]	@ (8003960 <BSP_LCD_DrawHLine+0xb0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a26      	ldr	r2, [pc, #152]	@ (8003964 <BSP_LCD_DrawHLine+0xb4>)
 80038cc:	2134      	movs	r1, #52	@ 0x34
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3348      	adds	r3, #72	@ 0x48
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d114      	bne.n	8003906 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80038dc:	4b20      	ldr	r3, [pc, #128]	@ (8003960 <BSP_LCD_DrawHLine+0xb0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a20      	ldr	r2, [pc, #128]	@ (8003964 <BSP_LCD_DrawHLine+0xb4>)
 80038e2:	2134      	movs	r1, #52	@ 0x34
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	335c      	adds	r3, #92	@ 0x5c
 80038ec:	681c      	ldr	r4, [r3, #0]
 80038ee:	f7ff fdc7 	bl	8003480 <BSP_LCD_GetXSize>
 80038f2:	4602      	mov	r2, r0
 80038f4:	88bb      	ldrh	r3, [r7, #4]
 80038f6:	fb03 f202 	mul.w	r2, r3, r2
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	4413      	add	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4423      	add	r3, r4
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e013      	b.n	800392e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003906:	4b16      	ldr	r3, [pc, #88]	@ (8003960 <BSP_LCD_DrawHLine+0xb0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a16      	ldr	r2, [pc, #88]	@ (8003964 <BSP_LCD_DrawHLine+0xb4>)
 800390c:	2134      	movs	r1, #52	@ 0x34
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	335c      	adds	r3, #92	@ 0x5c
 8003916:	681c      	ldr	r4, [r3, #0]
 8003918:	f7ff fdb2 	bl	8003480 <BSP_LCD_GetXSize>
 800391c:	4602      	mov	r2, r0
 800391e:	88bb      	ldrh	r3, [r7, #4]
 8003920:	fb03 f202 	mul.w	r2, r3, r2
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4423      	add	r3, r4
 800392c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800392e:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <BSP_LCD_DrawHLine+0xb0>)
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	887c      	ldrh	r4, [r7, #2]
 8003936:	4b0a      	ldr	r3, [pc, #40]	@ (8003960 <BSP_LCD_DrawHLine+0xb0>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4d0b      	ldr	r5, [pc, #44]	@ (8003968 <BSP_LCD_DrawHLine+0xb8>)
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	442b      	add	r3, r5
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	2300      	movs	r3, #0
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	2301      	movs	r3, #1
 8003950:	4622      	mov	r2, r4
 8003952:	f000 fb4b 	bl	8003fec <LL_FillBuffer>
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bdb0      	pop	{r4, r5, r7, pc}
 800395e:	bf00      	nop
 8003960:	20000978 	.word	0x20000978
 8003964:	20000890 	.word	0x20000890
 8003968:	2000097c 	.word	0x2000097c

0800396c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800396c:	b5b0      	push	{r4, r5, r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	603a      	str	r2, [r7, #0]
 8003976:	80fb      	strh	r3, [r7, #6]
 8003978:	460b      	mov	r3, r1
 800397a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800397c:	4b1d      	ldr	r3, [pc, #116]	@ (80039f4 <BSP_LCD_DrawPixel+0x88>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1d      	ldr	r2, [pc, #116]	@ (80039f8 <BSP_LCD_DrawPixel+0x8c>)
 8003982:	2134      	movs	r1, #52	@ 0x34
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	3348      	adds	r3, #72	@ 0x48
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d116      	bne.n	80039c0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003992:	4b18      	ldr	r3, [pc, #96]	@ (80039f4 <BSP_LCD_DrawPixel+0x88>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a18      	ldr	r2, [pc, #96]	@ (80039f8 <BSP_LCD_DrawPixel+0x8c>)
 8003998:	2134      	movs	r1, #52	@ 0x34
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	335c      	adds	r3, #92	@ 0x5c
 80039a2:	681c      	ldr	r4, [r3, #0]
 80039a4:	88bd      	ldrh	r5, [r7, #4]
 80039a6:	f7ff fd6b 	bl	8003480 <BSP_LCD_GetXSize>
 80039aa:	4603      	mov	r3, r0
 80039ac:	fb03 f205 	mul.w	r2, r3, r5
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	4413      	add	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4423      	add	r3, r4
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	b292      	uxth	r2, r2
 80039bc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80039be:	e015      	b.n	80039ec <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80039c0:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <BSP_LCD_DrawPixel+0x88>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0c      	ldr	r2, [pc, #48]	@ (80039f8 <BSP_LCD_DrawPixel+0x8c>)
 80039c6:	2134      	movs	r1, #52	@ 0x34
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	335c      	adds	r3, #92	@ 0x5c
 80039d0:	681c      	ldr	r4, [r3, #0]
 80039d2:	88bd      	ldrh	r5, [r7, #4]
 80039d4:	f7ff fd54 	bl	8003480 <BSP_LCD_GetXSize>
 80039d8:	4603      	mov	r3, r0
 80039da:	fb03 f205 	mul.w	r2, r3, r5
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4423      	add	r3, r4
 80039e6:	461a      	mov	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6013      	str	r3, [r2, #0]
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bdb0      	pop	{r4, r5, r7, pc}
 80039f4:	20000978 	.word	0x20000978
 80039f8:	20000890 	.word	0x20000890

080039fc <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b08b      	sub	sp, #44	@ 0x2c
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	330a      	adds	r3, #10
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	330b      	adds	r3, #11
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	330c      	adds	r3, #12
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	041b      	lsls	r3, r3, #16
 8003a36:	441a      	add	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	330d      	adds	r3, #13
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	061b      	lsls	r3, r3, #24
 8003a40:	4413      	add	r3, r2
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3312      	adds	r3, #18
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3313      	adds	r3, #19
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	441a      	add	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3314      	adds	r3, #20
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	441a      	add	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3315      	adds	r3, #21
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	061b      	lsls	r3, r3, #24
 8003a68:	4413      	add	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3316      	adds	r3, #22
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3317      	adds	r3, #23
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3318      	adds	r3, #24
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	441a      	add	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3319      	adds	r3, #25
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	4413      	add	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	331c      	adds	r3, #28
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	331d      	adds	r3, #29
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	4413      	add	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b58 <BSP_LCD_DrawBitmap+0x15c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2b      	ldr	r2, [pc, #172]	@ (8003b5c <BSP_LCD_DrawBitmap+0x160>)
 8003aae:	2134      	movs	r1, #52	@ 0x34
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	335c      	adds	r3, #92	@ 0x5c
 8003ab8:	681c      	ldr	r4, [r3, #0]
 8003aba:	f7ff fce1 	bl	8003480 <BSP_LCD_GetXSize>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	fb03 f202 	mul.w	r2, r3, r2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4423      	add	r3, r4
 8003ace:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	3b20      	subs	r3, #32
 8003ad4:	2b07      	cmp	r3, #7
 8003ad6:	d802      	bhi.n	8003ade <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e008      	b.n	8003af0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	3b10      	subs	r3, #16
 8003ae2:	2b07      	cmp	r3, #7
 8003ae4:	d802      	bhi.n	8003aec <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e001      	b.n	8003af0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003aec:	2301      	movs	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	08d2      	lsrs	r2, r2, #3
 8003afe:	fb03 f202 	mul.w	r2, r3, r2
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	4413      	add	r3, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b10:	e018      	b.n	8003b44 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003b12:	6a39      	ldr	r1, [r7, #32]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fab3 	bl	8004084 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003b1e:	f7ff fcaf 	bl	8003480 <BSP_LCD_GetXSize>
 8003b22:	4603      	mov	r3, r0
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	4413      	add	r3, r2
 8003b2a:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	08db      	lsrs	r3, r3, #3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	425b      	negs	r3, r3
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	3301      	adds	r3, #1
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3e2      	bcc.n	8003b12 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	372c      	adds	r7, #44	@ 0x2c
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd90      	pop	{r4, r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000978 	.word	0x20000978
 8003b5c:	20000890 	.word	0x20000890

08003b60 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af02      	add	r7, sp, #8
 8003b68:	4604      	mov	r4, r0
 8003b6a:	4608      	mov	r0, r1
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4623      	mov	r3, r4
 8003b72:	80fb      	strh	r3, [r7, #6]
 8003b74:	4603      	mov	r3, r0
 8003b76:	80bb      	strh	r3, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003b84:	4b30      	ldr	r3, [pc, #192]	@ (8003c48 <BSP_LCD_FillRect+0xe8>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4930      	ldr	r1, [pc, #192]	@ (8003c4c <BSP_LCD_FillRect+0xec>)
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fd0a 	bl	80035b0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c48 <BSP_LCD_FillRect+0xe8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c50 <BSP_LCD_FillRect+0xf0>)
 8003ba2:	2134      	movs	r1, #52	@ 0x34
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	3348      	adds	r3, #72	@ 0x48
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d114      	bne.n	8003bdc <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003bb2:	4b25      	ldr	r3, [pc, #148]	@ (8003c48 <BSP_LCD_FillRect+0xe8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a26      	ldr	r2, [pc, #152]	@ (8003c50 <BSP_LCD_FillRect+0xf0>)
 8003bb8:	2134      	movs	r1, #52	@ 0x34
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	335c      	adds	r3, #92	@ 0x5c
 8003bc2:	681c      	ldr	r4, [r3, #0]
 8003bc4:	f7ff fc5c 	bl	8003480 <BSP_LCD_GetXSize>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	88bb      	ldrh	r3, [r7, #4]
 8003bcc:	fb03 f202 	mul.w	r2, r3, r2
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4423      	add	r3, r4
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e013      	b.n	8003c04 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c48 <BSP_LCD_FillRect+0xe8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <BSP_LCD_FillRect+0xf0>)
 8003be2:	2134      	movs	r1, #52	@ 0x34
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	335c      	adds	r3, #92	@ 0x5c
 8003bec:	681c      	ldr	r4, [r3, #0]
 8003bee:	f7ff fc47 	bl	8003480 <BSP_LCD_GetXSize>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	88bb      	ldrh	r3, [r7, #4]
 8003bf6:	fb03 f202 	mul.w	r2, r3, r2
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4423      	add	r3, r4
 8003c02:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003c04:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <BSP_LCD_FillRect+0xe8>)
 8003c06:	681c      	ldr	r4, [r3, #0]
 8003c08:	68fd      	ldr	r5, [r7, #12]
 8003c0a:	887e      	ldrh	r6, [r7, #2]
 8003c0c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003c10:	f7ff fc36 	bl	8003480 <BSP_LCD_GetXSize>
 8003c14:	4602      	mov	r2, r0
 8003c16:	887b      	ldrh	r3, [r7, #2]
 8003c18:	1ad1      	subs	r1, r2, r3
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <BSP_LCD_FillRect+0xe8>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	480b      	ldr	r0, [pc, #44]	@ (8003c4c <BSP_LCD_FillRect+0xec>)
 8003c20:	4613      	mov	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4403      	add	r3, r0
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	9100      	str	r1, [sp, #0]
 8003c30:	4643      	mov	r3, r8
 8003c32:	4632      	mov	r2, r6
 8003c34:	4629      	mov	r1, r5
 8003c36:	4620      	mov	r0, r4
 8003c38:	f000 f9d8 	bl	8003fec <LL_FillBuffer>
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c46:	bf00      	nop
 8003c48:	20000978 	.word	0x20000978
 8003c4c:	2000097c 	.word	0x2000097c
 8003c50:	20000890 	.word	0x20000890

08003c54 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003c58:	4b0a      	ldr	r3, [pc, #40]	@ (8003c84 <BSP_LCD_DisplayOn+0x30>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <BSP_LCD_DisplayOn+0x30>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c6e:	4806      	ldr	r0, [pc, #24]	@ (8003c88 <BSP_LCD_DisplayOn+0x34>)
 8003c70:	f003 fa4a 	bl	8007108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003c74:	2201      	movs	r2, #1
 8003c76:	2108      	movs	r1, #8
 8003c78:	4804      	ldr	r0, [pc, #16]	@ (8003c8c <BSP_LCD_DisplayOn+0x38>)
 8003c7a:	f003 fa45 	bl	8007108 <HAL_GPIO_WritePin>
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000890 	.word	0x20000890
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40022800 	.word	0x40022800

08003c90 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b090      	sub	sp, #64	@ 0x40
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c9a:	4b64      	ldr	r3, [pc, #400]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	4a63      	ldr	r2, [pc, #396]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003ca0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ca6:	4b61      	ldr	r3, [pc, #388]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	4a5d      	ldr	r2, [pc, #372]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003cb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cca:	4b58      	ldr	r3, [pc, #352]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	4a57      	ldr	r2, [pc, #348]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003cd0:	f043 0310 	orr.w	r3, r3, #16
 8003cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd6:	4b55      	ldr	r3, [pc, #340]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ce2:	4b52      	ldr	r3, [pc, #328]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a51      	ldr	r2, [pc, #324]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b4f      	ldr	r3, [pc, #316]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	4a4b      	ldr	r2, [pc, #300]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d06:	4b49      	ldr	r3, [pc, #292]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003d12:	4b46      	ldr	r3, [pc, #280]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	4a45      	ldr	r2, [pc, #276]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d1e:	4b43      	ldr	r3, [pc, #268]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003d2a:	4b40      	ldr	r3, [pc, #256]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d36:	4b3d      	ldr	r3, [pc, #244]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003d42:	4b3a      	ldr	r3, [pc, #232]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	4a39      	ldr	r2, [pc, #228]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d4e:	4b37      	ldr	r3, [pc, #220]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003d5a:	4b34      	ldr	r3, [pc, #208]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	4a33      	ldr	r2, [pc, #204]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d66:	4b31      	ldr	r3, [pc, #196]	@ (8003e2c <BSP_LCD_MspInit+0x19c>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003d72:	2310      	movs	r3, #16
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d76:	2302      	movs	r3, #2
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003d82:	230e      	movs	r3, #14
 8003d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003d86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4828      	ldr	r0, [pc, #160]	@ (8003e30 <BSP_LCD_MspInit+0x1a0>)
 8003d8e:	f002 ff03 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003d92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003d9c:	2309      	movs	r3, #9
 8003d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003da0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003da4:	4619      	mov	r1, r3
 8003da6:	4823      	ldr	r0, [pc, #140]	@ (8003e34 <BSP_LCD_MspInit+0x1a4>)
 8003da8:	f002 fef6 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003dac:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003db2:	2302      	movs	r3, #2
 8003db4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003db6:	230e      	movs	r3, #14
 8003db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003dba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	481d      	ldr	r0, [pc, #116]	@ (8003e38 <BSP_LCD_MspInit+0x1a8>)
 8003dc2:	f002 fee9 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003dc6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003dd0:	230e      	movs	r3, #14
 8003dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4818      	ldr	r0, [pc, #96]	@ (8003e3c <BSP_LCD_MspInit+0x1ac>)
 8003ddc:	f002 fedc 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003de0:	23f7      	movs	r3, #247	@ 0xf7
 8003de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003de4:	2302      	movs	r3, #2
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003de8:	230e      	movs	r3, #14
 8003dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003df0:	4619      	mov	r1, r3
 8003df2:	4813      	ldr	r0, [pc, #76]	@ (8003e40 <BSP_LCD_MspInit+0x1b0>)
 8003df4:	f002 fed0 	bl	8006b98 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003e02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e06:	4619      	mov	r1, r3
 8003e08:	480b      	ldr	r0, [pc, #44]	@ (8003e38 <BSP_LCD_MspInit+0x1a8>)
 8003e0a:	f002 fec5 	bl	8006b98 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003e0e:	2308      	movs	r3, #8
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e12:	2301      	movs	r3, #1
 8003e14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4808      	ldr	r0, [pc, #32]	@ (8003e40 <BSP_LCD_MspInit+0x1b0>)
 8003e1e:	f002 febb 	bl	8006b98 <HAL_GPIO_Init>
}
 8003e22:	bf00      	nop
 8003e24:	3740      	adds	r7, #64	@ 0x40
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40021800 	.word	0x40021800
 8003e38:	40022000 	.word	0x40022000
 8003e3c:	40022400 	.word	0x40022400
 8003e40:	40022800 	.word	0x40022800

08003e44 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <BSP_LCD_ClockConfig+0x34>)
 8003e50:	2208      	movs	r2, #8
 8003e52:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003e54:	4b08      	ldr	r3, [pc, #32]	@ (8003e78 <BSP_LCD_ClockConfig+0x34>)
 8003e56:	22c0      	movs	r2, #192	@ 0xc0
 8003e58:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003e5a:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <BSP_LCD_ClockConfig+0x34>)
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003e60:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <BSP_LCD_ClockConfig+0x34>)
 8003e62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003e68:	4803      	ldr	r0, [pc, #12]	@ (8003e78 <BSP_LCD_ClockConfig+0x34>)
 8003e6a:	f005 f829 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000994 	.word	0x20000994

08003e7c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	603a      	str	r2, [r7, #0]
 8003e86:	80fb      	strh	r3, [r7, #6]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	2300      	movs	r3, #0
 8003e92:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003e94:	4b53      	ldr	r3, [pc, #332]	@ (8003fe4 <DrawChar+0x168>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4953      	ldr	r1, [pc, #332]	@ (8003fe8 <DrawChar+0x16c>)
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	88db      	ldrh	r3, [r3, #6]
 8003eaa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003eac:	4b4d      	ldr	r3, [pc, #308]	@ (8003fe4 <DrawChar+0x168>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	494d      	ldr	r1, [pc, #308]	@ (8003fe8 <DrawChar+0x16c>)
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	889b      	ldrh	r3, [r3, #4]
 8003ec2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003ec4:	8a3b      	ldrh	r3, [r7, #16]
 8003ec6:	3307      	adds	r3, #7
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	da00      	bge.n	8003ece <DrawChar+0x52>
 8003ecc:	3307      	adds	r3, #7
 8003ece:	10db      	asrs	r3, r3, #3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	8a3b      	ldrh	r3, [r7, #16]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	e076      	b.n	8003fd2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003ee4:	8a3b      	ldrh	r3, [r7, #16]
 8003ee6:	3307      	adds	r3, #7
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	da00      	bge.n	8003eee <DrawChar+0x72>
 8003eec:	3307      	adds	r3, #7
 8003eee:	10db      	asrs	r3, r3, #3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fb02 f303 	mul.w	r3, r2, r3
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	4413      	add	r3, r2
 8003efc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003efe:	8a3b      	ldrh	r3, [r7, #16]
 8003f00:	3307      	adds	r3, #7
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da00      	bge.n	8003f08 <DrawChar+0x8c>
 8003f06:	3307      	adds	r3, #7
 8003f08:	10db      	asrs	r3, r3, #3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d002      	beq.n	8003f14 <DrawChar+0x98>
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d004      	beq.n	8003f1c <DrawChar+0xa0>
 8003f12:	e00c      	b.n	8003f2e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	617b      	str	r3, [r7, #20]
      break;
 8003f1a:	e016      	b.n	8003f4a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	3201      	adds	r2, #1
 8003f26:	7812      	ldrb	r2, [r2, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
      break;
 8003f2c:	e00d      	b.n	8003f4a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	041a      	lsls	r2, r3, #16
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3301      	adds	r3, #1
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	3202      	adds	r2, #2
 8003f42:	7812      	ldrb	r2, [r2, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
      break;
 8003f48:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	e036      	b.n	8003fbe <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003f50:	8a3a      	ldrh	r2, [r7, #16]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	1ad2      	subs	r2, r2, r3
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	4413      	add	r3, r2
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d012      	beq.n	8003f92 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	4413      	add	r3, r2
 8003f74:	b298      	uxth	r0, r3
 8003f76:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <DrawChar+0x168>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	491b      	ldr	r1, [pc, #108]	@ (8003fe8 <DrawChar+0x16c>)
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	88bb      	ldrh	r3, [r7, #4]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f7ff fcee 	bl	800396c <BSP_LCD_DrawPixel>
 8003f90:	e012      	b.n	8003fb8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	4413      	add	r3, r2
 8003f9a:	b298      	uxth	r0, r3
 8003f9c:	4b11      	ldr	r3, [pc, #68]	@ (8003fe4 <DrawChar+0x168>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4911      	ldr	r1, [pc, #68]	@ (8003fe8 <DrawChar+0x16c>)
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3304      	adds	r3, #4
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	88bb      	ldrh	r3, [r7, #4]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7ff fcda 	bl	800396c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	8a3b      	ldrh	r3, [r7, #16]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d3c4      	bcc.n	8003f50 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003fc6:	88bb      	ldrh	r3, [r7, #4]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	8a7b      	ldrh	r3, [r7, #18]
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d384      	bcc.n	8003ee4 <DrawChar+0x68>
  }
}
 8003fda:	bf00      	nop
 8003fdc:	bf00      	nop
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000978 	.word	0x20000978
 8003fe8:	2000097c 	.word	0x2000097c

08003fec <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8004074 <LL_FillBuffer+0x88>)
 8003ffc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004000:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004002:	4b1d      	ldr	r3, [pc, #116]	@ (8004078 <LL_FillBuffer+0x8c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1d      	ldr	r2, [pc, #116]	@ (800407c <LL_FillBuffer+0x90>)
 8004008:	2134      	movs	r1, #52	@ 0x34
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	3348      	adds	r3, #72	@ 0x48
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d103      	bne.n	8004020 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004018:	4b16      	ldr	r3, [pc, #88]	@ (8004074 <LL_FillBuffer+0x88>)
 800401a:	2202      	movs	r2, #2
 800401c:	609a      	str	r2, [r3, #8]
 800401e:	e002      	b.n	8004026 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004020:	4b14      	ldr	r3, [pc, #80]	@ (8004074 <LL_FillBuffer+0x88>)
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004026:	4a13      	ldr	r2, [pc, #76]	@ (8004074 <LL_FillBuffer+0x88>)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800402c:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <LL_FillBuffer+0x88>)
 800402e:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <LL_FillBuffer+0x94>)
 8004030:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004032:	4810      	ldr	r0, [pc, #64]	@ (8004074 <LL_FillBuffer+0x88>)
 8004034:	f002 fa14 	bl	8006460 <HAL_DMA2D_Init>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d115      	bne.n	800406a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	480c      	ldr	r0, [pc, #48]	@ (8004074 <LL_FillBuffer+0x88>)
 8004042:	f002 fc7b 	bl	800693c <HAL_DMA2D_ConfigLayer>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10e      	bne.n	800406a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69f9      	ldr	r1, [r7, #28]
 8004056:	4807      	ldr	r0, [pc, #28]	@ (8004074 <LL_FillBuffer+0x88>)
 8004058:	f002 fa4c 	bl	80064f4 <HAL_DMA2D_Start>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004062:	210a      	movs	r1, #10
 8004064:	4803      	ldr	r0, [pc, #12]	@ (8004074 <LL_FillBuffer+0x88>)
 8004066:	f002 fa70 	bl	800654a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000938 	.word	0x20000938
 8004078:	20000978 	.word	0x20000978
 800407c:	20000890 	.word	0x20000890
 8004080:	4002b000 	.word	0x4002b000

08004084 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8004092:	4b1c      	ldr	r3, [pc, #112]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 8004094:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004098:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800409a:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80040a0:	4b18      	ldr	r3, [pc, #96]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80040a6:	4b17      	ldr	r3, [pc, #92]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80040ac:	4b15      	ldr	r3, [pc, #84]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 80040ae:	22ff      	movs	r2, #255	@ 0xff
 80040b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80040b2:	4a14      	ldr	r2, [pc, #80]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80040b8:	4b12      	ldr	r3, [pc, #72]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80040be:	4b11      	ldr	r3, [pc, #68]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 80040c0:	4a11      	ldr	r2, [pc, #68]	@ (8004108 <LL_ConvertLineToARGB8888+0x84>)
 80040c2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80040c4:	480f      	ldr	r0, [pc, #60]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 80040c6:	f002 f9cb 	bl	8006460 <HAL_DMA2D_Init>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d115      	bne.n	80040fc <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80040d0:	2101      	movs	r1, #1
 80040d2:	480c      	ldr	r0, [pc, #48]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 80040d4:	f002 fc32 	bl	800693c <HAL_DMA2D_ConfigLayer>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10e      	bne.n	80040fc <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	2301      	movs	r3, #1
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4806      	ldr	r0, [pc, #24]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 80040ea:	f002 fa03 	bl	80064f4 <HAL_DMA2D_Start>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80040f4:	210a      	movs	r1, #10
 80040f6:	4803      	ldr	r0, [pc, #12]	@ (8004104 <LL_ConvertLineToARGB8888+0x80>)
 80040f8:	f002 fa27 	bl	800654a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000938 	.word	0x20000938
 8004108:	4002b000 	.word	0x4002b000

0800410c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004110:	4b29      	ldr	r3, [pc, #164]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 8004112:	4a2a      	ldr	r2, [pc, #168]	@ (80041bc <BSP_SDRAM_Init+0xb0>)
 8004114:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004116:	4b2a      	ldr	r3, [pc, #168]	@ (80041c0 <BSP_SDRAM_Init+0xb4>)
 8004118:	2202      	movs	r2, #2
 800411a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800411c:	4b28      	ldr	r3, [pc, #160]	@ (80041c0 <BSP_SDRAM_Init+0xb4>)
 800411e:	2207      	movs	r2, #7
 8004120:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004122:	4b27      	ldr	r3, [pc, #156]	@ (80041c0 <BSP_SDRAM_Init+0xb4>)
 8004124:	2204      	movs	r2, #4
 8004126:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004128:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <BSP_SDRAM_Init+0xb4>)
 800412a:	2207      	movs	r2, #7
 800412c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800412e:	4b24      	ldr	r3, [pc, #144]	@ (80041c0 <BSP_SDRAM_Init+0xb4>)
 8004130:	2202      	movs	r2, #2
 8004132:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004134:	4b22      	ldr	r3, [pc, #136]	@ (80041c0 <BSP_SDRAM_Init+0xb4>)
 8004136:	2202      	movs	r2, #2
 8004138:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800413a:	4b21      	ldr	r3, [pc, #132]	@ (80041c0 <BSP_SDRAM_Init+0xb4>)
 800413c:	2202      	movs	r2, #2
 800413e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004140:	4b1d      	ldr	r3, [pc, #116]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 8004142:	2200      	movs	r2, #0
 8004144:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004146:	4b1c      	ldr	r3, [pc, #112]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 8004148:	2200      	movs	r2, #0
 800414a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800414c:	4b1a      	ldr	r3, [pc, #104]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 800414e:	2204      	movs	r2, #4
 8004150:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004152:	4b19      	ldr	r3, [pc, #100]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 8004154:	2210      	movs	r2, #16
 8004156:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004158:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 800415a:	2240      	movs	r2, #64	@ 0x40
 800415c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800415e:	4b16      	ldr	r3, [pc, #88]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 8004160:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004164:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004166:	4b14      	ldr	r3, [pc, #80]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 8004168:	2200      	movs	r2, #0
 800416a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800416c:	4b12      	ldr	r3, [pc, #72]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 800416e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004172:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004174:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 8004176:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800417a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800417c:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 800417e:	2200      	movs	r2, #0
 8004180:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004182:	2100      	movs	r1, #0
 8004184:	480c      	ldr	r0, [pc, #48]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 8004186:	f000 f87f 	bl	8004288 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800418a:	490d      	ldr	r1, [pc, #52]	@ (80041c0 <BSP_SDRAM_Init+0xb4>)
 800418c:	480a      	ldr	r0, [pc, #40]	@ (80041b8 <BSP_SDRAM_Init+0xac>)
 800418e:	f005 fe5d 	bl	8009e4c <HAL_SDRAM_Init>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004198:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <BSP_SDRAM_Init+0xb8>)
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e002      	b.n	80041a6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80041a0:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <BSP_SDRAM_Init+0xb8>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80041a6:	f240 6003 	movw	r0, #1539	@ 0x603
 80041aa:	f000 f80d 	bl	80041c8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80041ae:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <BSP_SDRAM_Init+0xb8>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000a18 	.word	0x20000a18
 80041bc:	a0000140 	.word	0xa0000140
 80041c0:	20000a4c 	.word	0x20000a4c
 80041c4:	20000044 	.word	0x20000044

080041c8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80041d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80041da:	4b29      	ldr	r3, [pc, #164]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041dc:	2210      	movs	r2, #16
 80041de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80041e0:	4b27      	ldr	r3, [pc, #156]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80041e6:	4b26      	ldr	r3, [pc, #152]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80041ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041f0:	4923      	ldr	r1, [pc, #140]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041f2:	4824      	ldr	r0, [pc, #144]	@ (8004284 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80041f4:	f005 fe5e 	bl	8009eb4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80041f8:	2001      	movs	r0, #1
 80041fa:	f001 f993 	bl	8005524 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80041fe:	4b20      	ldr	r3, [pc, #128]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004200:	2202      	movs	r2, #2
 8004202:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004204:	4b1e      	ldr	r3, [pc, #120]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004206:	2210      	movs	r2, #16
 8004208:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800420a:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800420c:	2201      	movs	r2, #1
 800420e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004210:	4b1b      	ldr	r3, [pc, #108]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004212:	2200      	movs	r2, #0
 8004214:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004216:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800421a:	4919      	ldr	r1, [pc, #100]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800421c:	4819      	ldr	r0, [pc, #100]	@ (8004284 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800421e:	f005 fe49 	bl	8009eb4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004222:	4b17      	ldr	r3, [pc, #92]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004224:	2203      	movs	r2, #3
 8004226:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004228:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800422a:	2210      	movs	r2, #16
 800422c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800422e:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004230:	2208      	movs	r2, #8
 8004232:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004234:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004236:	2200      	movs	r2, #0
 8004238:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800423a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800423e:	4910      	ldr	r1, [pc, #64]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004240:	4810      	ldr	r0, [pc, #64]	@ (8004284 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004242:	f005 fe37 	bl	8009eb4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004246:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800424a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800424c:	4b0c      	ldr	r3, [pc, #48]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800424e:	2204      	movs	r2, #4
 8004250:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004252:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004254:	2210      	movs	r2, #16
 8004256:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004258:	4b09      	ldr	r3, [pc, #36]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800425a:	2201      	movs	r2, #1
 800425c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4a07      	ldr	r2, [pc, #28]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004262:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004264:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004268:	4905      	ldr	r1, [pc, #20]	@ (8004280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800426a:	4806      	ldr	r0, [pc, #24]	@ (8004284 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800426c:	f005 fe22 	bl	8009eb4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4804      	ldr	r0, [pc, #16]	@ (8004284 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004274:	f005 fe53 	bl	8009f1e <HAL_SDRAM_ProgramRefreshRate>
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000a68 	.word	0x20000a68
 8004284:	20000a18 	.word	0x20000a18

08004288 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004288:	b580      	push	{r7, lr}
 800428a:	b090      	sub	sp, #64	@ 0x40
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004292:	4b70      	ldr	r3, [pc, #448]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 8004294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004296:	4a6f      	ldr	r2, [pc, #444]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6393      	str	r3, [r2, #56]	@ 0x38
 800429e:	4b6d      	ldr	r3, [pc, #436]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80042aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	4a69      	ldr	r2, [pc, #420]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042b6:	4b67      	ldr	r3, [pc, #412]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c2:	4b64      	ldr	r3, [pc, #400]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	4a63      	ldr	r2, [pc, #396]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042c8:	f043 0304 	orr.w	r3, r3, #4
 80042cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ce:	4b61      	ldr	r3, [pc, #388]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042da:	4b5e      	ldr	r3, [pc, #376]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	4a5d      	ldr	r2, [pc, #372]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042e0:	f043 0308 	orr.w	r3, r3, #8
 80042e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042f2:	4b58      	ldr	r3, [pc, #352]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	4a57      	ldr	r2, [pc, #348]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 80042f8:	f043 0310 	orr.w	r3, r3, #16
 80042fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fe:	4b55      	ldr	r3, [pc, #340]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800430a:	4b52      	ldr	r3, [pc, #328]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	4a51      	ldr	r2, [pc, #324]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 8004310:	f043 0320 	orr.w	r3, r3, #32
 8004314:	6313      	str	r3, [r2, #48]	@ 0x30
 8004316:	4b4f      	ldr	r3, [pc, #316]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004322:	4b4c      	ldr	r3, [pc, #304]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	4a4b      	ldr	r2, [pc, #300]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 8004328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800432c:	6313      	str	r3, [r2, #48]	@ 0x30
 800432e:	4b49      	ldr	r3, [pc, #292]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800433a:	4b46      	ldr	r3, [pc, #280]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	4a45      	ldr	r2, [pc, #276]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 8004340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004344:	6313      	str	r3, [r2, #48]	@ 0x30
 8004346:	4b43      	ldr	r3, [pc, #268]	@ (8004454 <BSP_SDRAM_MspInit+0x1cc>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004352:	2302      	movs	r3, #2
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004356:	2301      	movs	r3, #1
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800435a:	2302      	movs	r3, #2
 800435c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800435e:	230c      	movs	r3, #12
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004362:	2308      	movs	r3, #8
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004366:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800436a:	4619      	mov	r1, r3
 800436c:	483a      	ldr	r0, [pc, #232]	@ (8004458 <BSP_SDRAM_MspInit+0x1d0>)
 800436e:	f002 fc13 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004372:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004376:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004378:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800437c:	4619      	mov	r1, r3
 800437e:	4837      	ldr	r0, [pc, #220]	@ (800445c <BSP_SDRAM_MspInit+0x1d4>)
 8004380:	f002 fc0a 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004384:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004388:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800438a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800438e:	4619      	mov	r1, r3
 8004390:	4833      	ldr	r0, [pc, #204]	@ (8004460 <BSP_SDRAM_MspInit+0x1d8>)
 8004392:	f002 fc01 	bl	8006b98 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004396:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800439a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800439c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043a0:	4619      	mov	r1, r3
 80043a2:	4830      	ldr	r0, [pc, #192]	@ (8004464 <BSP_SDRAM_MspInit+0x1dc>)
 80043a4:	f002 fbf8 	bl	8006b98 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80043a8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80043ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043b2:	4619      	mov	r1, r3
 80043b4:	482c      	ldr	r0, [pc, #176]	@ (8004468 <BSP_SDRAM_MspInit+0x1e0>)
 80043b6:	f002 fbef 	bl	8006b98 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80043ba:	2328      	movs	r3, #40	@ 0x28
 80043bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80043be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043c2:	4619      	mov	r1, r3
 80043c4:	4829      	ldr	r0, [pc, #164]	@ (800446c <BSP_SDRAM_MspInit+0x1e4>)
 80043c6:	f002 fbe7 	bl	8006b98 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80043ca:	4b29      	ldr	r3, [pc, #164]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80043d0:	4b27      	ldr	r3, [pc, #156]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 80043d2:	2280      	movs	r2, #128	@ 0x80
 80043d4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80043d6:	4b26      	ldr	r3, [pc, #152]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 80043d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043dc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80043de:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 80043e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043e4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80043e6:	4b22      	ldr	r3, [pc, #136]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 80043e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80043ec:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80043ee:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 80043f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80043f4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80043f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80043fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 80043fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004402:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004404:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 8004406:	2200      	movs	r2, #0
 8004408:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800440a:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 800440c:	2203      	movs	r2, #3
 800440e:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004410:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 8004412:	2200      	movs	r2, #0
 8004414:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004416:	4b16      	ldr	r3, [pc, #88]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800441c:	4b14      	ldr	r3, [pc, #80]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 800441e:	4a15      	ldr	r2, [pc, #84]	@ (8004474 <BSP_SDRAM_MspInit+0x1ec>)
 8004420:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a12      	ldr	r2, [pc, #72]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
 8004428:	4a11      	ldr	r2, [pc, #68]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800442e:	4810      	ldr	r0, [pc, #64]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 8004430:	f001 ff06 	bl	8006240 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004434:	480e      	ldr	r0, [pc, #56]	@ (8004470 <BSP_SDRAM_MspInit+0x1e8>)
 8004436:	f001 fe55 	bl	80060e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800443a:	2200      	movs	r2, #0
 800443c:	210f      	movs	r1, #15
 800443e:	2038      	movs	r0, #56	@ 0x38
 8004440:	f001 fd46 	bl	8005ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004444:	2038      	movs	r0, #56	@ 0x38
 8004446:	f001 fd5f 	bl	8005f08 <HAL_NVIC_EnableIRQ>
}
 800444a:	bf00      	nop
 800444c:	3740      	adds	r7, #64	@ 0x40
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	40020800 	.word	0x40020800
 800445c:	40020c00 	.word	0x40020c00
 8004460:	40021000 	.word	0x40021000
 8004464:	40021400 	.word	0x40021400
 8004468:	40021800 	.word	0x40021800
 800446c:	40021c00 	.word	0x40021c00
 8004470:	20000a78 	.word	0x20000a78
 8004474:	40026410 	.word	0x40026410

08004478 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	460a      	mov	r2, r1
 8004482:	80fb      	strh	r3, [r7, #6]
 8004484:	4613      	mov	r3, r2
 8004486:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800448c:	4a14      	ldr	r2, [pc, #80]	@ (80044e0 <BSP_TS_Init+0x68>)
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004492:	4a14      	ldr	r2, [pc, #80]	@ (80044e4 <BSP_TS_Init+0x6c>)
 8004494:	88bb      	ldrh	r3, [r7, #4]
 8004496:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004498:	4b13      	ldr	r3, [pc, #76]	@ (80044e8 <BSP_TS_Init+0x70>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2070      	movs	r0, #112	@ 0x70
 800449e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80044a0:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <BSP_TS_Init+0x70>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2070      	movs	r0, #112	@ 0x70
 80044a6:	4798      	blx	r3
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b51      	cmp	r3, #81	@ 0x51
 80044ac:	d110      	bne.n	80044d0 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80044ae:	4b0f      	ldr	r3, [pc, #60]	@ (80044ec <BSP_TS_Init+0x74>)
 80044b0:	4a0d      	ldr	r2, [pc, #52]	@ (80044e8 <BSP_TS_Init+0x70>)
 80044b2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80044b4:	4b0e      	ldr	r3, [pc, #56]	@ (80044f0 <BSP_TS_Init+0x78>)
 80044b6:	2270      	movs	r2, #112	@ 0x70
 80044b8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80044ba:	4b0e      	ldr	r3, [pc, #56]	@ (80044f4 <BSP_TS_Init+0x7c>)
 80044bc:	2208      	movs	r2, #8
 80044be:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80044c0:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <BSP_TS_Init+0x74>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	4a0a      	ldr	r2, [pc, #40]	@ (80044f0 <BSP_TS_Init+0x78>)
 80044c8:	7812      	ldrb	r2, [r2, #0]
 80044ca:	4610      	mov	r0, r2
 80044cc:	4798      	blx	r3
 80044ce:	e001      	b.n	80044d4 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80044d0:	2303      	movs	r3, #3
 80044d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000adc 	.word	0x20000adc
 80044e4:	20000ade 	.word	0x20000ade
 80044e8:	2000000c 	.word	0x2000000c
 80044ec:	20000ad8 	.word	0x20000ad8
 80044f0:	20000ae1 	.word	0x20000ae1
 80044f4:	20000ae0 	.word	0x20000ae0

080044f8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80044f8:	b590      	push	{r4, r7, lr}
 80044fa:	b097      	sub	sp, #92	@ 0x5c
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004512:	4bb8      	ldr	r3, [pc, #736]	@ (80047f4 <BSP_TS_GetState+0x2fc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	4ab7      	ldr	r2, [pc, #732]	@ (80047f8 <BSP_TS_GetState+0x300>)
 800451a:	7812      	ldrb	r2, [r2, #0]
 800451c:	4610      	mov	r0, r2
 800451e:	4798      	blx	r3
 8004520:	4603      	mov	r3, r0
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8198 	beq.w	8004862 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004532:	2300      	movs	r3, #0
 8004534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004536:	e187      	b.n	8004848 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004538:	4bae      	ldr	r3, [pc, #696]	@ (80047f4 <BSP_TS_GetState+0x2fc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	4aae      	ldr	r2, [pc, #696]	@ (80047f8 <BSP_TS_GetState+0x300>)
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	4614      	mov	r4, r2
 8004544:	f107 0120 	add.w	r1, r7, #32
 8004548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800454a:	0052      	lsls	r2, r2, #1
 800454c:	1888      	adds	r0, r1, r2
 800454e:	f107 0114 	add.w	r1, r7, #20
 8004552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004554:	0052      	lsls	r2, r2, #1
 8004556:	440a      	add	r2, r1
 8004558:	4601      	mov	r1, r0
 800455a:	4620      	mov	r0, r4
 800455c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800455e:	4ba7      	ldr	r3, [pc, #668]	@ (80047fc <BSP_TS_GetState+0x304>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d117      	bne.n	8004596 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	3350      	adds	r3, #80	@ 0x50
 800456c:	443b      	add	r3, r7
 800456e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	3350      	adds	r3, #80	@ 0x50
 8004578:	443b      	add	r3, r7
 800457a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800457e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	3350      	adds	r3, #80	@ 0x50
 8004584:	443b      	add	r3, r7
 8004586:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800458a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	3350      	adds	r3, #80	@ 0x50
 8004590:	443b      	add	r3, r7
 8004592:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004596:	4b99      	ldr	r3, [pc, #612]	@ (80047fc <BSP_TS_GetState+0x304>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00e      	beq.n	80045c0 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 80045a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	3350      	adds	r3, #80	@ 0x50
 80045a8:	443b      	add	r3, r7
 80045aa:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80045ae:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	3350      	adds	r3, #80	@ 0x50
 80045ba:	443b      	add	r3, r7
 80045bc:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80045c0:	4b8e      	ldr	r3, [pc, #568]	@ (80047fc <BSP_TS_GetState+0x304>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 80045cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	3350      	adds	r3, #80	@ 0x50
 80045d2:	443b      	add	r3, r7
 80045d4:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80045d8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80045dc:	b29a      	uxth	r2, r3
 80045de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	3350      	adds	r3, #80	@ 0x50
 80045e4:	443b      	add	r3, r7
 80045e6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80045ea:	4b84      	ldr	r3, [pc, #528]	@ (80047fc <BSP_TS_GetState+0x304>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d017      	beq.n	8004626 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 80045f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	3350      	adds	r3, #80	@ 0x50
 80045fc:	443b      	add	r3, r7
 80045fe:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	3350      	adds	r3, #80	@ 0x50
 8004608:	443b      	add	r3, r7
 800460a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800460e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	3350      	adds	r3, #80	@ 0x50
 8004614:	443b      	add	r3, r7
 8004616:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800461a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	3350      	adds	r3, #80	@ 0x50
 8004620:	443b      	add	r3, r7
 8004622:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	3350      	adds	r3, #80	@ 0x50
 800462c:	443b      	add	r3, r7
 800462e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004632:	4619      	mov	r1, r3
 8004634:	4a72      	ldr	r2, [pc, #456]	@ (8004800 <BSP_TS_GetState+0x308>)
 8004636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463c:	4299      	cmp	r1, r3
 800463e:	d90d      	bls.n	800465c <BSP_TS_GetState+0x164>
 8004640:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	3350      	adds	r3, #80	@ 0x50
 8004646:	443b      	add	r3, r7
 8004648:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800464c:	496c      	ldr	r1, [pc, #432]	@ (8004800 <BSP_TS_GetState+0x308>)
 800464e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004650:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004654:	b29b      	uxth	r3, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	b29b      	uxth	r3, r3
 800465a:	e00c      	b.n	8004676 <BSP_TS_GetState+0x17e>
 800465c:	4a68      	ldr	r2, [pc, #416]	@ (8004800 <BSP_TS_GetState+0x308>)
 800465e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004664:	b29a      	uxth	r2, r3
 8004666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	3350      	adds	r3, #80	@ 0x50
 800466c:	443b      	add	r3, r7
 800466e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	b29b      	uxth	r3, r3
 8004676:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800467a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	3350      	adds	r3, #80	@ 0x50
 8004680:	443b      	add	r3, r7
 8004682:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004686:	4619      	mov	r1, r3
 8004688:	4a5e      	ldr	r2, [pc, #376]	@ (8004804 <BSP_TS_GetState+0x30c>)
 800468a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004690:	4299      	cmp	r1, r3
 8004692:	d90d      	bls.n	80046b0 <BSP_TS_GetState+0x1b8>
 8004694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	3350      	adds	r3, #80	@ 0x50
 800469a:	443b      	add	r3, r7
 800469c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80046a0:	4958      	ldr	r1, [pc, #352]	@ (8004804 <BSP_TS_GetState+0x30c>)
 80046a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	e00c      	b.n	80046ca <BSP_TS_GetState+0x1d2>
 80046b0:	4a54      	ldr	r2, [pc, #336]	@ (8004804 <BSP_TS_GetState+0x30c>)
 80046b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	3350      	adds	r3, #80	@ 0x50
 80046c0:	443b      	add	r3, r7
 80046c2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 80046ce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80046d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80046d6:	4413      	add	r3, r2
 80046d8:	2b05      	cmp	r3, #5
 80046da:	dd15      	ble.n	8004708 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 80046dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	3350      	adds	r3, #80	@ 0x50
 80046e2:	443b      	add	r3, r7
 80046e4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80046e8:	4619      	mov	r1, r3
 80046ea:	4a45      	ldr	r2, [pc, #276]	@ (8004800 <BSP_TS_GetState+0x308>)
 80046ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80046f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	3350      	adds	r3, #80	@ 0x50
 80046f8:	443b      	add	r3, r7
 80046fa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80046fe:	4619      	mov	r1, r3
 8004700:	4a40      	ldr	r2, [pc, #256]	@ (8004804 <BSP_TS_GetState+0x30c>)
 8004702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004704:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004708:	4b3b      	ldr	r3, [pc, #236]	@ (80047f8 <BSP_TS_GetState+0x300>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b70      	cmp	r3, #112	@ 0x70
 800470e:	d119      	bne.n	8004744 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	3350      	adds	r3, #80	@ 0x50
 8004716:	443b      	add	r3, r7
 8004718:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4413      	add	r3, r2
 8004724:	460a      	mov	r2, r1
 8004726:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	3350      	adds	r3, #80	@ 0x50
 800472e:	443b      	add	r3, r7
 8004730:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004738:	3304      	adds	r3, #4
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	460a      	mov	r2, r1
 8004740:	809a      	strh	r2, [r3, #4]
 8004742:	e022      	b.n	800478a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004744:	4b30      	ldr	r3, [pc, #192]	@ (8004808 <BSP_TS_GetState+0x310>)
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	4619      	mov	r1, r3
 800474a:	4a2d      	ldr	r2, [pc, #180]	@ (8004800 <BSP_TS_GetState+0x308>)
 800474c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800474e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	0b1b      	lsrs	r3, r3, #12
 8004758:	b299      	uxth	r1, r3
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4413      	add	r3, r2
 8004762:	460a      	mov	r2, r1
 8004764:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004766:	4b29      	ldr	r3, [pc, #164]	@ (800480c <BSP_TS_GetState+0x314>)
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	4a25      	ldr	r2, [pc, #148]	@ (8004804 <BSP_TS_GetState+0x30c>)
 800476e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	0b1b      	lsrs	r3, r3, #12
 800477a:	b299      	uxth	r1, r3
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004780:	3304      	adds	r3, #4
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	4413      	add	r3, r2
 8004786:	460a      	mov	r2, r1
 8004788:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800478a:	4b1b      	ldr	r3, [pc, #108]	@ (80047f8 <BSP_TS_GetState+0x300>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f107 010c 	add.w	r1, r7, #12
 8004794:	f107 0210 	add.w	r2, r7, #16
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	460b      	mov	r3, r1
 80047a0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80047a2:	f7fd fb63 	bl	8001e6c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	b2d9      	uxtb	r1, r3
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ae:	4413      	add	r3, r2
 80047b0:	3316      	adds	r3, #22
 80047b2:	460a      	mov	r2, r1
 80047b4:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	b2d9      	uxtb	r1, r3
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047be:	4413      	add	r3, r2
 80047c0:	3320      	adds	r3, #32
 80047c2:	460a      	mov	r2, r1
 80047c4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d836      	bhi.n	800483a <BSP_TS_GetState+0x342>
 80047cc:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <BSP_TS_GetState+0x2dc>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	080047e5 	.word	0x080047e5
 80047d8:	08004811 	.word	0x08004811
 80047dc:	0800481f 	.word	0x0800481f
 80047e0:	0800482d 	.word	0x0800482d
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047e8:	4413      	add	r3, r2
 80047ea:	331b      	adds	r3, #27
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
          break;
 80047f0:	e027      	b.n	8004842 <BSP_TS_GetState+0x34a>
 80047f2:	bf00      	nop
 80047f4:	20000ad8 	.word	0x20000ad8
 80047f8:	20000ae1 	.word	0x20000ae1
 80047fc:	20000ae0 	.word	0x20000ae0
 8004800:	20000ae4 	.word	0x20000ae4
 8004804:	20000af8 	.word	0x20000af8
 8004808:	20000adc 	.word	0x20000adc
 800480c:	20000ade 	.word	0x20000ade
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004814:	4413      	add	r3, r2
 8004816:	331b      	adds	r3, #27
 8004818:	2202      	movs	r2, #2
 800481a:	701a      	strb	r2, [r3, #0]
          break;
 800481c:	e011      	b.n	8004842 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004822:	4413      	add	r3, r2
 8004824:	331b      	adds	r3, #27
 8004826:	2203      	movs	r2, #3
 8004828:	701a      	strb	r2, [r3, #0]
          break;
 800482a:	e00a      	b.n	8004842 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004830:	4413      	add	r3, r2
 8004832:	331b      	adds	r3, #27
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
          break;
 8004838:	e003      	b.n	8004842 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8004840:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004844:	3301      	adds	r3, #1
 8004846:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004850:	4293      	cmp	r3, r2
 8004852:	f4ff ae71 	bcc.w	8004538 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f80a 	bl	8004870 <BSP_TS_Get_GestureId>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004862:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8004866:	4618      	mov	r0, r3
 8004868:	3754      	adds	r7, #84	@ 0x54
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}
 800486e:	bf00      	nop

08004870 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004880:	4b3b      	ldr	r3, [pc, #236]	@ (8004970 <BSP_TS_Get_GestureId+0x100>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7fd fad4 	bl	8001e3a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b49      	cmp	r3, #73	@ 0x49
 8004896:	d05e      	beq.n	8004956 <BSP_TS_Get_GestureId+0xe6>
 8004898:	2b49      	cmp	r3, #73	@ 0x49
 800489a:	d860      	bhi.n	800495e <BSP_TS_Get_GestureId+0xee>
 800489c:	2b1c      	cmp	r3, #28
 800489e:	d83f      	bhi.n	8004920 <BSP_TS_Get_GestureId+0xb0>
 80048a0:	2b1c      	cmp	r3, #28
 80048a2:	d85c      	bhi.n	800495e <BSP_TS_Get_GestureId+0xee>
 80048a4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <BSP_TS_Get_GestureId+0x3c>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	08004927 	.word	0x08004927
 80048b0:	0800495f 	.word	0x0800495f
 80048b4:	0800495f 	.word	0x0800495f
 80048b8:	0800495f 	.word	0x0800495f
 80048bc:	0800495f 	.word	0x0800495f
 80048c0:	0800495f 	.word	0x0800495f
 80048c4:	0800495f 	.word	0x0800495f
 80048c8:	0800495f 	.word	0x0800495f
 80048cc:	0800495f 	.word	0x0800495f
 80048d0:	0800495f 	.word	0x0800495f
 80048d4:	0800495f 	.word	0x0800495f
 80048d8:	0800495f 	.word	0x0800495f
 80048dc:	0800495f 	.word	0x0800495f
 80048e0:	0800495f 	.word	0x0800495f
 80048e4:	0800495f 	.word	0x0800495f
 80048e8:	0800495f 	.word	0x0800495f
 80048ec:	0800492f 	.word	0x0800492f
 80048f0:	0800495f 	.word	0x0800495f
 80048f4:	0800495f 	.word	0x0800495f
 80048f8:	0800495f 	.word	0x0800495f
 80048fc:	08004937 	.word	0x08004937
 8004900:	0800495f 	.word	0x0800495f
 8004904:	0800495f 	.word	0x0800495f
 8004908:	0800495f 	.word	0x0800495f
 800490c:	0800493f 	.word	0x0800493f
 8004910:	0800495f 	.word	0x0800495f
 8004914:	0800495f 	.word	0x0800495f
 8004918:	0800495f 	.word	0x0800495f
 800491c:	08004947 	.word	0x08004947
 8004920:	2b40      	cmp	r3, #64	@ 0x40
 8004922:	d014      	beq.n	800494e <BSP_TS_Get_GestureId+0xde>
 8004924:	e01b      	b.n	800495e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800492c:	e01a      	b.n	8004964 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004934:	e016      	b.n	8004964 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800493c:	e012      	b.n	8004964 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2203      	movs	r2, #3
 8004942:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004944:	e00e      	b.n	8004964 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2204      	movs	r2, #4
 800494a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800494c:	e00a      	b.n	8004964 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2205      	movs	r2, #5
 8004952:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004954:	e006      	b.n	8004964 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2206      	movs	r2, #6
 800495a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800495c:	e002      	b.n	8004964 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
      break;
 8004962:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004964:	7bfb      	ldrb	r3, [r7, #15]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000ae1 	.word	0x20000ae1

08004974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800497a:	4b11      	ldr	r3, [pc, #68]	@ (80049c0 <HAL_MspInit+0x4c>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	4a10      	ldr	r2, [pc, #64]	@ (80049c0 <HAL_MspInit+0x4c>)
 8004980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004984:	6413      	str	r3, [r2, #64]	@ 0x40
 8004986:	4b0e      	ldr	r3, [pc, #56]	@ (80049c0 <HAL_MspInit+0x4c>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004992:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <HAL_MspInit+0x4c>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004996:	4a0a      	ldr	r2, [pc, #40]	@ (80049c0 <HAL_MspInit+0x4c>)
 8004998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800499c:	6453      	str	r3, [r2, #68]	@ 0x44
 800499e:	4b08      	ldr	r3, [pc, #32]	@ (80049c0 <HAL_MspInit+0x4c>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80049aa:	2200      	movs	r2, #0
 80049ac:	210f      	movs	r1, #15
 80049ae:	f06f 0001 	mvn.w	r0, #1
 80049b2:	f001 fa8d 	bl	8005ed0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800

080049c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08e      	sub	sp, #56	@ 0x38
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80049d4:	4b33      	ldr	r3, [pc, #204]	@ (8004aa4 <HAL_InitTick+0xe0>)
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	4a32      	ldr	r2, [pc, #200]	@ (8004aa4 <HAL_InitTick+0xe0>)
 80049da:	f043 0310 	orr.w	r3, r3, #16
 80049de:	6413      	str	r3, [r2, #64]	@ 0x40
 80049e0:	4b30      	ldr	r3, [pc, #192]	@ (8004aa4 <HAL_InitTick+0xe0>)
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049ec:	f107 0210 	add.w	r2, r7, #16
 80049f0:	f107 0314 	add.w	r3, r7, #20
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f004 fa30 	bl	8008e5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004a06:	f004 fa01 	bl	8008e0c <HAL_RCC_GetPCLK1Freq>
 8004a0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a0c:	e004      	b.n	8004a18 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004a0e:	f004 f9fd 	bl	8008e0c <HAL_RCC_GetPCLK1Freq>
 8004a12:	4603      	mov	r3, r0
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1a:	4a23      	ldr	r2, [pc, #140]	@ (8004aa8 <HAL_InitTick+0xe4>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	0c9b      	lsrs	r3, r3, #18
 8004a22:	3b01      	subs	r3, #1
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004a26:	4b21      	ldr	r3, [pc, #132]	@ (8004aac <HAL_InitTick+0xe8>)
 8004a28:	4a21      	ldr	r2, [pc, #132]	@ (8004ab0 <HAL_InitTick+0xec>)
 8004a2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004aac <HAL_InitTick+0xe8>)
 8004a2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004a32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004a34:	4a1d      	ldr	r2, [pc, #116]	@ (8004aac <HAL_InitTick+0xe8>)
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8004aac <HAL_InitTick+0xe8>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a40:	4b1a      	ldr	r3, [pc, #104]	@ (8004aac <HAL_InitTick+0xe8>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a46:	4b19      	ldr	r3, [pc, #100]	@ (8004aac <HAL_InitTick+0xe8>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004a4c:	4817      	ldr	r0, [pc, #92]	@ (8004aac <HAL_InitTick+0xe8>)
 8004a4e:	f005 fb39 	bl	800a0c4 <HAL_TIM_Base_Init>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d11b      	bne.n	8004a98 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004a60:	4812      	ldr	r0, [pc, #72]	@ (8004aac <HAL_InitTick+0xe8>)
 8004a62:	f005 fb87 	bl	800a174 <HAL_TIM_Base_Start_IT>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d111      	bne.n	8004a98 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a74:	2036      	movs	r0, #54	@ 0x36
 8004a76:	f001 fa47 	bl	8005f08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b0f      	cmp	r3, #15
 8004a7e:	d808      	bhi.n	8004a92 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004a80:	2200      	movs	r2, #0
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	2036      	movs	r0, #54	@ 0x36
 8004a86:	f001 fa23 	bl	8005ed0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab4 <HAL_InitTick+0xf0>)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	e002      	b.n	8004a98 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004a98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3738      	adds	r7, #56	@ 0x38
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	431bde83 	.word	0x431bde83
 8004aac:	20000b0c 	.word	0x20000b0c
 8004ab0:	40001000 	.word	0x40001000
 8004ab4:	2000004c 	.word	0x2000004c

08004ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <NMI_Handler+0x4>

08004ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ac4:	bf00      	nop
 8004ac6:	e7fd      	b.n	8004ac4 <HardFault_Handler+0x4>

08004ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004acc:	bf00      	nop
 8004ace:	e7fd      	b.n	8004acc <MemManage_Handler+0x4>

08004ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ad4:	bf00      	nop
 8004ad6:	e7fd      	b.n	8004ad4 <BusFault_Handler+0x4>

08004ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <UsageFault_Handler+0x4>

08004ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004af4:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <TIM6_DAC_IRQHandler+0x20>)
 8004af6:	791b      	ldrb	r3, [r3, #4]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8004afe:	4804      	ldr	r0, [pc, #16]	@ (8004b10 <TIM6_DAC_IRQHandler+0x20>)
 8004b00:	f001 fa32 	bl	8005f68 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004b04:	4803      	ldr	r0, [pc, #12]	@ (8004b14 <TIM6_DAC_IRQHandler+0x24>)
 8004b06:	f005 fbad 	bl	800a264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000160 	.word	0x20000160
 8004b14:	20000b0c 	.word	0x20000b0c

08004b18 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004b1c:	4802      	ldr	r0, [pc, #8]	@ (8004b28 <LTDC_IRQHandler+0x10>)
 8004b1e:	f003 fa0b 	bl	8007f38 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004b22:	bf00      	nop
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000700 	.word	0x20000700

08004b2c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004b30:	4802      	ldr	r0, [pc, #8]	@ (8004b3c <DMA2D_IRQHandler+0x10>)
 8004b32:	f001 fdf3 	bl	800671c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000174 	.word	0x20000174

08004b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
	return 1;
 8004b44:	2301      	movs	r3, #1
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <_kill>:

int _kill(int pid, int sig)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b5a:	f008 fe33 	bl	800d7c4 <__errno>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2216      	movs	r2, #22
 8004b62:	601a      	str	r2, [r3, #0]
	return -1;
 8004b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <_exit>:

void _exit (int status)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b78:	f04f 31ff 	mov.w	r1, #4294967295
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff ffe7 	bl	8004b50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <_exit+0x12>

08004b86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b086      	sub	sp, #24
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e00a      	b.n	8004bae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004b98:	f3af 8000 	nop.w
 8004b9c:	4601      	mov	r1, r0
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	60ba      	str	r2, [r7, #8]
 8004ba4:	b2ca      	uxtb	r2, r1
 8004ba6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3301      	adds	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	dbf0      	blt.n	8004b98 <_read+0x12>
	}

return len;
 8004bb6:	687b      	ldr	r3, [r7, #4]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	e009      	b.n	8004be6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	60ba      	str	r2, [r7, #8]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	3301      	adds	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	dbf1      	blt.n	8004bd2 <_write+0x12>
	}
	return len;
 8004bee:	687b      	ldr	r3, [r7, #4]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_close>:

int _close(int file)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	return -1;
 8004c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c20:	605a      	str	r2, [r3, #4]
	return 0;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <_isatty>:

int _isatty(int file)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	return 1;
 8004c38:	2301      	movs	r3, #1
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
	return 0;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c68:	4a14      	ldr	r2, [pc, #80]	@ (8004cbc <_sbrk+0x5c>)
 8004c6a:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <_sbrk+0x60>)
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c74:	4b13      	ldr	r3, [pc, #76]	@ (8004cc4 <_sbrk+0x64>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c7c:	4b11      	ldr	r3, [pc, #68]	@ (8004cc4 <_sbrk+0x64>)
 8004c7e:	4a12      	ldr	r2, [pc, #72]	@ (8004cc8 <_sbrk+0x68>)
 8004c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c82:	4b10      	ldr	r3, [pc, #64]	@ (8004cc4 <_sbrk+0x64>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4413      	add	r3, r2
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d207      	bcs.n	8004ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c90:	f008 fd98 	bl	800d7c4 <__errno>
 8004c94:	4603      	mov	r3, r0
 8004c96:	220c      	movs	r2, #12
 8004c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	e009      	b.n	8004cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ca0:	4b08      	ldr	r3, [pc, #32]	@ (8004cc4 <_sbrk+0x64>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ca6:	4b07      	ldr	r3, [pc, #28]	@ (8004cc4 <_sbrk+0x64>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	4a05      	ldr	r2, [pc, #20]	@ (8004cc4 <_sbrk+0x64>)
 8004cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20050000 	.word	0x20050000
 8004cc0:	00000400 	.word	0x00000400
 8004cc4:	20000b58 	.word	0x20000b58
 8004cc8:	20004d10 	.word	0x20004d10

08004ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cd0:	4b06      	ldr	r3, [pc, #24]	@ (8004cec <SystemInit+0x20>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd6:	4a05      	ldr	r2, [pc, #20]	@ (8004cec <SystemInit+0x20>)
 8004cd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ce0:	bf00      	nop
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	e000ed00 	.word	0xe000ed00

08004cf0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cf6:	f107 0310 	add.w	r3, r7, #16
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	609a      	str	r2, [r3, #8]
 8004d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d0e:	4b20      	ldr	r3, [pc, #128]	@ (8004d90 <MX_TIM1_Init+0xa0>)
 8004d10:	4a20      	ldr	r2, [pc, #128]	@ (8004d94 <MX_TIM1_Init+0xa4>)
 8004d12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004d14:	4b1e      	ldr	r3, [pc, #120]	@ (8004d90 <MX_TIM1_Init+0xa0>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d90 <MX_TIM1_Init+0xa0>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004d20:	4b1b      	ldr	r3, [pc, #108]	@ (8004d90 <MX_TIM1_Init+0xa0>)
 8004d22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d28:	4b19      	ldr	r3, [pc, #100]	@ (8004d90 <MX_TIM1_Init+0xa0>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d2e:	4b18      	ldr	r3, [pc, #96]	@ (8004d90 <MX_TIM1_Init+0xa0>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d34:	4b16      	ldr	r3, [pc, #88]	@ (8004d90 <MX_TIM1_Init+0xa0>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d3a:	4815      	ldr	r0, [pc, #84]	@ (8004d90 <MX_TIM1_Init+0xa0>)
 8004d3c:	f005 f9c2 	bl	800a0c4 <HAL_TIM_Base_Init>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004d46:	f7fe f80f 	bl	8002d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d50:	f107 0310 	add.w	r3, r7, #16
 8004d54:	4619      	mov	r1, r3
 8004d56:	480e      	ldr	r0, [pc, #56]	@ (8004d90 <MX_TIM1_Init+0xa0>)
 8004d58:	f005 fba4 	bl	800a4a4 <HAL_TIM_ConfigClockSource>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004d62:	f7fe f801 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d72:	1d3b      	adds	r3, r7, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4806      	ldr	r0, [pc, #24]	@ (8004d90 <MX_TIM1_Init+0xa0>)
 8004d78:	f005 fdc0 	bl	800a8fc <HAL_TIMEx_MasterConfigSynchronization>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004d82:	f7fd fff1 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004d86:	bf00      	nop
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000b5c 	.word	0x20000b5c
 8004d94:	40010000 	.word	0x40010000

08004d98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d9e:	f107 0310 	add.w	r3, r7, #16
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	605a      	str	r2, [r3, #4]
 8004da8:	609a      	str	r2, [r3, #8]
 8004daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dac:	1d3b      	adds	r3, r7, #4
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004db6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e30 <MX_TIM2_Init+0x98>)
 8004db8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004dbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004e30 <MX_TIM2_Init+0x98>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e30 <MX_TIM2_Init+0x98>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004dca:	4b19      	ldr	r3, [pc, #100]	@ (8004e30 <MX_TIM2_Init+0x98>)
 8004dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dd2:	4b17      	ldr	r3, [pc, #92]	@ (8004e30 <MX_TIM2_Init+0x98>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dd8:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <MX_TIM2_Init+0x98>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004dde:	4814      	ldr	r0, [pc, #80]	@ (8004e30 <MX_TIM2_Init+0x98>)
 8004de0:	f005 f970 	bl	800a0c4 <HAL_TIM_Base_Init>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004dea:	f7fd ffbd 	bl	8002d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004df2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004df4:	f107 0310 	add.w	r3, r7, #16
 8004df8:	4619      	mov	r1, r3
 8004dfa:	480d      	ldr	r0, [pc, #52]	@ (8004e30 <MX_TIM2_Init+0x98>)
 8004dfc:	f005 fb52 	bl	800a4a4 <HAL_TIM_ConfigClockSource>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004e06:	f7fd ffaf 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4806      	ldr	r0, [pc, #24]	@ (8004e30 <MX_TIM2_Init+0x98>)
 8004e18:	f005 fd70 	bl	800a8fc <HAL_TIMEx_MasterConfigSynchronization>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004e22:	f7fd ffa1 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e26:	bf00      	nop
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000ba8 	.word	0x20000ba8

08004e34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e3a:	f107 0310 	add.w	r3, r7, #16
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e48:	1d3b      	adds	r3, r7, #4
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004e52:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <MX_TIM3_Init+0x94>)
 8004e54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ecc <MX_TIM3_Init+0x98>)
 8004e56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004e58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <MX_TIM3_Init+0x94>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <MX_TIM3_Init+0x94>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004e64:	4b18      	ldr	r3, [pc, #96]	@ (8004ec8 <MX_TIM3_Init+0x94>)
 8004e66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e6c:	4b16      	ldr	r3, [pc, #88]	@ (8004ec8 <MX_TIM3_Init+0x94>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e72:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <MX_TIM3_Init+0x94>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004e78:	4813      	ldr	r0, [pc, #76]	@ (8004ec8 <MX_TIM3_Init+0x94>)
 8004e7a:	f005 f923 	bl	800a0c4 <HAL_TIM_Base_Init>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004e84:	f7fd ff70 	bl	8002d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e8e:	f107 0310 	add.w	r3, r7, #16
 8004e92:	4619      	mov	r1, r3
 8004e94:	480c      	ldr	r0, [pc, #48]	@ (8004ec8 <MX_TIM3_Init+0x94>)
 8004e96:	f005 fb05 	bl	800a4a4 <HAL_TIM_ConfigClockSource>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004ea0:	f7fd ff62 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004eac:	1d3b      	adds	r3, r7, #4
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4805      	ldr	r0, [pc, #20]	@ (8004ec8 <MX_TIM3_Init+0x94>)
 8004eb2:	f005 fd23 	bl	800a8fc <HAL_TIMEx_MasterConfigSynchronization>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004ebc:	f7fd ff54 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ec0:	bf00      	nop
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000bf4 	.word	0x20000bf4
 8004ecc:	40000400 	.word	0x40000400

08004ed0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ed6:	f107 0310 	add.w	r3, r7, #16
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	609a      	str	r2, [r3, #8]
 8004ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ee4:	1d3b      	adds	r3, r7, #4
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	605a      	str	r2, [r3, #4]
 8004eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004eee:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <MX_TIM5_Init+0x94>)
 8004ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f68 <MX_TIM5_Init+0x98>)
 8004ef2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f64 <MX_TIM5_Init+0x94>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004efa:	4b1a      	ldr	r3, [pc, #104]	@ (8004f64 <MX_TIM5_Init+0x94>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004f00:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <MX_TIM5_Init+0x94>)
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295
 8004f06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f08:	4b16      	ldr	r3, [pc, #88]	@ (8004f64 <MX_TIM5_Init+0x94>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f0e:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <MX_TIM5_Init+0x94>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004f14:	4813      	ldr	r0, [pc, #76]	@ (8004f64 <MX_TIM5_Init+0x94>)
 8004f16:	f005 f8d5 	bl	800a0c4 <HAL_TIM_Base_Init>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004f20:	f7fd ff22 	bl	8002d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004f2a:	f107 0310 	add.w	r3, r7, #16
 8004f2e:	4619      	mov	r1, r3
 8004f30:	480c      	ldr	r0, [pc, #48]	@ (8004f64 <MX_TIM5_Init+0x94>)
 8004f32:	f005 fab7 	bl	800a4a4 <HAL_TIM_ConfigClockSource>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004f3c:	f7fd ff14 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f40:	2300      	movs	r3, #0
 8004f42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004f48:	1d3b      	adds	r3, r7, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4805      	ldr	r0, [pc, #20]	@ (8004f64 <MX_TIM5_Init+0x94>)
 8004f4e:	f005 fcd5 	bl	800a8fc <HAL_TIMEx_MasterConfigSynchronization>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004f58:	f7fd ff06 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004f5c:	bf00      	nop
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000c40 	.word	0x20000c40
 8004f68:	40000c00 	.word	0x40000c00

08004f6c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f72:	f107 0310 	add.w	r3, r7, #16
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f80:	1d3b      	adds	r3, r7, #4
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004f8a:	4b20      	ldr	r3, [pc, #128]	@ (800500c <MX_TIM8_Init+0xa0>)
 8004f8c:	4a20      	ldr	r2, [pc, #128]	@ (8005010 <MX_TIM8_Init+0xa4>)
 8004f8e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004f90:	4b1e      	ldr	r3, [pc, #120]	@ (800500c <MX_TIM8_Init+0xa0>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f96:	4b1d      	ldr	r3, [pc, #116]	@ (800500c <MX_TIM8_Init+0xa0>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800500c <MX_TIM8_Init+0xa0>)
 8004f9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fa2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fa4:	4b19      	ldr	r3, [pc, #100]	@ (800500c <MX_TIM8_Init+0xa0>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004faa:	4b18      	ldr	r3, [pc, #96]	@ (800500c <MX_TIM8_Init+0xa0>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fb0:	4b16      	ldr	r3, [pc, #88]	@ (800500c <MX_TIM8_Init+0xa0>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004fb6:	4815      	ldr	r0, [pc, #84]	@ (800500c <MX_TIM8_Init+0xa0>)
 8004fb8:	f005 f884 	bl	800a0c4 <HAL_TIM_Base_Init>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8004fc2:	f7fd fed1 	bl	8002d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004fcc:	f107 0310 	add.w	r3, r7, #16
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	480e      	ldr	r0, [pc, #56]	@ (800500c <MX_TIM8_Init+0xa0>)
 8004fd4:	f005 fa66 	bl	800a4a4 <HAL_TIM_ConfigClockSource>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8004fde:	f7fd fec3 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004fee:	1d3b      	adds	r3, r7, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4806      	ldr	r0, [pc, #24]	@ (800500c <MX_TIM8_Init+0xa0>)
 8004ff4:	f005 fc82 	bl	800a8fc <HAL_TIMEx_MasterConfigSynchronization>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004ffe:	f7fd feb3 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005002:	bf00      	nop
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000c8c 	.word	0x20000c8c
 8005010:	40010400 	.word	0x40010400

08005014 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08e      	sub	sp, #56	@ 0x38
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800501c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	605a      	str	r2, [r3, #4]
 8005026:	609a      	str	r2, [r3, #8]
 8005028:	60da      	str	r2, [r3, #12]
 800502a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3b      	ldr	r2, [pc, #236]	@ (8005120 <HAL_TIM_Base_MspInit+0x10c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10c      	bne.n	8005050 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005036:	4b3b      	ldr	r3, [pc, #236]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 8005038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503a:	4a3a      	ldr	r2, [pc, #232]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6453      	str	r3, [r2, #68]	@ 0x44
 8005042:	4b38      	ldr	r3, [pc, #224]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 8005044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	623b      	str	r3, [r7, #32]
 800504c:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800504e:	e062      	b.n	8005116 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005058:	d10c      	bne.n	8005074 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800505a:	4b32      	ldr	r3, [pc, #200]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	4a31      	ldr	r2, [pc, #196]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6413      	str	r3, [r2, #64]	@ 0x40
 8005066:	4b2f      	ldr	r3, [pc, #188]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	69fb      	ldr	r3, [r7, #28]
}
 8005072:	e050      	b.n	8005116 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2b      	ldr	r2, [pc, #172]	@ (8005128 <HAL_TIM_Base_MspInit+0x114>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d10c      	bne.n	8005098 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800507e:	4b29      	ldr	r3, [pc, #164]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	4a28      	ldr	r2, [pc, #160]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 8005084:	f043 0302 	orr.w	r3, r3, #2
 8005088:	6413      	str	r3, [r2, #64]	@ 0x40
 800508a:	4b26      	ldr	r3, [pc, #152]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	69bb      	ldr	r3, [r7, #24]
}
 8005096:	e03e      	b.n	8005116 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a23      	ldr	r2, [pc, #140]	@ (800512c <HAL_TIM_Base_MspInit+0x118>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d10c      	bne.n	80050bc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050a2:	4b20      	ldr	r3, [pc, #128]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 80050a8:	f043 0308 	orr.w	r3, r3, #8
 80050ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	697b      	ldr	r3, [r7, #20]
}
 80050ba:	e02c      	b.n	8005116 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <HAL_TIM_Base_MspInit+0x11c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d127      	bne.n	8005116 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80050c6:	4b17      	ldr	r3, [pc, #92]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	4a16      	ldr	r2, [pc, #88]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80050d2:	4b14      	ldr	r3, [pc, #80]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80050de:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	4a10      	ldr	r2, [pc, #64]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 80050e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005124 <HAL_TIM_Base_MspInit+0x110>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050f6:	2304      	movs	r3, #4
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fa:	2302      	movs	r3, #2
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005102:	2300      	movs	r3, #0
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005106:	2303      	movs	r3, #3
 8005108:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800510a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800510e:	4619      	mov	r1, r3
 8005110:	4808      	ldr	r0, [pc, #32]	@ (8005134 <HAL_TIM_Base_MspInit+0x120>)
 8005112:	f001 fd41 	bl	8006b98 <HAL_GPIO_Init>
}
 8005116:	bf00      	nop
 8005118:	3738      	adds	r7, #56	@ 0x38
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40010000 	.word	0x40010000
 8005124:	40023800 	.word	0x40023800
 8005128:	40000400 	.word	0x40000400
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40010400 	.word	0x40010400
 8005134:	40022000 	.word	0x40022000

08005138 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800513c:	4b14      	ldr	r3, [pc, #80]	@ (8005190 <MX_UART7_Init+0x58>)
 800513e:	4a15      	ldr	r2, [pc, #84]	@ (8005194 <MX_UART7_Init+0x5c>)
 8005140:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005142:	4b13      	ldr	r3, [pc, #76]	@ (8005190 <MX_UART7_Init+0x58>)
 8005144:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005148:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800514a:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <MX_UART7_Init+0x58>)
 800514c:	2200      	movs	r2, #0
 800514e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005150:	4b0f      	ldr	r3, [pc, #60]	@ (8005190 <MX_UART7_Init+0x58>)
 8005152:	2200      	movs	r2, #0
 8005154:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005156:	4b0e      	ldr	r3, [pc, #56]	@ (8005190 <MX_UART7_Init+0x58>)
 8005158:	2200      	movs	r2, #0
 800515a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800515c:	4b0c      	ldr	r3, [pc, #48]	@ (8005190 <MX_UART7_Init+0x58>)
 800515e:	220c      	movs	r2, #12
 8005160:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005162:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <MX_UART7_Init+0x58>)
 8005164:	2200      	movs	r2, #0
 8005166:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005168:	4b09      	ldr	r3, [pc, #36]	@ (8005190 <MX_UART7_Init+0x58>)
 800516a:	2200      	movs	r2, #0
 800516c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800516e:	4b08      	ldr	r3, [pc, #32]	@ (8005190 <MX_UART7_Init+0x58>)
 8005170:	2200      	movs	r2, #0
 8005172:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005174:	4b06      	ldr	r3, [pc, #24]	@ (8005190 <MX_UART7_Init+0x58>)
 8005176:	2200      	movs	r2, #0
 8005178:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800517a:	4805      	ldr	r0, [pc, #20]	@ (8005190 <MX_UART7_Init+0x58>)
 800517c:	f005 fc6a 	bl	800aa54 <HAL_UART_Init>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8005186:	f7fd fdef 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000cd8 	.word	0x20000cd8
 8005194:	40007800 	.word	0x40007800

08005198 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800519c:	4b14      	ldr	r3, [pc, #80]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 800519e:	4a15      	ldr	r2, [pc, #84]	@ (80051f4 <MX_USART1_UART_Init+0x5c>)
 80051a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80051a2:	4b13      	ldr	r3, [pc, #76]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 80051a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80051a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051aa:	4b11      	ldr	r3, [pc, #68]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80051b0:	4b0f      	ldr	r3, [pc, #60]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80051b6:	4b0e      	ldr	r3, [pc, #56]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051bc:	4b0c      	ldr	r3, [pc, #48]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 80051be:	220c      	movs	r2, #12
 80051c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051c2:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051c8:	4b09      	ldr	r3, [pc, #36]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051ce:	4b08      	ldr	r3, [pc, #32]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051d4:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80051da:	4805      	ldr	r0, [pc, #20]	@ (80051f0 <MX_USART1_UART_Init+0x58>)
 80051dc:	f005 fc3a 	bl	800aa54 <HAL_UART_Init>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80051e6:	f7fd fdbf 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80051ea:	bf00      	nop
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000d60 	.word	0x20000d60
 80051f4:	40011000 	.word	0x40011000

080051f8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80051fc:	4b14      	ldr	r3, [pc, #80]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 80051fe:	4a15      	ldr	r2, [pc, #84]	@ (8005254 <MX_USART6_UART_Init+0x5c>)
 8005200:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005202:	4b13      	ldr	r3, [pc, #76]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 8005204:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005208:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800520a:	4b11      	ldr	r3, [pc, #68]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 800520c:	2200      	movs	r2, #0
 800520e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005210:	4b0f      	ldr	r3, [pc, #60]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 8005212:	2200      	movs	r2, #0
 8005214:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005216:	4b0e      	ldr	r3, [pc, #56]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 8005218:	2200      	movs	r2, #0
 800521a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800521c:	4b0c      	ldr	r3, [pc, #48]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 800521e:	220c      	movs	r2, #12
 8005220:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005222:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 8005224:	2200      	movs	r2, #0
 8005226:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005228:	4b09      	ldr	r3, [pc, #36]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 800522a:	2200      	movs	r2, #0
 800522c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800522e:	4b08      	ldr	r3, [pc, #32]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 8005230:	2200      	movs	r2, #0
 8005232:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005234:	4b06      	ldr	r3, [pc, #24]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 8005236:	2200      	movs	r2, #0
 8005238:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800523a:	4805      	ldr	r0, [pc, #20]	@ (8005250 <MX_USART6_UART_Init+0x58>)
 800523c:	f005 fc0a 	bl	800aa54 <HAL_UART_Init>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005246:	f7fd fd8f 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000de8 	.word	0x20000de8
 8005254:	40011400 	.word	0x40011400

08005258 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b0b0      	sub	sp, #192	@ 0xc0
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005260:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	609a      	str	r2, [r3, #8]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005270:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005274:	2284      	movs	r2, #132	@ 0x84
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f008 fa54 	bl	800d726 <memset>
  if(uartHandle->Instance==UART7)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a75      	ldr	r2, [pc, #468]	@ (8005458 <HAL_UART_MspInit+0x200>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d13d      	bne.n	8005304 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800528e:	2300      	movs	r3, #0
 8005290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005294:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005298:	4618      	mov	r0, r3
 800529a:	f003 fe11 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80052a4:	f7fd fd60 	bl	8002d68 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80052a8:	4b6c      	ldr	r3, [pc, #432]	@ (800545c <HAL_UART_MspInit+0x204>)
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	4a6b      	ldr	r2, [pc, #428]	@ (800545c <HAL_UART_MspInit+0x204>)
 80052ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80052b4:	4b69      	ldr	r3, [pc, #420]	@ (800545c <HAL_UART_MspInit+0x204>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052c0:	4b66      	ldr	r3, [pc, #408]	@ (800545c <HAL_UART_MspInit+0x204>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c4:	4a65      	ldr	r2, [pc, #404]	@ (800545c <HAL_UART_MspInit+0x204>)
 80052c6:	f043 0320 	orr.w	r3, r3, #32
 80052ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80052cc:	4b63      	ldr	r3, [pc, #396]	@ (800545c <HAL_UART_MspInit+0x204>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80052d8:	23c0      	movs	r3, #192	@ 0xc0
 80052da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052de:	2302      	movs	r3, #2
 80052e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ea:	2303      	movs	r3, #3
 80052ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80052f0:	2308      	movs	r3, #8
 80052f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052f6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80052fa:	4619      	mov	r1, r3
 80052fc:	4858      	ldr	r0, [pc, #352]	@ (8005460 <HAL_UART_MspInit+0x208>)
 80052fe:	f001 fc4b 	bl	8006b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005302:	e0a4      	b.n	800544e <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a56      	ldr	r2, [pc, #344]	@ (8005464 <HAL_UART_MspInit+0x20c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d15d      	bne.n	80053ca <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800530e:	2340      	movs	r3, #64	@ 0x40
 8005310:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005312:	2300      	movs	r3, #0
 8005314:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005316:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800531a:	4618      	mov	r0, r3
 800531c:	f003 fdd0 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8005326:	f7fd fd1f 	bl	8002d68 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800532a:	4b4c      	ldr	r3, [pc, #304]	@ (800545c <HAL_UART_MspInit+0x204>)
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	4a4b      	ldr	r2, [pc, #300]	@ (800545c <HAL_UART_MspInit+0x204>)
 8005330:	f043 0310 	orr.w	r3, r3, #16
 8005334:	6453      	str	r3, [r2, #68]	@ 0x44
 8005336:	4b49      	ldr	r3, [pc, #292]	@ (800545c <HAL_UART_MspInit+0x204>)
 8005338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005342:	4b46      	ldr	r3, [pc, #280]	@ (800545c <HAL_UART_MspInit+0x204>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005346:	4a45      	ldr	r2, [pc, #276]	@ (800545c <HAL_UART_MspInit+0x204>)
 8005348:	f043 0302 	orr.w	r3, r3, #2
 800534c:	6313      	str	r3, [r2, #48]	@ 0x30
 800534e:	4b43      	ldr	r3, [pc, #268]	@ (800545c <HAL_UART_MspInit+0x204>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800535a:	4b40      	ldr	r3, [pc, #256]	@ (800545c <HAL_UART_MspInit+0x204>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535e:	4a3f      	ldr	r2, [pc, #252]	@ (800545c <HAL_UART_MspInit+0x204>)
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	6313      	str	r3, [r2, #48]	@ 0x30
 8005366:	4b3d      	ldr	r3, [pc, #244]	@ (800545c <HAL_UART_MspInit+0x204>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005372:	2380      	movs	r3, #128	@ 0x80
 8005374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005378:	2302      	movs	r3, #2
 800537a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800537e:	2300      	movs	r3, #0
 8005380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005384:	2300      	movs	r3, #0
 8005386:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800538a:	2307      	movs	r3, #7
 800538c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005390:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005394:	4619      	mov	r1, r3
 8005396:	4834      	ldr	r0, [pc, #208]	@ (8005468 <HAL_UART_MspInit+0x210>)
 8005398:	f001 fbfe 	bl	8006b98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800539c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a4:	2302      	movs	r3, #2
 80053a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053b6:	2307      	movs	r3, #7
 80053b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80053bc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80053c0:	4619      	mov	r1, r3
 80053c2:	482a      	ldr	r0, [pc, #168]	@ (800546c <HAL_UART_MspInit+0x214>)
 80053c4:	f001 fbe8 	bl	8006b98 <HAL_GPIO_Init>
}
 80053c8:	e041      	b.n	800544e <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a28      	ldr	r2, [pc, #160]	@ (8005470 <HAL_UART_MspInit+0x218>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d13c      	bne.n	800544e <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80053d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80053d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80053da:	2300      	movs	r3, #0
 80053dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053e4:	4618      	mov	r0, r3
 80053e6:	f003 fd6b 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80053f0:	f7fd fcba 	bl	8002d68 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80053f4:	4b19      	ldr	r3, [pc, #100]	@ (800545c <HAL_UART_MspInit+0x204>)
 80053f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f8:	4a18      	ldr	r2, [pc, #96]	@ (800545c <HAL_UART_MspInit+0x204>)
 80053fa:	f043 0320 	orr.w	r3, r3, #32
 80053fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8005400:	4b16      	ldr	r3, [pc, #88]	@ (800545c <HAL_UART_MspInit+0x204>)
 8005402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800540c:	4b13      	ldr	r3, [pc, #76]	@ (800545c <HAL_UART_MspInit+0x204>)
 800540e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005410:	4a12      	ldr	r2, [pc, #72]	@ (800545c <HAL_UART_MspInit+0x204>)
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	6313      	str	r3, [r2, #48]	@ 0x30
 8005418:	4b10      	ldr	r3, [pc, #64]	@ (800545c <HAL_UART_MspInit+0x204>)
 800541a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005424:	23c0      	movs	r3, #192	@ 0xc0
 8005426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542a:	2302      	movs	r3, #2
 800542c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005430:	2300      	movs	r3, #0
 8005432:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005436:	2303      	movs	r3, #3
 8005438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800543c:	2308      	movs	r3, #8
 800543e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005442:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005446:	4619      	mov	r1, r3
 8005448:	480a      	ldr	r0, [pc, #40]	@ (8005474 <HAL_UART_MspInit+0x21c>)
 800544a:	f001 fba5 	bl	8006b98 <HAL_GPIO_Init>
}
 800544e:	bf00      	nop
 8005450:	37c0      	adds	r7, #192	@ 0xc0
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40007800 	.word	0x40007800
 800545c:	40023800 	.word	0x40023800
 8005460:	40021400 	.word	0x40021400
 8005464:	40011000 	.word	0x40011000
 8005468:	40020400 	.word	0x40020400
 800546c:	40020000 	.word	0x40020000
 8005470:	40011400 	.word	0x40011400
 8005474:	40020800 	.word	0x40020800

08005478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005478:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80054b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800547c:	480d      	ldr	r0, [pc, #52]	@ (80054b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800547e:	490e      	ldr	r1, [pc, #56]	@ (80054b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005480:	4a0e      	ldr	r2, [pc, #56]	@ (80054bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005484:	e002      	b.n	800548c <LoopCopyDataInit>

08005486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800548a:	3304      	adds	r3, #4

0800548c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800548c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800548e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005490:	d3f9      	bcc.n	8005486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005492:	4a0b      	ldr	r2, [pc, #44]	@ (80054c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005494:	4c0b      	ldr	r4, [pc, #44]	@ (80054c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005498:	e001      	b.n	800549e <LoopFillZerobss>

0800549a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800549a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800549c:	3204      	adds	r2, #4

0800549e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800549e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054a0:	d3fb      	bcc.n	800549a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80054a2:	f7ff fc13 	bl	8004ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054a6:	f008 f993 	bl	800d7d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054aa:	f7fd fb5f 	bl	8002b6c <main>
  bx  lr    
 80054ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80054b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80054b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054b8:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80054bc:	0801cd6c 	.word	0x0801cd6c
  ldr r2, =_sbss
 80054c0:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80054c4:	20004d0c 	.word	0x20004d0c

080054c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054c8:	e7fe      	b.n	80054c8 <ADC_IRQHandler>

080054ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054ce:	2003      	movs	r0, #3
 80054d0:	f000 fcf3 	bl	8005eba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054d4:	200f      	movs	r0, #15
 80054d6:	f7ff fa75 	bl	80049c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054da:	f7ff fa4b 	bl	8004974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054e8:	4b06      	ldr	r3, [pc, #24]	@ (8005504 <HAL_IncTick+0x20>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <HAL_IncTick+0x24>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4413      	add	r3, r2
 80054f4:	4a04      	ldr	r2, [pc, #16]	@ (8005508 <HAL_IncTick+0x24>)
 80054f6:	6013      	str	r3, [r2, #0]
}
 80054f8:	bf00      	nop
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000050 	.word	0x20000050
 8005508:	20000e70 	.word	0x20000e70

0800550c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return uwTick;
 8005510:	4b03      	ldr	r3, [pc, #12]	@ (8005520 <HAL_GetTick+0x14>)
 8005512:	681b      	ldr	r3, [r3, #0]
}
 8005514:	4618      	mov	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000e70 	.word	0x20000e70

08005524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800552c:	f7ff ffee 	bl	800550c <HAL_GetTick>
 8005530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d005      	beq.n	800554a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800553e:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <HAL_Delay+0x44>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800554a:	bf00      	nop
 800554c:	f7ff ffde 	bl	800550c <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	429a      	cmp	r2, r3
 800555a:	d8f7      	bhi.n	800554c <HAL_Delay+0x28>
  {
  }
}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000050 	.word	0x20000050

0800556c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e031      	b.n	80055e6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fb f8ac 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d116      	bne.n	80055d8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055ae:	4b10      	ldr	r3, [pc, #64]	@ (80055f0 <HAL_ADC_Init+0x84>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	f043 0202 	orr.w	r2, r3, #2
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fad6 	bl	8005b6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80055d6:	e001      	b.n	80055dc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	ffffeefd 	.word	0xffffeefd

080055f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_ADC_Start+0x1a>
 800560a:	2302      	movs	r3, #2
 800560c:	e0ad      	b.n	800576a <HAL_ADC_Start+0x176>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b01      	cmp	r3, #1
 8005622:	d018      	beq.n	8005656 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005634:	4b50      	ldr	r3, [pc, #320]	@ (8005778 <HAL_ADC_Start+0x184>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a50      	ldr	r2, [pc, #320]	@ (800577c <HAL_ADC_Start+0x188>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	0c9a      	lsrs	r2, r3, #18
 8005640:	4613      	mov	r3, r2
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	4413      	add	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005648:	e002      	b.n	8005650 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3b01      	subs	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f9      	bne.n	800564a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b01      	cmp	r3, #1
 8005662:	d175      	bne.n	8005750 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005668:	4b45      	ldr	r3, [pc, #276]	@ (8005780 <HAL_ADC_Start+0x18c>)
 800566a:	4013      	ands	r3, r2
 800566c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800568a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569e:	d106      	bne.n	80056ae <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a4:	f023 0206 	bic.w	r2, r3, #6
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80056ac:	e002      	b.n	80056b4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80056c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80056c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005784 <HAL_ADC_Start+0x190>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10f      	bne.n	80056f2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d143      	bne.n	8005768 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	e03a      	b.n	8005768 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a24      	ldr	r2, [pc, #144]	@ (8005788 <HAL_ADC_Start+0x194>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d10e      	bne.n	800571a <HAL_ADC_Start+0x126>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005718:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800571a:	4b1a      	ldr	r3, [pc, #104]	@ (8005784 <HAL_ADC_Start+0x190>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b00      	cmp	r3, #0
 8005724:	d120      	bne.n	8005768 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a18      	ldr	r2, [pc, #96]	@ (800578c <HAL_ADC_Start+0x198>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d11b      	bne.n	8005768 <HAL_ADC_Start+0x174>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d114      	bne.n	8005768 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800574c:	609a      	str	r2, [r3, #8]
 800574e:	e00b      	b.n	8005768 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	f043 0210 	orr.w	r2, r3, #16
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005760:	f043 0201 	orr.w	r2, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	20000048 	.word	0x20000048
 800577c:	431bde83 	.word	0x431bde83
 8005780:	fffff8fe 	.word	0xfffff8fe
 8005784:	40012300 	.word	0x40012300
 8005788:	40012000 	.word	0x40012000
 800578c:	40012200 	.word	0x40012200

08005790 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ac:	d113      	bne.n	80057d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80057b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057bc:	d10b      	bne.n	80057d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c2:	f043 0220 	orr.w	r2, r3, #32
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e063      	b.n	800589e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80057d6:	f7ff fe99 	bl	800550c <HAL_GetTick>
 80057da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80057dc:	e021      	b.n	8005822 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e4:	d01d      	beq.n	8005822 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <HAL_ADC_PollForConversion+0x6c>
 80057ec:	f7ff fe8e 	bl	800550c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d212      	bcs.n	8005822 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b02      	cmp	r3, #2
 8005808:	d00b      	beq.n	8005822 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	f043 0204 	orr.w	r2, r3, #4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e03d      	b.n	800589e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	d1d6      	bne.n	80057de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0212 	mvn.w	r2, #18
 8005838:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d123      	bne.n	800589c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005858:	2b00      	cmp	r3, #0
 800585a:	d11f      	bne.n	800589c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005862:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005874:	2b00      	cmp	r3, #0
 8005876:	d111      	bne.n	800589c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d105      	bne.n	800589c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005894:	f043 0201 	orr.w	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x1c>
 80058d8:	2302      	movs	r3, #2
 80058da:	e136      	b.n	8005b4a <HAL_ADC_ConfigChannel+0x28a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b09      	cmp	r3, #9
 80058ea:	d93a      	bls.n	8005962 <HAL_ADC_ConfigChannel+0xa2>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f4:	d035      	beq.n	8005962 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68d9      	ldr	r1, [r3, #12]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	461a      	mov	r2, r3
 8005904:	4613      	mov	r3, r2
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	4413      	add	r3, r2
 800590a:	3b1e      	subs	r3, #30
 800590c:	2207      	movs	r2, #7
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43da      	mvns	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	400a      	ands	r2, r1
 800591a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a8d      	ldr	r2, [pc, #564]	@ (8005b58 <HAL_ADC_ConfigChannel+0x298>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d10a      	bne.n	800593c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68d9      	ldr	r1, [r3, #12]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	061a      	lsls	r2, r3, #24
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800593a:	e035      	b.n	80059a8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68d9      	ldr	r1, [r3, #12]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	4618      	mov	r0, r3
 800594e:	4603      	mov	r3, r0
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4403      	add	r3, r0
 8005954:	3b1e      	subs	r3, #30
 8005956:	409a      	lsls	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005960:	e022      	b.n	80059a8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6919      	ldr	r1, [r3, #16]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	4613      	mov	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	4413      	add	r3, r2
 8005976:	2207      	movs	r2, #7
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43da      	mvns	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	400a      	ands	r2, r1
 8005984:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6919      	ldr	r1, [r3, #16]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	4618      	mov	r0, r3
 8005998:	4603      	mov	r3, r0
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4403      	add	r3, r0
 800599e:	409a      	lsls	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b06      	cmp	r3, #6
 80059ae:	d824      	bhi.n	80059fa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	3b05      	subs	r3, #5
 80059c2:	221f      	movs	r2, #31
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43da      	mvns	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	400a      	ands	r2, r1
 80059d0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4618      	mov	r0, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	3b05      	subs	r3, #5
 80059ec:	fa00 f203 	lsl.w	r2, r0, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80059f8:	e04c      	b.n	8005a94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b0c      	cmp	r3, #12
 8005a00:	d824      	bhi.n	8005a4c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	3b23      	subs	r3, #35	@ 0x23
 8005a14:	221f      	movs	r2, #31
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43da      	mvns	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	400a      	ands	r2, r1
 8005a22:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	4618      	mov	r0, r3
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	3b23      	subs	r3, #35	@ 0x23
 8005a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a4a:	e023      	b.n	8005a94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3b41      	subs	r3, #65	@ 0x41
 8005a5e:	221f      	movs	r2, #31
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	43da      	mvns	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	3b41      	subs	r3, #65	@ 0x41
 8005a88:	fa00 f203 	lsl.w	r2, r0, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a30      	ldr	r2, [pc, #192]	@ (8005b5c <HAL_ADC_ConfigChannel+0x29c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d10a      	bne.n	8005ab4 <HAL_ADC_ConfigChannel+0x1f4>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aa6:	d105      	bne.n	8005ab4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b60 <HAL_ADC_ConfigChannel+0x2a0>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a2c      	ldr	r2, [pc, #176]	@ (8005b60 <HAL_ADC_ConfigChannel+0x2a0>)
 8005aae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005ab2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a28      	ldr	r2, [pc, #160]	@ (8005b5c <HAL_ADC_ConfigChannel+0x29c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d10f      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x21e>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b12      	cmp	r3, #18
 8005ac4:	d10b      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005ac6:	4b26      	ldr	r3, [pc, #152]	@ (8005b60 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4a25      	ldr	r2, [pc, #148]	@ (8005b60 <HAL_ADC_ConfigChannel+0x2a0>)
 8005acc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005ad0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005ad2:	4b23      	ldr	r3, [pc, #140]	@ (8005b60 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	4a22      	ldr	r2, [pc, #136]	@ (8005b60 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ad8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005adc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b5c <HAL_ADC_ConfigChannel+0x29c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d12b      	bne.n	8005b40 <HAL_ADC_ConfigChannel+0x280>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1a      	ldr	r2, [pc, #104]	@ (8005b58 <HAL_ADC_ConfigChannel+0x298>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <HAL_ADC_ConfigChannel+0x23a>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b11      	cmp	r3, #17
 8005af8:	d122      	bne.n	8005b40 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005afa:	4b19      	ldr	r3, [pc, #100]	@ (8005b60 <HAL_ADC_ConfigChannel+0x2a0>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4a18      	ldr	r2, [pc, #96]	@ (8005b60 <HAL_ADC_ConfigChannel+0x2a0>)
 8005b00:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005b04:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005b06:	4b16      	ldr	r3, [pc, #88]	@ (8005b60 <HAL_ADC_ConfigChannel+0x2a0>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	4a15      	ldr	r2, [pc, #84]	@ (8005b60 <HAL_ADC_ConfigChannel+0x2a0>)
 8005b0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b10:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a10      	ldr	r2, [pc, #64]	@ (8005b58 <HAL_ADC_ConfigChannel+0x298>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d111      	bne.n	8005b40 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005b1c:	4b11      	ldr	r3, [pc, #68]	@ (8005b64 <HAL_ADC_ConfigChannel+0x2a4>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a11      	ldr	r2, [pc, #68]	@ (8005b68 <HAL_ADC_ConfigChannel+0x2a8>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	0c9a      	lsrs	r2, r3, #18
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005b32:	e002      	b.n	8005b3a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f9      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	10000012 	.word	0x10000012
 8005b5c:	40012000 	.word	0x40012000
 8005b60:	40012300 	.word	0x40012300
 8005b64:	20000048 	.word	0x20000048
 8005b68:	431bde83 	.word	0x431bde83

08005b6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005b74:	4b78      	ldr	r3, [pc, #480]	@ (8005d58 <ADC_Init+0x1ec>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4a77      	ldr	r2, [pc, #476]	@ (8005d58 <ADC_Init+0x1ec>)
 8005b7a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005b7e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005b80:	4b75      	ldr	r3, [pc, #468]	@ (8005d58 <ADC_Init+0x1ec>)
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	4973      	ldr	r1, [pc, #460]	@ (8005d58 <ADC_Init+0x1ec>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6859      	ldr	r1, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	021a      	lsls	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6859      	ldr	r1, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6899      	ldr	r1, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfa:	4a58      	ldr	r2, [pc, #352]	@ (8005d5c <ADC_Init+0x1f0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d022      	beq.n	8005c46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6899      	ldr	r1, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005c30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6899      	ldr	r1, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	e00f      	b.n	8005c66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005c64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0202 	bic.w	r2, r2, #2
 8005c74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6899      	ldr	r1, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	005a      	lsls	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01b      	beq.n	8005ccc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ca2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005cb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6859      	ldr	r1, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	035a      	lsls	r2, r3, #13
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
 8005cca:	e007      	b.n	8005cdc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005cea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	051a      	lsls	r2, r3, #20
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6899      	ldr	r1, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d1e:	025a      	lsls	r2, r3, #9
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6899      	ldr	r1, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	029a      	lsls	r2, r3, #10
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	40012300 	.word	0x40012300
 8005d5c:	0f000001 	.word	0x0f000001

08005d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d70:	4b0b      	ldr	r3, [pc, #44]	@ (8005da0 <__NVIC_SetPriorityGrouping+0x40>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d88:	4b06      	ldr	r3, [pc, #24]	@ (8005da4 <__NVIC_SetPriorityGrouping+0x44>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d8e:	4a04      	ldr	r2, [pc, #16]	@ (8005da0 <__NVIC_SetPriorityGrouping+0x40>)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	60d3      	str	r3, [r2, #12]
}
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	e000ed00 	.word	0xe000ed00
 8005da4:	05fa0000 	.word	0x05fa0000

08005da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dac:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	0a1b      	lsrs	r3, r3, #8
 8005db2:	f003 0307 	and.w	r3, r3, #7
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	e000ed00 	.word	0xe000ed00

08005dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	db0b      	blt.n	8005dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	f003 021f 	and.w	r2, r3, #31
 8005ddc:	4907      	ldr	r1, [pc, #28]	@ (8005dfc <__NVIC_EnableIRQ+0x38>)
 8005dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	2001      	movs	r0, #1
 8005de6:	fa00 f202 	lsl.w	r2, r0, r2
 8005dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	e000e100 	.word	0xe000e100

08005e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	6039      	str	r1, [r7, #0]
 8005e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	db0a      	blt.n	8005e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	490c      	ldr	r1, [pc, #48]	@ (8005e4c <__NVIC_SetPriority+0x4c>)
 8005e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1e:	0112      	lsls	r2, r2, #4
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	440b      	add	r3, r1
 8005e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e28:	e00a      	b.n	8005e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	4908      	ldr	r1, [pc, #32]	@ (8005e50 <__NVIC_SetPriority+0x50>)
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	3b04      	subs	r3, #4
 8005e38:	0112      	lsls	r2, r2, #4
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	761a      	strb	r2, [r3, #24]
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	e000e100 	.word	0xe000e100
 8005e50:	e000ed00 	.word	0xe000ed00

08005e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b089      	sub	sp, #36	@ 0x24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f1c3 0307 	rsb	r3, r3, #7
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	bf28      	it	cs
 8005e72:	2304      	movcs	r3, #4
 8005e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	2b06      	cmp	r3, #6
 8005e7c:	d902      	bls.n	8005e84 <NVIC_EncodePriority+0x30>
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	3b03      	subs	r3, #3
 8005e82:	e000      	b.n	8005e86 <NVIC_EncodePriority+0x32>
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e88:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	43da      	mvns	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	401a      	ands	r2, r3
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea6:	43d9      	mvns	r1, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eac:	4313      	orrs	r3, r2
         );
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3724      	adds	r7, #36	@ 0x24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff ff4c 	bl	8005d60 <__NVIC_SetPriorityGrouping>
}
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ee2:	f7ff ff61 	bl	8005da8 <__NVIC_GetPriorityGrouping>
 8005ee6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	6978      	ldr	r0, [r7, #20]
 8005eee:	f7ff ffb1 	bl	8005e54 <NVIC_EncodePriority>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff ff80 	bl	8005e00 <__NVIC_SetPriority>
}
 8005f00:	bf00      	nop
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff ff54 	bl	8005dc4 <__NVIC_EnableIRQ>
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e014      	b.n	8005f60 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	791b      	ldrb	r3, [r3, #4]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fa fc66 	bl	8000818 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7e:	d120      	bne.n	8005fc2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f8e:	d118      	bne.n	8005fc2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2204      	movs	r2, #4
 8005f94:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f043 0201 	orr.w	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005faa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005fba:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f82d 	bl	800601c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fd0:	d120      	bne.n	8006014 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe0:	d118      	bne.n	8006014 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f043 0202 	orr.w	r2, r3, #2
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005ffc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800600c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f85d 	bl	80060ce <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	795b      	ldrb	r3, [r3, #5]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_DAC_ConfigChannel+0x18>
 8006044:	2302      	movs	r3, #2
 8006046:	e03c      	b.n	80060c2 <HAL_DAC_ConfigChannel+0x92>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2202      	movs	r2, #2
 8006052:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43db      	mvns	r3, r3
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4013      	ands	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6819      	ldr	r1, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	22c0      	movs	r2, #192	@ 0xc0
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43da      	mvns	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	400a      	ands	r2, r1
 80060b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060f0:	f7ff fa0c 	bl	800550c <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e099      	b.n	8006234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006120:	e00f      	b.n	8006142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006122:	f7ff f9f3 	bl	800550c <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b05      	cmp	r3, #5
 800612e:	d908      	bls.n	8006142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2220      	movs	r2, #32
 8006134:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2203      	movs	r2, #3
 800613a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e078      	b.n	8006234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e8      	bne.n	8006122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4b38      	ldr	r3, [pc, #224]	@ (800623c <HAL_DMA_Init+0x158>)
 800615c:	4013      	ands	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800616e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800617a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006198:	2b04      	cmp	r3, #4
 800619a:	d107      	bne.n	80061ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a4:	4313      	orrs	r3, r2
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0307 	bic.w	r3, r3, #7
 80061c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d117      	bne.n	8006206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00e      	beq.n	8006206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f8bd 	bl	8006368 <DMA_CheckFifoParam>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2240      	movs	r2, #64	@ 0x40
 80061f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006202:	2301      	movs	r3, #1
 8006204:	e016      	b.n	8006234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f874 	bl	80062fc <DMA_CalcBaseAndBitshift>
 8006214:	4603      	mov	r3, r0
 8006216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800621c:	223f      	movs	r2, #63	@ 0x3f
 800621e:	409a      	lsls	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	f010803f 	.word	0xf010803f

08006240 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e050      	b.n	80062f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d101      	bne.n	8006262 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800625e:	2302      	movs	r3, #2
 8006260:	e048      	b.n	80062f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0201 	bic.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2200      	movs	r2, #0
 8006280:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2200      	movs	r2, #0
 8006288:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2200      	movs	r2, #0
 8006290:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2200      	movs	r2, #0
 8006298:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2221      	movs	r2, #33	@ 0x21
 80062a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f82a 	bl	80062fc <DMA_CalcBaseAndBitshift>
 80062a8:	4603      	mov	r3, r0
 80062aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b0:	223f      	movs	r2, #63	@ 0x3f
 80062b2:	409a      	lsls	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	3b10      	subs	r3, #16
 800630c:	4a13      	ldr	r2, [pc, #76]	@ (800635c <DMA_CalcBaseAndBitshift+0x60>)
 800630e:	fba2 2303 	umull	r2, r3, r2, r3
 8006312:	091b      	lsrs	r3, r3, #4
 8006314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006316:	4a12      	ldr	r2, [pc, #72]	@ (8006360 <DMA_CalcBaseAndBitshift+0x64>)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b03      	cmp	r3, #3
 8006328:	d908      	bls.n	800633c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	4b0c      	ldr	r3, [pc, #48]	@ (8006364 <DMA_CalcBaseAndBitshift+0x68>)
 8006332:	4013      	ands	r3, r2
 8006334:	1d1a      	adds	r2, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	659a      	str	r2, [r3, #88]	@ 0x58
 800633a:	e006      	b.n	800634a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	4b08      	ldr	r3, [pc, #32]	@ (8006364 <DMA_CalcBaseAndBitshift+0x68>)
 8006344:	4013      	ands	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	aaaaaaab 	.word	0xaaaaaaab
 8006360:	0801cc74 	.word	0x0801cc74
 8006364:	fffffc00 	.word	0xfffffc00

08006368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d11f      	bne.n	80063c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b03      	cmp	r3, #3
 8006386:	d856      	bhi.n	8006436 <DMA_CheckFifoParam+0xce>
 8006388:	a201      	add	r2, pc, #4	@ (adr r2, 8006390 <DMA_CheckFifoParam+0x28>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063b3 	.word	0x080063b3
 8006398:	080063a1 	.word	0x080063a1
 800639c:	08006437 	.word	0x08006437
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d046      	beq.n	800643a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063b0:	e043      	b.n	800643a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063ba:	d140      	bne.n	800643e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063c0:	e03d      	b.n	800643e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ca:	d121      	bne.n	8006410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d837      	bhi.n	8006442 <DMA_CheckFifoParam+0xda>
 80063d2:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <DMA_CheckFifoParam+0x70>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	080063e9 	.word	0x080063e9
 80063dc:	080063ef 	.word	0x080063ef
 80063e0:	080063e9 	.word	0x080063e9
 80063e4:	08006401 	.word	0x08006401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
      break;
 80063ec:	e030      	b.n	8006450 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d025      	beq.n	8006446 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063fe:	e022      	b.n	8006446 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006408:	d11f      	bne.n	800644a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800640e:	e01c      	b.n	800644a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d903      	bls.n	800641e <DMA_CheckFifoParam+0xb6>
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b03      	cmp	r3, #3
 800641a:	d003      	beq.n	8006424 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800641c:	e018      	b.n	8006450 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	73fb      	strb	r3, [r7, #15]
      break;
 8006422:	e015      	b.n	8006450 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00e      	beq.n	800644e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
      break;
 8006434:	e00b      	b.n	800644e <DMA_CheckFifoParam+0xe6>
      break;
 8006436:	bf00      	nop
 8006438:	e00a      	b.n	8006450 <DMA_CheckFifoParam+0xe8>
      break;
 800643a:	bf00      	nop
 800643c:	e008      	b.n	8006450 <DMA_CheckFifoParam+0xe8>
      break;
 800643e:	bf00      	nop
 8006440:	e006      	b.n	8006450 <DMA_CheckFifoParam+0xe8>
      break;
 8006442:	bf00      	nop
 8006444:	e004      	b.n	8006450 <DMA_CheckFifoParam+0xe8>
      break;
 8006446:	bf00      	nop
 8006448:	e002      	b.n	8006450 <DMA_CheckFifoParam+0xe8>
      break;   
 800644a:	bf00      	nop
 800644c:	e000      	b.n	8006450 <DMA_CheckFifoParam+0xe8>
      break;
 800644e:	bf00      	nop
    }
  } 
  
  return status; 
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop

08006460 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e039      	b.n	80064e6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fa fa40 	bl	800090c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b0:	f023 0107 	bic.w	r1, r3, #7
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064c6:	4b0a      	ldr	r3, [pc, #40]	@ (80064f0 <HAL_DMA2D_Init+0x90>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	68d1      	ldr	r1, [r2, #12]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	430b      	orrs	r3, r1
 80064d4:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	ffffc000 	.word	0xffffc000

080064f4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_DMA2D_Start+0x1c>
 800650c:	2302      	movs	r3, #2
 800650e:	e018      	b.n	8006542 <HAL_DMA2D_Start+0x4e>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fa98 	bl	8006a60 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b086      	sub	sp, #24
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d056      	beq.n	8006614 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006566:	f7fe ffd1 	bl	800550c <HAL_GetTick>
 800656a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800656c:	e04b      	b.n	8006606 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800657c:	2b00      	cmp	r3, #0
 800657e:	d023      	beq.n	80065c8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658e:	f043 0202 	orr.w	r2, r3, #2
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a4:	f043 0201 	orr.w	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2221      	movs	r2, #33	@ 0x21
 80065b2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2204      	movs	r2, #4
 80065b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0a5      	b.n	8006714 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d01a      	beq.n	8006606 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065d0:	f7fe ff9c 	bl	800550c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d302      	bcc.n	80065e6 <HAL_DMA2D_PollForTransfer+0x9c>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10f      	bne.n	8006606 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2203      	movs	r2, #3
 80065f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e086      	b.n	8006714 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0ac      	beq.n	800656e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d061      	beq.n	80066fa <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006636:	f7fe ff69 	bl	800550c <HAL_GetTick>
 800663a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800663c:	e056      	b.n	80066ec <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02e      	beq.n	80066ae <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665e:	f043 0204 	orr.w	r2, r3, #4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006674:	f043 0202 	orr.w	r2, r3, #2
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668a:	f043 0201 	orr.w	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2229      	movs	r2, #41	@ 0x29
 8006698:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2204      	movs	r2, #4
 800669e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e032      	b.n	8006714 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d01a      	beq.n	80066ec <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066b6:	f7fe ff29 	bl	800550c <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <HAL_DMA2D_PollForTransfer+0x182>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10f      	bne.n	80066ec <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d0:	f043 0220 	orr.w	r2, r3, #32
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2203      	movs	r2, #3
 80066dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e013      	b.n	8006714 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0a1      	beq.n	800663e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2212      	movs	r2, #18
 8006700:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d026      	beq.n	800678c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d021      	beq.n	800678c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006756:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800675c:	f043 0201 	orr.w	r2, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2201      	movs	r2, #1
 800676a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2204      	movs	r2, #4
 8006770:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d026      	beq.n	80067e4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d021      	beq.n	80067e4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067ae:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2220      	movs	r2, #32
 80067b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067bc:	f043 0202 	orr.w	r2, r3, #2
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2204      	movs	r2, #4
 80067c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d026      	beq.n	800683c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d021      	beq.n	800683c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006806:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2208      	movs	r2, #8
 800680e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006814:	f043 0204 	orr.w	r2, r3, #4
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2204      	movs	r2, #4
 8006820:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d013      	beq.n	800686e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00e      	beq.n	800686e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800685e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2204      	movs	r2, #4
 8006866:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f853 	bl	8006914 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d024      	beq.n	80068c2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01f      	beq.n	80068c2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006890:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2202      	movs	r2, #2
 8006898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01f      	beq.n	800690c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d01a      	beq.n	800690c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068e4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2210      	movs	r2, #16
 80068ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f80e 	bl	8006928 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_DMA2D_ConfigLayer+0x20>
 8006958:	2302      	movs	r3, #2
 800695a:	e079      	b.n	8006a50 <HAL_DMA2D_ConfigLayer+0x114>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	3318      	adds	r3, #24
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4413      	add	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	041b      	lsls	r3, r3, #16
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006986:	4b35      	ldr	r3, [pc, #212]	@ (8006a5c <HAL_DMA2D_ConfigLayer+0x120>)
 8006988:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b0a      	cmp	r3, #10
 8006990:	d003      	beq.n	800699a <HAL_DMA2D_ConfigLayer+0x5e>
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b09      	cmp	r3, #9
 8006998:	d107      	bne.n	80069aa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e005      	b.n	80069b6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	061b      	lsls	r3, r3, #24
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d120      	bne.n	80069fe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	43db      	mvns	r3, r3
 80069c6:	ea02 0103 	and.w	r1, r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	6812      	ldr	r2, [r2, #0]
 80069dc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b0a      	cmp	r3, #10
 80069e4:	d003      	beq.n	80069ee <HAL_DMA2D_ConfigLayer+0xb2>
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b09      	cmp	r3, #9
 80069ec:	d127      	bne.n	8006a3e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80069fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80069fc:	e01f      	b.n	8006a3e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69da      	ldr	r2, [r3, #28]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	43db      	mvns	r3, r3
 8006a08:	ea02 0103 	and.w	r1, r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b0a      	cmp	r3, #10
 8006a26:	d003      	beq.n	8006a30 <HAL_DMA2D_ConfigLayer+0xf4>
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b09      	cmp	r3, #9
 8006a2e:	d106      	bne.n	8006a3e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006a3c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	ff03000f 	.word	0xff03000f

08006a60 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b08b      	sub	sp, #44	@ 0x2c
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a74:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	041a      	lsls	r2, r3, #16
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a98:	d174      	bne.n	8006b84 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006aa0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006aa8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ab0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d108      	bne.n	8006ad2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad0:	e053      	b.n	8006b7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d106      	bne.n	8006ae8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ae6:	e048      	b.n	8006b7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d111      	bne.n	8006b14 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	0cdb      	lsrs	r3, r3, #19
 8006af4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	0a9b      	lsrs	r3, r3, #10
 8006afa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	08db      	lsrs	r3, r3, #3
 8006b00:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	02db      	lsls	r3, r3, #11
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b12:	e032      	b.n	8006b7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d117      	bne.n	8006b4c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	0fdb      	lsrs	r3, r3, #31
 8006b20:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	0cdb      	lsrs	r3, r3, #19
 8006b26:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	0adb      	lsrs	r3, r3, #11
 8006b2c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	08db      	lsrs	r3, r3, #3
 8006b32:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	029b      	lsls	r3, r3, #10
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	03db      	lsls	r3, r3, #15
 8006b42:	4313      	orrs	r3, r2
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b4a:	e016      	b.n	8006b7a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	0f1b      	lsrs	r3, r3, #28
 8006b50:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	0d1b      	lsrs	r3, r3, #20
 8006b56:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	0b1b      	lsrs	r3, r3, #12
 8006b5c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	091b      	lsrs	r3, r3, #4
 8006b62:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	011a      	lsls	r2, r3, #4
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	031b      	lsls	r3, r3, #12
 8006b72:	4313      	orrs	r3, r2
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b80:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006b82:	e003      	b.n	8006b8c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	60da      	str	r2, [r3, #12]
}
 8006b8c:	bf00      	nop
 8006b8e:	372c      	adds	r7, #44	@ 0x2c
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b089      	sub	sp, #36	@ 0x24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006baa:	2300      	movs	r3, #0
 8006bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e175      	b.n	8006ea4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006bb8:	2201      	movs	r2, #1
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	f040 8164 	bne.w	8006e9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d005      	beq.n	8006bee <HAL_GPIO_Init+0x56>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d130      	bne.n	8006c50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	4013      	ands	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c24:	2201      	movs	r2, #1
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	4013      	ands	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	f003 0201 	and.w	r2, r3, #1
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	fa02 f303 	lsl.w	r3, r2, r3
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f003 0303 	and.w	r3, r3, #3
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d017      	beq.n	8006c8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	2203      	movs	r2, #3
 8006c68:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	4013      	ands	r3, r2
 8006c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d123      	bne.n	8006ce0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	08da      	lsrs	r2, r3, #3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3208      	adds	r2, #8
 8006ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	220f      	movs	r2, #15
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	43db      	mvns	r3, r3
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	08da      	lsrs	r2, r3, #3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3208      	adds	r2, #8
 8006cda:	69b9      	ldr	r1, [r7, #24]
 8006cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	2203      	movs	r2, #3
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 0203 	and.w	r2, r3, #3
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80be 	beq.w	8006e9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d22:	4b66      	ldr	r3, [pc, #408]	@ (8006ebc <HAL_GPIO_Init+0x324>)
 8006d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d26:	4a65      	ldr	r2, [pc, #404]	@ (8006ebc <HAL_GPIO_Init+0x324>)
 8006d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d2e:	4b63      	ldr	r3, [pc, #396]	@ (8006ebc <HAL_GPIO_Init+0x324>)
 8006d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006d3a:	4a61      	ldr	r2, [pc, #388]	@ (8006ec0 <HAL_GPIO_Init+0x328>)
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	089b      	lsrs	r3, r3, #2
 8006d40:	3302      	adds	r3, #2
 8006d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	220f      	movs	r2, #15
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	43db      	mvns	r3, r3
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a58      	ldr	r2, [pc, #352]	@ (8006ec4 <HAL_GPIO_Init+0x32c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d037      	beq.n	8006dd6 <HAL_GPIO_Init+0x23e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a57      	ldr	r2, [pc, #348]	@ (8006ec8 <HAL_GPIO_Init+0x330>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d031      	beq.n	8006dd2 <HAL_GPIO_Init+0x23a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a56      	ldr	r2, [pc, #344]	@ (8006ecc <HAL_GPIO_Init+0x334>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d02b      	beq.n	8006dce <HAL_GPIO_Init+0x236>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a55      	ldr	r2, [pc, #340]	@ (8006ed0 <HAL_GPIO_Init+0x338>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d025      	beq.n	8006dca <HAL_GPIO_Init+0x232>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a54      	ldr	r2, [pc, #336]	@ (8006ed4 <HAL_GPIO_Init+0x33c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d01f      	beq.n	8006dc6 <HAL_GPIO_Init+0x22e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a53      	ldr	r2, [pc, #332]	@ (8006ed8 <HAL_GPIO_Init+0x340>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d019      	beq.n	8006dc2 <HAL_GPIO_Init+0x22a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a52      	ldr	r2, [pc, #328]	@ (8006edc <HAL_GPIO_Init+0x344>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d013      	beq.n	8006dbe <HAL_GPIO_Init+0x226>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a51      	ldr	r2, [pc, #324]	@ (8006ee0 <HAL_GPIO_Init+0x348>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00d      	beq.n	8006dba <HAL_GPIO_Init+0x222>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a50      	ldr	r2, [pc, #320]	@ (8006ee4 <HAL_GPIO_Init+0x34c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d007      	beq.n	8006db6 <HAL_GPIO_Init+0x21e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a4f      	ldr	r2, [pc, #316]	@ (8006ee8 <HAL_GPIO_Init+0x350>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d101      	bne.n	8006db2 <HAL_GPIO_Init+0x21a>
 8006dae:	2309      	movs	r3, #9
 8006db0:	e012      	b.n	8006dd8 <HAL_GPIO_Init+0x240>
 8006db2:	230a      	movs	r3, #10
 8006db4:	e010      	b.n	8006dd8 <HAL_GPIO_Init+0x240>
 8006db6:	2308      	movs	r3, #8
 8006db8:	e00e      	b.n	8006dd8 <HAL_GPIO_Init+0x240>
 8006dba:	2307      	movs	r3, #7
 8006dbc:	e00c      	b.n	8006dd8 <HAL_GPIO_Init+0x240>
 8006dbe:	2306      	movs	r3, #6
 8006dc0:	e00a      	b.n	8006dd8 <HAL_GPIO_Init+0x240>
 8006dc2:	2305      	movs	r3, #5
 8006dc4:	e008      	b.n	8006dd8 <HAL_GPIO_Init+0x240>
 8006dc6:	2304      	movs	r3, #4
 8006dc8:	e006      	b.n	8006dd8 <HAL_GPIO_Init+0x240>
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e004      	b.n	8006dd8 <HAL_GPIO_Init+0x240>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e002      	b.n	8006dd8 <HAL_GPIO_Init+0x240>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <HAL_GPIO_Init+0x240>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	f002 0203 	and.w	r2, r2, #3
 8006dde:	0092      	lsls	r2, r2, #2
 8006de0:	4093      	lsls	r3, r2
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006de8:	4935      	ldr	r1, [pc, #212]	@ (8006ec0 <HAL_GPIO_Init+0x328>)
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	089b      	lsrs	r3, r3, #2
 8006dee:	3302      	adds	r3, #2
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006df6:	4b3d      	ldr	r3, [pc, #244]	@ (8006eec <HAL_GPIO_Init+0x354>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	43db      	mvns	r3, r3
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	4013      	ands	r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e1a:	4a34      	ldr	r2, [pc, #208]	@ (8006eec <HAL_GPIO_Init+0x354>)
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e20:	4b32      	ldr	r3, [pc, #200]	@ (8006eec <HAL_GPIO_Init+0x354>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e44:	4a29      	ldr	r2, [pc, #164]	@ (8006eec <HAL_GPIO_Init+0x354>)
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006e4a:	4b28      	ldr	r3, [pc, #160]	@ (8006eec <HAL_GPIO_Init+0x354>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	43db      	mvns	r3, r3
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	4013      	ands	r3, r2
 8006e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006eec <HAL_GPIO_Init+0x354>)
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e74:	4b1d      	ldr	r3, [pc, #116]	@ (8006eec <HAL_GPIO_Init+0x354>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	4013      	ands	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e98:	4a14      	ldr	r2, [pc, #80]	@ (8006eec <HAL_GPIO_Init+0x354>)
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2b0f      	cmp	r3, #15
 8006ea8:	f67f ae86 	bls.w	8006bb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006eac:	bf00      	nop
 8006eae:	bf00      	nop
 8006eb0:	3724      	adds	r7, #36	@ 0x24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	40013800 	.word	0x40013800
 8006ec4:	40020000 	.word	0x40020000
 8006ec8:	40020400 	.word	0x40020400
 8006ecc:	40020800 	.word	0x40020800
 8006ed0:	40020c00 	.word	0x40020c00
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	40021400 	.word	0x40021400
 8006edc:	40021800 	.word	0x40021800
 8006ee0:	40021c00 	.word	0x40021c00
 8006ee4:	40022000 	.word	0x40022000
 8006ee8:	40022400 	.word	0x40022400
 8006eec:	40013c00 	.word	0x40013c00

08006ef0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006efa:	2300      	movs	r3, #0
 8006efc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	e0d9      	b.n	80070c0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	fa02 f303 	lsl.w	r3, r2, r3
 8006f14:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	f040 80c9 	bne.w	80070ba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006f28:	4a6b      	ldr	r2, [pc, #428]	@ (80070d8 <HAL_GPIO_DeInit+0x1e8>)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	089b      	lsrs	r3, r3, #2
 8006f2e:	3302      	adds	r3, #2
 8006f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f34:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f003 0303 	and.w	r3, r3, #3
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	220f      	movs	r2, #15
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	4013      	ands	r3, r2
 8006f48:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a63      	ldr	r2, [pc, #396]	@ (80070dc <HAL_GPIO_DeInit+0x1ec>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d037      	beq.n	8006fc2 <HAL_GPIO_DeInit+0xd2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a62      	ldr	r2, [pc, #392]	@ (80070e0 <HAL_GPIO_DeInit+0x1f0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d031      	beq.n	8006fbe <HAL_GPIO_DeInit+0xce>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a61      	ldr	r2, [pc, #388]	@ (80070e4 <HAL_GPIO_DeInit+0x1f4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d02b      	beq.n	8006fba <HAL_GPIO_DeInit+0xca>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a60      	ldr	r2, [pc, #384]	@ (80070e8 <HAL_GPIO_DeInit+0x1f8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d025      	beq.n	8006fb6 <HAL_GPIO_DeInit+0xc6>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a5f      	ldr	r2, [pc, #380]	@ (80070ec <HAL_GPIO_DeInit+0x1fc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d01f      	beq.n	8006fb2 <HAL_GPIO_DeInit+0xc2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a5e      	ldr	r2, [pc, #376]	@ (80070f0 <HAL_GPIO_DeInit+0x200>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d019      	beq.n	8006fae <HAL_GPIO_DeInit+0xbe>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80070f4 <HAL_GPIO_DeInit+0x204>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <HAL_GPIO_DeInit+0xba>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a5c      	ldr	r2, [pc, #368]	@ (80070f8 <HAL_GPIO_DeInit+0x208>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00d      	beq.n	8006fa6 <HAL_GPIO_DeInit+0xb6>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a5b      	ldr	r2, [pc, #364]	@ (80070fc <HAL_GPIO_DeInit+0x20c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d007      	beq.n	8006fa2 <HAL_GPIO_DeInit+0xb2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a5a      	ldr	r2, [pc, #360]	@ (8007100 <HAL_GPIO_DeInit+0x210>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d101      	bne.n	8006f9e <HAL_GPIO_DeInit+0xae>
 8006f9a:	2309      	movs	r3, #9
 8006f9c:	e012      	b.n	8006fc4 <HAL_GPIO_DeInit+0xd4>
 8006f9e:	230a      	movs	r3, #10
 8006fa0:	e010      	b.n	8006fc4 <HAL_GPIO_DeInit+0xd4>
 8006fa2:	2308      	movs	r3, #8
 8006fa4:	e00e      	b.n	8006fc4 <HAL_GPIO_DeInit+0xd4>
 8006fa6:	2307      	movs	r3, #7
 8006fa8:	e00c      	b.n	8006fc4 <HAL_GPIO_DeInit+0xd4>
 8006faa:	2306      	movs	r3, #6
 8006fac:	e00a      	b.n	8006fc4 <HAL_GPIO_DeInit+0xd4>
 8006fae:	2305      	movs	r3, #5
 8006fb0:	e008      	b.n	8006fc4 <HAL_GPIO_DeInit+0xd4>
 8006fb2:	2304      	movs	r3, #4
 8006fb4:	e006      	b.n	8006fc4 <HAL_GPIO_DeInit+0xd4>
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e004      	b.n	8006fc4 <HAL_GPIO_DeInit+0xd4>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e002      	b.n	8006fc4 <HAL_GPIO_DeInit+0xd4>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <HAL_GPIO_DeInit+0xd4>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	f002 0203 	and.w	r2, r2, #3
 8006fca:	0092      	lsls	r2, r2, #2
 8006fcc:	4093      	lsls	r3, r2
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d132      	bne.n	800703a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8007104 <HAL_GPIO_DeInit+0x214>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	4949      	ldr	r1, [pc, #292]	@ (8007104 <HAL_GPIO_DeInit+0x214>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006fe2:	4b48      	ldr	r3, [pc, #288]	@ (8007104 <HAL_GPIO_DeInit+0x214>)
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	4946      	ldr	r1, [pc, #280]	@ (8007104 <HAL_GPIO_DeInit+0x214>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006ff0:	4b44      	ldr	r3, [pc, #272]	@ (8007104 <HAL_GPIO_DeInit+0x214>)
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	43db      	mvns	r3, r3
 8006ff8:	4942      	ldr	r1, [pc, #264]	@ (8007104 <HAL_GPIO_DeInit+0x214>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006ffe:	4b41      	ldr	r3, [pc, #260]	@ (8007104 <HAL_GPIO_DeInit+0x214>)
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	43db      	mvns	r3, r3
 8007006:	493f      	ldr	r1, [pc, #252]	@ (8007104 <HAL_GPIO_DeInit+0x214>)
 8007008:	4013      	ands	r3, r2
 800700a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	220f      	movs	r2, #15
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800701c:	4a2e      	ldr	r2, [pc, #184]	@ (80070d8 <HAL_GPIO_DeInit+0x1e8>)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	3302      	adds	r3, #2
 8007024:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	43da      	mvns	r2, r3
 800702c:	482a      	ldr	r0, [pc, #168]	@ (80070d8 <HAL_GPIO_DeInit+0x1e8>)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	089b      	lsrs	r3, r3, #2
 8007032:	400a      	ands	r2, r1
 8007034:	3302      	adds	r3, #2
 8007036:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	2103      	movs	r1, #3
 8007044:	fa01 f303 	lsl.w	r3, r1, r3
 8007048:	43db      	mvns	r3, r3
 800704a:	401a      	ands	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	08da      	lsrs	r2, r3, #3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3208      	adds	r2, #8
 8007058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f003 0307 	and.w	r3, r3, #7
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	220f      	movs	r2, #15
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	43db      	mvns	r3, r3
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	08d2      	lsrs	r2, r2, #3
 8007070:	4019      	ands	r1, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3208      	adds	r2, #8
 8007076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	2103      	movs	r1, #3
 8007084:	fa01 f303 	lsl.w	r3, r1, r3
 8007088:	43db      	mvns	r3, r3
 800708a:	401a      	ands	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	2101      	movs	r1, #1
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	fa01 f303 	lsl.w	r3, r1, r3
 800709c:	43db      	mvns	r3, r3
 800709e:	401a      	ands	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	2103      	movs	r1, #3
 80070ae:	fa01 f303 	lsl.w	r3, r1, r3
 80070b2:	43db      	mvns	r3, r3
 80070b4:	401a      	ands	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	3301      	adds	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b0f      	cmp	r3, #15
 80070c4:	f67f af22 	bls.w	8006f0c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40013800 	.word	0x40013800
 80070dc:	40020000 	.word	0x40020000
 80070e0:	40020400 	.word	0x40020400
 80070e4:	40020800 	.word	0x40020800
 80070e8:	40020c00 	.word	0x40020c00
 80070ec:	40021000 	.word	0x40021000
 80070f0:	40021400 	.word	0x40021400
 80070f4:	40021800 	.word	0x40021800
 80070f8:	40021c00 	.word	0x40021c00
 80070fc:	40022000 	.word	0x40022000
 8007100:	40022400 	.word	0x40022400
 8007104:	40013c00 	.word	0x40013c00

08007108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	807b      	strh	r3, [r7, #2]
 8007114:	4613      	mov	r3, r2
 8007116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007118:	787b      	ldrb	r3, [r7, #1]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800711e:	887a      	ldrh	r2, [r7, #2]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007124:	e003      	b.n	800712e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007126:	887b      	ldrh	r3, [r7, #2]
 8007128:	041a      	lsls	r2, r3, #16
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	619a      	str	r2, [r3, #24]
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
	...

0800713c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e07f      	b.n	800724e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fb fa9a 	bl	800269c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2224      	movs	r2, #36	@ 0x24
 800716c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800718c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800719c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d107      	bne.n	80071b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071b2:	609a      	str	r2, [r3, #8]
 80071b4:	e006      	b.n	80071c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80071c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d104      	bne.n	80071d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6859      	ldr	r1, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007258 <HAL_I2C_Init+0x11c>)
 80071e2:	430b      	orrs	r3, r1
 80071e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691a      	ldr	r2, [r3, #16]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69d9      	ldr	r1, [r3, #28]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1a      	ldr	r2, [r3, #32]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	02008000 	.word	0x02008000

0800725c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e021      	b.n	80072b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2224      	movs	r2, #36	@ 0x24
 8007272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0201 	bic.w	r2, r2, #1
 8007284:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fb fab0 	bl	80027ec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	461a      	mov	r2, r3
 80072ca:	4603      	mov	r3, r0
 80072cc:	817b      	strh	r3, [r7, #10]
 80072ce:	460b      	mov	r3, r1
 80072d0:	813b      	strh	r3, [r7, #8]
 80072d2:	4613      	mov	r3, r2
 80072d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b20      	cmp	r3, #32
 80072e0:	f040 80f9 	bne.w	80074d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_I2C_Mem_Write+0x34>
 80072ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d105      	bne.n	80072fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0ed      	b.n	80074d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007302:	2b01      	cmp	r3, #1
 8007304:	d101      	bne.n	800730a <HAL_I2C_Mem_Write+0x4e>
 8007306:	2302      	movs	r3, #2
 8007308:	e0e6      	b.n	80074d8 <HAL_I2C_Mem_Write+0x21c>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007312:	f7fe f8fb 	bl	800550c <HAL_GetTick>
 8007316:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	2319      	movs	r3, #25
 800731e:	2201      	movs	r2, #1
 8007320:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 fad1 	bl	80078cc <I2C_WaitOnFlagUntilTimeout>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e0d1      	b.n	80074d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2221      	movs	r2, #33	@ 0x21
 8007338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2240      	movs	r2, #64	@ 0x40
 8007340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a3a      	ldr	r2, [r7, #32]
 800734e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007354:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800735c:	88f8      	ldrh	r0, [r7, #6]
 800735e:	893a      	ldrh	r2, [r7, #8]
 8007360:	8979      	ldrh	r1, [r7, #10]
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	4603      	mov	r3, r0
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f9e1 	bl	8007734 <I2C_RequestMemoryWrite>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e0a9      	b.n	80074d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007388:	b29b      	uxth	r3, r3
 800738a:	2bff      	cmp	r3, #255	@ 0xff
 800738c:	d90e      	bls.n	80073ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	22ff      	movs	r2, #255	@ 0xff
 8007392:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007398:	b2da      	uxtb	r2, r3
 800739a:	8979      	ldrh	r1, [r7, #10]
 800739c:	2300      	movs	r3, #0
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fc2d 	bl	8007c04 <I2C_TransferConfig>
 80073aa:	e00f      	b.n	80073cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	8979      	ldrh	r1, [r7, #10]
 80073be:	2300      	movs	r3, #0
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 fc1c 	bl	8007c04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 fabb 	bl	800794c <I2C_WaitOnTXISFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e07b      	b.n	80074d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d034      	beq.n	8007484 <HAL_I2C_Mem_Write+0x1c8>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800741e:	2b00      	cmp	r3, #0
 8007420:	d130      	bne.n	8007484 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007428:	2200      	movs	r2, #0
 800742a:	2180      	movs	r1, #128	@ 0x80
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fa4d 	bl	80078cc <I2C_WaitOnFlagUntilTimeout>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e04d      	b.n	80074d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007440:	b29b      	uxth	r3, r3
 8007442:	2bff      	cmp	r3, #255	@ 0xff
 8007444:	d90e      	bls.n	8007464 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	22ff      	movs	r2, #255	@ 0xff
 800744a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007450:	b2da      	uxtb	r2, r3
 8007452:	8979      	ldrh	r1, [r7, #10]
 8007454:	2300      	movs	r3, #0
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fbd1 	bl	8007c04 <I2C_TransferConfig>
 8007462:	e00f      	b.n	8007484 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007472:	b2da      	uxtb	r2, r3
 8007474:	8979      	ldrh	r1, [r7, #10]
 8007476:	2300      	movs	r3, #0
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fbc0 	bl	8007c04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d19e      	bne.n	80073cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 fa9a 	bl	80079cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e01a      	b.n	80074d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2220      	movs	r2, #32
 80074a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6859      	ldr	r1, [r3, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	4b0a      	ldr	r3, [pc, #40]	@ (80074e0 <HAL_I2C_Mem_Write+0x224>)
 80074b6:	400b      	ands	r3, r1
 80074b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	e000      	b.n	80074d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80074d6:	2302      	movs	r3, #2
  }
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	fe00e800 	.word	0xfe00e800

080074e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	4608      	mov	r0, r1
 80074ee:	4611      	mov	r1, r2
 80074f0:	461a      	mov	r2, r3
 80074f2:	4603      	mov	r3, r0
 80074f4:	817b      	strh	r3, [r7, #10]
 80074f6:	460b      	mov	r3, r1
 80074f8:	813b      	strh	r3, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b20      	cmp	r3, #32
 8007508:	f040 80fd 	bne.w	8007706 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_I2C_Mem_Read+0x34>
 8007512:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d105      	bne.n	8007524 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800751e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e0f1      	b.n	8007708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_I2C_Mem_Read+0x4e>
 800752e:	2302      	movs	r3, #2
 8007530:	e0ea      	b.n	8007708 <HAL_I2C_Mem_Read+0x224>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800753a:	f7fd ffe7 	bl	800550c <HAL_GetTick>
 800753e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	2319      	movs	r3, #25
 8007546:	2201      	movs	r2, #1
 8007548:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f9bd 	bl	80078cc <I2C_WaitOnFlagUntilTimeout>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e0d5      	b.n	8007708 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2222      	movs	r2, #34	@ 0x22
 8007560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2240      	movs	r2, #64	@ 0x40
 8007568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a3a      	ldr	r2, [r7, #32]
 8007576:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800757c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007584:	88f8      	ldrh	r0, [r7, #6]
 8007586:	893a      	ldrh	r2, [r7, #8]
 8007588:	8979      	ldrh	r1, [r7, #10]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	4603      	mov	r3, r0
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f921 	bl	80077dc <I2C_RequestMemoryRead>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0ad      	b.n	8007708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2bff      	cmp	r3, #255	@ 0xff
 80075b4:	d90e      	bls.n	80075d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	22ff      	movs	r2, #255	@ 0xff
 80075ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	8979      	ldrh	r1, [r7, #10]
 80075c4:	4b52      	ldr	r3, [pc, #328]	@ (8007710 <HAL_I2C_Mem_Read+0x22c>)
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fb19 	bl	8007c04 <I2C_TransferConfig>
 80075d2:	e00f      	b.n	80075f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	8979      	ldrh	r1, [r7, #10]
 80075e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007710 <HAL_I2C_Mem_Read+0x22c>)
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fb08 	bl	8007c04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fa:	2200      	movs	r2, #0
 80075fc:	2104      	movs	r1, #4
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 f964 	bl	80078cc <I2C_WaitOnFlagUntilTimeout>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e07c      	b.n	8007708 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	b2d2      	uxtb	r2, r2
 800761a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d034      	beq.n	80076b4 <HAL_I2C_Mem_Read+0x1d0>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800764e:	2b00      	cmp	r3, #0
 8007650:	d130      	bne.n	80076b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007658:	2200      	movs	r2, #0
 800765a:	2180      	movs	r1, #128	@ 0x80
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f935 	bl	80078cc <I2C_WaitOnFlagUntilTimeout>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e04d      	b.n	8007708 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007670:	b29b      	uxth	r3, r3
 8007672:	2bff      	cmp	r3, #255	@ 0xff
 8007674:	d90e      	bls.n	8007694 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	22ff      	movs	r2, #255	@ 0xff
 800767a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007680:	b2da      	uxtb	r2, r3
 8007682:	8979      	ldrh	r1, [r7, #10]
 8007684:	2300      	movs	r3, #0
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fab9 	bl	8007c04 <I2C_TransferConfig>
 8007692:	e00f      	b.n	80076b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	8979      	ldrh	r1, [r7, #10]
 80076a6:	2300      	movs	r3, #0
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 faa8 	bl	8007c04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d19a      	bne.n	80075f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 f982 	bl	80079cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e01a      	b.n	8007708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2220      	movs	r2, #32
 80076d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6859      	ldr	r1, [r3, #4]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007714 <HAL_I2C_Mem_Read+0x230>)
 80076e6:	400b      	ands	r3, r1
 80076e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	e000      	b.n	8007708 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007706:	2302      	movs	r3, #2
  }
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	80002400 	.word	0x80002400
 8007714:	fe00e800 	.word	0xfe00e800

08007718 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007726:	b2db      	uxtb	r3, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	461a      	mov	r2, r3
 8007742:	4603      	mov	r3, r0
 8007744:	817b      	strh	r3, [r7, #10]
 8007746:	460b      	mov	r3, r1
 8007748:	813b      	strh	r3, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	b2da      	uxtb	r2, r3
 8007752:	8979      	ldrh	r1, [r7, #10]
 8007754:	4b20      	ldr	r3, [pc, #128]	@ (80077d8 <I2C_RequestMemoryWrite+0xa4>)
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 fa51 	bl	8007c04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	69b9      	ldr	r1, [r7, #24]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f8f0 	bl	800794c <I2C_WaitOnTXISFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e02c      	b.n	80077d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d105      	bne.n	8007788 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800777c:	893b      	ldrh	r3, [r7, #8]
 800777e:	b2da      	uxtb	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	629a      	str	r2, [r3, #40]	@ 0x28
 8007786:	e015      	b.n	80077b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007788:	893b      	ldrh	r3, [r7, #8]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	b29b      	uxth	r3, r3
 800778e:	b2da      	uxtb	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	69b9      	ldr	r1, [r7, #24]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f8d6 	bl	800794c <I2C_WaitOnTXISFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e012      	b.n	80077d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077aa:	893b      	ldrh	r3, [r7, #8]
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2200      	movs	r2, #0
 80077bc:	2180      	movs	r1, #128	@ 0x80
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 f884 	bl	80078cc <I2C_WaitOnFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	80002000 	.word	0x80002000

080077dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	4608      	mov	r0, r1
 80077e6:	4611      	mov	r1, r2
 80077e8:	461a      	mov	r2, r3
 80077ea:	4603      	mov	r3, r0
 80077ec:	817b      	strh	r3, [r7, #10]
 80077ee:	460b      	mov	r3, r1
 80077f0:	813b      	strh	r3, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	8979      	ldrh	r1, [r7, #10]
 80077fc:	4b20      	ldr	r3, [pc, #128]	@ (8007880 <I2C_RequestMemoryRead+0xa4>)
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	2300      	movs	r3, #0
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 f9fe 	bl	8007c04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	69b9      	ldr	r1, [r7, #24]
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f89d 	bl	800794c <I2C_WaitOnTXISFlagUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e02c      	b.n	8007876 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800781c:	88fb      	ldrh	r3, [r7, #6]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d105      	bne.n	800782e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007822:	893b      	ldrh	r3, [r7, #8]
 8007824:	b2da      	uxtb	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	629a      	str	r2, [r3, #40]	@ 0x28
 800782c:	e015      	b.n	800785a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800782e:	893b      	ldrh	r3, [r7, #8]
 8007830:	0a1b      	lsrs	r3, r3, #8
 8007832:	b29b      	uxth	r3, r3
 8007834:	b2da      	uxtb	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	69b9      	ldr	r1, [r7, #24]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 f883 	bl	800794c <I2C_WaitOnTXISFlagUntilTimeout>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e012      	b.n	8007876 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007850:	893b      	ldrh	r3, [r7, #8]
 8007852:	b2da      	uxtb	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2200      	movs	r2, #0
 8007862:	2140      	movs	r1, #64	@ 0x40
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f831 	bl	80078cc <I2C_WaitOnFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	80002000 	.word	0x80002000

08007884 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b02      	cmp	r3, #2
 8007898:	d103      	bne.n	80078a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2200      	movs	r2, #0
 80078a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d007      	beq.n	80078c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	619a      	str	r2, [r3, #24]
  }
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	603b      	str	r3, [r7, #0]
 80078d8:	4613      	mov	r3, r2
 80078da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078dc:	e022      	b.n	8007924 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e4:	d01e      	beq.n	8007924 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078e6:	f7fd fe11 	bl	800550c <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d302      	bcc.n	80078fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d113      	bne.n	8007924 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007900:	f043 0220 	orr.w	r2, r3, #32
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e00f      	b.n	8007944 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	4013      	ands	r3, r2
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	429a      	cmp	r2, r3
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	429a      	cmp	r2, r3
 8007940:	d0cd      	beq.n	80078de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007958:	e02c      	b.n	80079b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f870 	bl	8007a44 <I2C_IsErrorOccurred>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e02a      	b.n	80079c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007974:	d01e      	beq.n	80079b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007976:	f7fd fdc9 	bl	800550c <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	429a      	cmp	r2, r3
 8007984:	d302      	bcc.n	800798c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d113      	bne.n	80079b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007990:	f043 0220 	orr.w	r2, r3, #32
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e007      	b.n	80079c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d1cb      	bne.n	800795a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079d8:	e028      	b.n	8007a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	68b9      	ldr	r1, [r7, #8]
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 f830 	bl	8007a44 <I2C_IsErrorOccurred>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e026      	b.n	8007a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ee:	f7fd fd8d 	bl	800550c <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d302      	bcc.n	8007a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d113      	bne.n	8007a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a08:	f043 0220 	orr.w	r2, r3, #32
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e007      	b.n	8007a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d1cf      	bne.n	80079da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08a      	sub	sp, #40	@ 0x28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d068      	beq.n	8007b42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2210      	movs	r2, #16
 8007a76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a78:	e049      	b.n	8007b0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a80:	d045      	beq.n	8007b0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a82:	f7fd fd43 	bl	800550c <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d302      	bcc.n	8007a98 <I2C_IsErrorOccurred+0x54>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d13a      	bne.n	8007b0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007aa2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007aaa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ab6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aba:	d121      	bne.n	8007b00 <I2C_IsErrorOccurred+0xbc>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ac2:	d01d      	beq.n	8007b00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007ac4:	7cfb      	ldrb	r3, [r7, #19]
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d01a      	beq.n	8007b00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ad8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007ada:	f7fd fd17 	bl	800550c <HAL_GetTick>
 8007ade:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ae0:	e00e      	b.n	8007b00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007ae2:	f7fd fd13 	bl	800550c <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	2b19      	cmp	r3, #25
 8007aee:	d907      	bls.n	8007b00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	f043 0320 	orr.w	r3, r3, #32
 8007af6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007afe:	e006      	b.n	8007b0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d1e9      	bne.n	8007ae2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d003      	beq.n	8007b24 <I2C_IsErrorOccurred+0xe0>
 8007b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0aa      	beq.n	8007a7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007b24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d103      	bne.n	8007b34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2220      	movs	r2, #32
 8007b32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	f043 0304 	orr.w	r3, r3, #4
 8007b3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	f043 0308 	orr.w	r3, r3, #8
 8007b7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007b86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	f043 0302 	orr.w	r3, r3, #2
 8007b9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ba8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01c      	beq.n	8007bf2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f7ff fe63 	bl	8007884 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6859      	ldr	r1, [r3, #4]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <I2C_IsErrorOccurred+0x1bc>)
 8007bca:	400b      	ands	r3, r1
 8007bcc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3728      	adds	r7, #40	@ 0x28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	fe00e800 	.word	0xfe00e800

08007c04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	817b      	strh	r3, [r7, #10]
 8007c12:	4613      	mov	r3, r2
 8007c14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c16:	897b      	ldrh	r3, [r7, #10]
 8007c18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c1c:	7a7b      	ldrb	r3, [r7, #9]
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	0d5b      	lsrs	r3, r3, #21
 8007c3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007c42:	4b08      	ldr	r3, [pc, #32]	@ (8007c64 <I2C_TransferConfig+0x60>)
 8007c44:	430b      	orrs	r3, r1
 8007c46:	43db      	mvns	r3, r3
 8007c48:	ea02 0103 	and.w	r1, r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	03ff63ff 	.word	0x03ff63ff

08007c68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d138      	bne.n	8007cf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e032      	b.n	8007cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2224      	movs	r2, #36	@ 0x24
 8007c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0201 	bic.w	r2, r2, #1
 8007caa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007cba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6819      	ldr	r1, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f042 0201 	orr.w	r2, r2, #1
 8007cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	e000      	b.n	8007cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cf0:	2302      	movs	r3, #2
  }
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b20      	cmp	r3, #32
 8007d12:	d139      	bne.n	8007d88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e033      	b.n	8007d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2224      	movs	r2, #36	@ 0x24
 8007d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0201 	bic.w	r2, r2, #1
 8007d40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0201 	orr.w	r2, r2, #1
 8007d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	e000      	b.n	8007d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d88:	2302      	movs	r3, #2
  }
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e0bf      	b.n	8007f2a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d106      	bne.n	8007dc4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7fa fdd2 	bl	8002968 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007dda:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6999      	ldr	r1, [r3, #24]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007df0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6899      	ldr	r1, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f34 <HAL_LTDC_Init+0x19c>)
 8007e0c:	400b      	ands	r3, r1
 8007e0e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	041b      	lsls	r3, r3, #16
 8007e16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6899      	ldr	r1, [r3, #8]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	431a      	orrs	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68d9      	ldr	r1, [r3, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	4b3e      	ldr	r3, [pc, #248]	@ (8007f34 <HAL_LTDC_Init+0x19c>)
 8007e3a:	400b      	ands	r3, r1
 8007e3c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	041b      	lsls	r3, r3, #16
 8007e44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68d9      	ldr	r1, [r3, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1a      	ldr	r2, [r3, #32]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6919      	ldr	r1, [r3, #16]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	4b33      	ldr	r3, [pc, #204]	@ (8007f34 <HAL_LTDC_Init+0x19c>)
 8007e68:	400b      	ands	r3, r1
 8007e6a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e70:	041b      	lsls	r3, r3, #16
 8007e72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6919      	ldr	r1, [r3, #16]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6959      	ldr	r1, [r3, #20]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	4b27      	ldr	r3, [pc, #156]	@ (8007f34 <HAL_LTDC_Init+0x19c>)
 8007e96:	400b      	ands	r3, r1
 8007e98:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9e:	041b      	lsls	r3, r3, #16
 8007ea0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6959      	ldr	r1, [r3, #20]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ebe:	021b      	lsls	r3, r3, #8
 8007ec0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007ec8:	041b      	lsls	r3, r3, #16
 8007eca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0206 	orr.w	r2, r2, #6
 8007f06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0201 	orr.w	r2, r2, #1
 8007f16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	f000f800 	.word	0xf000f800

08007f38 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f4e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d023      	beq.n	8007fa2 <HAL_LTDC_IRQHandler+0x6a>
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01e      	beq.n	8007fa2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0204 	bic.w	r2, r2, #4
 8007f72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2204      	movs	r2, #4
 8007f7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f82:	f043 0201 	orr.w	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2204      	movs	r2, #4
 8007f90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f86f 	bl	8008080 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d023      	beq.n	8007ff4 <HAL_LTDC_IRQHandler+0xbc>
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01e      	beq.n	8007ff4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0202 	bic.w	r2, r2, #2
 8007fc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fd4:	f043 0202 	orr.w	r2, r3, #2
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f846 	bl	8008080 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01b      	beq.n	8008036 <HAL_LTDC_IRQHandler+0xfe>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d016      	beq.n	8008036 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0201 	bic.w	r2, r2, #1
 8008016:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2201      	movs	r2, #1
 800801e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f82f 	bl	8008094 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01b      	beq.n	8008078 <HAL_LTDC_IRQHandler+0x140>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f003 0308 	and.w	r3, r3, #8
 8008046:	2b00      	cmp	r3, #0
 8008048:	d016      	beq.n	8008078 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 0208 	bic.w	r2, r2, #8
 8008058:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2208      	movs	r2, #8
 8008060:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f818 	bl	80080a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008078:	bf00      	nop
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80080bc:	b5b0      	push	{r4, r5, r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_LTDC_ConfigLayer+0x1a>
 80080d2:	2302      	movs	r3, #2
 80080d4:	e02c      	b.n	8008130 <HAL_LTDC_ConfigLayer+0x74>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2202      	movs	r2, #2
 80080e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2134      	movs	r1, #52	@ 0x34
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	4413      	add	r3, r2
 80080f2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	4614      	mov	r4, r2
 80080fa:	461d      	mov	r5, r3
 80080fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f81f 	bl	8008154 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2201      	movs	r2, #1
 800811c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bdb0      	pop	{r4, r5, r7, pc}

08008138 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008146:	b2db      	uxtb	r3, r3
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008154:	b480      	push	{r7}
 8008156:	b089      	sub	sp, #36	@ 0x24
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	0c1b      	lsrs	r3, r3, #16
 800816c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008170:	4413      	add	r3, r2
 8008172:	041b      	lsls	r3, r3, #16
 8008174:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	01db      	lsls	r3, r3, #7
 8008180:	4413      	add	r3, r2
 8008182:	3384      	adds	r3, #132	@ 0x84
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	6812      	ldr	r2, [r2, #0]
 800818a:	4611      	mov	r1, r2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	01d2      	lsls	r2, r2, #7
 8008190:	440a      	add	r2, r1
 8008192:	3284      	adds	r2, #132	@ 0x84
 8008194:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008198:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	0c1b      	lsrs	r3, r3, #16
 80081a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80081aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80081ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4619      	mov	r1, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	01db      	lsls	r3, r3, #7
 80081b8:	440b      	add	r3, r1
 80081ba:	3384      	adds	r3, #132	@ 0x84
 80081bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80081c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081d2:	4413      	add	r3, r2
 80081d4:	041b      	lsls	r3, r3, #16
 80081d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	01db      	lsls	r3, r3, #7
 80081e2:	4413      	add	r3, r2
 80081e4:	3384      	adds	r3, #132	@ 0x84
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	4611      	mov	r1, r2
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	01d2      	lsls	r2, r2, #7
 80081f2:	440a      	add	r2, r1
 80081f4:	3284      	adds	r2, #132	@ 0x84
 80081f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80081fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800820a:	4413      	add	r3, r2
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4619      	mov	r1, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	01db      	lsls	r3, r3, #7
 8008218:	440b      	add	r3, r1
 800821a:	3384      	adds	r3, #132	@ 0x84
 800821c:	4619      	mov	r1, r3
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4313      	orrs	r3, r2
 8008222:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	01db      	lsls	r3, r3, #7
 800822e:	4413      	add	r3, r2
 8008230:	3384      	adds	r3, #132	@ 0x84
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	6812      	ldr	r2, [r2, #0]
 8008238:	4611      	mov	r1, r2
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	01d2      	lsls	r2, r2, #7
 800823e:	440a      	add	r2, r1
 8008240:	3284      	adds	r2, #132	@ 0x84
 8008242:	f023 0307 	bic.w	r3, r3, #7
 8008246:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	01db      	lsls	r3, r3, #7
 8008252:	4413      	add	r3, r2
 8008254:	3384      	adds	r3, #132	@ 0x84
 8008256:	461a      	mov	r2, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008264:	021b      	lsls	r3, r3, #8
 8008266:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800826e:	041b      	lsls	r3, r3, #16
 8008270:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	061b      	lsls	r3, r3, #24
 8008278:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	01db      	lsls	r3, r3, #7
 8008284:	4413      	add	r3, r2
 8008286:	3384      	adds	r3, #132	@ 0x84
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	01db      	lsls	r3, r3, #7
 8008294:	4413      	add	r3, r2
 8008296:	3384      	adds	r3, #132	@ 0x84
 8008298:	461a      	mov	r2, r3
 800829a:	2300      	movs	r3, #0
 800829c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082a4:	461a      	mov	r2, r3
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	431a      	orrs	r2, r3
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	431a      	orrs	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4619      	mov	r1, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	01db      	lsls	r3, r3, #7
 80082b8:	440b      	add	r3, r1
 80082ba:	3384      	adds	r3, #132	@ 0x84
 80082bc:	4619      	mov	r1, r3
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	01db      	lsls	r3, r3, #7
 80082ce:	4413      	add	r3, r2
 80082d0:	3384      	adds	r3, #132	@ 0x84
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	6812      	ldr	r2, [r2, #0]
 80082d8:	4611      	mov	r1, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	01d2      	lsls	r2, r2, #7
 80082de:	440a      	add	r2, r1
 80082e0:	3284      	adds	r2, #132	@ 0x84
 80082e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80082e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	01db      	lsls	r3, r3, #7
 80082f2:	4413      	add	r3, r2
 80082f4:	3384      	adds	r3, #132	@ 0x84
 80082f6:	461a      	mov	r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	01db      	lsls	r3, r3, #7
 8008308:	4413      	add	r3, r2
 800830a:	3384      	adds	r3, #132	@ 0x84
 800830c:	69da      	ldr	r2, [r3, #28]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4619      	mov	r1, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	01db      	lsls	r3, r3, #7
 8008318:	440b      	add	r3, r1
 800831a:	3384      	adds	r3, #132	@ 0x84
 800831c:	4619      	mov	r1, r3
 800831e:	4b58      	ldr	r3, [pc, #352]	@ (8008480 <LTDC_SetConfig+0x32c>)
 8008320:	4013      	ands	r3, r2
 8008322:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	69da      	ldr	r2, [r3, #28]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	68f9      	ldr	r1, [r7, #12]
 800832e:	6809      	ldr	r1, [r1, #0]
 8008330:	4608      	mov	r0, r1
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	01c9      	lsls	r1, r1, #7
 8008336:	4401      	add	r1, r0
 8008338:	3184      	adds	r1, #132	@ 0x84
 800833a:	4313      	orrs	r3, r2
 800833c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	01db      	lsls	r3, r3, #7
 8008348:	4413      	add	r3, r2
 800834a:	3384      	adds	r3, #132	@ 0x84
 800834c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	01db      	lsls	r3, r3, #7
 8008358:	4413      	add	r3, r2
 800835a:	3384      	adds	r3, #132	@ 0x84
 800835c:	461a      	mov	r2, r3
 800835e:	2300      	movs	r3, #0
 8008360:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	01db      	lsls	r3, r3, #7
 800836c:	4413      	add	r3, r2
 800836e:	3384      	adds	r3, #132	@ 0x84
 8008370:	461a      	mov	r2, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008376:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d102      	bne.n	8008386 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008380:	2304      	movs	r3, #4
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e01b      	b.n	80083be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d102      	bne.n	8008394 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800838e:	2303      	movs	r3, #3
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	e014      	b.n	80083be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b04      	cmp	r3, #4
 800839a:	d00b      	beq.n	80083b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d007      	beq.n	80083b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d003      	beq.n	80083b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80083b0:	2b07      	cmp	r3, #7
 80083b2:	d102      	bne.n	80083ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80083b4:	2302      	movs	r3, #2
 80083b6:	61fb      	str	r3, [r7, #28]
 80083b8:	e001      	b.n	80083be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80083ba:	2301      	movs	r3, #1
 80083bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	01db      	lsls	r3, r3, #7
 80083c8:	4413      	add	r3, r2
 80083ca:	3384      	adds	r3, #132	@ 0x84
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	4611      	mov	r1, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	01d2      	lsls	r2, r2, #7
 80083d8:	440a      	add	r2, r1
 80083da:	3284      	adds	r2, #132	@ 0x84
 80083dc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80083e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	fb02 f303 	mul.w	r3, r2, r3
 80083ec:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	6859      	ldr	r1, [r3, #4]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	1acb      	subs	r3, r1, r3
 80083f8:	69f9      	ldr	r1, [r7, #28]
 80083fa:	fb01 f303 	mul.w	r3, r1, r3
 80083fe:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008400:	68f9      	ldr	r1, [r7, #12]
 8008402:	6809      	ldr	r1, [r1, #0]
 8008404:	4608      	mov	r0, r1
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	01c9      	lsls	r1, r1, #7
 800840a:	4401      	add	r1, r0
 800840c:	3184      	adds	r1, #132	@ 0x84
 800840e:	4313      	orrs	r3, r2
 8008410:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	01db      	lsls	r3, r3, #7
 800841c:	4413      	add	r3, r2
 800841e:	3384      	adds	r3, #132	@ 0x84
 8008420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4619      	mov	r1, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	01db      	lsls	r3, r3, #7
 800842c:	440b      	add	r3, r1
 800842e:	3384      	adds	r3, #132	@ 0x84
 8008430:	4619      	mov	r1, r3
 8008432:	4b14      	ldr	r3, [pc, #80]	@ (8008484 <LTDC_SetConfig+0x330>)
 8008434:	4013      	ands	r3, r2
 8008436:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	01db      	lsls	r3, r3, #7
 8008442:	4413      	add	r3, r2
 8008444:	3384      	adds	r3, #132	@ 0x84
 8008446:	461a      	mov	r2, r3
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	01db      	lsls	r3, r3, #7
 8008458:	4413      	add	r3, r2
 800845a:	3384      	adds	r3, #132	@ 0x84
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	4611      	mov	r1, r2
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	01d2      	lsls	r2, r2, #7
 8008468:	440a      	add	r2, r1
 800846a:	3284      	adds	r2, #132	@ 0x84
 800846c:	f043 0301 	orr.w	r3, r3, #1
 8008470:	6013      	str	r3, [r2, #0]
}
 8008472:	bf00      	nop
 8008474:	3724      	adds	r7, #36	@ 0x24
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	fffff8f8 	.word	0xfffff8f8
 8008484:	fffff800 	.word	0xfffff800

08008488 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800848c:	4b05      	ldr	r3, [pc, #20]	@ (80084a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a04      	ldr	r2, [pc, #16]	@ (80084a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008496:	6013      	str	r3, [r2, #0]
}
 8008498:	bf00      	nop
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	40007000 	.word	0x40007000

080084a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80084b2:	4b23      	ldr	r3, [pc, #140]	@ (8008540 <HAL_PWREx_EnableOverDrive+0x98>)
 80084b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b6:	4a22      	ldr	r2, [pc, #136]	@ (8008540 <HAL_PWREx_EnableOverDrive+0x98>)
 80084b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80084be:	4b20      	ldr	r3, [pc, #128]	@ (8008540 <HAL_PWREx_EnableOverDrive+0x98>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80084ca:	4b1e      	ldr	r3, [pc, #120]	@ (8008544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a1d      	ldr	r2, [pc, #116]	@ (8008544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80084d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80084d6:	f7fd f819 	bl	800550c <HAL_GetTick>
 80084da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80084dc:	e009      	b.n	80084f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80084de:	f7fd f815 	bl	800550c <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084ec:	d901      	bls.n	80084f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e022      	b.n	8008538 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80084f2:	4b14      	ldr	r3, [pc, #80]	@ (8008544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084fe:	d1ee      	bne.n	80084de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008500:	4b10      	ldr	r3, [pc, #64]	@ (8008544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a0f      	ldr	r2, [pc, #60]	@ (8008544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800850a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800850c:	f7fc fffe 	bl	800550c <HAL_GetTick>
 8008510:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008512:	e009      	b.n	8008528 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008514:	f7fc fffa 	bl	800550c <HAL_GetTick>
 8008518:	4602      	mov	r2, r0
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008522:	d901      	bls.n	8008528 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e007      	b.n	8008538 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008528:	4b06      	ldr	r3, [pc, #24]	@ (8008544 <HAL_PWREx_EnableOverDrive+0x9c>)
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008534:	d1ee      	bne.n	8008514 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	40023800 	.word	0x40023800
 8008544:	40007000 	.word	0x40007000

08008548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008550:	2300      	movs	r3, #0
 8008552:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e291      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 8087 	beq.w	800867a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800856c:	4b96      	ldr	r3, [pc, #600]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f003 030c 	and.w	r3, r3, #12
 8008574:	2b04      	cmp	r3, #4
 8008576:	d00c      	beq.n	8008592 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008578:	4b93      	ldr	r3, [pc, #588]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f003 030c 	and.w	r3, r3, #12
 8008580:	2b08      	cmp	r3, #8
 8008582:	d112      	bne.n	80085aa <HAL_RCC_OscConfig+0x62>
 8008584:	4b90      	ldr	r3, [pc, #576]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800858c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008590:	d10b      	bne.n	80085aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008592:	4b8d      	ldr	r3, [pc, #564]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d06c      	beq.n	8008678 <HAL_RCC_OscConfig+0x130>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d168      	bne.n	8008678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e26b      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085b2:	d106      	bne.n	80085c2 <HAL_RCC_OscConfig+0x7a>
 80085b4:	4b84      	ldr	r3, [pc, #528]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a83      	ldr	r2, [pc, #524]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80085ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	e02e      	b.n	8008620 <HAL_RCC_OscConfig+0xd8>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10c      	bne.n	80085e4 <HAL_RCC_OscConfig+0x9c>
 80085ca:	4b7f      	ldr	r3, [pc, #508]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a7e      	ldr	r2, [pc, #504]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80085d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	4b7c      	ldr	r3, [pc, #496]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a7b      	ldr	r2, [pc, #492]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80085dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	e01d      	b.n	8008620 <HAL_RCC_OscConfig+0xd8>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085ec:	d10c      	bne.n	8008608 <HAL_RCC_OscConfig+0xc0>
 80085ee:	4b76      	ldr	r3, [pc, #472]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a75      	ldr	r2, [pc, #468]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80085f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	4b73      	ldr	r3, [pc, #460]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a72      	ldr	r2, [pc, #456]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	e00b      	b.n	8008620 <HAL_RCC_OscConfig+0xd8>
 8008608:	4b6f      	ldr	r3, [pc, #444]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a6e      	ldr	r2, [pc, #440]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 800860e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	4b6c      	ldr	r3, [pc, #432]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a6b      	ldr	r2, [pc, #428]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 800861a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800861e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d013      	beq.n	8008650 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008628:	f7fc ff70 	bl	800550c <HAL_GetTick>
 800862c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800862e:	e008      	b.n	8008642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008630:	f7fc ff6c 	bl	800550c <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b64      	cmp	r3, #100	@ 0x64
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e21f      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008642:	4b61      	ldr	r3, [pc, #388]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0f0      	beq.n	8008630 <HAL_RCC_OscConfig+0xe8>
 800864e:	e014      	b.n	800867a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008650:	f7fc ff5c 	bl	800550c <HAL_GetTick>
 8008654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008656:	e008      	b.n	800866a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008658:	f7fc ff58 	bl	800550c <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b64      	cmp	r3, #100	@ 0x64
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e20b      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800866a:	4b57      	ldr	r3, [pc, #348]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1f0      	bne.n	8008658 <HAL_RCC_OscConfig+0x110>
 8008676:	e000      	b.n	800867a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d069      	beq.n	800875a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008686:	4b50      	ldr	r3, [pc, #320]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 030c 	and.w	r3, r3, #12
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00b      	beq.n	80086aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008692:	4b4d      	ldr	r3, [pc, #308]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f003 030c 	and.w	r3, r3, #12
 800869a:	2b08      	cmp	r3, #8
 800869c:	d11c      	bne.n	80086d8 <HAL_RCC_OscConfig+0x190>
 800869e:	4b4a      	ldr	r3, [pc, #296]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d116      	bne.n	80086d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086aa:	4b47      	ldr	r3, [pc, #284]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <HAL_RCC_OscConfig+0x17a>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d001      	beq.n	80086c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e1df      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086c2:	4b41      	ldr	r3, [pc, #260]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	493d      	ldr	r1, [pc, #244]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086d6:	e040      	b.n	800875a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d023      	beq.n	8008728 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086e0:	4b39      	ldr	r3, [pc, #228]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a38      	ldr	r2, [pc, #224]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80086e6:	f043 0301 	orr.w	r3, r3, #1
 80086ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ec:	f7fc ff0e 	bl	800550c <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086f2:	e008      	b.n	8008706 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086f4:	f7fc ff0a 	bl	800550c <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d901      	bls.n	8008706 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e1bd      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008706:	4b30      	ldr	r3, [pc, #192]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0f0      	beq.n	80086f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008712:	4b2d      	ldr	r3, [pc, #180]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4929      	ldr	r1, [pc, #164]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008722:	4313      	orrs	r3, r2
 8008724:	600b      	str	r3, [r1, #0]
 8008726:	e018      	b.n	800875a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008728:	4b27      	ldr	r3, [pc, #156]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a26      	ldr	r2, [pc, #152]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 800872e:	f023 0301 	bic.w	r3, r3, #1
 8008732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008734:	f7fc feea 	bl	800550c <HAL_GetTick>
 8008738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800873c:	f7fc fee6 	bl	800550c <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e199      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800874e:	4b1e      	ldr	r3, [pc, #120]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1f0      	bne.n	800873c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d038      	beq.n	80087d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d019      	beq.n	80087a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800876e:	4b16      	ldr	r3, [pc, #88]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008772:	4a15      	ldr	r2, [pc, #84]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800877a:	f7fc fec7 	bl	800550c <HAL_GetTick>
 800877e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008782:	f7fc fec3 	bl	800550c <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e176      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008794:	4b0c      	ldr	r3, [pc, #48]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 8008796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0f0      	beq.n	8008782 <HAL_RCC_OscConfig+0x23a>
 80087a0:	e01a      	b.n	80087d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087a2:	4b09      	ldr	r3, [pc, #36]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80087a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a6:	4a08      	ldr	r2, [pc, #32]	@ (80087c8 <HAL_RCC_OscConfig+0x280>)
 80087a8:	f023 0301 	bic.w	r3, r3, #1
 80087ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ae:	f7fc fead 	bl	800550c <HAL_GetTick>
 80087b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087b4:	e00a      	b.n	80087cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087b6:	f7fc fea9 	bl	800550c <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d903      	bls.n	80087cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e15c      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
 80087c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087cc:	4b91      	ldr	r3, [pc, #580]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80087ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1ee      	bne.n	80087b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80a4 	beq.w	800892e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087e6:	4b8b      	ldr	r3, [pc, #556]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80087e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10d      	bne.n	800880e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80087f2:	4b88      	ldr	r3, [pc, #544]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80087f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f6:	4a87      	ldr	r2, [pc, #540]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80087f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80087fe:	4b85      	ldr	r3, [pc, #532]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008806:	60bb      	str	r3, [r7, #8]
 8008808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800880a:	2301      	movs	r3, #1
 800880c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800880e:	4b82      	ldr	r3, [pc, #520]	@ (8008a18 <HAL_RCC_OscConfig+0x4d0>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008816:	2b00      	cmp	r3, #0
 8008818:	d118      	bne.n	800884c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800881a:	4b7f      	ldr	r3, [pc, #508]	@ (8008a18 <HAL_RCC_OscConfig+0x4d0>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a7e      	ldr	r2, [pc, #504]	@ (8008a18 <HAL_RCC_OscConfig+0x4d0>)
 8008820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008826:	f7fc fe71 	bl	800550c <HAL_GetTick>
 800882a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800882c:	e008      	b.n	8008840 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800882e:	f7fc fe6d 	bl	800550c <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	2b64      	cmp	r3, #100	@ 0x64
 800883a:	d901      	bls.n	8008840 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e120      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008840:	4b75      	ldr	r3, [pc, #468]	@ (8008a18 <HAL_RCC_OscConfig+0x4d0>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0f0      	beq.n	800882e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d106      	bne.n	8008862 <HAL_RCC_OscConfig+0x31a>
 8008854:	4b6f      	ldr	r3, [pc, #444]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008858:	4a6e      	ldr	r2, [pc, #440]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 800885a:	f043 0301 	orr.w	r3, r3, #1
 800885e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008860:	e02d      	b.n	80088be <HAL_RCC_OscConfig+0x376>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10c      	bne.n	8008884 <HAL_RCC_OscConfig+0x33c>
 800886a:	4b6a      	ldr	r3, [pc, #424]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 800886c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800886e:	4a69      	ldr	r2, [pc, #420]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008870:	f023 0301 	bic.w	r3, r3, #1
 8008874:	6713      	str	r3, [r2, #112]	@ 0x70
 8008876:	4b67      	ldr	r3, [pc, #412]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800887a:	4a66      	ldr	r2, [pc, #408]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 800887c:	f023 0304 	bic.w	r3, r3, #4
 8008880:	6713      	str	r3, [r2, #112]	@ 0x70
 8008882:	e01c      	b.n	80088be <HAL_RCC_OscConfig+0x376>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b05      	cmp	r3, #5
 800888a:	d10c      	bne.n	80088a6 <HAL_RCC_OscConfig+0x35e>
 800888c:	4b61      	ldr	r3, [pc, #388]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 800888e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008890:	4a60      	ldr	r2, [pc, #384]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008892:	f043 0304 	orr.w	r3, r3, #4
 8008896:	6713      	str	r3, [r2, #112]	@ 0x70
 8008898:	4b5e      	ldr	r3, [pc, #376]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 800889a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800889c:	4a5d      	ldr	r2, [pc, #372]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 800889e:	f043 0301 	orr.w	r3, r3, #1
 80088a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80088a4:	e00b      	b.n	80088be <HAL_RCC_OscConfig+0x376>
 80088a6:	4b5b      	ldr	r3, [pc, #364]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80088a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088aa:	4a5a      	ldr	r2, [pc, #360]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80088ac:	f023 0301 	bic.w	r3, r3, #1
 80088b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80088b2:	4b58      	ldr	r3, [pc, #352]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80088b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088b6:	4a57      	ldr	r2, [pc, #348]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80088b8:	f023 0304 	bic.w	r3, r3, #4
 80088bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d015      	beq.n	80088f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c6:	f7fc fe21 	bl	800550c <HAL_GetTick>
 80088ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088cc:	e00a      	b.n	80088e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ce:	f7fc fe1d 	bl	800550c <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088dc:	4293      	cmp	r3, r2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e0ce      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088e4:	4b4b      	ldr	r3, [pc, #300]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80088e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0ee      	beq.n	80088ce <HAL_RCC_OscConfig+0x386>
 80088f0:	e014      	b.n	800891c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f2:	f7fc fe0b 	bl	800550c <HAL_GetTick>
 80088f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088f8:	e00a      	b.n	8008910 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088fa:	f7fc fe07 	bl	800550c <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008908:	4293      	cmp	r3, r2
 800890a:	d901      	bls.n	8008910 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e0b8      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008910:	4b40      	ldr	r3, [pc, #256]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1ee      	bne.n	80088fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d105      	bne.n	800892e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008922:	4b3c      	ldr	r3, [pc, #240]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008926:	4a3b      	ldr	r2, [pc, #236]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800892c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 80a4 	beq.w	8008a80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008938:	4b36      	ldr	r3, [pc, #216]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f003 030c 	and.w	r3, r3, #12
 8008940:	2b08      	cmp	r3, #8
 8008942:	d06b      	beq.n	8008a1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d149      	bne.n	80089e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800894c:	4b31      	ldr	r3, [pc, #196]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a30      	ldr	r2, [pc, #192]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008958:	f7fc fdd8 	bl	800550c <HAL_GetTick>
 800895c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800895e:	e008      	b.n	8008972 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008960:	f7fc fdd4 	bl	800550c <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e087      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008972:	4b28      	ldr	r3, [pc, #160]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1f0      	bne.n	8008960 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	69da      	ldr	r2, [r3, #28]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	431a      	orrs	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898c:	019b      	lsls	r3, r3, #6
 800898e:	431a      	orrs	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008994:	085b      	lsrs	r3, r3, #1
 8008996:	3b01      	subs	r3, #1
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a0:	061b      	lsls	r3, r3, #24
 80089a2:	4313      	orrs	r3, r2
 80089a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80089a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80089aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089ac:	4b19      	ldr	r3, [pc, #100]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a18      	ldr	r2, [pc, #96]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80089b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b8:	f7fc fda8 	bl	800550c <HAL_GetTick>
 80089bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089be:	e008      	b.n	80089d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089c0:	f7fc fda4 	bl	800550c <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e057      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089d2:	4b10      	ldr	r3, [pc, #64]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0f0      	beq.n	80089c0 <HAL_RCC_OscConfig+0x478>
 80089de:	e04f      	b.n	8008a80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a0b      	ldr	r2, [pc, #44]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 80089e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ec:	f7fc fd8e 	bl	800550c <HAL_GetTick>
 80089f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089f2:	e008      	b.n	8008a06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089f4:	f7fc fd8a 	bl	800550c <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d901      	bls.n	8008a06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e03d      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a06:	4b03      	ldr	r3, [pc, #12]	@ (8008a14 <HAL_RCC_OscConfig+0x4cc>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1f0      	bne.n	80089f4 <HAL_RCC_OscConfig+0x4ac>
 8008a12:	e035      	b.n	8008a80 <HAL_RCC_OscConfig+0x538>
 8008a14:	40023800 	.word	0x40023800
 8008a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8008a8c <HAL_RCC_OscConfig+0x544>)
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d028      	beq.n	8008a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d121      	bne.n	8008a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d11a      	bne.n	8008a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d111      	bne.n	8008a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a62:	085b      	lsrs	r3, r3, #1
 8008a64:	3b01      	subs	r3, #1
 8008a66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d107      	bne.n	8008a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d001      	beq.n	8008a80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e000      	b.n	8008a82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	40023800 	.word	0x40023800

08008a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e0d0      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8008c54 <HAL_RCC_ClockConfig+0x1c4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 030f 	and.w	r3, r3, #15
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d910      	bls.n	8008ad8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ab6:	4b67      	ldr	r3, [pc, #412]	@ (8008c54 <HAL_RCC_ClockConfig+0x1c4>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f023 020f 	bic.w	r2, r3, #15
 8008abe:	4965      	ldr	r1, [pc, #404]	@ (8008c54 <HAL_RCC_ClockConfig+0x1c4>)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ac6:	4b63      	ldr	r3, [pc, #396]	@ (8008c54 <HAL_RCC_ClockConfig+0x1c4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d001      	beq.n	8008ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0b8      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d020      	beq.n	8008b26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008af0:	4b59      	ldr	r3, [pc, #356]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	4a58      	ldr	r2, [pc, #352]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008af6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0308 	and.w	r3, r3, #8
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b08:	4b53      	ldr	r3, [pc, #332]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	4a52      	ldr	r2, [pc, #328]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008b0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b14:	4b50      	ldr	r3, [pc, #320]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	494d      	ldr	r1, [pc, #308]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d040      	beq.n	8008bb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d107      	bne.n	8008b4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b3a:	4b47      	ldr	r3, [pc, #284]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d115      	bne.n	8008b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e07f      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d107      	bne.n	8008b62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b52:	4b41      	ldr	r3, [pc, #260]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d109      	bne.n	8008b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e073      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b62:	4b3d      	ldr	r3, [pc, #244]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e06b      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b72:	4b39      	ldr	r3, [pc, #228]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f023 0203 	bic.w	r2, r3, #3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	4936      	ldr	r1, [pc, #216]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b84:	f7fc fcc2 	bl	800550c <HAL_GetTick>
 8008b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b8a:	e00a      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b8c:	f7fc fcbe 	bl	800550c <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d901      	bls.n	8008ba2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e053      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 020c 	and.w	r2, r3, #12
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d1eb      	bne.n	8008b8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008bb4:	4b27      	ldr	r3, [pc, #156]	@ (8008c54 <HAL_RCC_ClockConfig+0x1c4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 030f 	and.w	r3, r3, #15
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d210      	bcs.n	8008be4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bc2:	4b24      	ldr	r3, [pc, #144]	@ (8008c54 <HAL_RCC_ClockConfig+0x1c4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f023 020f 	bic.w	r2, r3, #15
 8008bca:	4922      	ldr	r1, [pc, #136]	@ (8008c54 <HAL_RCC_ClockConfig+0x1c4>)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bd2:	4b20      	ldr	r3, [pc, #128]	@ (8008c54 <HAL_RCC_ClockConfig+0x1c4>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d001      	beq.n	8008be4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e032      	b.n	8008c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d008      	beq.n	8008c02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bf0:	4b19      	ldr	r3, [pc, #100]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	4916      	ldr	r1, [pc, #88]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0308 	and.w	r3, r3, #8
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c0e:	4b12      	ldr	r3, [pc, #72]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	490e      	ldr	r1, [pc, #56]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008c22:	f000 f821 	bl	8008c68 <HAL_RCC_GetSysClockFreq>
 8008c26:	4602      	mov	r2, r0
 8008c28:	4b0b      	ldr	r3, [pc, #44]	@ (8008c58 <HAL_RCC_ClockConfig+0x1c8>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	091b      	lsrs	r3, r3, #4
 8008c2e:	f003 030f 	and.w	r3, r3, #15
 8008c32:	490a      	ldr	r1, [pc, #40]	@ (8008c5c <HAL_RCC_ClockConfig+0x1cc>)
 8008c34:	5ccb      	ldrb	r3, [r1, r3]
 8008c36:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3a:	4a09      	ldr	r2, [pc, #36]	@ (8008c60 <HAL_RCC_ClockConfig+0x1d0>)
 8008c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008c3e:	4b09      	ldr	r3, [pc, #36]	@ (8008c64 <HAL_RCC_ClockConfig+0x1d4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fb febe 	bl	80049c4 <HAL_InitTick>

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	40023c00 	.word	0x40023c00
 8008c58:	40023800 	.word	0x40023800
 8008c5c:	0801cc5c 	.word	0x0801cc5c
 8008c60:	20000048 	.word	0x20000048
 8008c64:	2000004c 	.word	0x2000004c

08008c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c6c:	b090      	sub	sp, #64	@ 0x40
 8008c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c74:	2300      	movs	r3, #0
 8008c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c78:	2300      	movs	r3, #0
 8008c7a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c80:	4b59      	ldr	r3, [pc, #356]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f003 030c 	and.w	r3, r3, #12
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d00d      	beq.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	f200 80a1 	bhi.w	8008dd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <HAL_RCC_GetSysClockFreq+0x34>
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d003      	beq.n	8008ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008c9a:	e09b      	b.n	8008dd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c9c:	4b53      	ldr	r3, [pc, #332]	@ (8008dec <HAL_RCC_GetSysClockFreq+0x184>)
 8008c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ca0:	e09b      	b.n	8008dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ca2:	4b53      	ldr	r3, [pc, #332]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ca6:	e098      	b.n	8008dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d028      	beq.n	8008d10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	099b      	lsrs	r3, r3, #6
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	623b      	str	r3, [r7, #32]
 8008cc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4b47      	ldr	r3, [pc, #284]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cd4:	fb03 f201 	mul.w	r2, r3, r1
 8008cd8:	2300      	movs	r3, #0
 8008cda:	fb00 f303 	mul.w	r3, r0, r3
 8008cde:	4413      	add	r3, r2
 8008ce0:	4a43      	ldr	r2, [pc, #268]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ce2:	fba0 1202 	umull	r1, r2, r0, r2
 8008ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ce8:	460a      	mov	r2, r1
 8008cea:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cee:	4413      	add	r3, r2
 8008cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	61fa      	str	r2, [r7, #28]
 8008cfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d02:	f7f7 fad5 	bl	80002b0 <__aeabi_uldivmod>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d0e:	e053      	b.n	8008db8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d10:	4b35      	ldr	r3, [pc, #212]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	099b      	lsrs	r3, r3, #6
 8008d16:	2200      	movs	r2, #0
 8008d18:	613b      	str	r3, [r7, #16]
 8008d1a:	617a      	str	r2, [r7, #20]
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008d22:	f04f 0b00 	mov.w	fp, #0
 8008d26:	4652      	mov	r2, sl
 8008d28:	465b      	mov	r3, fp
 8008d2a:	f04f 0000 	mov.w	r0, #0
 8008d2e:	f04f 0100 	mov.w	r1, #0
 8008d32:	0159      	lsls	r1, r3, #5
 8008d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d38:	0150      	lsls	r0, r2, #5
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	ebb2 080a 	subs.w	r8, r2, sl
 8008d42:	eb63 090b 	sbc.w	r9, r3, fp
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	f04f 0300 	mov.w	r3, #0
 8008d4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008d52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008d56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008d5a:	ebb2 0408 	subs.w	r4, r2, r8
 8008d5e:	eb63 0509 	sbc.w	r5, r3, r9
 8008d62:	f04f 0200 	mov.w	r2, #0
 8008d66:	f04f 0300 	mov.w	r3, #0
 8008d6a:	00eb      	lsls	r3, r5, #3
 8008d6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d70:	00e2      	lsls	r2, r4, #3
 8008d72:	4614      	mov	r4, r2
 8008d74:	461d      	mov	r5, r3
 8008d76:	eb14 030a 	adds.w	r3, r4, sl
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	eb45 030b 	adc.w	r3, r5, fp
 8008d80:	607b      	str	r3, [r7, #4]
 8008d82:	f04f 0200 	mov.w	r2, #0
 8008d86:	f04f 0300 	mov.w	r3, #0
 8008d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d8e:	4629      	mov	r1, r5
 8008d90:	028b      	lsls	r3, r1, #10
 8008d92:	4621      	mov	r1, r4
 8008d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d98:	4621      	mov	r1, r4
 8008d9a:	028a      	lsls	r2, r1, #10
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da2:	2200      	movs	r2, #0
 8008da4:	60bb      	str	r3, [r7, #8]
 8008da6:	60fa      	str	r2, [r7, #12]
 8008da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dac:	f7f7 fa80 	bl	80002b0 <__aeabi_uldivmod>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4613      	mov	r3, r2
 8008db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008db8:	4b0b      	ldr	r3, [pc, #44]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	0c1b      	lsrs	r3, r3, #16
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008dc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dd2:	e002      	b.n	8008dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008dd4:	4b05      	ldr	r3, [pc, #20]	@ (8008dec <HAL_RCC_GetSysClockFreq+0x184>)
 8008dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3740      	adds	r7, #64	@ 0x40
 8008de0:	46bd      	mov	sp, r7
 8008de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008de6:	bf00      	nop
 8008de8:	40023800 	.word	0x40023800
 8008dec:	00f42400 	.word	0x00f42400
 8008df0:	017d7840 	.word	0x017d7840

08008df4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008df4:	b480      	push	{r7}
 8008df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008df8:	4b03      	ldr	r3, [pc, #12]	@ (8008e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000048 	.word	0x20000048

08008e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e10:	f7ff fff0 	bl	8008df4 <HAL_RCC_GetHCLKFreq>
 8008e14:	4602      	mov	r2, r0
 8008e16:	4b05      	ldr	r3, [pc, #20]	@ (8008e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	0a9b      	lsrs	r3, r3, #10
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	4903      	ldr	r1, [pc, #12]	@ (8008e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e22:	5ccb      	ldrb	r3, [r1, r3]
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	40023800 	.word	0x40023800
 8008e30:	0801cc6c 	.word	0x0801cc6c

08008e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e38:	f7ff ffdc 	bl	8008df4 <HAL_RCC_GetHCLKFreq>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	4b05      	ldr	r3, [pc, #20]	@ (8008e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	0b5b      	lsrs	r3, r3, #13
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	4903      	ldr	r1, [pc, #12]	@ (8008e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e4a:	5ccb      	ldrb	r3, [r1, r3]
 8008e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	40023800 	.word	0x40023800
 8008e58:	0801cc6c 	.word	0x0801cc6c

08008e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	220f      	movs	r2, #15
 8008e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e6c:	4b12      	ldr	r3, [pc, #72]	@ (8008eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f003 0203 	and.w	r2, r3, #3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008e78:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008e84:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008e90:	4b09      	ldr	r3, [pc, #36]	@ (8008eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	08db      	lsrs	r3, r3, #3
 8008e96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e9e:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <HAL_RCC_GetClockConfig+0x60>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 020f 	and.w	r2, r3, #15
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	601a      	str	r2, [r3, #0]
}
 8008eaa:	bf00      	nop
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	40023800 	.word	0x40023800
 8008ebc:	40023c00 	.word	0x40023c00

08008ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d012      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008ee8:	4b69      	ldr	r3, [pc, #420]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	4a68      	ldr	r2, [pc, #416]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008ef2:	6093      	str	r3, [r2, #8]
 8008ef4:	4b66      	ldr	r3, [pc, #408]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008efc:	4964      	ldr	r1, [pc, #400]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d017      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f28:	4959      	ldr	r1, [pc, #356]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f38:	d101      	bne.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008f46:	2301      	movs	r3, #1
 8008f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d017      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008f56:	4b4e      	ldr	r3, [pc, #312]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f64:	494a      	ldr	r1, [pc, #296]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f74:	d101      	bne.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008f76:	2301      	movs	r3, #1
 8008f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d101      	bne.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008f82:	2301      	movs	r3, #1
 8008f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008f92:	2301      	movs	r3, #1
 8008f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0320 	and.w	r3, r3, #32
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 808b 	beq.w	80090ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa8:	4a39      	ldr	r2, [pc, #228]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8008fb0:	4b37      	ldr	r3, [pc, #220]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fb8:	60bb      	str	r3, [r7, #8]
 8008fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008fbc:	4b35      	ldr	r3, [pc, #212]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a34      	ldr	r2, [pc, #208]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fc8:	f7fc faa0 	bl	800550c <HAL_GetTick>
 8008fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008fce:	e008      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fd0:	f7fc fa9c 	bl	800550c <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b64      	cmp	r3, #100	@ 0x64
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e357      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0f0      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008fee:	4b28      	ldr	r3, [pc, #160]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d035      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	429a      	cmp	r2, r3
 800900a:	d02e      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800900c:	4b20      	ldr	r3, [pc, #128]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800900e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009016:	4b1e      	ldr	r3, [pc, #120]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800901a:	4a1d      	ldr	r2, [pc, #116]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800901c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009020:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009022:	4b1b      	ldr	r3, [pc, #108]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009026:	4a1a      	ldr	r2, [pc, #104]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800902c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800902e:	4a18      	ldr	r2, [pc, #96]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009034:	4b16      	ldr	r3, [pc, #88]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	2b01      	cmp	r3, #1
 800903e:	d114      	bne.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009040:	f7fc fa64 	bl	800550c <HAL_GetTick>
 8009044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009046:	e00a      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009048:	f7fc fa60 	bl	800550c <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009056:	4293      	cmp	r3, r2
 8009058:	d901      	bls.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e319      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800905e:	4b0c      	ldr	r3, [pc, #48]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0ee      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009076:	d111      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009078:	4b05      	ldr	r3, [pc, #20]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009084:	4b04      	ldr	r3, [pc, #16]	@ (8009098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009086:	400b      	ands	r3, r1
 8009088:	4901      	ldr	r1, [pc, #4]	@ (8009090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800908a:	4313      	orrs	r3, r2
 800908c:	608b      	str	r3, [r1, #8]
 800908e:	e00b      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009090:	40023800 	.word	0x40023800
 8009094:	40007000 	.word	0x40007000
 8009098:	0ffffcff 	.word	0x0ffffcff
 800909c:	4baa      	ldr	r3, [pc, #680]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	4aa9      	ldr	r2, [pc, #676]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090a2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80090a6:	6093      	str	r3, [r2, #8]
 80090a8:	4ba7      	ldr	r3, [pc, #668]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090b4:	49a4      	ldr	r1, [pc, #656]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d010      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090c6:	4ba0      	ldr	r3, [pc, #640]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090cc:	4a9e      	ldr	r2, [pc, #632]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80090d6:	4b9c      	ldr	r3, [pc, #624]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e0:	4999      	ldr	r1, [pc, #612]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00a      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80090f4:	4b94      	ldr	r3, [pc, #592]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009102:	4991      	ldr	r1, [pc, #580]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009104:	4313      	orrs	r3, r2
 8009106:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009116:	4b8c      	ldr	r3, [pc, #560]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800911c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009124:	4988      	ldr	r1, [pc, #544]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009126:	4313      	orrs	r3, r2
 8009128:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00a      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009138:	4b83      	ldr	r3, [pc, #524]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800913a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800913e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009146:	4980      	ldr	r1, [pc, #512]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009148:	4313      	orrs	r3, r2
 800914a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800915a:	4b7b      	ldr	r3, [pc, #492]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800915c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009160:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009168:	4977      	ldr	r1, [pc, #476]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916a:	4313      	orrs	r3, r2
 800916c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00a      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800917c:	4b72      	ldr	r3, [pc, #456]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800917e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009182:	f023 0203 	bic.w	r2, r3, #3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918a:	496f      	ldr	r1, [pc, #444]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800918c:	4313      	orrs	r3, r2
 800918e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800919e:	4b6a      	ldr	r3, [pc, #424]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091a4:	f023 020c 	bic.w	r2, r3, #12
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091ac:	4966      	ldr	r1, [pc, #408]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80091c0:	4b61      	ldr	r3, [pc, #388]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ce:	495e      	ldr	r1, [pc, #376]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00a      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80091e2:	4b59      	ldr	r3, [pc, #356]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f0:	4955      	ldr	r1, [pc, #340]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00a      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009204:	4b50      	ldr	r3, [pc, #320]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800920a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009212:	494d      	ldr	r1, [pc, #308]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009214:	4313      	orrs	r3, r2
 8009216:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009226:	4b48      	ldr	r3, [pc, #288]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800922c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009234:	4944      	ldr	r1, [pc, #272]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009236:	4313      	orrs	r3, r2
 8009238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00a      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009248:	4b3f      	ldr	r3, [pc, #252]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800924a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800924e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009256:	493c      	ldr	r1, [pc, #240]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009258:	4313      	orrs	r3, r2
 800925a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800926a:	4b37      	ldr	r3, [pc, #220]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800926c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009270:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009278:	4933      	ldr	r1, [pc, #204]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800927a:	4313      	orrs	r3, r2
 800927c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00a      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800928c:	4b2e      	ldr	r3, [pc, #184]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800928e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009292:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800929a:	492b      	ldr	r1, [pc, #172]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800929c:	4313      	orrs	r3, r2
 800929e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d011      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80092ae:	4b26      	ldr	r3, [pc, #152]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092bc:	4922      	ldr	r1, [pc, #136]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092cc:	d101      	bne.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80092ce:	2301      	movs	r3, #1
 80092d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0308 	and.w	r3, r3, #8
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80092de:	2301      	movs	r3, #1
 80092e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00a      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092ee:	4b16      	ldr	r3, [pc, #88]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092fc:	4912      	ldr	r1, [pc, #72]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009310:	4b0d      	ldr	r3, [pc, #52]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009316:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009320:	4909      	ldr	r1, [pc, #36]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009322:	4313      	orrs	r3, r2
 8009324:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d006      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 80d9 	beq.w	80094ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800933c:	4b02      	ldr	r3, [pc, #8]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a01      	ldr	r2, [pc, #4]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009342:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009346:	e001      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009348:	40023800 	.word	0x40023800
 800934c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800934e:	f7fc f8dd 	bl	800550c <HAL_GetTick>
 8009352:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009354:	e008      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009356:	f7fc f8d9 	bl	800550c <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	2b64      	cmp	r3, #100	@ 0x64
 8009362:	d901      	bls.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e194      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009368:	4b6c      	ldr	r3, [pc, #432]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1f0      	bne.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b00      	cmp	r3, #0
 800937e:	d021      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009384:	2b00      	cmp	r3, #0
 8009386:	d11d      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009388:	4b64      	ldr	r3, [pc, #400]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800938a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800938e:	0c1b      	lsrs	r3, r3, #16
 8009390:	f003 0303 	and.w	r3, r3, #3
 8009394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009396:	4b61      	ldr	r3, [pc, #388]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800939c:	0e1b      	lsrs	r3, r3, #24
 800939e:	f003 030f 	and.w	r3, r3, #15
 80093a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	019a      	lsls	r2, r3, #6
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	431a      	orrs	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	061b      	lsls	r3, r3, #24
 80093b4:	431a      	orrs	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	071b      	lsls	r3, r3, #28
 80093bc:	4957      	ldr	r1, [pc, #348]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d004      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093d8:	d00a      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d02e      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093ee:	d129      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80093f0:	4b4a      	ldr	r3, [pc, #296]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093f6:	0c1b      	lsrs	r3, r3, #16
 80093f8:	f003 0303 	and.w	r3, r3, #3
 80093fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80093fe:	4b47      	ldr	r3, [pc, #284]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009404:	0f1b      	lsrs	r3, r3, #28
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	019a      	lsls	r2, r3, #6
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	041b      	lsls	r3, r3, #16
 8009416:	431a      	orrs	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	061b      	lsls	r3, r3, #24
 800941e:	431a      	orrs	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	071b      	lsls	r3, r3, #28
 8009424:	493d      	ldr	r1, [pc, #244]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009426:	4313      	orrs	r3, r2
 8009428:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800942c:	4b3b      	ldr	r3, [pc, #236]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800942e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009432:	f023 021f 	bic.w	r2, r3, #31
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800943a:	3b01      	subs	r3, #1
 800943c:	4937      	ldr	r1, [pc, #220]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800943e:	4313      	orrs	r3, r2
 8009440:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01d      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009450:	4b32      	ldr	r3, [pc, #200]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009456:	0e1b      	lsrs	r3, r3, #24
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800945e:	4b2f      	ldr	r3, [pc, #188]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009464:	0f1b      	lsrs	r3, r3, #28
 8009466:	f003 0307 	and.w	r3, r3, #7
 800946a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	019a      	lsls	r2, r3, #6
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	041b      	lsls	r3, r3, #16
 8009478:	431a      	orrs	r2, r3
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	061b      	lsls	r3, r3, #24
 800947e:	431a      	orrs	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	071b      	lsls	r3, r3, #28
 8009484:	4925      	ldr	r1, [pc, #148]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009486:	4313      	orrs	r3, r2
 8009488:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d011      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	019a      	lsls	r2, r3, #6
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	041b      	lsls	r3, r3, #16
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	061b      	lsls	r3, r3, #24
 80094ac:	431a      	orrs	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	071b      	lsls	r3, r3, #28
 80094b4:	4919      	ldr	r1, [pc, #100]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80094bc:	4b17      	ldr	r3, [pc, #92]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a16      	ldr	r2, [pc, #88]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80094c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094c8:	f7fc f820 	bl	800550c <HAL_GetTick>
 80094cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80094ce:	e008      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80094d0:	f7fc f81c 	bl	800550c <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b64      	cmp	r3, #100	@ 0x64
 80094dc:	d901      	bls.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e0d7      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80094e2:	4b0e      	ldr	r3, [pc, #56]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0f0      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	f040 80cd 	bne.w	8009690 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80094f6:	4b09      	ldr	r3, [pc, #36]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a08      	ldr	r2, [pc, #32]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009502:	f7fc f803 	bl	800550c <HAL_GetTick>
 8009506:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009508:	e00a      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800950a:	f7fb ffff 	bl	800550c <HAL_GetTick>
 800950e:	4602      	mov	r2, r0
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	2b64      	cmp	r3, #100	@ 0x64
 8009516:	d903      	bls.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009518:	2303      	movs	r3, #3
 800951a:	e0ba      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800951c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009520:	4b5e      	ldr	r3, [pc, #376]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800952c:	d0ed      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d009      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800954a:	2b00      	cmp	r3, #0
 800954c:	d02e      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	d12a      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009556:	4b51      	ldr	r3, [pc, #324]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800955c:	0c1b      	lsrs	r3, r3, #16
 800955e:	f003 0303 	and.w	r3, r3, #3
 8009562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009564:	4b4d      	ldr	r3, [pc, #308]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800956a:	0f1b      	lsrs	r3, r3, #28
 800956c:	f003 0307 	and.w	r3, r3, #7
 8009570:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	019a      	lsls	r2, r3, #6
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	041b      	lsls	r3, r3, #16
 800957c:	431a      	orrs	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	061b      	lsls	r3, r3, #24
 8009584:	431a      	orrs	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	071b      	lsls	r3, r3, #28
 800958a:	4944      	ldr	r1, [pc, #272]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800958c:	4313      	orrs	r3, r2
 800958e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009592:	4b42      	ldr	r3, [pc, #264]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009598:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a0:	3b01      	subs	r3, #1
 80095a2:	021b      	lsls	r3, r3, #8
 80095a4:	493d      	ldr	r1, [pc, #244]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d022      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c0:	d11d      	bne.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80095c2:	4b36      	ldr	r3, [pc, #216]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c8:	0e1b      	lsrs	r3, r3, #24
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80095d0:	4b32      	ldr	r3, [pc, #200]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095d6:	0f1b      	lsrs	r3, r3, #28
 80095d8:	f003 0307 	and.w	r3, r3, #7
 80095dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	019a      	lsls	r2, r3, #6
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a1b      	ldr	r3, [r3, #32]
 80095e8:	041b      	lsls	r3, r3, #16
 80095ea:	431a      	orrs	r2, r3
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	061b      	lsls	r3, r3, #24
 80095f0:	431a      	orrs	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	071b      	lsls	r3, r3, #28
 80095f6:	4929      	ldr	r1, [pc, #164]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095f8:	4313      	orrs	r3, r2
 80095fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d028      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800960a:	4b24      	ldr	r3, [pc, #144]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800960c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009610:	0e1b      	lsrs	r3, r3, #24
 8009612:	f003 030f 	and.w	r3, r3, #15
 8009616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009618:	4b20      	ldr	r3, [pc, #128]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800961a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800961e:	0c1b      	lsrs	r3, r3, #16
 8009620:	f003 0303 	and.w	r3, r3, #3
 8009624:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	019a      	lsls	r2, r3, #6
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	431a      	orrs	r2, r3
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	061b      	lsls	r3, r3, #24
 8009636:	431a      	orrs	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	071b      	lsls	r3, r3, #28
 800963e:	4917      	ldr	r1, [pc, #92]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009640:	4313      	orrs	r3, r2
 8009642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009646:	4b15      	ldr	r3, [pc, #84]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800964c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009654:	4911      	ldr	r1, [pc, #68]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009656:	4313      	orrs	r3, r2
 8009658:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800965c:	4b0f      	ldr	r3, [pc, #60]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a0e      	ldr	r2, [pc, #56]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009668:	f7fb ff50 	bl	800550c <HAL_GetTick>
 800966c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800966e:	e008      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009670:	f7fb ff4c 	bl	800550c <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	2b64      	cmp	r3, #100	@ 0x64
 800967c:	d901      	bls.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800967e:	2303      	movs	r3, #3
 8009680:	e007      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009682:	4b06      	ldr	r3, [pc, #24]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800968a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800968e:	d1ef      	bne.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3720      	adds	r7, #32
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	40023800 	.word	0x40023800

080096a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d101      	bne.n	80096b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e071      	b.n	800979a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	7f5b      	ldrb	r3, [r3, #29]
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d105      	bne.n	80096cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7f9 fbf8 	bl	8002ebc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f003 0310 	and.w	r3, r3, #16
 80096dc:	2b10      	cmp	r3, #16
 80096de:	d053      	beq.n	8009788 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	22ca      	movs	r2, #202	@ 0xca
 80096e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2253      	movs	r2, #83	@ 0x53
 80096ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fac9 	bl	8009c88 <RTC_EnterInitMode>
 80096f6:	4603      	mov	r3, r0
 80096f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d12a      	bne.n	8009756 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6899      	ldr	r1, [r3, #8]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	4b26      	ldr	r3, [pc, #152]	@ (80097a4 <HAL_RTC_Init+0x104>)
 800970c:	400b      	ands	r3, r1
 800970e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6899      	ldr	r1, [r3, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	431a      	orrs	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	431a      	orrs	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	68d2      	ldr	r2, [r2, #12]
 8009736:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6919      	ldr	r1, [r3, #16]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	041a      	lsls	r2, r3, #16
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fad2 	bl	8009cf6 <RTC_ExitInitMode>
 8009752:	4603      	mov	r3, r0
 8009754:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d110      	bne.n	800977e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0208 	bic.w	r2, r2, #8
 800976a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	699a      	ldr	r2, [r3, #24]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	22ff      	movs	r2, #255	@ 0xff
 8009784:	625a      	str	r2, [r3, #36]	@ 0x24
 8009786:	e001      	b.n	800978c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d102      	bne.n	8009798 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009798:	7bfb      	ldrb	r3, [r7, #15]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	ff8fffbf 	.word	0xff8fffbf

080097a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80097a8:	b590      	push	{r4, r7, lr}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	7f1b      	ldrb	r3, [r3, #28]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d101      	bne.n	80097c4 <HAL_RTC_SetTime+0x1c>
 80097c0:	2302      	movs	r3, #2
 80097c2:	e085      	b.n	80098d0 <HAL_RTC_SetTime+0x128>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2201      	movs	r2, #1
 80097c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2202      	movs	r2, #2
 80097ce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d126      	bne.n	8009824 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d102      	bne.n	80097ea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2200      	movs	r2, #0
 80097e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 faa6 	bl	8009d40 <RTC_ByteToBcd2>
 80097f4:	4603      	mov	r3, r0
 80097f6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	785b      	ldrb	r3, [r3, #1]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fa9f 	bl	8009d40 <RTC_ByteToBcd2>
 8009802:	4603      	mov	r3, r0
 8009804:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009806:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	789b      	ldrb	r3, [r3, #2]
 800980c:	4618      	mov	r0, r3
 800980e:	f000 fa97 	bl	8009d40 <RTC_ByteToBcd2>
 8009812:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009814:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	78db      	ldrb	r3, [r3, #3]
 800981c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800981e:	4313      	orrs	r3, r2
 8009820:	617b      	str	r3, [r7, #20]
 8009822:	e018      	b.n	8009856 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800982e:	2b00      	cmp	r3, #0
 8009830:	d102      	bne.n	8009838 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2200      	movs	r2, #0
 8009836:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	785b      	ldrb	r3, [r3, #1]
 8009842:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009844:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800984a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	78db      	ldrb	r3, [r3, #3]
 8009850:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009852:	4313      	orrs	r3, r2
 8009854:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	22ca      	movs	r2, #202	@ 0xca
 800985c:	625a      	str	r2, [r3, #36]	@ 0x24
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2253      	movs	r2, #83	@ 0x53
 8009864:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 fa0e 	bl	8009c88 <RTC_EnterInitMode>
 800986c:	4603      	mov	r3, r0
 800986e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009870:	7cfb      	ldrb	r3, [r7, #19]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d11e      	bne.n	80098b4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	6979      	ldr	r1, [r7, #20]
 800987c:	4b16      	ldr	r3, [pc, #88]	@ (80098d8 <HAL_RTC_SetTime+0x130>)
 800987e:	400b      	ands	r3, r1
 8009880:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009890:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6899      	ldr	r1, [r3, #8]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	68da      	ldr	r2, [r3, #12]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	431a      	orrs	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 fa23 	bl	8009cf6 <RTC_ExitInitMode>
 80098b0:	4603      	mov	r3, r0
 80098b2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80098b4:	7cfb      	ldrb	r3, [r7, #19]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	22ff      	movs	r2, #255	@ 0xff
 80098c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	771a      	strb	r2, [r3, #28]

  return status;
 80098ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	371c      	adds	r7, #28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd90      	pop	{r4, r7, pc}
 80098d8:	007f7f7f 	.word	0x007f7f7f

080098dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80098dc:	b590      	push	{r4, r7, lr}
 80098de:	b087      	sub	sp, #28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	7f1b      	ldrb	r3, [r3, #28]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d101      	bne.n	80098f8 <HAL_RTC_SetDate+0x1c>
 80098f4:	2302      	movs	r3, #2
 80098f6:	e06f      	b.n	80099d8 <HAL_RTC_SetDate+0xfc>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2201      	movs	r2, #1
 80098fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2202      	movs	r2, #2
 8009902:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10e      	bne.n	8009928 <HAL_RTC_SetDate+0x4c>
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	f003 0310 	and.w	r3, r3, #16
 8009912:	2b00      	cmp	r3, #0
 8009914:	d008      	beq.n	8009928 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	785b      	ldrb	r3, [r3, #1]
 800991a:	f023 0310 	bic.w	r3, r3, #16
 800991e:	b2db      	uxtb	r3, r3
 8009920:	330a      	adds	r3, #10
 8009922:	b2da      	uxtb	r2, r3
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d11c      	bne.n	8009968 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	78db      	ldrb	r3, [r3, #3]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fa04 	bl	8009d40 <RTC_ByteToBcd2>
 8009938:	4603      	mov	r3, r0
 800993a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	4618      	mov	r0, r3
 8009942:	f000 f9fd 	bl	8009d40 <RTC_ByteToBcd2>
 8009946:	4603      	mov	r3, r0
 8009948:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800994a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	789b      	ldrb	r3, [r3, #2]
 8009950:	4618      	mov	r0, r3
 8009952:	f000 f9f5 	bl	8009d40 <RTC_ByteToBcd2>
 8009956:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009958:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]
 8009966:	e00e      	b.n	8009986 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	78db      	ldrb	r3, [r3, #3]
 800996c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	785b      	ldrb	r3, [r3, #1]
 8009972:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009974:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800997a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009982:	4313      	orrs	r3, r2
 8009984:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	22ca      	movs	r2, #202	@ 0xca
 800998c:	625a      	str	r2, [r3, #36]	@ 0x24
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2253      	movs	r2, #83	@ 0x53
 8009994:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 f976 	bl	8009c88 <RTC_EnterInitMode>
 800999c:	4603      	mov	r3, r0
 800999e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80099a0:	7cfb      	ldrb	r3, [r7, #19]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10a      	bne.n	80099bc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	6979      	ldr	r1, [r7, #20]
 80099ac:	4b0c      	ldr	r3, [pc, #48]	@ (80099e0 <HAL_RTC_SetDate+0x104>)
 80099ae:	400b      	ands	r3, r1
 80099b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 f99f 	bl	8009cf6 <RTC_ExitInitMode>
 80099b8:	4603      	mov	r3, r0
 80099ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80099bc:	7cfb      	ldrb	r3, [r7, #19]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d102      	bne.n	80099c8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	22ff      	movs	r2, #255	@ 0xff
 80099ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	771a      	strb	r2, [r3, #28]

  return status;
 80099d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd90      	pop	{r4, r7, pc}
 80099e0:	00ffff3f 	.word	0x00ffff3f

080099e4 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80099e4:	b590      	push	{r4, r7, lr}
 80099e6:	b089      	sub	sp, #36	@ 0x24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80099f4:	2300      	movs	r3, #0
 80099f6:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	7f1b      	ldrb	r3, [r3, #28]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d101      	bne.n	8009a08 <HAL_RTC_SetAlarm+0x24>
 8009a04:	2302      	movs	r3, #2
 8009a06:	e113      	b.n	8009c30 <HAL_RTC_SetAlarm+0x24c>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2202      	movs	r2, #2
 8009a12:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d137      	bne.n	8009a8a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d102      	bne.n	8009a2e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 f984 	bl	8009d40 <RTC_ByteToBcd2>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	785b      	ldrb	r3, [r3, #1]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 f97d 	bl	8009d40 <RTC_ByteToBcd2>
 8009a46:	4603      	mov	r3, r0
 8009a48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009a4a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	789b      	ldrb	r3, [r3, #2]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 f975 	bl	8009d40 <RTC_ByteToBcd2>
 8009a56:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009a58:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	78db      	ldrb	r3, [r3, #3]
 8009a60:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009a62:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 f967 	bl	8009d40 <RTC_ByteToBcd2>
 8009a72:	4603      	mov	r3, r0
 8009a74:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009a76:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009a7e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009a84:	4313      	orrs	r3, r2
 8009a86:	61fb      	str	r3, [r7, #28]
 8009a88:	e023      	b.n	8009ad2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009aaa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009ab0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	78db      	ldrb	r3, [r3, #3]
 8009ab6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009ab8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ac0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009ac2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009ac8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009ada:	4313      	orrs	r3, r2
 8009adc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	22ca      	movs	r2, #202	@ 0xca
 8009ae4:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2253      	movs	r2, #83	@ 0x53
 8009aec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009af6:	d148      	bne.n	8009b8a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689a      	ldr	r2, [r3, #8]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b06:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689a      	ldr	r2, [r3, #8]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009b16:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009b28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b2a:	f7fb fcef 	bl	800550c <HAL_GetTick>
 8009b2e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009b30:	e013      	b.n	8009b5a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b32:	f7fb fceb 	bl	800550c <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b40:	d90b      	bls.n	8009b5a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	22ff      	movs	r2, #255	@ 0xff
 8009b48:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2203      	movs	r2, #3
 8009b4e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e06a      	b.n	8009c30 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0e4      	beq.n	8009b32 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	69fa      	ldr	r2, [r7, #28]
 8009b6e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b86:	609a      	str	r2, [r3, #8]
 8009b88:	e047      	b.n	8009c1a <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	689a      	ldr	r2, [r3, #8]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009b98:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ba8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009bba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009bbc:	f7fb fca6 	bl	800550c <HAL_GetTick>
 8009bc0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009bc2:	e013      	b.n	8009bec <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009bc4:	f7fb fca2 	bl	800550c <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bd2:	d90b      	bls.n	8009bec <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	22ff      	movs	r2, #255	@ 0xff
 8009bda:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2203      	movs	r2, #3
 8009be0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e021      	b.n	8009c30 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0e4      	beq.n	8009bc4 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	69fa      	ldr	r2, [r7, #28]
 8009c00:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c18:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	22ff      	movs	r2, #255	@ 0xff
 8009c20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3724      	adds	r7, #36	@ 0x24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd90      	pop	{r4, r7, pc}

08009c38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c40:	2300      	movs	r3, #0
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68da      	ldr	r2, [r3, #12]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009c52:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c54:	f7fb fc5a 	bl	800550c <HAL_GetTick>
 8009c58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c5a:	e009      	b.n	8009c70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c5c:	f7fb fc56 	bl	800550c <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c6a:	d901      	bls.n	8009c70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e007      	b.n	8009c80 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f003 0320 	and.w	r3, r3, #32
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0ee      	beq.n	8009c5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c90:	2300      	movs	r3, #0
 8009c92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d122      	bne.n	8009cec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68da      	ldr	r2, [r3, #12]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009cb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009cb6:	f7fb fc29 	bl	800550c <HAL_GetTick>
 8009cba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009cbc:	e00c      	b.n	8009cd8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009cbe:	f7fb fc25 	bl	800550c <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ccc:	d904      	bls.n	8009cd8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2204      	movs	r2, #4
 8009cd2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d102      	bne.n	8009cec <RTC_EnterInitMode+0x64>
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d1e8      	bne.n	8009cbe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68da      	ldr	r2, [r3, #12]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d10:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f003 0320 	and.w	r3, r3, #32
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff ff89 	bl	8009c38 <HAL_RTC_WaitForSynchro>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d004      	beq.n	8009d36 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2204      	movs	r2, #4
 8009d30:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009d4e:	e005      	b.n	8009d5c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3301      	adds	r3, #1
 8009d54:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009d56:	79fb      	ldrb	r3, [r7, #7]
 8009d58:	3b0a      	subs	r3, #10
 8009d5a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009d5c:	79fb      	ldrb	r3, [r7, #7]
 8009d5e:	2b09      	cmp	r3, #9
 8009d60:	d8f6      	bhi.n	8009d50 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	011b      	lsls	r3, r3, #4
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	79fb      	ldrb	r3, [r7, #7]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	b2db      	uxtb	r3, r3
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	7f1b      	ldrb	r3, [r3, #28]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e050      	b.n	8009e3a <HAL_RTCEx_SetTimeStamp+0xbe>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2202      	movs	r2, #2
 8009da2:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 0206 	bic.w	r2, r2, #6
 8009db2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689a      	ldr	r2, [r3, #8]
 8009dca:	4b1f      	ldr	r3, [pc, #124]	@ (8009e48 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	22ca      	movs	r2, #202	@ 0xca
 8009dde:	625a      	str	r2, [r3, #36]	@ 0x24
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2253      	movs	r2, #83	@ 0x53
 8009de6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009e00:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8009e12:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689a      	ldr	r2, [r3, #8]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e22:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	22ff      	movs	r2, #255	@ 0xff
 8009e2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	371c      	adds	r7, #28
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	fffff7f7 	.word	0xfffff7f7

08009e4c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e025      	b.n	8009eac <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d106      	bne.n	8009e7a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7f6 fe4f 	bl	8000b18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2202      	movs	r2, #2
 8009e7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3304      	adds	r3, #4
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	f001 fa33 	bl	800b2f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6818      	ldr	r0, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	f001 fa87 	bl	800b3b0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009ec6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d101      	bne.n	8009ed2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009ece:	2302      	movs	r3, #2
 8009ed0:	e021      	b.n	8009f16 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d002      	beq.n	8009ede <HAL_SDRAM_SendCommand+0x2a>
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	2b05      	cmp	r3, #5
 8009edc:	d118      	bne.n	8009f10 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	68b9      	ldr	r1, [r7, #8]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f001 fac8 	bl	800b484 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d104      	bne.n	8009f06 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2205      	movs	r2, #5
 8009f00:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009f04:	e006      	b.n	8009f14 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009f0e:	e001      	b.n	8009f14 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e000      	b.n	8009f16 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d101      	bne.n	8009f38 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009f34:	2302      	movs	r3, #2
 8009f36:	e016      	b.n	8009f66 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d10f      	bne.n	8009f64 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f001 faba 	bl	800b4cc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	e000      	b.n	8009f66 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e09d      	b.n	800a0bc <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d108      	bne.n	8009f9a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f90:	d009      	beq.n	8009fa6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	61da      	str	r2, [r3, #28]
 8009f98:	e005      	b.n	8009fa6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d106      	bne.n	8009fc6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7f8 ffe7 	bl	8002f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2202      	movs	r2, #2
 8009fca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fdc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009fe6:	d902      	bls.n	8009fee <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	e002      	b.n	8009ff4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ff2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009ffc:	d007      	beq.n	800a00e <HAL_SPI_Init+0xa0>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a006:	d002      	beq.n	800a00e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a01e:	431a      	orrs	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	f003 0302 	and.w	r3, r3, #2
 800a028:	431a      	orrs	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a03c:	431a      	orrs	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a046:	431a      	orrs	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a1b      	ldr	r3, [r3, #32]
 800a04c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a050:	ea42 0103 	orr.w	r1, r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a058:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	430a      	orrs	r2, r1
 800a062:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	0c1b      	lsrs	r3, r3, #16
 800a06a:	f003 0204 	and.w	r2, r3, #4
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a072:	f003 0310 	and.w	r3, r3, #16
 800a076:	431a      	orrs	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a07c:	f003 0308 	and.w	r3, r3, #8
 800a080:	431a      	orrs	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a08a:	ea42 0103 	orr.w	r1, r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	430a      	orrs	r2, r1
 800a09a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	69da      	ldr	r2, [r3, #28]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a0aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e049      	b.n	800a16a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d106      	bne.n	800a0f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7fa ff92 	bl	8005014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3304      	adds	r3, #4
 800a100:	4619      	mov	r1, r3
 800a102:	4610      	mov	r0, r2
 800a104:	f000 fac0 	bl	800a688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	d001      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e054      	b.n	800a236 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68da      	ldr	r2, [r3, #12]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f042 0201 	orr.w	r2, r2, #1
 800a1a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a26      	ldr	r2, [pc, #152]	@ (800a244 <HAL_TIM_Base_Start_IT+0xd0>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d022      	beq.n	800a1f4 <HAL_TIM_Base_Start_IT+0x80>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1b6:	d01d      	beq.n	800a1f4 <HAL_TIM_Base_Start_IT+0x80>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a22      	ldr	r2, [pc, #136]	@ (800a248 <HAL_TIM_Base_Start_IT+0xd4>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d018      	beq.n	800a1f4 <HAL_TIM_Base_Start_IT+0x80>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a21      	ldr	r2, [pc, #132]	@ (800a24c <HAL_TIM_Base_Start_IT+0xd8>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d013      	beq.n	800a1f4 <HAL_TIM_Base_Start_IT+0x80>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a1f      	ldr	r2, [pc, #124]	@ (800a250 <HAL_TIM_Base_Start_IT+0xdc>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d00e      	beq.n	800a1f4 <HAL_TIM_Base_Start_IT+0x80>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a1e      	ldr	r2, [pc, #120]	@ (800a254 <HAL_TIM_Base_Start_IT+0xe0>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d009      	beq.n	800a1f4 <HAL_TIM_Base_Start_IT+0x80>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800a258 <HAL_TIM_Base_Start_IT+0xe4>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d004      	beq.n	800a1f4 <HAL_TIM_Base_Start_IT+0x80>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a1b      	ldr	r2, [pc, #108]	@ (800a25c <HAL_TIM_Base_Start_IT+0xe8>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d115      	bne.n	800a220 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689a      	ldr	r2, [r3, #8]
 800a1fa:	4b19      	ldr	r3, [pc, #100]	@ (800a260 <HAL_TIM_Base_Start_IT+0xec>)
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b06      	cmp	r3, #6
 800a204:	d015      	beq.n	800a232 <HAL_TIM_Base_Start_IT+0xbe>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a20c:	d011      	beq.n	800a232 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f042 0201 	orr.w	r2, r2, #1
 800a21c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a21e:	e008      	b.n	800a232 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f042 0201 	orr.w	r2, r2, #1
 800a22e:	601a      	str	r2, [r3, #0]
 800a230:	e000      	b.n	800a234 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a232:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	40010000 	.word	0x40010000
 800a248:	40000400 	.word	0x40000400
 800a24c:	40000800 	.word	0x40000800
 800a250:	40000c00 	.word	0x40000c00
 800a254:	40010400 	.word	0x40010400
 800a258:	40014000 	.word	0x40014000
 800a25c:	40001800 	.word	0x40001800
 800a260:	00010007 	.word	0x00010007

0800a264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	f003 0302 	and.w	r3, r3, #2
 800a276:	2b02      	cmp	r3, #2
 800a278:	d122      	bne.n	800a2c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b02      	cmp	r3, #2
 800a286:	d11b      	bne.n	800a2c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f06f 0202 	mvn.w	r2, #2
 800a290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	f003 0303 	and.w	r3, r3, #3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f9d0 	bl	800a64c <HAL_TIM_IC_CaptureCallback>
 800a2ac:	e005      	b.n	800a2ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f9c2 	bl	800a638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f9d3 	bl	800a660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	f003 0304 	and.w	r3, r3, #4
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	d122      	bne.n	800a314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f003 0304 	and.w	r3, r3, #4
 800a2d8:	2b04      	cmp	r3, #4
 800a2da:	d11b      	bne.n	800a314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f06f 0204 	mvn.w	r2, #4
 800a2e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2202      	movs	r2, #2
 800a2ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f9a6 	bl	800a64c <HAL_TIM_IC_CaptureCallback>
 800a300:	e005      	b.n	800a30e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f998 	bl	800a638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f9a9 	bl	800a660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	f003 0308 	and.w	r3, r3, #8
 800a31e:	2b08      	cmp	r3, #8
 800a320:	d122      	bne.n	800a368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f003 0308 	and.w	r3, r3, #8
 800a32c:	2b08      	cmp	r3, #8
 800a32e:	d11b      	bne.n	800a368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f06f 0208 	mvn.w	r2, #8
 800a338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2204      	movs	r2, #4
 800a33e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	f003 0303 	and.w	r3, r3, #3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f97c 	bl	800a64c <HAL_TIM_IC_CaptureCallback>
 800a354:	e005      	b.n	800a362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f96e 	bl	800a638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f97f 	bl	800a660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0310 	and.w	r3, r3, #16
 800a372:	2b10      	cmp	r3, #16
 800a374:	d122      	bne.n	800a3bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0310 	and.w	r3, r3, #16
 800a380:	2b10      	cmp	r3, #16
 800a382:	d11b      	bne.n	800a3bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0210 	mvn.w	r2, #16
 800a38c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2208      	movs	r2, #8
 800a392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f952 	bl	800a64c <HAL_TIM_IC_CaptureCallback>
 800a3a8:	e005      	b.n	800a3b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f944 	bl	800a638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f955 	bl	800a660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d10e      	bne.n	800a3e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d107      	bne.n	800a3e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f06f 0201 	mvn.w	r2, #1
 800a3e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7f8 fcae 	bl	8002d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3f2:	2b80      	cmp	r3, #128	@ 0x80
 800a3f4:	d10e      	bne.n	800a414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a400:	2b80      	cmp	r3, #128	@ 0x80
 800a402:	d107      	bne.n	800a414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a40c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fb0c 	bl	800aa2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a41e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a422:	d10e      	bne.n	800a442 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a42e:	2b80      	cmp	r3, #128	@ 0x80
 800a430:	d107      	bne.n	800a442 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a43a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 faff 	bl	800aa40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a44c:	2b40      	cmp	r3, #64	@ 0x40
 800a44e:	d10e      	bne.n	800a46e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a45a:	2b40      	cmp	r3, #64	@ 0x40
 800a45c:	d107      	bne.n	800a46e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f903 	bl	800a674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	f003 0320 	and.w	r3, r3, #32
 800a478:	2b20      	cmp	r3, #32
 800a47a:	d10e      	bne.n	800a49a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f003 0320 	and.w	r3, r3, #32
 800a486:	2b20      	cmp	r3, #32
 800a488:	d107      	bne.n	800a49a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f06f 0220 	mvn.w	r2, #32
 800a492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fabf 	bl	800aa18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a49a:	bf00      	nop
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
	...

0800a4a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d101      	bne.n	800a4c0 <HAL_TIM_ConfigClockSource+0x1c>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	e0b4      	b.n	800a62a <HAL_TIM_ConfigClockSource+0x186>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	4b56      	ldr	r3, [pc, #344]	@ (800a634 <HAL_TIM_ConfigClockSource+0x190>)
 800a4dc:	4013      	ands	r3, r2
 800a4de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4f8:	d03e      	beq.n	800a578 <HAL_TIM_ConfigClockSource+0xd4>
 800a4fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4fe:	f200 8087 	bhi.w	800a610 <HAL_TIM_ConfigClockSource+0x16c>
 800a502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a506:	f000 8086 	beq.w	800a616 <HAL_TIM_ConfigClockSource+0x172>
 800a50a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a50e:	d87f      	bhi.n	800a610 <HAL_TIM_ConfigClockSource+0x16c>
 800a510:	2b70      	cmp	r3, #112	@ 0x70
 800a512:	d01a      	beq.n	800a54a <HAL_TIM_ConfigClockSource+0xa6>
 800a514:	2b70      	cmp	r3, #112	@ 0x70
 800a516:	d87b      	bhi.n	800a610 <HAL_TIM_ConfigClockSource+0x16c>
 800a518:	2b60      	cmp	r3, #96	@ 0x60
 800a51a:	d050      	beq.n	800a5be <HAL_TIM_ConfigClockSource+0x11a>
 800a51c:	2b60      	cmp	r3, #96	@ 0x60
 800a51e:	d877      	bhi.n	800a610 <HAL_TIM_ConfigClockSource+0x16c>
 800a520:	2b50      	cmp	r3, #80	@ 0x50
 800a522:	d03c      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0xfa>
 800a524:	2b50      	cmp	r3, #80	@ 0x50
 800a526:	d873      	bhi.n	800a610 <HAL_TIM_ConfigClockSource+0x16c>
 800a528:	2b40      	cmp	r3, #64	@ 0x40
 800a52a:	d058      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x13a>
 800a52c:	2b40      	cmp	r3, #64	@ 0x40
 800a52e:	d86f      	bhi.n	800a610 <HAL_TIM_ConfigClockSource+0x16c>
 800a530:	2b30      	cmp	r3, #48	@ 0x30
 800a532:	d064      	beq.n	800a5fe <HAL_TIM_ConfigClockSource+0x15a>
 800a534:	2b30      	cmp	r3, #48	@ 0x30
 800a536:	d86b      	bhi.n	800a610 <HAL_TIM_ConfigClockSource+0x16c>
 800a538:	2b20      	cmp	r3, #32
 800a53a:	d060      	beq.n	800a5fe <HAL_TIM_ConfigClockSource+0x15a>
 800a53c:	2b20      	cmp	r3, #32
 800a53e:	d867      	bhi.n	800a610 <HAL_TIM_ConfigClockSource+0x16c>
 800a540:	2b00      	cmp	r3, #0
 800a542:	d05c      	beq.n	800a5fe <HAL_TIM_ConfigClockSource+0x15a>
 800a544:	2b10      	cmp	r3, #16
 800a546:	d05a      	beq.n	800a5fe <HAL_TIM_ConfigClockSource+0x15a>
 800a548:	e062      	b.n	800a610 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a55a:	f000 f9af 	bl	800a8bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a56c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	609a      	str	r2, [r3, #8]
      break;
 800a576:	e04f      	b.n	800a618 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a588:	f000 f998 	bl	800a8bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689a      	ldr	r2, [r3, #8]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a59a:	609a      	str	r2, [r3, #8]
      break;
 800a59c:	e03c      	b.n	800a618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f000 f90c 	bl	800a7c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2150      	movs	r1, #80	@ 0x50
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 f965 	bl	800a886 <TIM_ITRx_SetConfig>
      break;
 800a5bc:	e02c      	b.n	800a618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	f000 f92b 	bl	800a826 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2160      	movs	r1, #96	@ 0x60
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 f955 	bl	800a886 <TIM_ITRx_SetConfig>
      break;
 800a5dc:	e01c      	b.n	800a618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	f000 f8ec 	bl	800a7c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2140      	movs	r1, #64	@ 0x40
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 f945 	bl	800a886 <TIM_ITRx_SetConfig>
      break;
 800a5fc:	e00c      	b.n	800a618 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4619      	mov	r1, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	f000 f93c 	bl	800a886 <TIM_ITRx_SetConfig>
      break;
 800a60e:	e003      	b.n	800a618 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	73fb      	strb	r3, [r7, #15]
      break;
 800a614:	e000      	b.n	800a618 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a628:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	fffeff88 	.word	0xfffeff88

0800a638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a40      	ldr	r2, [pc, #256]	@ (800a79c <TIM_Base_SetConfig+0x114>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d013      	beq.n	800a6c8 <TIM_Base_SetConfig+0x40>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6a6:	d00f      	beq.n	800a6c8 <TIM_Base_SetConfig+0x40>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a3d      	ldr	r2, [pc, #244]	@ (800a7a0 <TIM_Base_SetConfig+0x118>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d00b      	beq.n	800a6c8 <TIM_Base_SetConfig+0x40>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a3c      	ldr	r2, [pc, #240]	@ (800a7a4 <TIM_Base_SetConfig+0x11c>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d007      	beq.n	800a6c8 <TIM_Base_SetConfig+0x40>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a3b      	ldr	r2, [pc, #236]	@ (800a7a8 <TIM_Base_SetConfig+0x120>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d003      	beq.n	800a6c8 <TIM_Base_SetConfig+0x40>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a3a      	ldr	r2, [pc, #232]	@ (800a7ac <TIM_Base_SetConfig+0x124>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d108      	bne.n	800a6da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a2f      	ldr	r2, [pc, #188]	@ (800a79c <TIM_Base_SetConfig+0x114>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d02b      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6e8:	d027      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a2c      	ldr	r2, [pc, #176]	@ (800a7a0 <TIM_Base_SetConfig+0x118>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d023      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a2b      	ldr	r2, [pc, #172]	@ (800a7a4 <TIM_Base_SetConfig+0x11c>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d01f      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a2a      	ldr	r2, [pc, #168]	@ (800a7a8 <TIM_Base_SetConfig+0x120>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d01b      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a29      	ldr	r2, [pc, #164]	@ (800a7ac <TIM_Base_SetConfig+0x124>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d017      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a28      	ldr	r2, [pc, #160]	@ (800a7b0 <TIM_Base_SetConfig+0x128>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d013      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a27      	ldr	r2, [pc, #156]	@ (800a7b4 <TIM_Base_SetConfig+0x12c>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00f      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a26      	ldr	r2, [pc, #152]	@ (800a7b8 <TIM_Base_SetConfig+0x130>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d00b      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a25      	ldr	r2, [pc, #148]	@ (800a7bc <TIM_Base_SetConfig+0x134>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d007      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a24      	ldr	r2, [pc, #144]	@ (800a7c0 <TIM_Base_SetConfig+0x138>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d003      	beq.n	800a73a <TIM_Base_SetConfig+0xb2>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a23      	ldr	r2, [pc, #140]	@ (800a7c4 <TIM_Base_SetConfig+0x13c>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d108      	bne.n	800a74c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a0a      	ldr	r2, [pc, #40]	@ (800a79c <TIM_Base_SetConfig+0x114>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d003      	beq.n	800a780 <TIM_Base_SetConfig+0xf8>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a0c      	ldr	r2, [pc, #48]	@ (800a7ac <TIM_Base_SetConfig+0x124>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d103      	bne.n	800a788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	691a      	ldr	r2, [r3, #16]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	615a      	str	r2, [r3, #20]
}
 800a78e:	bf00      	nop
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	40010000 	.word	0x40010000
 800a7a0:	40000400 	.word	0x40000400
 800a7a4:	40000800 	.word	0x40000800
 800a7a8:	40000c00 	.word	0x40000c00
 800a7ac:	40010400 	.word	0x40010400
 800a7b0:	40014000 	.word	0x40014000
 800a7b4:	40014400 	.word	0x40014400
 800a7b8:	40014800 	.word	0x40014800
 800a7bc:	40001800 	.word	0x40001800
 800a7c0:	40001c00 	.word	0x40001c00
 800a7c4:	40002000 	.word	0x40002000

0800a7c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	f023 0201 	bic.w	r2, r3, #1
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a7f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	011b      	lsls	r3, r3, #4
 800a7f8:	693a      	ldr	r2, [r7, #16]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f023 030a 	bic.w	r3, r3, #10
 800a804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	621a      	str	r2, [r3, #32]
}
 800a81a:	bf00      	nop
 800a81c:	371c      	adds	r7, #28
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a826:	b480      	push	{r7}
 800a828:	b087      	sub	sp, #28
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	60b9      	str	r1, [r7, #8]
 800a830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	f023 0210 	bic.w	r2, r3, #16
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	031b      	lsls	r3, r3, #12
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	4313      	orrs	r3, r2
 800a85a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a862:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	011b      	lsls	r3, r3, #4
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	693a      	ldr	r2, [r7, #16]
 800a878:	621a      	str	r2, [r3, #32]
}
 800a87a:	bf00      	nop
 800a87c:	371c      	adds	r7, #28
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a886:	b480      	push	{r7}
 800a888:	b085      	sub	sp, #20
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a89c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	f043 0307 	orr.w	r3, r3, #7
 800a8a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	609a      	str	r2, [r3, #8]
}
 800a8b0:	bf00      	nop
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b087      	sub	sp, #28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	021a      	lsls	r2, r3, #8
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	431a      	orrs	r2, r3
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	609a      	str	r2, [r3, #8]
}
 800a8f0:	bf00      	nop
 800a8f2:	371c      	adds	r7, #28
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d101      	bne.n	800a914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a910:	2302      	movs	r3, #2
 800a912:	e06d      	b.n	800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a30      	ldr	r2, [pc, #192]	@ (800a9fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d004      	beq.n	800a948 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a2f      	ldr	r2, [pc, #188]	@ (800aa00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d108      	bne.n	800a95a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a94e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	4313      	orrs	r3, r2
 800a958:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a960:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	4313      	orrs	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a20      	ldr	r2, [pc, #128]	@ (800a9fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d022      	beq.n	800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a986:	d01d      	beq.n	800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a1d      	ldr	r2, [pc, #116]	@ (800aa04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d018      	beq.n	800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a1c      	ldr	r2, [pc, #112]	@ (800aa08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d013      	beq.n	800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a1a      	ldr	r2, [pc, #104]	@ (800aa0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d00e      	beq.n	800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a15      	ldr	r2, [pc, #84]	@ (800aa00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d009      	beq.n	800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a16      	ldr	r2, [pc, #88]	@ (800aa10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d004      	beq.n	800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a15      	ldr	r2, [pc, #84]	@ (800aa14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d10c      	bne.n	800a9de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3714      	adds	r7, #20
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	40010000 	.word	0x40010000
 800aa00:	40010400 	.word	0x40010400
 800aa04:	40000400 	.word	0x40000400
 800aa08:	40000800 	.word	0x40000800
 800aa0c:	40000c00 	.word	0x40000c00
 800aa10:	40014000 	.word	0x40014000
 800aa14:	40001800 	.word	0x40001800

0800aa18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e040      	b.n	800aae8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d106      	bne.n	800aa7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7fa fbee 	bl	8005258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2224      	movs	r2, #36	@ 0x24
 800aa80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f022 0201 	bic.w	r2, r2, #1
 800aa90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f82c 	bl	800aaf0 <UART_SetConfig>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d101      	bne.n	800aaa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e022      	b.n	800aae8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d002      	beq.n	800aab0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fa84 	bl	800afb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aabe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f042 0201 	orr.w	r2, r2, #1
 800aade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fb0b 	bl	800b0fc <UART_CheckIdleState>
 800aae6:	4603      	mov	r3, r0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	431a      	orrs	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	4ba6      	ldr	r3, [pc, #664]	@ (800adb4 <UART_SetConfig+0x2c4>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	6812      	ldr	r2, [r2, #0]
 800ab22:	6979      	ldr	r1, [r7, #20]
 800ab24:	430b      	orrs	r3, r1
 800ab26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	430a      	orrs	r2, r1
 800ab60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a94      	ldr	r2, [pc, #592]	@ (800adb8 <UART_SetConfig+0x2c8>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d120      	bne.n	800abae <UART_SetConfig+0xbe>
 800ab6c:	4b93      	ldr	r3, [pc, #588]	@ (800adbc <UART_SetConfig+0x2cc>)
 800ab6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab72:	f003 0303 	and.w	r3, r3, #3
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d816      	bhi.n	800aba8 <UART_SetConfig+0xb8>
 800ab7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab80 <UART_SetConfig+0x90>)
 800ab7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab80:	0800ab91 	.word	0x0800ab91
 800ab84:	0800ab9d 	.word	0x0800ab9d
 800ab88:	0800ab97 	.word	0x0800ab97
 800ab8c:	0800aba3 	.word	0x0800aba3
 800ab90:	2301      	movs	r3, #1
 800ab92:	77fb      	strb	r3, [r7, #31]
 800ab94:	e150      	b.n	800ae38 <UART_SetConfig+0x348>
 800ab96:	2302      	movs	r3, #2
 800ab98:	77fb      	strb	r3, [r7, #31]
 800ab9a:	e14d      	b.n	800ae38 <UART_SetConfig+0x348>
 800ab9c:	2304      	movs	r3, #4
 800ab9e:	77fb      	strb	r3, [r7, #31]
 800aba0:	e14a      	b.n	800ae38 <UART_SetConfig+0x348>
 800aba2:	2308      	movs	r3, #8
 800aba4:	77fb      	strb	r3, [r7, #31]
 800aba6:	e147      	b.n	800ae38 <UART_SetConfig+0x348>
 800aba8:	2310      	movs	r3, #16
 800abaa:	77fb      	strb	r3, [r7, #31]
 800abac:	e144      	b.n	800ae38 <UART_SetConfig+0x348>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a83      	ldr	r2, [pc, #524]	@ (800adc0 <UART_SetConfig+0x2d0>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d132      	bne.n	800ac1e <UART_SetConfig+0x12e>
 800abb8:	4b80      	ldr	r3, [pc, #512]	@ (800adbc <UART_SetConfig+0x2cc>)
 800abba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abbe:	f003 030c 	and.w	r3, r3, #12
 800abc2:	2b0c      	cmp	r3, #12
 800abc4:	d828      	bhi.n	800ac18 <UART_SetConfig+0x128>
 800abc6:	a201      	add	r2, pc, #4	@ (adr r2, 800abcc <UART_SetConfig+0xdc>)
 800abc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abcc:	0800ac01 	.word	0x0800ac01
 800abd0:	0800ac19 	.word	0x0800ac19
 800abd4:	0800ac19 	.word	0x0800ac19
 800abd8:	0800ac19 	.word	0x0800ac19
 800abdc:	0800ac0d 	.word	0x0800ac0d
 800abe0:	0800ac19 	.word	0x0800ac19
 800abe4:	0800ac19 	.word	0x0800ac19
 800abe8:	0800ac19 	.word	0x0800ac19
 800abec:	0800ac07 	.word	0x0800ac07
 800abf0:	0800ac19 	.word	0x0800ac19
 800abf4:	0800ac19 	.word	0x0800ac19
 800abf8:	0800ac19 	.word	0x0800ac19
 800abfc:	0800ac13 	.word	0x0800ac13
 800ac00:	2300      	movs	r3, #0
 800ac02:	77fb      	strb	r3, [r7, #31]
 800ac04:	e118      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac06:	2302      	movs	r3, #2
 800ac08:	77fb      	strb	r3, [r7, #31]
 800ac0a:	e115      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac0c:	2304      	movs	r3, #4
 800ac0e:	77fb      	strb	r3, [r7, #31]
 800ac10:	e112      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac12:	2308      	movs	r3, #8
 800ac14:	77fb      	strb	r3, [r7, #31]
 800ac16:	e10f      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac18:	2310      	movs	r3, #16
 800ac1a:	77fb      	strb	r3, [r7, #31]
 800ac1c:	e10c      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a68      	ldr	r2, [pc, #416]	@ (800adc4 <UART_SetConfig+0x2d4>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d120      	bne.n	800ac6a <UART_SetConfig+0x17a>
 800ac28:	4b64      	ldr	r3, [pc, #400]	@ (800adbc <UART_SetConfig+0x2cc>)
 800ac2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac32:	2b30      	cmp	r3, #48	@ 0x30
 800ac34:	d013      	beq.n	800ac5e <UART_SetConfig+0x16e>
 800ac36:	2b30      	cmp	r3, #48	@ 0x30
 800ac38:	d814      	bhi.n	800ac64 <UART_SetConfig+0x174>
 800ac3a:	2b20      	cmp	r3, #32
 800ac3c:	d009      	beq.n	800ac52 <UART_SetConfig+0x162>
 800ac3e:	2b20      	cmp	r3, #32
 800ac40:	d810      	bhi.n	800ac64 <UART_SetConfig+0x174>
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d002      	beq.n	800ac4c <UART_SetConfig+0x15c>
 800ac46:	2b10      	cmp	r3, #16
 800ac48:	d006      	beq.n	800ac58 <UART_SetConfig+0x168>
 800ac4a:	e00b      	b.n	800ac64 <UART_SetConfig+0x174>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	77fb      	strb	r3, [r7, #31]
 800ac50:	e0f2      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac52:	2302      	movs	r3, #2
 800ac54:	77fb      	strb	r3, [r7, #31]
 800ac56:	e0ef      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac58:	2304      	movs	r3, #4
 800ac5a:	77fb      	strb	r3, [r7, #31]
 800ac5c:	e0ec      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac5e:	2308      	movs	r3, #8
 800ac60:	77fb      	strb	r3, [r7, #31]
 800ac62:	e0e9      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac64:	2310      	movs	r3, #16
 800ac66:	77fb      	strb	r3, [r7, #31]
 800ac68:	e0e6      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a56      	ldr	r2, [pc, #344]	@ (800adc8 <UART_SetConfig+0x2d8>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d120      	bne.n	800acb6 <UART_SetConfig+0x1c6>
 800ac74:	4b51      	ldr	r3, [pc, #324]	@ (800adbc <UART_SetConfig+0x2cc>)
 800ac76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac7e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac80:	d013      	beq.n	800acaa <UART_SetConfig+0x1ba>
 800ac82:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac84:	d814      	bhi.n	800acb0 <UART_SetConfig+0x1c0>
 800ac86:	2b80      	cmp	r3, #128	@ 0x80
 800ac88:	d009      	beq.n	800ac9e <UART_SetConfig+0x1ae>
 800ac8a:	2b80      	cmp	r3, #128	@ 0x80
 800ac8c:	d810      	bhi.n	800acb0 <UART_SetConfig+0x1c0>
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d002      	beq.n	800ac98 <UART_SetConfig+0x1a8>
 800ac92:	2b40      	cmp	r3, #64	@ 0x40
 800ac94:	d006      	beq.n	800aca4 <UART_SetConfig+0x1b4>
 800ac96:	e00b      	b.n	800acb0 <UART_SetConfig+0x1c0>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	77fb      	strb	r3, [r7, #31]
 800ac9c:	e0cc      	b.n	800ae38 <UART_SetConfig+0x348>
 800ac9e:	2302      	movs	r3, #2
 800aca0:	77fb      	strb	r3, [r7, #31]
 800aca2:	e0c9      	b.n	800ae38 <UART_SetConfig+0x348>
 800aca4:	2304      	movs	r3, #4
 800aca6:	77fb      	strb	r3, [r7, #31]
 800aca8:	e0c6      	b.n	800ae38 <UART_SetConfig+0x348>
 800acaa:	2308      	movs	r3, #8
 800acac:	77fb      	strb	r3, [r7, #31]
 800acae:	e0c3      	b.n	800ae38 <UART_SetConfig+0x348>
 800acb0:	2310      	movs	r3, #16
 800acb2:	77fb      	strb	r3, [r7, #31]
 800acb4:	e0c0      	b.n	800ae38 <UART_SetConfig+0x348>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a44      	ldr	r2, [pc, #272]	@ (800adcc <UART_SetConfig+0x2dc>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d125      	bne.n	800ad0c <UART_SetConfig+0x21c>
 800acc0:	4b3e      	ldr	r3, [pc, #248]	@ (800adbc <UART_SetConfig+0x2cc>)
 800acc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acce:	d017      	beq.n	800ad00 <UART_SetConfig+0x210>
 800acd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acd4:	d817      	bhi.n	800ad06 <UART_SetConfig+0x216>
 800acd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acda:	d00b      	beq.n	800acf4 <UART_SetConfig+0x204>
 800acdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ace0:	d811      	bhi.n	800ad06 <UART_SetConfig+0x216>
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d003      	beq.n	800acee <UART_SetConfig+0x1fe>
 800ace6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acea:	d006      	beq.n	800acfa <UART_SetConfig+0x20a>
 800acec:	e00b      	b.n	800ad06 <UART_SetConfig+0x216>
 800acee:	2300      	movs	r3, #0
 800acf0:	77fb      	strb	r3, [r7, #31]
 800acf2:	e0a1      	b.n	800ae38 <UART_SetConfig+0x348>
 800acf4:	2302      	movs	r3, #2
 800acf6:	77fb      	strb	r3, [r7, #31]
 800acf8:	e09e      	b.n	800ae38 <UART_SetConfig+0x348>
 800acfa:	2304      	movs	r3, #4
 800acfc:	77fb      	strb	r3, [r7, #31]
 800acfe:	e09b      	b.n	800ae38 <UART_SetConfig+0x348>
 800ad00:	2308      	movs	r3, #8
 800ad02:	77fb      	strb	r3, [r7, #31]
 800ad04:	e098      	b.n	800ae38 <UART_SetConfig+0x348>
 800ad06:	2310      	movs	r3, #16
 800ad08:	77fb      	strb	r3, [r7, #31]
 800ad0a:	e095      	b.n	800ae38 <UART_SetConfig+0x348>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a2f      	ldr	r2, [pc, #188]	@ (800add0 <UART_SetConfig+0x2e0>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d125      	bne.n	800ad62 <UART_SetConfig+0x272>
 800ad16:	4b29      	ldr	r3, [pc, #164]	@ (800adbc <UART_SetConfig+0x2cc>)
 800ad18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ad20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad24:	d017      	beq.n	800ad56 <UART_SetConfig+0x266>
 800ad26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad2a:	d817      	bhi.n	800ad5c <UART_SetConfig+0x26c>
 800ad2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad30:	d00b      	beq.n	800ad4a <UART_SetConfig+0x25a>
 800ad32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad36:	d811      	bhi.n	800ad5c <UART_SetConfig+0x26c>
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d003      	beq.n	800ad44 <UART_SetConfig+0x254>
 800ad3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad40:	d006      	beq.n	800ad50 <UART_SetConfig+0x260>
 800ad42:	e00b      	b.n	800ad5c <UART_SetConfig+0x26c>
 800ad44:	2301      	movs	r3, #1
 800ad46:	77fb      	strb	r3, [r7, #31]
 800ad48:	e076      	b.n	800ae38 <UART_SetConfig+0x348>
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	77fb      	strb	r3, [r7, #31]
 800ad4e:	e073      	b.n	800ae38 <UART_SetConfig+0x348>
 800ad50:	2304      	movs	r3, #4
 800ad52:	77fb      	strb	r3, [r7, #31]
 800ad54:	e070      	b.n	800ae38 <UART_SetConfig+0x348>
 800ad56:	2308      	movs	r3, #8
 800ad58:	77fb      	strb	r3, [r7, #31]
 800ad5a:	e06d      	b.n	800ae38 <UART_SetConfig+0x348>
 800ad5c:	2310      	movs	r3, #16
 800ad5e:	77fb      	strb	r3, [r7, #31]
 800ad60:	e06a      	b.n	800ae38 <UART_SetConfig+0x348>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a1b      	ldr	r2, [pc, #108]	@ (800add4 <UART_SetConfig+0x2e4>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d138      	bne.n	800adde <UART_SetConfig+0x2ee>
 800ad6c:	4b13      	ldr	r3, [pc, #76]	@ (800adbc <UART_SetConfig+0x2cc>)
 800ad6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ad76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad7a:	d017      	beq.n	800adac <UART_SetConfig+0x2bc>
 800ad7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad80:	d82a      	bhi.n	800add8 <UART_SetConfig+0x2e8>
 800ad82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad86:	d00b      	beq.n	800ada0 <UART_SetConfig+0x2b0>
 800ad88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad8c:	d824      	bhi.n	800add8 <UART_SetConfig+0x2e8>
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <UART_SetConfig+0x2aa>
 800ad92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad96:	d006      	beq.n	800ada6 <UART_SetConfig+0x2b6>
 800ad98:	e01e      	b.n	800add8 <UART_SetConfig+0x2e8>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	77fb      	strb	r3, [r7, #31]
 800ad9e:	e04b      	b.n	800ae38 <UART_SetConfig+0x348>
 800ada0:	2302      	movs	r3, #2
 800ada2:	77fb      	strb	r3, [r7, #31]
 800ada4:	e048      	b.n	800ae38 <UART_SetConfig+0x348>
 800ada6:	2304      	movs	r3, #4
 800ada8:	77fb      	strb	r3, [r7, #31]
 800adaa:	e045      	b.n	800ae38 <UART_SetConfig+0x348>
 800adac:	2308      	movs	r3, #8
 800adae:	77fb      	strb	r3, [r7, #31]
 800adb0:	e042      	b.n	800ae38 <UART_SetConfig+0x348>
 800adb2:	bf00      	nop
 800adb4:	efff69f3 	.word	0xefff69f3
 800adb8:	40011000 	.word	0x40011000
 800adbc:	40023800 	.word	0x40023800
 800adc0:	40004400 	.word	0x40004400
 800adc4:	40004800 	.word	0x40004800
 800adc8:	40004c00 	.word	0x40004c00
 800adcc:	40005000 	.word	0x40005000
 800add0:	40011400 	.word	0x40011400
 800add4:	40007800 	.word	0x40007800
 800add8:	2310      	movs	r3, #16
 800adda:	77fb      	strb	r3, [r7, #31]
 800addc:	e02c      	b.n	800ae38 <UART_SetConfig+0x348>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a72      	ldr	r2, [pc, #456]	@ (800afac <UART_SetConfig+0x4bc>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d125      	bne.n	800ae34 <UART_SetConfig+0x344>
 800ade8:	4b71      	ldr	r3, [pc, #452]	@ (800afb0 <UART_SetConfig+0x4c0>)
 800adea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800adf2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800adf6:	d017      	beq.n	800ae28 <UART_SetConfig+0x338>
 800adf8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800adfc:	d817      	bhi.n	800ae2e <UART_SetConfig+0x33e>
 800adfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae02:	d00b      	beq.n	800ae1c <UART_SetConfig+0x32c>
 800ae04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae08:	d811      	bhi.n	800ae2e <UART_SetConfig+0x33e>
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <UART_SetConfig+0x326>
 800ae0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae12:	d006      	beq.n	800ae22 <UART_SetConfig+0x332>
 800ae14:	e00b      	b.n	800ae2e <UART_SetConfig+0x33e>
 800ae16:	2300      	movs	r3, #0
 800ae18:	77fb      	strb	r3, [r7, #31]
 800ae1a:	e00d      	b.n	800ae38 <UART_SetConfig+0x348>
 800ae1c:	2302      	movs	r3, #2
 800ae1e:	77fb      	strb	r3, [r7, #31]
 800ae20:	e00a      	b.n	800ae38 <UART_SetConfig+0x348>
 800ae22:	2304      	movs	r3, #4
 800ae24:	77fb      	strb	r3, [r7, #31]
 800ae26:	e007      	b.n	800ae38 <UART_SetConfig+0x348>
 800ae28:	2308      	movs	r3, #8
 800ae2a:	77fb      	strb	r3, [r7, #31]
 800ae2c:	e004      	b.n	800ae38 <UART_SetConfig+0x348>
 800ae2e:	2310      	movs	r3, #16
 800ae30:	77fb      	strb	r3, [r7, #31]
 800ae32:	e001      	b.n	800ae38 <UART_SetConfig+0x348>
 800ae34:	2310      	movs	r3, #16
 800ae36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae40:	d15b      	bne.n	800aefa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ae42:	7ffb      	ldrb	r3, [r7, #31]
 800ae44:	2b08      	cmp	r3, #8
 800ae46:	d828      	bhi.n	800ae9a <UART_SetConfig+0x3aa>
 800ae48:	a201      	add	r2, pc, #4	@ (adr r2, 800ae50 <UART_SetConfig+0x360>)
 800ae4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4e:	bf00      	nop
 800ae50:	0800ae75 	.word	0x0800ae75
 800ae54:	0800ae7d 	.word	0x0800ae7d
 800ae58:	0800ae85 	.word	0x0800ae85
 800ae5c:	0800ae9b 	.word	0x0800ae9b
 800ae60:	0800ae8b 	.word	0x0800ae8b
 800ae64:	0800ae9b 	.word	0x0800ae9b
 800ae68:	0800ae9b 	.word	0x0800ae9b
 800ae6c:	0800ae9b 	.word	0x0800ae9b
 800ae70:	0800ae93 	.word	0x0800ae93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae74:	f7fd ffca 	bl	8008e0c <HAL_RCC_GetPCLK1Freq>
 800ae78:	61b8      	str	r0, [r7, #24]
        break;
 800ae7a:	e013      	b.n	800aea4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae7c:	f7fd ffda 	bl	8008e34 <HAL_RCC_GetPCLK2Freq>
 800ae80:	61b8      	str	r0, [r7, #24]
        break;
 800ae82:	e00f      	b.n	800aea4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae84:	4b4b      	ldr	r3, [pc, #300]	@ (800afb4 <UART_SetConfig+0x4c4>)
 800ae86:	61bb      	str	r3, [r7, #24]
        break;
 800ae88:	e00c      	b.n	800aea4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae8a:	f7fd feed 	bl	8008c68 <HAL_RCC_GetSysClockFreq>
 800ae8e:	61b8      	str	r0, [r7, #24]
        break;
 800ae90:	e008      	b.n	800aea4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae96:	61bb      	str	r3, [r7, #24]
        break;
 800ae98:	e004      	b.n	800aea4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	77bb      	strb	r3, [r7, #30]
        break;
 800aea2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d074      	beq.n	800af94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	005a      	lsls	r2, r3, #1
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	085b      	lsrs	r3, r3, #1
 800aeb4:	441a      	add	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	fbb2 f3f3 	udiv	r3, r2, r3
 800aebe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b0f      	cmp	r3, #15
 800aec4:	d916      	bls.n	800aef4 <UART_SetConfig+0x404>
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aecc:	d212      	bcs.n	800aef4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	f023 030f 	bic.w	r3, r3, #15
 800aed6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	085b      	lsrs	r3, r3, #1
 800aedc:	b29b      	uxth	r3, r3
 800aede:	f003 0307 	and.w	r3, r3, #7
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	89fb      	ldrh	r3, [r7, #14]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	89fa      	ldrh	r2, [r7, #14]
 800aef0:	60da      	str	r2, [r3, #12]
 800aef2:	e04f      	b.n	800af94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	77bb      	strb	r3, [r7, #30]
 800aef8:	e04c      	b.n	800af94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aefa:	7ffb      	ldrb	r3, [r7, #31]
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	d828      	bhi.n	800af52 <UART_SetConfig+0x462>
 800af00:	a201      	add	r2, pc, #4	@ (adr r2, 800af08 <UART_SetConfig+0x418>)
 800af02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af06:	bf00      	nop
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800af35 	.word	0x0800af35
 800af10:	0800af3d 	.word	0x0800af3d
 800af14:	0800af53 	.word	0x0800af53
 800af18:	0800af43 	.word	0x0800af43
 800af1c:	0800af53 	.word	0x0800af53
 800af20:	0800af53 	.word	0x0800af53
 800af24:	0800af53 	.word	0x0800af53
 800af28:	0800af4b 	.word	0x0800af4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af2c:	f7fd ff6e 	bl	8008e0c <HAL_RCC_GetPCLK1Freq>
 800af30:	61b8      	str	r0, [r7, #24]
        break;
 800af32:	e013      	b.n	800af5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af34:	f7fd ff7e 	bl	8008e34 <HAL_RCC_GetPCLK2Freq>
 800af38:	61b8      	str	r0, [r7, #24]
        break;
 800af3a:	e00f      	b.n	800af5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af3c:	4b1d      	ldr	r3, [pc, #116]	@ (800afb4 <UART_SetConfig+0x4c4>)
 800af3e:	61bb      	str	r3, [r7, #24]
        break;
 800af40:	e00c      	b.n	800af5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af42:	f7fd fe91 	bl	8008c68 <HAL_RCC_GetSysClockFreq>
 800af46:	61b8      	str	r0, [r7, #24]
        break;
 800af48:	e008      	b.n	800af5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af4e:	61bb      	str	r3, [r7, #24]
        break;
 800af50:	e004      	b.n	800af5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800af52:	2300      	movs	r3, #0
 800af54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	77bb      	strb	r3, [r7, #30]
        break;
 800af5a:	bf00      	nop
    }

    if (pclk != 0U)
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d018      	beq.n	800af94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	085a      	lsrs	r2, r3, #1
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	441a      	add	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	fbb2 f3f3 	udiv	r3, r2, r3
 800af74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2b0f      	cmp	r3, #15
 800af7a:	d909      	bls.n	800af90 <UART_SetConfig+0x4a0>
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af82:	d205      	bcs.n	800af90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	b29a      	uxth	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	60da      	str	r2, [r3, #12]
 800af8e:	e001      	b.n	800af94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800afa0:	7fbb      	ldrb	r3, [r7, #30]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3720      	adds	r7, #32
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	40007c00 	.word	0x40007c00
 800afb0:	40023800 	.word	0x40023800
 800afb4:	00f42400 	.word	0x00f42400

0800afb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00a      	beq.n	800afe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	430a      	orrs	r2, r1
 800afe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe6:	f003 0302 	and.w	r3, r3, #2
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00a      	beq.n	800b004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	430a      	orrs	r2, r1
 800b002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00a      	beq.n	800b026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02a:	f003 0308 	and.w	r3, r3, #8
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00a      	beq.n	800b048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	430a      	orrs	r2, r1
 800b046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b04c:	f003 0310 	and.w	r3, r3, #16
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00a      	beq.n	800b06a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	430a      	orrs	r2, r1
 800b068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06e:	f003 0320 	and.w	r3, r3, #32
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00a      	beq.n	800b08c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	430a      	orrs	r2, r1
 800b08a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01a      	beq.n	800b0ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	430a      	orrs	r2, r1
 800b0ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0b6:	d10a      	bne.n	800b0ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	430a      	orrs	r2, r1
 800b0ee:	605a      	str	r2, [r3, #4]
  }
}
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af02      	add	r7, sp, #8
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b10c:	f7fa f9fe 	bl	800550c <HAL_GetTick>
 800b110:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0308 	and.w	r3, r3, #8
 800b11c:	2b08      	cmp	r3, #8
 800b11e:	d10e      	bne.n	800b13e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b120:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f81b 	bl	800b16a <UART_WaitOnFlagUntilTimeout>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d001      	beq.n	800b13e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b13a:	2303      	movs	r3, #3
 800b13c:	e011      	b.n	800b162 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2220      	movs	r2, #32
 800b142:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2220      	movs	r2, #32
 800b148:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b09c      	sub	sp, #112	@ 0x70
 800b16e:	af00      	add	r7, sp, #0
 800b170:	60f8      	str	r0, [r7, #12]
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	603b      	str	r3, [r7, #0]
 800b176:	4613      	mov	r3, r2
 800b178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b17a:	e0a7      	b.n	800b2cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b17c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b182:	f000 80a3 	beq.w	800b2cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b186:	f7fa f9c1 	bl	800550c <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b192:	429a      	cmp	r2, r3
 800b194:	d302      	bcc.n	800b19c <UART_WaitOnFlagUntilTimeout+0x32>
 800b196:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d13f      	bne.n	800b21c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1ac:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b1b0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b1c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b1c2:	e841 2300 	strex	r3, r2, [r1]
 800b1c6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b1c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1e6      	bne.n	800b19c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e0:	f023 0301 	bic.w	r3, r3, #1
 800b1e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3308      	adds	r3, #8
 800b1ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b1ee:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b1f0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b1f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1f6:	e841 2300 	strex	r3, r2, [r1]
 800b1fa:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b1fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1e5      	bne.n	800b1ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2220      	movs	r2, #32
 800b206:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2220      	movs	r2, #32
 800b20c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800b218:	2303      	movs	r3, #3
 800b21a:	e068      	b.n	800b2ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 0304 	and.w	r3, r3, #4
 800b226:	2b00      	cmp	r3, #0
 800b228:	d050      	beq.n	800b2cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	69db      	ldr	r3, [r3, #28]
 800b230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b238:	d148      	bne.n	800b2cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b242:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24c:	e853 3f00 	ldrex	r3, [r3]
 800b250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b254:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b258:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b262:	637b      	str	r3, [r7, #52]	@ 0x34
 800b264:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b266:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b268:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b26a:	e841 2300 	strex	r3, r2, [r1]
 800b26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e6      	bne.n	800b244 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	3308      	adds	r3, #8
 800b27c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	e853 3f00 	ldrex	r3, [r3]
 800b284:	613b      	str	r3, [r7, #16]
   return(result);
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	f023 0301 	bic.w	r3, r3, #1
 800b28c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3308      	adds	r3, #8
 800b294:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b296:	623a      	str	r2, [r7, #32]
 800b298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29a:	69f9      	ldr	r1, [r7, #28]
 800b29c:	6a3a      	ldr	r2, [r7, #32]
 800b29e:	e841 2300 	strex	r3, r2, [r1]
 800b2a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1e5      	bne.n	800b276 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2220      	movs	r2, #32
 800b2b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2220      	movs	r2, #32
 800b2bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e010      	b.n	800b2ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	69da      	ldr	r2, [r3, #28]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	bf0c      	ite	eq
 800b2dc:	2301      	moveq	r3, #1
 800b2de:	2300      	movne	r3, #0
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	79fb      	ldrb	r3, [r7, #7]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	f43f af48 	beq.w	800b17c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3770      	adds	r7, #112	@ 0x70
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
	...

0800b2f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d121      	bne.n	800b34e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	4b27      	ldr	r3, [pc, #156]	@ (800b3ac <FMC_SDRAM_Init+0xb4>)
 800b310:	4013      	ands	r3, r2
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	6851      	ldr	r1, [r2, #4]
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	6892      	ldr	r2, [r2, #8]
 800b31a:	4311      	orrs	r1, r2
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	68d2      	ldr	r2, [r2, #12]
 800b320:	4311      	orrs	r1, r2
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	6912      	ldr	r2, [r2, #16]
 800b326:	4311      	orrs	r1, r2
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	6952      	ldr	r2, [r2, #20]
 800b32c:	4311      	orrs	r1, r2
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	6992      	ldr	r2, [r2, #24]
 800b332:	4311      	orrs	r1, r2
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	69d2      	ldr	r2, [r2, #28]
 800b338:	4311      	orrs	r1, r2
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	6a12      	ldr	r2, [r2, #32]
 800b33e:	4311      	orrs	r1, r2
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b344:	430a      	orrs	r2, r1
 800b346:	431a      	orrs	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	e026      	b.n	800b39c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	69d9      	ldr	r1, [r3, #28]
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	4319      	orrs	r1, r3
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b364:	430b      	orrs	r3, r1
 800b366:	431a      	orrs	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	4b0e      	ldr	r3, [pc, #56]	@ (800b3ac <FMC_SDRAM_Init+0xb4>)
 800b372:	4013      	ands	r3, r2
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	6851      	ldr	r1, [r2, #4]
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	6892      	ldr	r2, [r2, #8]
 800b37c:	4311      	orrs	r1, r2
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	68d2      	ldr	r2, [r2, #12]
 800b382:	4311      	orrs	r1, r2
 800b384:	683a      	ldr	r2, [r7, #0]
 800b386:	6912      	ldr	r2, [r2, #16]
 800b388:	4311      	orrs	r1, r2
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	6952      	ldr	r2, [r2, #20]
 800b38e:	4311      	orrs	r1, r2
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	6992      	ldr	r2, [r2, #24]
 800b394:	430a      	orrs	r2, r1
 800b396:	431a      	orrs	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	ffff8000 	.word	0xffff8000

0800b3b0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d128      	bne.n	800b414 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	1e59      	subs	r1, r3, #1
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	011b      	lsls	r3, r3, #4
 800b3d8:	4319      	orrs	r1, r3
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	021b      	lsls	r3, r3, #8
 800b3e2:	4319      	orrs	r1, r3
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	031b      	lsls	r3, r3, #12
 800b3ec:	4319      	orrs	r1, r3
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	041b      	lsls	r3, r3, #16
 800b3f6:	4319      	orrs	r1, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	695b      	ldr	r3, [r3, #20]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	051b      	lsls	r3, r3, #20
 800b400:	4319      	orrs	r1, r3
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	3b01      	subs	r3, #1
 800b408:	061b      	lsls	r3, r3, #24
 800b40a:	430b      	orrs	r3, r1
 800b40c:	431a      	orrs	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	609a      	str	r2, [r3, #8]
 800b412:	e02d      	b.n	800b470 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	4b19      	ldr	r3, [pc, #100]	@ (800b480 <FMC_SDRAM_Timing_Init+0xd0>)
 800b41a:	4013      	ands	r3, r2
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	68d2      	ldr	r2, [r2, #12]
 800b420:	3a01      	subs	r2, #1
 800b422:	0311      	lsls	r1, r2, #12
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	6952      	ldr	r2, [r2, #20]
 800b428:	3a01      	subs	r2, #1
 800b42a:	0512      	lsls	r2, r2, #20
 800b42c:	430a      	orrs	r2, r1
 800b42e:	431a      	orrs	r2, r3
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	1e59      	subs	r1, r3, #1
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	3b01      	subs	r3, #1
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	4319      	orrs	r1, r3
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	3b01      	subs	r3, #1
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	4319      	orrs	r1, r3
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	041b      	lsls	r3, r3, #16
 800b45e:	4319      	orrs	r1, r3
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	3b01      	subs	r3, #1
 800b466:	061b      	lsls	r3, r3, #24
 800b468:	430b      	orrs	r3, r1
 800b46a:	431a      	orrs	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	ff0f0fff 	.word	0xff0f0fff

0800b484 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	691a      	ldr	r2, [r3, #16]
 800b494:	4b0c      	ldr	r3, [pc, #48]	@ (800b4c8 <FMC_SDRAM_SendCommand+0x44>)
 800b496:	4013      	ands	r3, r2
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	6811      	ldr	r1, [r2, #0]
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	6852      	ldr	r2, [r2, #4]
 800b4a0:	4311      	orrs	r1, r2
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	6892      	ldr	r2, [r2, #8]
 800b4a6:	3a01      	subs	r2, #1
 800b4a8:	0152      	lsls	r2, r2, #5
 800b4aa:	4311      	orrs	r1, r2
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	68d2      	ldr	r2, [r2, #12]
 800b4b0:	0252      	lsls	r2, r2, #9
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	431a      	orrs	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	ffc00000 	.word	0xffc00000

0800b4cc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	695a      	ldr	r2, [r3, #20]
 800b4da:	4b07      	ldr	r3, [pc, #28]	@ (800b4f8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b4dc:	4013      	ands	r3, r2
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	0052      	lsls	r2, r2, #1
 800b4e2:	431a      	orrs	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	ffffc001 	.word	0xffffc001

0800b4fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	4603      	mov	r3, r0
 800b504:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b506:	2300      	movs	r3, #0
 800b508:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b50a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b50e:	2b84      	cmp	r3, #132	@ 0x84
 800b510:	d005      	beq.n	800b51e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b512:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	4413      	add	r3, r2
 800b51a:	3303      	adds	r3, #3
 800b51c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b51e:	68fb      	ldr	r3, [r7, #12]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b530:	f000 fe88 	bl	800c244 <vTaskStartScheduler>
  
  return osOK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	bd80      	pop	{r7, pc}

0800b53a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b53a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b53c:	b089      	sub	sp, #36	@ 0x24
 800b53e:	af04      	add	r7, sp, #16
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d020      	beq.n	800b58e <osThreadCreate+0x54>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d01c      	beq.n	800b58e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685c      	ldr	r4, [r3, #4]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	691e      	ldr	r6, [r3, #16]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff ffc8 	bl	800b4fc <makeFreeRtosPriority>
 800b56c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	695b      	ldr	r3, [r3, #20]
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b576:	9202      	str	r2, [sp, #8]
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	9100      	str	r1, [sp, #0]
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	4632      	mov	r2, r6
 800b580:	4629      	mov	r1, r5
 800b582:	4620      	mov	r0, r4
 800b584:	f000 fc86 	bl	800be94 <xTaskCreateStatic>
 800b588:	4603      	mov	r3, r0
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	e01c      	b.n	800b5c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685c      	ldr	r4, [r3, #4]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b59a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff ffaa 	bl	800b4fc <makeFreeRtosPriority>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	f107 030c 	add.w	r3, r7, #12
 800b5ae:	9301      	str	r3, [sp, #4]
 800b5b0:	9200      	str	r2, [sp, #0]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 fcd1 	bl	800bf60 <xTaskCreate>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d001      	beq.n	800b5c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e000      	b.n	800b5ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3714      	adds	r7, #20
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b084      	sub	sp, #16
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <osDelay+0x16>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	e000      	b.n	800b5ea <osDelay+0x18>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 fdf2 	bl	800c1d4 <vTaskDelay>
  
  return osOK;
 800b5f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b082      	sub	sp, #8
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d007      	beq.n	800b61a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	4619      	mov	r1, r3
 800b610:	2001      	movs	r0, #1
 800b612:	f000 fa46 	bl	800baa2 <xQueueCreateMutexStatic>
 800b616:	4603      	mov	r3, r0
 800b618:	e003      	b.n	800b622 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b61a:	2001      	movs	r0, #1
 800b61c:	f000 fa29 	bl	800ba72 <xQueueCreateMutex>
 800b620:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b62a:	b480      	push	{r7}
 800b62c:	b083      	sub	sp, #12
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f103 0208 	add.w	r2, r3, #8
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f04f 32ff 	mov.w	r2, #4294967295
 800b642:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f103 0208 	add.w	r2, r3, #8
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f103 0208 	add.w	r2, r3, #8
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b65e:	bf00      	nop
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b66a:	b480      	push	{r7}
 800b66c:	b083      	sub	sp, #12
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	689a      	ldr	r2, [r3, #8]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	601a      	str	r2, [r3, #0]
}
 800b6c0:	bf00      	nop
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e2:	d103      	bne.n	800b6ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	e00c      	b.n	800b706 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3308      	adds	r3, #8
 800b6f0:	60fb      	str	r3, [r7, #12]
 800b6f2:	e002      	b.n	800b6fa <vListInsert+0x2e>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	60fb      	str	r3, [r7, #12]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	429a      	cmp	r2, r3
 800b704:	d2f6      	bcs.n	800b6f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	685a      	ldr	r2, [r3, #4]
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	1c5a      	adds	r2, r3, #1
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	601a      	str	r2, [r3, #0]
}
 800b732:	bf00      	nop
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b73e:	b480      	push	{r7}
 800b740:	b085      	sub	sp, #20
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	6892      	ldr	r2, [r2, #8]
 800b754:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	6852      	ldr	r2, [r2, #4]
 800b75e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	429a      	cmp	r2, r3
 800b768:	d103      	bne.n	800b772 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	689a      	ldr	r2, [r3, #8]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	1e5a      	subs	r2, r3, #1
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
	...

0800b794 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10d      	bne.n	800b7c4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ac:	b672      	cpsid	i
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	b662      	cpsie	i
 800b7bc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b7be:	bf00      	nop
 800b7c0:	bf00      	nop
 800b7c2:	e7fd      	b.n	800b7c0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b7c4:	f001 fb7a 	bl	800cebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7d0:	68f9      	ldr	r1, [r7, #12]
 800b7d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b7d4:	fb01 f303 	mul.w	r3, r1, r3
 800b7d8:	441a      	add	r2, r3
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	68f9      	ldr	r1, [r7, #12]
 800b7f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b7fa:	fb01 f303 	mul.w	r3, r1, r3
 800b7fe:	441a      	add	r2, r3
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	22ff      	movs	r2, #255	@ 0xff
 800b808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	22ff      	movs	r2, #255	@ 0xff
 800b810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d114      	bne.n	800b844 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d01a      	beq.n	800b858 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	3310      	adds	r3, #16
 800b826:	4618      	mov	r0, r3
 800b828:	f000 ff62 	bl	800c6f0 <xTaskRemoveFromEventList>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d012      	beq.n	800b858 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b832:	4b0d      	ldr	r3, [pc, #52]	@ (800b868 <xQueueGenericReset+0xd4>)
 800b834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b838:	601a      	str	r2, [r3, #0]
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	e009      	b.n	800b858 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3310      	adds	r3, #16
 800b848:	4618      	mov	r0, r3
 800b84a:	f7ff feee 	bl	800b62a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3324      	adds	r3, #36	@ 0x24
 800b852:	4618      	mov	r0, r3
 800b854:	f7ff fee9 	bl	800b62a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b858:	f001 fb66 	bl	800cf28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b85c:	2301      	movs	r3, #1
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	e000ed04 	.word	0xe000ed04

0800b86c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08e      	sub	sp, #56	@ 0x38
 800b870:	af02      	add	r7, sp, #8
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10d      	bne.n	800b89c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b884:	b672      	cpsid	i
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	b662      	cpsie	i
 800b894:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b896:	bf00      	nop
 800b898:	bf00      	nop
 800b89a:	e7fd      	b.n	800b898 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10d      	bne.n	800b8be <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a6:	b672      	cpsid	i
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	b662      	cpsie	i
 800b8b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b8b8:	bf00      	nop
 800b8ba:	bf00      	nop
 800b8bc:	e7fd      	b.n	800b8ba <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d002      	beq.n	800b8ca <xQueueGenericCreateStatic+0x5e>
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <xQueueGenericCreateStatic+0x62>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e000      	b.n	800b8d0 <xQueueGenericCreateStatic+0x64>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10d      	bne.n	800b8f0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d8:	b672      	cpsid	i
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	b662      	cpsie	i
 800b8e8:	623b      	str	r3, [r7, #32]
}
 800b8ea:	bf00      	nop
 800b8ec:	bf00      	nop
 800b8ee:	e7fd      	b.n	800b8ec <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d102      	bne.n	800b8fc <xQueueGenericCreateStatic+0x90>
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <xQueueGenericCreateStatic+0x94>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e000      	b.n	800b902 <xQueueGenericCreateStatic+0x96>
 800b900:	2300      	movs	r3, #0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10d      	bne.n	800b922 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90a:	b672      	cpsid	i
 800b90c:	f383 8811 	msr	BASEPRI, r3
 800b910:	f3bf 8f6f 	isb	sy
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	b662      	cpsie	i
 800b91a:	61fb      	str	r3, [r7, #28]
}
 800b91c:	bf00      	nop
 800b91e:	bf00      	nop
 800b920:	e7fd      	b.n	800b91e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b922:	2348      	movs	r3, #72	@ 0x48
 800b924:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	2b48      	cmp	r3, #72	@ 0x48
 800b92a:	d00d      	beq.n	800b948 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b930:	b672      	cpsid	i
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	b662      	cpsie	i
 800b940:	61bb      	str	r3, [r7, #24]
}
 800b942:	bf00      	nop
 800b944:	bf00      	nop
 800b946:	e7fd      	b.n	800b944 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b948:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00d      	beq.n	800b970 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b956:	2201      	movs	r2, #1
 800b958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b95c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b962:	9300      	str	r3, [sp, #0]
 800b964:	4613      	mov	r3, r2
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	68b9      	ldr	r1, [r7, #8]
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f000 f848 	bl	800ba00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b972:	4618      	mov	r0, r3
 800b974:	3730      	adds	r7, #48	@ 0x30
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b08a      	sub	sp, #40	@ 0x28
 800b97e:	af02      	add	r7, sp, #8
 800b980:	60f8      	str	r0, [r7, #12]
 800b982:	60b9      	str	r1, [r7, #8]
 800b984:	4613      	mov	r3, r2
 800b986:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10d      	bne.n	800b9aa <xQueueGenericCreate+0x30>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b992:	b672      	cpsid	i
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	b662      	cpsie	i
 800b9a2:	613b      	str	r3, [r7, #16]
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop
 800b9a8:	e7fd      	b.n	800b9a6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d102      	bne.n	800b9b6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	61fb      	str	r3, [r7, #28]
 800b9b4:	e004      	b.n	800b9c0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	fb02 f303 	mul.w	r3, r2, r3
 800b9be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	3348      	adds	r3, #72	@ 0x48
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f001 fb61 	bl	800d08c <pvPortMalloc>
 800b9ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d011      	beq.n	800b9f6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	3348      	adds	r3, #72	@ 0x48
 800b9da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9e4:	79fa      	ldrb	r2, [r7, #7]
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	68b9      	ldr	r1, [r7, #8]
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 f805 	bl	800ba00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9f6:	69bb      	ldr	r3, [r7, #24]
	}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3720      	adds	r7, #32
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d103      	bne.n	800ba1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	69ba      	ldr	r2, [r7, #24]
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	e002      	b.n	800ba22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba2e:	2101      	movs	r1, #1
 800ba30:	69b8      	ldr	r0, [r7, #24]
 800ba32:	f7ff feaf 	bl	800b794 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba36:	bf00      	nop
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b082      	sub	sp, #8
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00e      	beq.n	800ba6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ba5e:	2300      	movs	r3, #0
 800ba60:	2200      	movs	r2, #0
 800ba62:	2100      	movs	r1, #0
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f837 	bl	800bad8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ba6a:	bf00      	nop
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b086      	sub	sp, #24
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	4603      	mov	r3, r0
 800ba7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	617b      	str	r3, [r7, #20]
 800ba80:	2300      	movs	r3, #0
 800ba82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	461a      	mov	r2, r3
 800ba88:	6939      	ldr	r1, [r7, #16]
 800ba8a:	6978      	ldr	r0, [r7, #20]
 800ba8c:	f7ff ff75 	bl	800b97a <xQueueGenericCreate>
 800ba90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f7ff ffd3 	bl	800ba3e <prvInitialiseMutex>

		return xNewQueue;
 800ba98:	68fb      	ldr	r3, [r7, #12]
	}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b088      	sub	sp, #32
 800baa6:	af02      	add	r7, sp, #8
 800baa8:	4603      	mov	r3, r0
 800baaa:	6039      	str	r1, [r7, #0]
 800baac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800baae:	2301      	movs	r3, #1
 800bab0:	617b      	str	r3, [r7, #20]
 800bab2:	2300      	movs	r3, #0
 800bab4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bab6:	79fb      	ldrb	r3, [r7, #7]
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2200      	movs	r2, #0
 800babe:	6939      	ldr	r1, [r7, #16]
 800bac0:	6978      	ldr	r0, [r7, #20]
 800bac2:	f7ff fed3 	bl	800b86c <xQueueGenericCreateStatic>
 800bac6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f7ff ffb8 	bl	800ba3e <prvInitialiseMutex>

		return xNewQueue;
 800bace:	68fb      	ldr	r3, [r7, #12]
	}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b08e      	sub	sp, #56	@ 0x38
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bae6:	2300      	movs	r3, #0
 800bae8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800baee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10d      	bne.n	800bb10 <xQueueGenericSend+0x38>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf8:	b672      	cpsid	i
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	b662      	cpsie	i
 800bb08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bb0a:	bf00      	nop
 800bb0c:	bf00      	nop
 800bb0e:	e7fd      	b.n	800bb0c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d103      	bne.n	800bb1e <xQueueGenericSend+0x46>
 800bb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <xQueueGenericSend+0x4a>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e000      	b.n	800bb24 <xQueueGenericSend+0x4c>
 800bb22:	2300      	movs	r3, #0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10d      	bne.n	800bb44 <xQueueGenericSend+0x6c>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2c:	b672      	cpsid	i
 800bb2e:	f383 8811 	msr	BASEPRI, r3
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	b662      	cpsie	i
 800bb3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bb3e:	bf00      	nop
 800bb40:	bf00      	nop
 800bb42:	e7fd      	b.n	800bb40 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d103      	bne.n	800bb52 <xQueueGenericSend+0x7a>
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d101      	bne.n	800bb56 <xQueueGenericSend+0x7e>
 800bb52:	2301      	movs	r3, #1
 800bb54:	e000      	b.n	800bb58 <xQueueGenericSend+0x80>
 800bb56:	2300      	movs	r3, #0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10d      	bne.n	800bb78 <xQueueGenericSend+0xa0>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb60:	b672      	cpsid	i
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	b662      	cpsie	i
 800bb70:	623b      	str	r3, [r7, #32]
}
 800bb72:	bf00      	nop
 800bb74:	bf00      	nop
 800bb76:	e7fd      	b.n	800bb74 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb78:	f000 ff82 	bl	800ca80 <xTaskGetSchedulerState>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d102      	bne.n	800bb88 <xQueueGenericSend+0xb0>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <xQueueGenericSend+0xb4>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e000      	b.n	800bb8e <xQueueGenericSend+0xb6>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10d      	bne.n	800bbae <xQueueGenericSend+0xd6>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb96:	b672      	cpsid	i
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	b662      	cpsie	i
 800bba6:	61fb      	str	r3, [r7, #28]
}
 800bba8:	bf00      	nop
 800bbaa:	bf00      	nop
 800bbac:	e7fd      	b.n	800bbaa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbae:	f001 f985 	bl	800cebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d302      	bcc.n	800bbc4 <xQueueGenericSend+0xec>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d129      	bne.n	800bc18 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	68b9      	ldr	r1, [r7, #8]
 800bbc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bbca:	f000 f88f 	bl	800bcec <prvCopyDataToQueue>
 800bbce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d010      	beq.n	800bbfa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbda:	3324      	adds	r3, #36	@ 0x24
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f000 fd87 	bl	800c6f0 <xTaskRemoveFromEventList>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d013      	beq.n	800bc10 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bbe8:	4b3f      	ldr	r3, [pc, #252]	@ (800bce8 <xQueueGenericSend+0x210>)
 800bbea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	e00a      	b.n	800bc10 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bbfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d007      	beq.n	800bc10 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc00:	4b39      	ldr	r3, [pc, #228]	@ (800bce8 <xQueueGenericSend+0x210>)
 800bc02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc10:	f001 f98a 	bl	800cf28 <vPortExitCritical>
				return pdPASS;
 800bc14:	2301      	movs	r3, #1
 800bc16:	e063      	b.n	800bce0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d103      	bne.n	800bc26 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc1e:	f001 f983 	bl	800cf28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	e05c      	b.n	800bce0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d106      	bne.n	800bc3a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc2c:	f107 0314 	add.w	r3, r7, #20
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 fdc3 	bl	800c7bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc36:	2301      	movs	r3, #1
 800bc38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc3a:	f001 f975 	bl	800cf28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc3e:	f000 fb67 	bl	800c310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc42:	f001 f93b 	bl	800cebc <vPortEnterCritical>
 800bc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc4c:	b25b      	sxtb	r3, r3
 800bc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc52:	d103      	bne.n	800bc5c <xQueueGenericSend+0x184>
 800bc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc62:	b25b      	sxtb	r3, r3
 800bc64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc68:	d103      	bne.n	800bc72 <xQueueGenericSend+0x19a>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc72:	f001 f959 	bl	800cf28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc76:	1d3a      	adds	r2, r7, #4
 800bc78:	f107 0314 	add.w	r3, r7, #20
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 fdb2 	bl	800c7e8 <xTaskCheckForTimeOut>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d124      	bne.n	800bcd4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc8c:	f000 f8ea 	bl	800be64 <prvIsQueueFull>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d018      	beq.n	800bcc8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc98:	3310      	adds	r3, #16
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	4611      	mov	r1, r2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 fcfe 	bl	800c6a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bca4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bca6:	f000 f88b 	bl	800bdc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bcaa:	f000 fb3f 	bl	800c32c <xTaskResumeAll>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f47f af7c 	bne.w	800bbae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800bcb6:	4b0c      	ldr	r3, [pc, #48]	@ (800bce8 <xQueueGenericSend+0x210>)
 800bcb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	e772      	b.n	800bbae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bcc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bcca:	f000 f879 	bl	800bdc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bcce:	f000 fb2d 	bl	800c32c <xTaskResumeAll>
 800bcd2:	e76c      	b.n	800bbae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bcd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bcd6:	f000 f873 	bl	800bdc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcda:	f000 fb27 	bl	800c32c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bcde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3738      	adds	r7, #56	@ 0x38
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	e000ed04 	.word	0xe000ed04

0800bcec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10d      	bne.n	800bd26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d14d      	bne.n	800bdae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	4618      	mov	r0, r3
 800bd18:	f000 fed0 	bl	800cabc <xTaskPriorityDisinherit>
 800bd1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	609a      	str	r2, [r3, #8]
 800bd24:	e043      	b.n	800bdae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d119      	bne.n	800bd60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6858      	ldr	r0, [r3, #4]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd34:	461a      	mov	r2, r3
 800bd36:	68b9      	ldr	r1, [r7, #8]
 800bd38:	f001 fd71 	bl	800d81e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd44:	441a      	add	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	685a      	ldr	r2, [r3, #4]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d32b      	bcc.n	800bdae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	605a      	str	r2, [r3, #4]
 800bd5e:	e026      	b.n	800bdae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	68d8      	ldr	r0, [r3, #12]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd68:	461a      	mov	r2, r3
 800bd6a:	68b9      	ldr	r1, [r7, #8]
 800bd6c:	f001 fd57 	bl	800d81e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	68da      	ldr	r2, [r3, #12]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd78:	425b      	negs	r3, r3
 800bd7a:	441a      	add	r2, r3
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	68da      	ldr	r2, [r3, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d207      	bcs.n	800bd9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	689a      	ldr	r2, [r3, #8]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd94:	425b      	negs	r3, r3
 800bd96:	441a      	add	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d105      	bne.n	800bdae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	1c5a      	adds	r2, r3, #1
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bdb6:	697b      	ldr	r3, [r7, #20]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3718      	adds	r7, #24
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bdc8:	f001 f878 	bl	800cebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bdd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdd4:	e011      	b.n	800bdfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d012      	beq.n	800be04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3324      	adds	r3, #36	@ 0x24
 800bde2:	4618      	mov	r0, r3
 800bde4:	f000 fc84 	bl	800c6f0 <xTaskRemoveFromEventList>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bdee:	f000 fd63 	bl	800c8b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	dce9      	bgt.n	800bdd6 <prvUnlockQueue+0x16>
 800be02:	e000      	b.n	800be06 <prvUnlockQueue+0x46>
					break;
 800be04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	22ff      	movs	r2, #255	@ 0xff
 800be0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800be0e:	f001 f88b 	bl	800cf28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be12:	f001 f853 	bl	800cebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be1e:	e011      	b.n	800be44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d012      	beq.n	800be4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	3310      	adds	r3, #16
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 fc5f 	bl	800c6f0 <xTaskRemoveFromEventList>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be38:	f000 fd3e 	bl	800c8b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be3c:	7bbb      	ldrb	r3, [r7, #14]
 800be3e:	3b01      	subs	r3, #1
 800be40:	b2db      	uxtb	r3, r3
 800be42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	dce9      	bgt.n	800be20 <prvUnlockQueue+0x60>
 800be4c:	e000      	b.n	800be50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800be4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	22ff      	movs	r2, #255	@ 0xff
 800be54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800be58:	f001 f866 	bl	800cf28 <vPortExitCritical>
}
 800be5c:	bf00      	nop
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be6c:	f001 f826 	bl	800cebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be78:	429a      	cmp	r2, r3
 800be7a:	d102      	bne.n	800be82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be7c:	2301      	movs	r3, #1
 800be7e:	60fb      	str	r3, [r7, #12]
 800be80:	e001      	b.n	800be86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be82:	2300      	movs	r3, #0
 800be84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be86:	f001 f84f 	bl	800cf28 <vPortExitCritical>

	return xReturn;
 800be8a:	68fb      	ldr	r3, [r7, #12]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08e      	sub	sp, #56	@ 0x38
 800be98:	af04      	add	r7, sp, #16
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10d      	bne.n	800bec4 <xTaskCreateStatic+0x30>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beac:	b672      	cpsid	i
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	b662      	cpsie	i
 800bebc:	623b      	str	r3, [r7, #32]
}
 800bebe:	bf00      	nop
 800bec0:	bf00      	nop
 800bec2:	e7fd      	b.n	800bec0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10d      	bne.n	800bee6 <xTaskCreateStatic+0x52>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bece:	b672      	cpsid	i
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	b662      	cpsie	i
 800bede:	61fb      	str	r3, [r7, #28]
}
 800bee0:	bf00      	nop
 800bee2:	bf00      	nop
 800bee4:	e7fd      	b.n	800bee2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bee6:	2354      	movs	r3, #84	@ 0x54
 800bee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	2b54      	cmp	r3, #84	@ 0x54
 800beee:	d00d      	beq.n	800bf0c <xTaskCreateStatic+0x78>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef4:	b672      	cpsid	i
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	b662      	cpsie	i
 800bf04:	61bb      	str	r3, [r7, #24]
}
 800bf06:	bf00      	nop
 800bf08:	bf00      	nop
 800bf0a:	e7fd      	b.n	800bf08 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bf0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d01e      	beq.n	800bf52 <xTaskCreateStatic+0xbe>
 800bf14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d01b      	beq.n	800bf52 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf26:	2202      	movs	r2, #2
 800bf28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	9303      	str	r3, [sp, #12]
 800bf30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf32:	9302      	str	r3, [sp, #8]
 800bf34:	f107 0314 	add.w	r3, r7, #20
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	68b9      	ldr	r1, [r7, #8]
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f000 f850 	bl	800bfea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf4c:	f000 f8d8 	bl	800c100 <prvAddNewTaskToReadyList>
 800bf50:	e001      	b.n	800bf56 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf56:	697b      	ldr	r3, [r7, #20]
	}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3728      	adds	r7, #40	@ 0x28
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08c      	sub	sp, #48	@ 0x30
 800bf64:	af04      	add	r7, sp, #16
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	603b      	str	r3, [r7, #0]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf70:	88fb      	ldrh	r3, [r7, #6]
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4618      	mov	r0, r3
 800bf76:	f001 f889 	bl	800d08c <pvPortMalloc>
 800bf7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00e      	beq.n	800bfa0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf82:	2054      	movs	r0, #84	@ 0x54
 800bf84:	f001 f882 	bl	800d08c <pvPortMalloc>
 800bf88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d003      	beq.n	800bf98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf96:	e005      	b.n	800bfa4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf98:	6978      	ldr	r0, [r7, #20]
 800bf9a:	f001 f945 	bl	800d228 <vPortFree>
 800bf9e:	e001      	b.n	800bfa4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d017      	beq.n	800bfda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bfb2:	88fa      	ldrh	r2, [r7, #6]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	9303      	str	r3, [sp, #12]
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	9302      	str	r3, [sp, #8]
 800bfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	68b9      	ldr	r1, [r7, #8]
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 f80e 	bl	800bfea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfce:	69f8      	ldr	r0, [r7, #28]
 800bfd0:	f000 f896 	bl	800c100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	61bb      	str	r3, [r7, #24]
 800bfd8:	e002      	b.n	800bfe0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfda:	f04f 33ff 	mov.w	r3, #4294967295
 800bfde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfe0:	69bb      	ldr	r3, [r7, #24]
	}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3720      	adds	r7, #32
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b088      	sub	sp, #32
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	60f8      	str	r0, [r7, #12]
 800bff2:	60b9      	str	r1, [r7, #8]
 800bff4:	607a      	str	r2, [r7, #4]
 800bff6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bffc:	6879      	ldr	r1, [r7, #4]
 800bffe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c002:	440b      	add	r3, r1
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4413      	add	r3, r2
 800c008:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	f023 0307 	bic.w	r3, r3, #7
 800c010:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	f003 0307 	and.w	r3, r3, #7
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00d      	beq.n	800c038 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c020:	b672      	cpsid	i
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	b662      	cpsie	i
 800c030:	617b      	str	r3, [r7, #20]
}
 800c032:	bf00      	nop
 800c034:	bf00      	nop
 800c036:	e7fd      	b.n	800c034 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d01f      	beq.n	800c07e <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c03e:	2300      	movs	r3, #0
 800c040:	61fb      	str	r3, [r7, #28]
 800c042:	e012      	b.n	800c06a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	4413      	add	r3, r2
 800c04a:	7819      	ldrb	r1, [r3, #0]
 800c04c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	4413      	add	r3, r2
 800c052:	3334      	adds	r3, #52	@ 0x34
 800c054:	460a      	mov	r2, r1
 800c056:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	4413      	add	r3, r2
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d006      	beq.n	800c072 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	3301      	adds	r3, #1
 800c068:	61fb      	str	r3, [r7, #28]
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	2b0f      	cmp	r3, #15
 800c06e:	d9e9      	bls.n	800c044 <prvInitialiseNewTask+0x5a>
 800c070:	e000      	b.n	800c074 <prvInitialiseNewTask+0x8a>
			{
				break;
 800c072:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c076:	2200      	movs	r2, #0
 800c078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c07c:	e003      	b.n	800c086 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c088:	2b06      	cmp	r3, #6
 800c08a:	d901      	bls.n	800c090 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c08c:	2306      	movs	r3, #6
 800c08e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c094:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c09a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09e:	2200      	movs	r2, #0
 800c0a0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff fadf 	bl	800b66a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ae:	3318      	adds	r3, #24
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff fada 	bl	800b66a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0be:	f1c3 0207 	rsb	r2, r3, #7
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	68f9      	ldr	r1, [r7, #12]
 800c0de:	69b8      	ldr	r0, [r7, #24]
 800c0e0:	f000 fdde 	bl	800cca0 <pxPortInitialiseStack>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0f6:	bf00      	nop
 800c0f8:	3720      	adds	r7, #32
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
	...

0800c100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c108:	f000 fed8 	bl	800cebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c10c:	4b2a      	ldr	r3, [pc, #168]	@ (800c1b8 <prvAddNewTaskToReadyList+0xb8>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3301      	adds	r3, #1
 800c112:	4a29      	ldr	r2, [pc, #164]	@ (800c1b8 <prvAddNewTaskToReadyList+0xb8>)
 800c114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c116:	4b29      	ldr	r3, [pc, #164]	@ (800c1bc <prvAddNewTaskToReadyList+0xbc>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d109      	bne.n	800c132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c11e:	4a27      	ldr	r2, [pc, #156]	@ (800c1bc <prvAddNewTaskToReadyList+0xbc>)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c124:	4b24      	ldr	r3, [pc, #144]	@ (800c1b8 <prvAddNewTaskToReadyList+0xb8>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d110      	bne.n	800c14e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c12c:	f000 fbe8 	bl	800c900 <prvInitialiseTaskLists>
 800c130:	e00d      	b.n	800c14e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c132:	4b23      	ldr	r3, [pc, #140]	@ (800c1c0 <prvAddNewTaskToReadyList+0xc0>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d109      	bne.n	800c14e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c13a:	4b20      	ldr	r3, [pc, #128]	@ (800c1bc <prvAddNewTaskToReadyList+0xbc>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c144:	429a      	cmp	r2, r3
 800c146:	d802      	bhi.n	800c14e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c148:	4a1c      	ldr	r2, [pc, #112]	@ (800c1bc <prvAddNewTaskToReadyList+0xbc>)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c14e:	4b1d      	ldr	r3, [pc, #116]	@ (800c1c4 <prvAddNewTaskToReadyList+0xc4>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3301      	adds	r3, #1
 800c154:	4a1b      	ldr	r2, [pc, #108]	@ (800c1c4 <prvAddNewTaskToReadyList+0xc4>)
 800c156:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c15c:	2201      	movs	r2, #1
 800c15e:	409a      	lsls	r2, r3
 800c160:	4b19      	ldr	r3, [pc, #100]	@ (800c1c8 <prvAddNewTaskToReadyList+0xc8>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4313      	orrs	r3, r2
 800c166:	4a18      	ldr	r2, [pc, #96]	@ (800c1c8 <prvAddNewTaskToReadyList+0xc8>)
 800c168:	6013      	str	r3, [r2, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c16e:	4613      	mov	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4a15      	ldr	r2, [pc, #84]	@ (800c1cc <prvAddNewTaskToReadyList+0xcc>)
 800c178:	441a      	add	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3304      	adds	r3, #4
 800c17e:	4619      	mov	r1, r3
 800c180:	4610      	mov	r0, r2
 800c182:	f7ff fa7f 	bl	800b684 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c186:	f000 fecf 	bl	800cf28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c18a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c0 <prvAddNewTaskToReadyList+0xc0>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00e      	beq.n	800c1b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c192:	4b0a      	ldr	r3, [pc, #40]	@ (800c1bc <prvAddNewTaskToReadyList+0xbc>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d207      	bcs.n	800c1b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c1d0 <prvAddNewTaskToReadyList+0xd0>)
 800c1a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1a6:	601a      	str	r2, [r3, #0]
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1b0:	bf00      	nop
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	20000f74 	.word	0x20000f74
 800c1bc:	20000e74 	.word	0x20000e74
 800c1c0:	20000f80 	.word	0x20000f80
 800c1c4:	20000f90 	.word	0x20000f90
 800c1c8:	20000f7c 	.word	0x20000f7c
 800c1cc:	20000e78 	.word	0x20000e78
 800c1d0:	e000ed04 	.word	0xe000ed04

0800c1d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d01a      	beq.n	800c21c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c1e6:	4b15      	ldr	r3, [pc, #84]	@ (800c23c <vTaskDelay+0x68>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00d      	beq.n	800c20a <vTaskDelay+0x36>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f2:	b672      	cpsid	i
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	b662      	cpsie	i
 800c202:	60bb      	str	r3, [r7, #8]
}
 800c204:	bf00      	nop
 800c206:	bf00      	nop
 800c208:	e7fd      	b.n	800c206 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c20a:	f000 f881 	bl	800c310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c20e:	2100      	movs	r1, #0
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fcdf 	bl	800cbd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c216:	f000 f889 	bl	800c32c <xTaskResumeAll>
 800c21a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d107      	bne.n	800c232 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800c222:	4b07      	ldr	r3, [pc, #28]	@ (800c240 <vTaskDelay+0x6c>)
 800c224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c228:	601a      	str	r2, [r3, #0]
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c232:	bf00      	nop
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	20000f9c 	.word	0x20000f9c
 800c240:	e000ed04 	.word	0xe000ed04

0800c244 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08a      	sub	sp, #40	@ 0x28
 800c248:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c24a:	2300      	movs	r3, #0
 800c24c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c24e:	2300      	movs	r3, #0
 800c250:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c252:	463a      	mov	r2, r7
 800c254:	1d39      	adds	r1, r7, #4
 800c256:	f107 0308 	add.w	r3, r7, #8
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7f4 fc66 	bl	8000b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	9202      	str	r2, [sp, #8]
 800c268:	9301      	str	r3, [sp, #4]
 800c26a:	2300      	movs	r3, #0
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	2300      	movs	r3, #0
 800c270:	460a      	mov	r2, r1
 800c272:	4921      	ldr	r1, [pc, #132]	@ (800c2f8 <vTaskStartScheduler+0xb4>)
 800c274:	4821      	ldr	r0, [pc, #132]	@ (800c2fc <vTaskStartScheduler+0xb8>)
 800c276:	f7ff fe0d 	bl	800be94 <xTaskCreateStatic>
 800c27a:	4603      	mov	r3, r0
 800c27c:	4a20      	ldr	r2, [pc, #128]	@ (800c300 <vTaskStartScheduler+0xbc>)
 800c27e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c280:	4b1f      	ldr	r3, [pc, #124]	@ (800c300 <vTaskStartScheduler+0xbc>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c288:	2301      	movs	r3, #1
 800c28a:	617b      	str	r3, [r7, #20]
 800c28c:	e001      	b.n	800c292 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c28e:	2300      	movs	r3, #0
 800c290:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	2b01      	cmp	r3, #1
 800c296:	d118      	bne.n	800c2ca <vTaskStartScheduler+0x86>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29c:	b672      	cpsid	i
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	b662      	cpsie	i
 800c2ac:	613b      	str	r3, [r7, #16]
}
 800c2ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2b0:	4b14      	ldr	r3, [pc, #80]	@ (800c304 <vTaskStartScheduler+0xc0>)
 800c2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c2b8:	4b13      	ldr	r3, [pc, #76]	@ (800c308 <vTaskStartScheduler+0xc4>)
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c2be:	4b13      	ldr	r3, [pc, #76]	@ (800c30c <vTaskStartScheduler+0xc8>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c2c4:	f000 fd7c 	bl	800cdc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c2c8:	e011      	b.n	800c2ee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d0:	d10d      	bne.n	800c2ee <vTaskStartScheduler+0xaa>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d6:	b672      	cpsid	i
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	b662      	cpsie	i
 800c2e6:	60fb      	str	r3, [r7, #12]
}
 800c2e8:	bf00      	nop
 800c2ea:	bf00      	nop
 800c2ec:	e7fd      	b.n	800c2ea <vTaskStartScheduler+0xa6>
}
 800c2ee:	bf00      	nop
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	0800e988 	.word	0x0800e988
 800c2fc:	0800c8d1 	.word	0x0800c8d1
 800c300:	20000f98 	.word	0x20000f98
 800c304:	20000f94 	.word	0x20000f94
 800c308:	20000f80 	.word	0x20000f80
 800c30c:	20000f78 	.word	0x20000f78

0800c310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c310:	b480      	push	{r7}
 800c312:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c314:	4b04      	ldr	r3, [pc, #16]	@ (800c328 <vTaskSuspendAll+0x18>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	3301      	adds	r3, #1
 800c31a:	4a03      	ldr	r2, [pc, #12]	@ (800c328 <vTaskSuspendAll+0x18>)
 800c31c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c31e:	bf00      	nop
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr
 800c328:	20000f9c 	.word	0x20000f9c

0800c32c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c336:	2300      	movs	r3, #0
 800c338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c33a:	4b43      	ldr	r3, [pc, #268]	@ (800c448 <xTaskResumeAll+0x11c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10d      	bne.n	800c35e <xTaskResumeAll+0x32>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c346:	b672      	cpsid	i
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	b662      	cpsie	i
 800c356:	603b      	str	r3, [r7, #0]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c35e:	f000 fdad 	bl	800cebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c362:	4b39      	ldr	r3, [pc, #228]	@ (800c448 <xTaskResumeAll+0x11c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	3b01      	subs	r3, #1
 800c368:	4a37      	ldr	r2, [pc, #220]	@ (800c448 <xTaskResumeAll+0x11c>)
 800c36a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c36c:	4b36      	ldr	r3, [pc, #216]	@ (800c448 <xTaskResumeAll+0x11c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d161      	bne.n	800c438 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c374:	4b35      	ldr	r3, [pc, #212]	@ (800c44c <xTaskResumeAll+0x120>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d05d      	beq.n	800c438 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c37c:	e02e      	b.n	800c3dc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c37e:	4b34      	ldr	r3, [pc, #208]	@ (800c450 <xTaskResumeAll+0x124>)
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	3318      	adds	r3, #24
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7ff f9d7 	bl	800b73e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	3304      	adds	r3, #4
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff f9d2 	bl	800b73e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39e:	2201      	movs	r2, #1
 800c3a0:	409a      	lsls	r2, r3
 800c3a2:	4b2c      	ldr	r3, [pc, #176]	@ (800c454 <xTaskResumeAll+0x128>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	4a2a      	ldr	r2, [pc, #168]	@ (800c454 <xTaskResumeAll+0x128>)
 800c3aa:	6013      	str	r3, [r2, #0]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4a27      	ldr	r2, [pc, #156]	@ (800c458 <xTaskResumeAll+0x12c>)
 800c3ba:	441a      	add	r2, r3
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3304      	adds	r3, #4
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	f7ff f95e 	bl	800b684 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3cc:	4b23      	ldr	r3, [pc, #140]	@ (800c45c <xTaskResumeAll+0x130>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d302      	bcc.n	800c3dc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c3d6:	4b22      	ldr	r3, [pc, #136]	@ (800c460 <xTaskResumeAll+0x134>)
 800c3d8:	2201      	movs	r2, #1
 800c3da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3dc:	4b1c      	ldr	r3, [pc, #112]	@ (800c450 <xTaskResumeAll+0x124>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1cc      	bne.n	800c37e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c3ea:	f000 fb29 	bl	800ca40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c3ee:	4b1d      	ldr	r3, [pc, #116]	@ (800c464 <xTaskResumeAll+0x138>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d010      	beq.n	800c41c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c3fa:	f000 f837 	bl	800c46c <xTaskIncrementTick>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c404:	4b16      	ldr	r3, [pc, #88]	@ (800c460 <xTaskResumeAll+0x134>)
 800c406:	2201      	movs	r2, #1
 800c408:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3b01      	subs	r3, #1
 800c40e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1f1      	bne.n	800c3fa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c416:	4b13      	ldr	r3, [pc, #76]	@ (800c464 <xTaskResumeAll+0x138>)
 800c418:	2200      	movs	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c41c:	4b10      	ldr	r3, [pc, #64]	@ (800c460 <xTaskResumeAll+0x134>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d009      	beq.n	800c438 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c424:	2301      	movs	r3, #1
 800c426:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c428:	4b0f      	ldr	r3, [pc, #60]	@ (800c468 <xTaskResumeAll+0x13c>)
 800c42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c42e:	601a      	str	r2, [r3, #0]
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c438:	f000 fd76 	bl	800cf28 <vPortExitCritical>

	return xAlreadyYielded;
 800c43c:	68bb      	ldr	r3, [r7, #8]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	20000f9c 	.word	0x20000f9c
 800c44c:	20000f74 	.word	0x20000f74
 800c450:	20000f34 	.word	0x20000f34
 800c454:	20000f7c 	.word	0x20000f7c
 800c458:	20000e78 	.word	0x20000e78
 800c45c:	20000e74 	.word	0x20000e74
 800c460:	20000f88 	.word	0x20000f88
 800c464:	20000f84 	.word	0x20000f84
 800c468:	e000ed04 	.word	0xe000ed04

0800c46c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c472:	2300      	movs	r3, #0
 800c474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c476:	4b50      	ldr	r3, [pc, #320]	@ (800c5b8 <xTaskIncrementTick+0x14c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f040 808b 	bne.w	800c596 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c480:	4b4e      	ldr	r3, [pc, #312]	@ (800c5bc <xTaskIncrementTick+0x150>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	3301      	adds	r3, #1
 800c486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c488:	4a4c      	ldr	r2, [pc, #304]	@ (800c5bc <xTaskIncrementTick+0x150>)
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d123      	bne.n	800c4dc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800c494:	4b4a      	ldr	r3, [pc, #296]	@ (800c5c0 <xTaskIncrementTick+0x154>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00d      	beq.n	800c4ba <xTaskIncrementTick+0x4e>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a2:	b672      	cpsid	i
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	b662      	cpsie	i
 800c4b2:	603b      	str	r3, [r7, #0]
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop
 800c4b8:	e7fd      	b.n	800c4b6 <xTaskIncrementTick+0x4a>
 800c4ba:	4b41      	ldr	r3, [pc, #260]	@ (800c5c0 <xTaskIncrementTick+0x154>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	60fb      	str	r3, [r7, #12]
 800c4c0:	4b40      	ldr	r3, [pc, #256]	@ (800c5c4 <xTaskIncrementTick+0x158>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a3e      	ldr	r2, [pc, #248]	@ (800c5c0 <xTaskIncrementTick+0x154>)
 800c4c6:	6013      	str	r3, [r2, #0]
 800c4c8:	4a3e      	ldr	r2, [pc, #248]	@ (800c5c4 <xTaskIncrementTick+0x158>)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	6013      	str	r3, [r2, #0]
 800c4ce:	4b3e      	ldr	r3, [pc, #248]	@ (800c5c8 <xTaskIncrementTick+0x15c>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	4a3c      	ldr	r2, [pc, #240]	@ (800c5c8 <xTaskIncrementTick+0x15c>)
 800c4d6:	6013      	str	r3, [r2, #0]
 800c4d8:	f000 fab2 	bl	800ca40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c4dc:	4b3b      	ldr	r3, [pc, #236]	@ (800c5cc <xTaskIncrementTick+0x160>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d348      	bcc.n	800c578 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4e6:	4b36      	ldr	r3, [pc, #216]	@ (800c5c0 <xTaskIncrementTick+0x154>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d104      	bne.n	800c4fa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4f0:	4b36      	ldr	r3, [pc, #216]	@ (800c5cc <xTaskIncrementTick+0x160>)
 800c4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f6:	601a      	str	r2, [r3, #0]
					break;
 800c4f8:	e03e      	b.n	800c578 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4fa:	4b31      	ldr	r3, [pc, #196]	@ (800c5c0 <xTaskIncrementTick+0x154>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c50a:	693a      	ldr	r2, [r7, #16]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d203      	bcs.n	800c51a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c512:	4a2e      	ldr	r2, [pc, #184]	@ (800c5cc <xTaskIncrementTick+0x160>)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c518:	e02e      	b.n	800c578 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	3304      	adds	r3, #4
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff f90d 	bl	800b73e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d004      	beq.n	800c536 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	3318      	adds	r3, #24
 800c530:	4618      	mov	r0, r3
 800c532:	f7ff f904 	bl	800b73e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53a:	2201      	movs	r2, #1
 800c53c:	409a      	lsls	r2, r3
 800c53e:	4b24      	ldr	r3, [pc, #144]	@ (800c5d0 <xTaskIncrementTick+0x164>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4313      	orrs	r3, r2
 800c544:	4a22      	ldr	r2, [pc, #136]	@ (800c5d0 <xTaskIncrementTick+0x164>)
 800c546:	6013      	str	r3, [r2, #0]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c54c:	4613      	mov	r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	4413      	add	r3, r2
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	4a1f      	ldr	r2, [pc, #124]	@ (800c5d4 <xTaskIncrementTick+0x168>)
 800c556:	441a      	add	r2, r3
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	3304      	adds	r3, #4
 800c55c:	4619      	mov	r1, r3
 800c55e:	4610      	mov	r0, r2
 800c560:	f7ff f890 	bl	800b684 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c568:	4b1b      	ldr	r3, [pc, #108]	@ (800c5d8 <xTaskIncrementTick+0x16c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c56e:	429a      	cmp	r2, r3
 800c570:	d3b9      	bcc.n	800c4e6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800c572:	2301      	movs	r3, #1
 800c574:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c576:	e7b6      	b.n	800c4e6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c578:	4b17      	ldr	r3, [pc, #92]	@ (800c5d8 <xTaskIncrementTick+0x16c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c57e:	4915      	ldr	r1, [pc, #84]	@ (800c5d4 <xTaskIncrementTick+0x168>)
 800c580:	4613      	mov	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	440b      	add	r3, r1
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d907      	bls.n	800c5a0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c590:	2301      	movs	r3, #1
 800c592:	617b      	str	r3, [r7, #20]
 800c594:	e004      	b.n	800c5a0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c596:	4b11      	ldr	r3, [pc, #68]	@ (800c5dc <xTaskIncrementTick+0x170>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	3301      	adds	r3, #1
 800c59c:	4a0f      	ldr	r2, [pc, #60]	@ (800c5dc <xTaskIncrementTick+0x170>)
 800c59e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c5e0 <xTaskIncrementTick+0x174>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c5ac:	697b      	ldr	r3, [r7, #20]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3718      	adds	r7, #24
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20000f9c 	.word	0x20000f9c
 800c5bc:	20000f78 	.word	0x20000f78
 800c5c0:	20000f2c 	.word	0x20000f2c
 800c5c4:	20000f30 	.word	0x20000f30
 800c5c8:	20000f8c 	.word	0x20000f8c
 800c5cc:	20000f94 	.word	0x20000f94
 800c5d0:	20000f7c 	.word	0x20000f7c
 800c5d4:	20000e78 	.word	0x20000e78
 800c5d8:	20000e74 	.word	0x20000e74
 800c5dc:	20000f84 	.word	0x20000f84
 800c5e0:	20000f88 	.word	0x20000f88

0800c5e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b087      	sub	sp, #28
 800c5e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c5ea:	4b28      	ldr	r3, [pc, #160]	@ (800c68c <vTaskSwitchContext+0xa8>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d003      	beq.n	800c5fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c5f2:	4b27      	ldr	r3, [pc, #156]	@ (800c690 <vTaskSwitchContext+0xac>)
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c5f8:	e042      	b.n	800c680 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c5fa:	4b25      	ldr	r3, [pc, #148]	@ (800c690 <vTaskSwitchContext+0xac>)
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c600:	4b24      	ldr	r3, [pc, #144]	@ (800c694 <vTaskSwitchContext+0xb0>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	fab3 f383 	clz	r3, r3
 800c60c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c60e:	7afb      	ldrb	r3, [r7, #11]
 800c610:	f1c3 031f 	rsb	r3, r3, #31
 800c614:	617b      	str	r3, [r7, #20]
 800c616:	4920      	ldr	r1, [pc, #128]	@ (800c698 <vTaskSwitchContext+0xb4>)
 800c618:	697a      	ldr	r2, [r7, #20]
 800c61a:	4613      	mov	r3, r2
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4413      	add	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	440b      	add	r3, r1
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d10d      	bne.n	800c646 <vTaskSwitchContext+0x62>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62e:	b672      	cpsid	i
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	b662      	cpsie	i
 800c63e:	607b      	str	r3, [r7, #4]
}
 800c640:	bf00      	nop
 800c642:	bf00      	nop
 800c644:	e7fd      	b.n	800c642 <vTaskSwitchContext+0x5e>
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	4613      	mov	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4a11      	ldr	r2, [pc, #68]	@ (800c698 <vTaskSwitchContext+0xb4>)
 800c652:	4413      	add	r3, r2
 800c654:	613b      	str	r3, [r7, #16]
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	605a      	str	r2, [r3, #4]
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	685a      	ldr	r2, [r3, #4]
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	3308      	adds	r3, #8
 800c668:	429a      	cmp	r2, r3
 800c66a:	d104      	bne.n	800c676 <vTaskSwitchContext+0x92>
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	685a      	ldr	r2, [r3, #4]
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	605a      	str	r2, [r3, #4]
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	4a07      	ldr	r2, [pc, #28]	@ (800c69c <vTaskSwitchContext+0xb8>)
 800c67e:	6013      	str	r3, [r2, #0]
}
 800c680:	bf00      	nop
 800c682:	371c      	adds	r7, #28
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	20000f9c 	.word	0x20000f9c
 800c690:	20000f88 	.word	0x20000f88
 800c694:	20000f7c 	.word	0x20000f7c
 800c698:	20000e78 	.word	0x20000e78
 800c69c:	20000e74 	.word	0x20000e74

0800c6a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10d      	bne.n	800c6cc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b4:	b672      	cpsid	i
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	b662      	cpsie	i
 800c6c4:	60fb      	str	r3, [r7, #12]
}
 800c6c6:	bf00      	nop
 800c6c8:	bf00      	nop
 800c6ca:	e7fd      	b.n	800c6c8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c6cc:	4b07      	ldr	r3, [pc, #28]	@ (800c6ec <vTaskPlaceOnEventList+0x4c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3318      	adds	r3, #24
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f7fe fff9 	bl	800b6cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c6da:	2101      	movs	r1, #1
 800c6dc:	6838      	ldr	r0, [r7, #0]
 800c6de:	f000 fa79 	bl	800cbd4 <prvAddCurrentTaskToDelayedList>
}
 800c6e2:	bf00      	nop
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20000e74 	.word	0x20000e74

0800c6f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10d      	bne.n	800c722 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c70a:	b672      	cpsid	i
 800c70c:	f383 8811 	msr	BASEPRI, r3
 800c710:	f3bf 8f6f 	isb	sy
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	b662      	cpsie	i
 800c71a:	60fb      	str	r3, [r7, #12]
}
 800c71c:	bf00      	nop
 800c71e:	bf00      	nop
 800c720:	e7fd      	b.n	800c71e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	3318      	adds	r3, #24
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff f809 	bl	800b73e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c72c:	4b1d      	ldr	r3, [pc, #116]	@ (800c7a4 <xTaskRemoveFromEventList+0xb4>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d11c      	bne.n	800c76e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	3304      	adds	r3, #4
 800c738:	4618      	mov	r0, r3
 800c73a:	f7ff f800 	bl	800b73e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c742:	2201      	movs	r2, #1
 800c744:	409a      	lsls	r2, r3
 800c746:	4b18      	ldr	r3, [pc, #96]	@ (800c7a8 <xTaskRemoveFromEventList+0xb8>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	4a16      	ldr	r2, [pc, #88]	@ (800c7a8 <xTaskRemoveFromEventList+0xb8>)
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c754:	4613      	mov	r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	4413      	add	r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4a13      	ldr	r2, [pc, #76]	@ (800c7ac <xTaskRemoveFromEventList+0xbc>)
 800c75e:	441a      	add	r2, r3
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	3304      	adds	r3, #4
 800c764:	4619      	mov	r1, r3
 800c766:	4610      	mov	r0, r2
 800c768:	f7fe ff8c 	bl	800b684 <vListInsertEnd>
 800c76c:	e005      	b.n	800c77a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	3318      	adds	r3, #24
 800c772:	4619      	mov	r1, r3
 800c774:	480e      	ldr	r0, [pc, #56]	@ (800c7b0 <xTaskRemoveFromEventList+0xc0>)
 800c776:	f7fe ff85 	bl	800b684 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c77e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b4 <xTaskRemoveFromEventList+0xc4>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c784:	429a      	cmp	r2, r3
 800c786:	d905      	bls.n	800c794 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c788:	2301      	movs	r3, #1
 800c78a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c78c:	4b0a      	ldr	r3, [pc, #40]	@ (800c7b8 <xTaskRemoveFromEventList+0xc8>)
 800c78e:	2201      	movs	r2, #1
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	e001      	b.n	800c798 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c794:	2300      	movs	r3, #0
 800c796:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c798:	697b      	ldr	r3, [r7, #20]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3718      	adds	r7, #24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20000f9c 	.word	0x20000f9c
 800c7a8:	20000f7c 	.word	0x20000f7c
 800c7ac:	20000e78 	.word	0x20000e78
 800c7b0:	20000f34 	.word	0x20000f34
 800c7b4:	20000e74 	.word	0x20000e74
 800c7b8:	20000f88 	.word	0x20000f88

0800c7bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c7c4:	4b06      	ldr	r3, [pc, #24]	@ (800c7e0 <vTaskInternalSetTimeOutState+0x24>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c7cc:	4b05      	ldr	r3, [pc, #20]	@ (800c7e4 <vTaskInternalSetTimeOutState+0x28>)
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	605a      	str	r2, [r3, #4]
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr
 800c7e0:	20000f8c 	.word	0x20000f8c
 800c7e4:	20000f78 	.word	0x20000f78

0800c7e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b088      	sub	sp, #32
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d10d      	bne.n	800c814 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800c7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fc:	b672      	cpsid	i
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	b662      	cpsie	i
 800c80c:	613b      	str	r3, [r7, #16]
}
 800c80e:	bf00      	nop
 800c810:	bf00      	nop
 800c812:	e7fd      	b.n	800c810 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d10d      	bne.n	800c836 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800c81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81e:	b672      	cpsid	i
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	b662      	cpsie	i
 800c82e:	60fb      	str	r3, [r7, #12]
}
 800c830:	bf00      	nop
 800c832:	bf00      	nop
 800c834:	e7fd      	b.n	800c832 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800c836:	f000 fb41 	bl	800cebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c83a:	4b1d      	ldr	r3, [pc, #116]	@ (800c8b0 <xTaskCheckForTimeOut+0xc8>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	69ba      	ldr	r2, [r7, #24]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c852:	d102      	bne.n	800c85a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c854:	2300      	movs	r3, #0
 800c856:	61fb      	str	r3, [r7, #28]
 800c858:	e023      	b.n	800c8a2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	4b15      	ldr	r3, [pc, #84]	@ (800c8b4 <xTaskCheckForTimeOut+0xcc>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	429a      	cmp	r2, r3
 800c864:	d007      	beq.n	800c876 <xTaskCheckForTimeOut+0x8e>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	69ba      	ldr	r2, [r7, #24]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d302      	bcc.n	800c876 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c870:	2301      	movs	r3, #1
 800c872:	61fb      	str	r3, [r7, #28]
 800c874:	e015      	b.n	800c8a2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d20b      	bcs.n	800c898 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	1ad2      	subs	r2, r2, r3
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7ff ff95 	bl	800c7bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c892:	2300      	movs	r3, #0
 800c894:	61fb      	str	r3, [r7, #28]
 800c896:	e004      	b.n	800c8a2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c8a2:	f000 fb41 	bl	800cf28 <vPortExitCritical>

	return xReturn;
 800c8a6:	69fb      	ldr	r3, [r7, #28]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3720      	adds	r7, #32
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	20000f78 	.word	0x20000f78
 800c8b4:	20000f8c 	.word	0x20000f8c

0800c8b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c8bc:	4b03      	ldr	r3, [pc, #12]	@ (800c8cc <vTaskMissedYield+0x14>)
 800c8be:	2201      	movs	r2, #1
 800c8c0:	601a      	str	r2, [r3, #0]
}
 800c8c2:	bf00      	nop
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	20000f88 	.word	0x20000f88

0800c8d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c8d8:	f000 f852 	bl	800c980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c8dc:	4b06      	ldr	r3, [pc, #24]	@ (800c8f8 <prvIdleTask+0x28>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d9f9      	bls.n	800c8d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c8e4:	4b05      	ldr	r3, [pc, #20]	@ (800c8fc <prvIdleTask+0x2c>)
 800c8e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8ea:	601a      	str	r2, [r3, #0]
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c8f4:	e7f0      	b.n	800c8d8 <prvIdleTask+0x8>
 800c8f6:	bf00      	nop
 800c8f8:	20000e78 	.word	0x20000e78
 800c8fc:	e000ed04 	.word	0xe000ed04

0800c900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c906:	2300      	movs	r3, #0
 800c908:	607b      	str	r3, [r7, #4]
 800c90a:	e00c      	b.n	800c926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	4613      	mov	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4413      	add	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4a12      	ldr	r2, [pc, #72]	@ (800c960 <prvInitialiseTaskLists+0x60>)
 800c918:	4413      	add	r3, r2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe fe85 	bl	800b62a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	3301      	adds	r3, #1
 800c924:	607b      	str	r3, [r7, #4]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b06      	cmp	r3, #6
 800c92a:	d9ef      	bls.n	800c90c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c92c:	480d      	ldr	r0, [pc, #52]	@ (800c964 <prvInitialiseTaskLists+0x64>)
 800c92e:	f7fe fe7c 	bl	800b62a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c932:	480d      	ldr	r0, [pc, #52]	@ (800c968 <prvInitialiseTaskLists+0x68>)
 800c934:	f7fe fe79 	bl	800b62a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c938:	480c      	ldr	r0, [pc, #48]	@ (800c96c <prvInitialiseTaskLists+0x6c>)
 800c93a:	f7fe fe76 	bl	800b62a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c93e:	480c      	ldr	r0, [pc, #48]	@ (800c970 <prvInitialiseTaskLists+0x70>)
 800c940:	f7fe fe73 	bl	800b62a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c944:	480b      	ldr	r0, [pc, #44]	@ (800c974 <prvInitialiseTaskLists+0x74>)
 800c946:	f7fe fe70 	bl	800b62a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c94a:	4b0b      	ldr	r3, [pc, #44]	@ (800c978 <prvInitialiseTaskLists+0x78>)
 800c94c:	4a05      	ldr	r2, [pc, #20]	@ (800c964 <prvInitialiseTaskLists+0x64>)
 800c94e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c950:	4b0a      	ldr	r3, [pc, #40]	@ (800c97c <prvInitialiseTaskLists+0x7c>)
 800c952:	4a05      	ldr	r2, [pc, #20]	@ (800c968 <prvInitialiseTaskLists+0x68>)
 800c954:	601a      	str	r2, [r3, #0]
}
 800c956:	bf00      	nop
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	20000e78 	.word	0x20000e78
 800c964:	20000f04 	.word	0x20000f04
 800c968:	20000f18 	.word	0x20000f18
 800c96c:	20000f34 	.word	0x20000f34
 800c970:	20000f48 	.word	0x20000f48
 800c974:	20000f60 	.word	0x20000f60
 800c978:	20000f2c 	.word	0x20000f2c
 800c97c:	20000f30 	.word	0x20000f30

0800c980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c986:	e019      	b.n	800c9bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c988:	f000 fa98 	bl	800cebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c98c:	4b10      	ldr	r3, [pc, #64]	@ (800c9d0 <prvCheckTasksWaitingTermination+0x50>)
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	3304      	adds	r3, #4
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fe fed0 	bl	800b73e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c99e:	4b0d      	ldr	r3, [pc, #52]	@ (800c9d4 <prvCheckTasksWaitingTermination+0x54>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	4a0b      	ldr	r2, [pc, #44]	@ (800c9d4 <prvCheckTasksWaitingTermination+0x54>)
 800c9a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c9a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c9d8 <prvCheckTasksWaitingTermination+0x58>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c9d8 <prvCheckTasksWaitingTermination+0x58>)
 800c9b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c9b2:	f000 fab9 	bl	800cf28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 f810 	bl	800c9dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9bc:	4b06      	ldr	r3, [pc, #24]	@ (800c9d8 <prvCheckTasksWaitingTermination+0x58>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1e1      	bne.n	800c988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20000f48 	.word	0x20000f48
 800c9d4:	20000f74 	.word	0x20000f74
 800c9d8:	20000f5c 	.word	0x20000f5c

0800c9dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d108      	bne.n	800ca00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f000 fc18 	bl	800d228 <vPortFree>
				vPortFree( pxTCB );
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 fc15 	bl	800d228 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9fe:	e01b      	b.n	800ca38 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d103      	bne.n	800ca12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fc0c 	bl	800d228 <vPortFree>
	}
 800ca10:	e012      	b.n	800ca38 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	d00d      	beq.n	800ca38 <prvDeleteTCB+0x5c>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca20:	b672      	cpsid	i
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	b662      	cpsie	i
 800ca30:	60fb      	str	r3, [r7, #12]
}
 800ca32:	bf00      	nop
 800ca34:	bf00      	nop
 800ca36:	e7fd      	b.n	800ca34 <prvDeleteTCB+0x58>
	}
 800ca38:	bf00      	nop
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca46:	4b0c      	ldr	r3, [pc, #48]	@ (800ca78 <prvResetNextTaskUnblockTime+0x38>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d104      	bne.n	800ca5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca50:	4b0a      	ldr	r3, [pc, #40]	@ (800ca7c <prvResetNextTaskUnblockTime+0x3c>)
 800ca52:	f04f 32ff 	mov.w	r2, #4294967295
 800ca56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca58:	e008      	b.n	800ca6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca5a:	4b07      	ldr	r3, [pc, #28]	@ (800ca78 <prvResetNextTaskUnblockTime+0x38>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	4a04      	ldr	r2, [pc, #16]	@ (800ca7c <prvResetNextTaskUnblockTime+0x3c>)
 800ca6a:	6013      	str	r3, [r2, #0]
}
 800ca6c:	bf00      	nop
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	20000f2c 	.word	0x20000f2c
 800ca7c:	20000f94 	.word	0x20000f94

0800ca80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca86:	4b0b      	ldr	r3, [pc, #44]	@ (800cab4 <xTaskGetSchedulerState+0x34>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d102      	bne.n	800ca94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	607b      	str	r3, [r7, #4]
 800ca92:	e008      	b.n	800caa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca94:	4b08      	ldr	r3, [pc, #32]	@ (800cab8 <xTaskGetSchedulerState+0x38>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d102      	bne.n	800caa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	607b      	str	r3, [r7, #4]
 800caa0:	e001      	b.n	800caa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800caa2:	2300      	movs	r3, #0
 800caa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800caa6:	687b      	ldr	r3, [r7, #4]
	}
 800caa8:	4618      	mov	r0, r3
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	20000f80 	.word	0x20000f80
 800cab8:	20000f9c 	.word	0x20000f9c

0800cabc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cac8:	2300      	movs	r3, #0
 800caca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d074      	beq.n	800cbbc <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cad2:	4b3d      	ldr	r3, [pc, #244]	@ (800cbc8 <xTaskPriorityDisinherit+0x10c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	693a      	ldr	r2, [r7, #16]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d00d      	beq.n	800caf8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae0:	b672      	cpsid	i
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	b662      	cpsie	i
 800caf0:	60fb      	str	r3, [r7, #12]
}
 800caf2:	bf00      	nop
 800caf4:	bf00      	nop
 800caf6:	e7fd      	b.n	800caf4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10d      	bne.n	800cb1c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800cb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb04:	b672      	cpsid	i
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	b662      	cpsie	i
 800cb14:	60bb      	str	r3, [r7, #8]
}
 800cb16:	bf00      	nop
 800cb18:	bf00      	nop
 800cb1a:	e7fd      	b.n	800cb18 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb20:	1e5a      	subs	r2, r3, #1
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d044      	beq.n	800cbbc <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d140      	bne.n	800cbbc <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fe fdfd 	bl	800b73e <uxListRemove>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d115      	bne.n	800cb76 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb4e:	491f      	ldr	r1, [pc, #124]	@ (800cbcc <xTaskPriorityDisinherit+0x110>)
 800cb50:	4613      	mov	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	440b      	add	r3, r1
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10a      	bne.n	800cb76 <xTaskPriorityDisinherit+0xba>
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb64:	2201      	movs	r2, #1
 800cb66:	fa02 f303 	lsl.w	r3, r2, r3
 800cb6a:	43da      	mvns	r2, r3
 800cb6c:	4b18      	ldr	r3, [pc, #96]	@ (800cbd0 <xTaskPriorityDisinherit+0x114>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4013      	ands	r3, r2
 800cb72:	4a17      	ldr	r2, [pc, #92]	@ (800cbd0 <xTaskPriorityDisinherit+0x114>)
 800cb74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb82:	f1c3 0207 	rsb	r2, r3, #7
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb8e:	2201      	movs	r2, #1
 800cb90:	409a      	lsls	r2, r3
 800cb92:	4b0f      	ldr	r3, [pc, #60]	@ (800cbd0 <xTaskPriorityDisinherit+0x114>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	4a0d      	ldr	r2, [pc, #52]	@ (800cbd0 <xTaskPriorityDisinherit+0x114>)
 800cb9a:	6013      	str	r3, [r2, #0]
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cba0:	4613      	mov	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	4a08      	ldr	r2, [pc, #32]	@ (800cbcc <xTaskPriorityDisinherit+0x110>)
 800cbaa:	441a      	add	r2, r3
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4610      	mov	r0, r2
 800cbb4:	f7fe fd66 	bl	800b684 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbbc:	697b      	ldr	r3, [r7, #20]
	}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3718      	adds	r7, #24
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	20000e74 	.word	0x20000e74
 800cbcc:	20000e78 	.word	0x20000e78
 800cbd0:	20000f7c 	.word	0x20000f7c

0800cbd4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cbde:	4b29      	ldr	r3, [pc, #164]	@ (800cc84 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbe4:	4b28      	ldr	r3, [pc, #160]	@ (800cc88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3304      	adds	r3, #4
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe fda7 	bl	800b73e <uxListRemove>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10b      	bne.n	800cc0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cbf6:	4b24      	ldr	r3, [pc, #144]	@ (800cc88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	fa02 f303 	lsl.w	r3, r2, r3
 800cc02:	43da      	mvns	r2, r3
 800cc04:	4b21      	ldr	r3, [pc, #132]	@ (800cc8c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4013      	ands	r3, r2
 800cc0a:	4a20      	ldr	r2, [pc, #128]	@ (800cc8c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc14:	d10a      	bne.n	800cc2c <prvAddCurrentTaskToDelayedList+0x58>
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d007      	beq.n	800cc2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc1c:	4b1a      	ldr	r3, [pc, #104]	@ (800cc88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3304      	adds	r3, #4
 800cc22:	4619      	mov	r1, r3
 800cc24:	481a      	ldr	r0, [pc, #104]	@ (800cc90 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cc26:	f7fe fd2d 	bl	800b684 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc2a:	e026      	b.n	800cc7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4413      	add	r3, r2
 800cc32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc34:	4b14      	ldr	r3, [pc, #80]	@ (800cc88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	68ba      	ldr	r2, [r7, #8]
 800cc3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc3c:	68ba      	ldr	r2, [r7, #8]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d209      	bcs.n	800cc58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc44:	4b13      	ldr	r3, [pc, #76]	@ (800cc94 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	4b0f      	ldr	r3, [pc, #60]	@ (800cc88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4610      	mov	r0, r2
 800cc52:	f7fe fd3b 	bl	800b6cc <vListInsert>
}
 800cc56:	e010      	b.n	800cc7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc58:	4b0f      	ldr	r3, [pc, #60]	@ (800cc98 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800cc88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	3304      	adds	r3, #4
 800cc62:	4619      	mov	r1, r3
 800cc64:	4610      	mov	r0, r2
 800cc66:	f7fe fd31 	bl	800b6cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc6a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc9c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d202      	bcs.n	800cc7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cc74:	4a09      	ldr	r2, [pc, #36]	@ (800cc9c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	6013      	str	r3, [r2, #0]
}
 800cc7a:	bf00      	nop
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	20000f78 	.word	0x20000f78
 800cc88:	20000e74 	.word	0x20000e74
 800cc8c:	20000f7c 	.word	0x20000f7c
 800cc90:	20000f60 	.word	0x20000f60
 800cc94:	20000f30 	.word	0x20000f30
 800cc98:	20000f2c 	.word	0x20000f2c
 800cc9c:	20000f94 	.word	0x20000f94

0800cca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	3b04      	subs	r3, #4
 800ccb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ccb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	3b04      	subs	r3, #4
 800ccbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	f023 0201 	bic.w	r2, r3, #1
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	3b04      	subs	r3, #4
 800ccce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ccd0:	4a0c      	ldr	r2, [pc, #48]	@ (800cd04 <pxPortInitialiseStack+0x64>)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3b14      	subs	r3, #20
 800ccda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3b04      	subs	r3, #4
 800cce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f06f 0202 	mvn.w	r2, #2
 800ccee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	3b20      	subs	r3, #32
 800ccf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3714      	adds	r7, #20
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr
 800cd04:	0800cd09 	.word	0x0800cd09

0800cd08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b085      	sub	sp, #20
 800cd0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd12:	4b15      	ldr	r3, [pc, #84]	@ (800cd68 <prvTaskExitError+0x60>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd1a:	d00d      	beq.n	800cd38 <prvTaskExitError+0x30>
	__asm volatile
 800cd1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd20:	b672      	cpsid	i
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	b662      	cpsie	i
 800cd30:	60fb      	str	r3, [r7, #12]
}
 800cd32:	bf00      	nop
 800cd34:	bf00      	nop
 800cd36:	e7fd      	b.n	800cd34 <prvTaskExitError+0x2c>
	__asm volatile
 800cd38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd3c:	b672      	cpsid	i
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	b662      	cpsie	i
 800cd4c:	60bb      	str	r3, [r7, #8]
}
 800cd4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd50:	bf00      	nop
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d0fc      	beq.n	800cd52 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd58:	bf00      	nop
 800cd5a:	bf00      	nop
 800cd5c:	3714      	adds	r7, #20
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	20000054 	.word	0x20000054
 800cd6c:	00000000 	.word	0x00000000

0800cd70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd70:	4b07      	ldr	r3, [pc, #28]	@ (800cd90 <pxCurrentTCBConst2>)
 800cd72:	6819      	ldr	r1, [r3, #0]
 800cd74:	6808      	ldr	r0, [r1, #0]
 800cd76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7a:	f380 8809 	msr	PSP, r0
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f04f 0000 	mov.w	r0, #0
 800cd86:	f380 8811 	msr	BASEPRI, r0
 800cd8a:	4770      	bx	lr
 800cd8c:	f3af 8000 	nop.w

0800cd90 <pxCurrentTCBConst2>:
 800cd90:	20000e74 	.word	0x20000e74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd94:	bf00      	nop
 800cd96:	bf00      	nop

0800cd98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd98:	4808      	ldr	r0, [pc, #32]	@ (800cdbc <prvPortStartFirstTask+0x24>)
 800cd9a:	6800      	ldr	r0, [r0, #0]
 800cd9c:	6800      	ldr	r0, [r0, #0]
 800cd9e:	f380 8808 	msr	MSP, r0
 800cda2:	f04f 0000 	mov.w	r0, #0
 800cda6:	f380 8814 	msr	CONTROL, r0
 800cdaa:	b662      	cpsie	i
 800cdac:	b661      	cpsie	f
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	df00      	svc	0
 800cdb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cdba:	bf00      	nop
 800cdbc:	e000ed08 	.word	0xe000ed08

0800cdc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cdc6:	4b37      	ldr	r3, [pc, #220]	@ (800cea4 <xPortStartScheduler+0xe4>)
 800cdc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	22ff      	movs	r2, #255	@ 0xff
 800cdd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cde0:	78fb      	ldrb	r3, [r7, #3]
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	4b2f      	ldr	r3, [pc, #188]	@ (800cea8 <xPortStartScheduler+0xe8>)
 800cdec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdee:	4b2f      	ldr	r3, [pc, #188]	@ (800ceac <xPortStartScheduler+0xec>)
 800cdf0:	2207      	movs	r2, #7
 800cdf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdf4:	e009      	b.n	800ce0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cdf6:	4b2d      	ldr	r3, [pc, #180]	@ (800ceac <xPortStartScheduler+0xec>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	4a2b      	ldr	r2, [pc, #172]	@ (800ceac <xPortStartScheduler+0xec>)
 800cdfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce00:	78fb      	ldrb	r3, [r7, #3]
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce0a:	78fb      	ldrb	r3, [r7, #3]
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce12:	2b80      	cmp	r3, #128	@ 0x80
 800ce14:	d0ef      	beq.n	800cdf6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce16:	4b25      	ldr	r3, [pc, #148]	@ (800ceac <xPortStartScheduler+0xec>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f1c3 0307 	rsb	r3, r3, #7
 800ce1e:	2b04      	cmp	r3, #4
 800ce20:	d00d      	beq.n	800ce3e <xPortStartScheduler+0x7e>
	__asm volatile
 800ce22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce26:	b672      	cpsid	i
 800ce28:	f383 8811 	msr	BASEPRI, r3
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f3bf 8f4f 	dsb	sy
 800ce34:	b662      	cpsie	i
 800ce36:	60bb      	str	r3, [r7, #8]
}
 800ce38:	bf00      	nop
 800ce3a:	bf00      	nop
 800ce3c:	e7fd      	b.n	800ce3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce3e:	4b1b      	ldr	r3, [pc, #108]	@ (800ceac <xPortStartScheduler+0xec>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	021b      	lsls	r3, r3, #8
 800ce44:	4a19      	ldr	r2, [pc, #100]	@ (800ceac <xPortStartScheduler+0xec>)
 800ce46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce48:	4b18      	ldr	r3, [pc, #96]	@ (800ceac <xPortStartScheduler+0xec>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ce50:	4a16      	ldr	r2, [pc, #88]	@ (800ceac <xPortStartScheduler+0xec>)
 800ce52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	b2da      	uxtb	r2, r3
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce5c:	4b14      	ldr	r3, [pc, #80]	@ (800ceb0 <xPortStartScheduler+0xf0>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a13      	ldr	r2, [pc, #76]	@ (800ceb0 <xPortStartScheduler+0xf0>)
 800ce62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ce66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce68:	4b11      	ldr	r3, [pc, #68]	@ (800ceb0 <xPortStartScheduler+0xf0>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a10      	ldr	r2, [pc, #64]	@ (800ceb0 <xPortStartScheduler+0xf0>)
 800ce6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ce72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce74:	f000 f8dc 	bl	800d030 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce78:	4b0e      	ldr	r3, [pc, #56]	@ (800ceb4 <xPortStartScheduler+0xf4>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce7e:	f000 f8fb 	bl	800d078 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce82:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb8 <xPortStartScheduler+0xf8>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a0c      	ldr	r2, [pc, #48]	@ (800ceb8 <xPortStartScheduler+0xf8>)
 800ce88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ce8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce8e:	f7ff ff83 	bl	800cd98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce92:	f7ff fba7 	bl	800c5e4 <vTaskSwitchContext>
	prvTaskExitError();
 800ce96:	f7ff ff37 	bl	800cd08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	e000e400 	.word	0xe000e400
 800cea8:	20000fa0 	.word	0x20000fa0
 800ceac:	20000fa4 	.word	0x20000fa4
 800ceb0:	e000ed20 	.word	0xe000ed20
 800ceb4:	20000054 	.word	0x20000054
 800ceb8:	e000ef34 	.word	0xe000ef34

0800cebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
	__asm volatile
 800cec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec6:	b672      	cpsid	i
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	b662      	cpsie	i
 800ced6:	607b      	str	r3, [r7, #4]
}
 800ced8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ceda:	4b11      	ldr	r3, [pc, #68]	@ (800cf20 <vPortEnterCritical+0x64>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	3301      	adds	r3, #1
 800cee0:	4a0f      	ldr	r2, [pc, #60]	@ (800cf20 <vPortEnterCritical+0x64>)
 800cee2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cee4:	4b0e      	ldr	r3, [pc, #56]	@ (800cf20 <vPortEnterCritical+0x64>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d112      	bne.n	800cf12 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ceec:	4b0d      	ldr	r3, [pc, #52]	@ (800cf24 <vPortEnterCritical+0x68>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00d      	beq.n	800cf12 <vPortEnterCritical+0x56>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cefa:	b672      	cpsid	i
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	b662      	cpsie	i
 800cf0a:	603b      	str	r3, [r7, #0]
}
 800cf0c:	bf00      	nop
 800cf0e:	bf00      	nop
 800cf10:	e7fd      	b.n	800cf0e <vPortEnterCritical+0x52>
	}
}
 800cf12:	bf00      	nop
 800cf14:	370c      	adds	r7, #12
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop
 800cf20:	20000054 	.word	0x20000054
 800cf24:	e000ed04 	.word	0xe000ed04

0800cf28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf2e:	4b13      	ldr	r3, [pc, #76]	@ (800cf7c <vPortExitCritical+0x54>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10d      	bne.n	800cf52 <vPortExitCritical+0x2a>
	__asm volatile
 800cf36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf3a:	b672      	cpsid	i
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	b662      	cpsie	i
 800cf4a:	607b      	str	r3, [r7, #4]
}
 800cf4c:	bf00      	nop
 800cf4e:	bf00      	nop
 800cf50:	e7fd      	b.n	800cf4e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cf52:	4b0a      	ldr	r3, [pc, #40]	@ (800cf7c <vPortExitCritical+0x54>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	4a08      	ldr	r2, [pc, #32]	@ (800cf7c <vPortExitCritical+0x54>)
 800cf5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf5c:	4b07      	ldr	r3, [pc, #28]	@ (800cf7c <vPortExitCritical+0x54>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d105      	bne.n	800cf70 <vPortExitCritical+0x48>
 800cf64:	2300      	movs	r3, #0
 800cf66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	20000054 	.word	0x20000054

0800cf80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf80:	f3ef 8009 	mrs	r0, PSP
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	4b15      	ldr	r3, [pc, #84]	@ (800cfe0 <pxCurrentTCBConst>)
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	f01e 0f10 	tst.w	lr, #16
 800cf90:	bf08      	it	eq
 800cf92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf9a:	6010      	str	r0, [r2, #0]
 800cf9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cfa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cfa4:	b672      	cpsid	i
 800cfa6:	f380 8811 	msr	BASEPRI, r0
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	b662      	cpsie	i
 800cfb4:	f7ff fb16 	bl	800c5e4 <vTaskSwitchContext>
 800cfb8:	f04f 0000 	mov.w	r0, #0
 800cfbc:	f380 8811 	msr	BASEPRI, r0
 800cfc0:	bc09      	pop	{r0, r3}
 800cfc2:	6819      	ldr	r1, [r3, #0]
 800cfc4:	6808      	ldr	r0, [r1, #0]
 800cfc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfca:	f01e 0f10 	tst.w	lr, #16
 800cfce:	bf08      	it	eq
 800cfd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cfd4:	f380 8809 	msr	PSP, r0
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop

0800cfe0 <pxCurrentTCBConst>:
 800cfe0:	20000e74 	.word	0x20000e74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cfe4:	bf00      	nop
 800cfe6:	bf00      	nop

0800cfe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff2:	b672      	cpsid	i
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	b662      	cpsie	i
 800d002:	607b      	str	r3, [r7, #4]
}
 800d004:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d006:	f7ff fa31 	bl	800c46c <xTaskIncrementTick>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d003      	beq.n	800d018 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d010:	4b06      	ldr	r3, [pc, #24]	@ (800d02c <SysTick_Handler+0x44>)
 800d012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d016:	601a      	str	r2, [r3, #0]
 800d018:	2300      	movs	r3, #0
 800d01a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	f383 8811 	msr	BASEPRI, r3
}
 800d022:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d024:	bf00      	nop
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	e000ed04 	.word	0xe000ed04

0800d030 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d030:	b480      	push	{r7}
 800d032:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d034:	4b0b      	ldr	r3, [pc, #44]	@ (800d064 <vPortSetupTimerInterrupt+0x34>)
 800d036:	2200      	movs	r2, #0
 800d038:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d03a:	4b0b      	ldr	r3, [pc, #44]	@ (800d068 <vPortSetupTimerInterrupt+0x38>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d040:	4b0a      	ldr	r3, [pc, #40]	@ (800d06c <vPortSetupTimerInterrupt+0x3c>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a0a      	ldr	r2, [pc, #40]	@ (800d070 <vPortSetupTimerInterrupt+0x40>)
 800d046:	fba2 2303 	umull	r2, r3, r2, r3
 800d04a:	099b      	lsrs	r3, r3, #6
 800d04c:	4a09      	ldr	r2, [pc, #36]	@ (800d074 <vPortSetupTimerInterrupt+0x44>)
 800d04e:	3b01      	subs	r3, #1
 800d050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d052:	4b04      	ldr	r3, [pc, #16]	@ (800d064 <vPortSetupTimerInterrupt+0x34>)
 800d054:	2207      	movs	r2, #7
 800d056:	601a      	str	r2, [r3, #0]
}
 800d058:	bf00      	nop
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	e000e010 	.word	0xe000e010
 800d068:	e000e018 	.word	0xe000e018
 800d06c:	20000048 	.word	0x20000048
 800d070:	10624dd3 	.word	0x10624dd3
 800d074:	e000e014 	.word	0xe000e014

0800d078 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d078:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d088 <vPortEnableVFP+0x10>
 800d07c:	6801      	ldr	r1, [r0, #0]
 800d07e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d082:	6001      	str	r1, [r0, #0]
 800d084:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d086:	bf00      	nop
 800d088:	e000ed88 	.word	0xe000ed88

0800d08c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08a      	sub	sp, #40	@ 0x28
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d094:	2300      	movs	r3, #0
 800d096:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d098:	f7ff f93a 	bl	800c310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d09c:	4b5d      	ldr	r3, [pc, #372]	@ (800d214 <pvPortMalloc+0x188>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0a4:	f000 f920 	bl	800d2e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0a8:	4b5b      	ldr	r3, [pc, #364]	@ (800d218 <pvPortMalloc+0x18c>)
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f040 8094 	bne.w	800d1de <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d020      	beq.n	800d0fe <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800d0bc:	2208      	movs	r2, #8
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f003 0307 	and.w	r3, r3, #7
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d017      	beq.n	800d0fe <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f023 0307 	bic.w	r3, r3, #7
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f003 0307 	and.w	r3, r3, #7
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00d      	beq.n	800d0fe <pvPortMalloc+0x72>
	__asm volatile
 800d0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e6:	b672      	cpsid	i
 800d0e8:	f383 8811 	msr	BASEPRI, r3
 800d0ec:	f3bf 8f6f 	isb	sy
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	b662      	cpsie	i
 800d0f6:	617b      	str	r3, [r7, #20]
}
 800d0f8:	bf00      	nop
 800d0fa:	bf00      	nop
 800d0fc:	e7fd      	b.n	800d0fa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d06c      	beq.n	800d1de <pvPortMalloc+0x152>
 800d104:	4b45      	ldr	r3, [pc, #276]	@ (800d21c <pvPortMalloc+0x190>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d867      	bhi.n	800d1de <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d10e:	4b44      	ldr	r3, [pc, #272]	@ (800d220 <pvPortMalloc+0x194>)
 800d110:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d112:	4b43      	ldr	r3, [pc, #268]	@ (800d220 <pvPortMalloc+0x194>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d118:	e004      	b.n	800d124 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800d11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d903      	bls.n	800d136 <pvPortMalloc+0xaa>
 800d12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1f1      	bne.n	800d11a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d136:	4b37      	ldr	r3, [pc, #220]	@ (800d214 <pvPortMalloc+0x188>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d04e      	beq.n	800d1de <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d140:	6a3b      	ldr	r3, [r7, #32]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2208      	movs	r2, #8
 800d146:	4413      	add	r3, r2
 800d148:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	6a3b      	ldr	r3, [r7, #32]
 800d150:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	1ad2      	subs	r2, r2, r3
 800d15a:	2308      	movs	r3, #8
 800d15c:	005b      	lsls	r3, r3, #1
 800d15e:	429a      	cmp	r2, r3
 800d160:	d922      	bls.n	800d1a8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4413      	add	r3, r2
 800d168:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	f003 0307 	and.w	r3, r3, #7
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00d      	beq.n	800d190 <pvPortMalloc+0x104>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d178:	b672      	cpsid	i
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	b662      	cpsie	i
 800d188:	613b      	str	r3, [r7, #16]
}
 800d18a:	bf00      	nop
 800d18c:	bf00      	nop
 800d18e:	e7fd      	b.n	800d18c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d192:	685a      	ldr	r2, [r3, #4]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	1ad2      	subs	r2, r2, r3
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1a2:	69b8      	ldr	r0, [r7, #24]
 800d1a4:	f000 f902 	bl	800d3ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1a8:	4b1c      	ldr	r3, [pc, #112]	@ (800d21c <pvPortMalloc+0x190>)
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	4a1a      	ldr	r2, [pc, #104]	@ (800d21c <pvPortMalloc+0x190>)
 800d1b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1b6:	4b19      	ldr	r3, [pc, #100]	@ (800d21c <pvPortMalloc+0x190>)
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	4b1a      	ldr	r3, [pc, #104]	@ (800d224 <pvPortMalloc+0x198>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d203      	bcs.n	800d1ca <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1c2:	4b16      	ldr	r3, [pc, #88]	@ (800d21c <pvPortMalloc+0x190>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a17      	ldr	r2, [pc, #92]	@ (800d224 <pvPortMalloc+0x198>)
 800d1c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	685a      	ldr	r2, [r3, #4]
 800d1ce:	4b12      	ldr	r3, [pc, #72]	@ (800d218 <pvPortMalloc+0x18c>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	431a      	orrs	r2, r3
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1da:	2200      	movs	r2, #0
 800d1dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1de:	f7ff f8a5 	bl	800c32c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	f003 0307 	and.w	r3, r3, #7
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00d      	beq.n	800d208 <pvPortMalloc+0x17c>
	__asm volatile
 800d1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f0:	b672      	cpsid	i
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	b662      	cpsie	i
 800d200:	60fb      	str	r3, [r7, #12]
}
 800d202:	bf00      	nop
 800d204:	bf00      	nop
 800d206:	e7fd      	b.n	800d204 <pvPortMalloc+0x178>
	return pvReturn;
 800d208:	69fb      	ldr	r3, [r7, #28]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3728      	adds	r7, #40	@ 0x28
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	20004bb0 	.word	0x20004bb0
 800d218:	20004bbc 	.word	0x20004bbc
 800d21c:	20004bb4 	.word	0x20004bb4
 800d220:	20004ba8 	.word	0x20004ba8
 800d224:	20004bb8 	.word	0x20004bb8

0800d228 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b086      	sub	sp, #24
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d04e      	beq.n	800d2d8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d23a:	2308      	movs	r3, #8
 800d23c:	425b      	negs	r3, r3
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	4413      	add	r3, r2
 800d242:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	685a      	ldr	r2, [r3, #4]
 800d24c:	4b24      	ldr	r3, [pc, #144]	@ (800d2e0 <vPortFree+0xb8>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4013      	ands	r3, r2
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10d      	bne.n	800d272 <vPortFree+0x4a>
	__asm volatile
 800d256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d25a:	b672      	cpsid	i
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	b662      	cpsie	i
 800d26a:	60fb      	str	r3, [r7, #12]
}
 800d26c:	bf00      	nop
 800d26e:	bf00      	nop
 800d270:	e7fd      	b.n	800d26e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00d      	beq.n	800d296 <vPortFree+0x6e>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27e:	b672      	cpsid	i
 800d280:	f383 8811 	msr	BASEPRI, r3
 800d284:	f3bf 8f6f 	isb	sy
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	b662      	cpsie	i
 800d28e:	60bb      	str	r3, [r7, #8]
}
 800d290:	bf00      	nop
 800d292:	bf00      	nop
 800d294:	e7fd      	b.n	800d292 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	685a      	ldr	r2, [r3, #4]
 800d29a:	4b11      	ldr	r3, [pc, #68]	@ (800d2e0 <vPortFree+0xb8>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4013      	ands	r3, r2
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d019      	beq.n	800d2d8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d115      	bne.n	800d2d8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	685a      	ldr	r2, [r3, #4]
 800d2b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d2e0 <vPortFree+0xb8>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	43db      	mvns	r3, r3
 800d2b6:	401a      	ands	r2, r3
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2bc:	f7ff f828 	bl	800c310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	4b07      	ldr	r3, [pc, #28]	@ (800d2e4 <vPortFree+0xbc>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	4a06      	ldr	r2, [pc, #24]	@ (800d2e4 <vPortFree+0xbc>)
 800d2cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2ce:	6938      	ldr	r0, [r7, #16]
 800d2d0:	f000 f86c 	bl	800d3ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d2d4:	f7ff f82a 	bl	800c32c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2d8:	bf00      	nop
 800d2da:	3718      	adds	r7, #24
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	20004bbc 	.word	0x20004bbc
 800d2e4:	20004bb4 	.word	0x20004bb4

0800d2e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d2ee:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d2f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d2f4:	4b27      	ldr	r3, [pc, #156]	@ (800d394 <prvHeapInit+0xac>)
 800d2f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00c      	beq.n	800d31c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	3307      	adds	r3, #7
 800d306:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f023 0307 	bic.w	r3, r3, #7
 800d30e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	4a1f      	ldr	r2, [pc, #124]	@ (800d394 <prvHeapInit+0xac>)
 800d318:	4413      	add	r3, r2
 800d31a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d320:	4a1d      	ldr	r2, [pc, #116]	@ (800d398 <prvHeapInit+0xb0>)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d326:	4b1c      	ldr	r3, [pc, #112]	@ (800d398 <prvHeapInit+0xb0>)
 800d328:	2200      	movs	r2, #0
 800d32a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	4413      	add	r3, r2
 800d332:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d334:	2208      	movs	r2, #8
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	1a9b      	subs	r3, r3, r2
 800d33a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f023 0307 	bic.w	r3, r3, #7
 800d342:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	4a15      	ldr	r2, [pc, #84]	@ (800d39c <prvHeapInit+0xb4>)
 800d348:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d34a:	4b14      	ldr	r3, [pc, #80]	@ (800d39c <prvHeapInit+0xb4>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2200      	movs	r2, #0
 800d350:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d352:	4b12      	ldr	r3, [pc, #72]	@ (800d39c <prvHeapInit+0xb4>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2200      	movs	r2, #0
 800d358:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	1ad2      	subs	r2, r2, r3
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d368:	4b0c      	ldr	r3, [pc, #48]	@ (800d39c <prvHeapInit+0xb4>)
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	4a0a      	ldr	r2, [pc, #40]	@ (800d3a0 <prvHeapInit+0xb8>)
 800d376:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	4a09      	ldr	r2, [pc, #36]	@ (800d3a4 <prvHeapInit+0xbc>)
 800d37e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d380:	4b09      	ldr	r3, [pc, #36]	@ (800d3a8 <prvHeapInit+0xc0>)
 800d382:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d386:	601a      	str	r2, [r3, #0]
}
 800d388:	bf00      	nop
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	20000fa8 	.word	0x20000fa8
 800d398:	20004ba8 	.word	0x20004ba8
 800d39c:	20004bb0 	.word	0x20004bb0
 800d3a0:	20004bb8 	.word	0x20004bb8
 800d3a4:	20004bb4 	.word	0x20004bb4
 800d3a8:	20004bbc 	.word	0x20004bbc

0800d3ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d3b4:	4b28      	ldr	r3, [pc, #160]	@ (800d458 <prvInsertBlockIntoFreeList+0xac>)
 800d3b6:	60fb      	str	r3, [r7, #12]
 800d3b8:	e002      	b.n	800d3c0 <prvInsertBlockIntoFreeList+0x14>
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	60fb      	str	r3, [r7, #12]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d8f7      	bhi.n	800d3ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d108      	bne.n	800d3ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	685a      	ldr	r2, [r3, #4]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	441a      	add	r2, r3
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	441a      	add	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d118      	bne.n	800d434 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	4b15      	ldr	r3, [pc, #84]	@ (800d45c <prvInsertBlockIntoFreeList+0xb0>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d00d      	beq.n	800d42a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685a      	ldr	r2, [r3, #4]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	441a      	add	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	e008      	b.n	800d43c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d42a:	4b0c      	ldr	r3, [pc, #48]	@ (800d45c <prvInsertBlockIntoFreeList+0xb0>)
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	e003      	b.n	800d43c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	429a      	cmp	r2, r3
 800d442:	d002      	beq.n	800d44a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d44a:	bf00      	nop
 800d44c:	3714      	adds	r7, #20
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	20004ba8 	.word	0x20004ba8
 800d45c:	20004bb0 	.word	0x20004bb0

0800d460 <rand>:
 800d460:	4b16      	ldr	r3, [pc, #88]	@ (800d4bc <rand+0x5c>)
 800d462:	b510      	push	{r4, lr}
 800d464:	681c      	ldr	r4, [r3, #0]
 800d466:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d468:	b9b3      	cbnz	r3, 800d498 <rand+0x38>
 800d46a:	2018      	movs	r0, #24
 800d46c:	f000 fa4e 	bl	800d90c <malloc>
 800d470:	4602      	mov	r2, r0
 800d472:	6320      	str	r0, [r4, #48]	@ 0x30
 800d474:	b920      	cbnz	r0, 800d480 <rand+0x20>
 800d476:	4b12      	ldr	r3, [pc, #72]	@ (800d4c0 <rand+0x60>)
 800d478:	4812      	ldr	r0, [pc, #72]	@ (800d4c4 <rand+0x64>)
 800d47a:	2152      	movs	r1, #82	@ 0x52
 800d47c:	f000 f9de 	bl	800d83c <__assert_func>
 800d480:	4911      	ldr	r1, [pc, #68]	@ (800d4c8 <rand+0x68>)
 800d482:	4b12      	ldr	r3, [pc, #72]	@ (800d4cc <rand+0x6c>)
 800d484:	e9c0 1300 	strd	r1, r3, [r0]
 800d488:	4b11      	ldr	r3, [pc, #68]	@ (800d4d0 <rand+0x70>)
 800d48a:	6083      	str	r3, [r0, #8]
 800d48c:	230b      	movs	r3, #11
 800d48e:	8183      	strh	r3, [r0, #12]
 800d490:	2100      	movs	r1, #0
 800d492:	2001      	movs	r0, #1
 800d494:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d498:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d49a:	480e      	ldr	r0, [pc, #56]	@ (800d4d4 <rand+0x74>)
 800d49c:	690b      	ldr	r3, [r1, #16]
 800d49e:	694c      	ldr	r4, [r1, #20]
 800d4a0:	4a0d      	ldr	r2, [pc, #52]	@ (800d4d8 <rand+0x78>)
 800d4a2:	4358      	muls	r0, r3
 800d4a4:	fb02 0004 	mla	r0, r2, r4, r0
 800d4a8:	fba3 3202 	umull	r3, r2, r3, r2
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	eb40 0002 	adc.w	r0, r0, r2
 800d4b2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d4b6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d4ba:	bd10      	pop	{r4, pc}
 800d4bc:	20000064 	.word	0x20000064
 800d4c0:	0801cc7c 	.word	0x0801cc7c
 800d4c4:	0801cc93 	.word	0x0801cc93
 800d4c8:	abcd330e 	.word	0xabcd330e
 800d4cc:	e66d1234 	.word	0xe66d1234
 800d4d0:	0005deec 	.word	0x0005deec
 800d4d4:	5851f42d 	.word	0x5851f42d
 800d4d8:	4c957f2d 	.word	0x4c957f2d

0800d4dc <std>:
 800d4dc:	2300      	movs	r3, #0
 800d4de:	b510      	push	{r4, lr}
 800d4e0:	4604      	mov	r4, r0
 800d4e2:	e9c0 3300 	strd	r3, r3, [r0]
 800d4e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4ea:	6083      	str	r3, [r0, #8]
 800d4ec:	8181      	strh	r1, [r0, #12]
 800d4ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800d4f0:	81c2      	strh	r2, [r0, #14]
 800d4f2:	6183      	str	r3, [r0, #24]
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	2208      	movs	r2, #8
 800d4f8:	305c      	adds	r0, #92	@ 0x5c
 800d4fa:	f000 f914 	bl	800d726 <memset>
 800d4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d534 <std+0x58>)
 800d500:	6263      	str	r3, [r4, #36]	@ 0x24
 800d502:	4b0d      	ldr	r3, [pc, #52]	@ (800d538 <std+0x5c>)
 800d504:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d506:	4b0d      	ldr	r3, [pc, #52]	@ (800d53c <std+0x60>)
 800d508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d50a:	4b0d      	ldr	r3, [pc, #52]	@ (800d540 <std+0x64>)
 800d50c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d50e:	4b0d      	ldr	r3, [pc, #52]	@ (800d544 <std+0x68>)
 800d510:	6224      	str	r4, [r4, #32]
 800d512:	429c      	cmp	r4, r3
 800d514:	d006      	beq.n	800d524 <std+0x48>
 800d516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d51a:	4294      	cmp	r4, r2
 800d51c:	d002      	beq.n	800d524 <std+0x48>
 800d51e:	33d0      	adds	r3, #208	@ 0xd0
 800d520:	429c      	cmp	r4, r3
 800d522:	d105      	bne.n	800d530 <std+0x54>
 800d524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d52c:	f000 b974 	b.w	800d818 <__retarget_lock_init_recursive>
 800d530:	bd10      	pop	{r4, pc}
 800d532:	bf00      	nop
 800d534:	0800d6a1 	.word	0x0800d6a1
 800d538:	0800d6c3 	.word	0x0800d6c3
 800d53c:	0800d6fb 	.word	0x0800d6fb
 800d540:	0800d71f 	.word	0x0800d71f
 800d544:	20004bc0 	.word	0x20004bc0

0800d548 <stdio_exit_handler>:
 800d548:	4a02      	ldr	r2, [pc, #8]	@ (800d554 <stdio_exit_handler+0xc>)
 800d54a:	4903      	ldr	r1, [pc, #12]	@ (800d558 <stdio_exit_handler+0x10>)
 800d54c:	4803      	ldr	r0, [pc, #12]	@ (800d55c <stdio_exit_handler+0x14>)
 800d54e:	f000 b869 	b.w	800d624 <_fwalk_sglue>
 800d552:	bf00      	nop
 800d554:	20000058 	.word	0x20000058
 800d558:	0800e14d 	.word	0x0800e14d
 800d55c:	20000068 	.word	0x20000068

0800d560 <cleanup_stdio>:
 800d560:	6841      	ldr	r1, [r0, #4]
 800d562:	4b0c      	ldr	r3, [pc, #48]	@ (800d594 <cleanup_stdio+0x34>)
 800d564:	4299      	cmp	r1, r3
 800d566:	b510      	push	{r4, lr}
 800d568:	4604      	mov	r4, r0
 800d56a:	d001      	beq.n	800d570 <cleanup_stdio+0x10>
 800d56c:	f000 fdee 	bl	800e14c <_fflush_r>
 800d570:	68a1      	ldr	r1, [r4, #8]
 800d572:	4b09      	ldr	r3, [pc, #36]	@ (800d598 <cleanup_stdio+0x38>)
 800d574:	4299      	cmp	r1, r3
 800d576:	d002      	beq.n	800d57e <cleanup_stdio+0x1e>
 800d578:	4620      	mov	r0, r4
 800d57a:	f000 fde7 	bl	800e14c <_fflush_r>
 800d57e:	68e1      	ldr	r1, [r4, #12]
 800d580:	4b06      	ldr	r3, [pc, #24]	@ (800d59c <cleanup_stdio+0x3c>)
 800d582:	4299      	cmp	r1, r3
 800d584:	d004      	beq.n	800d590 <cleanup_stdio+0x30>
 800d586:	4620      	mov	r0, r4
 800d588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d58c:	f000 bdde 	b.w	800e14c <_fflush_r>
 800d590:	bd10      	pop	{r4, pc}
 800d592:	bf00      	nop
 800d594:	20004bc0 	.word	0x20004bc0
 800d598:	20004c28 	.word	0x20004c28
 800d59c:	20004c90 	.word	0x20004c90

0800d5a0 <global_stdio_init.part.0>:
 800d5a0:	b510      	push	{r4, lr}
 800d5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d0 <global_stdio_init.part.0+0x30>)
 800d5a4:	4c0b      	ldr	r4, [pc, #44]	@ (800d5d4 <global_stdio_init.part.0+0x34>)
 800d5a6:	4a0c      	ldr	r2, [pc, #48]	@ (800d5d8 <global_stdio_init.part.0+0x38>)
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2104      	movs	r1, #4
 800d5b0:	f7ff ff94 	bl	800d4dc <std>
 800d5b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	2109      	movs	r1, #9
 800d5bc:	f7ff ff8e 	bl	800d4dc <std>
 800d5c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d5c4:	2202      	movs	r2, #2
 800d5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5ca:	2112      	movs	r1, #18
 800d5cc:	f7ff bf86 	b.w	800d4dc <std>
 800d5d0:	20004cf8 	.word	0x20004cf8
 800d5d4:	20004bc0 	.word	0x20004bc0
 800d5d8:	0800d549 	.word	0x0800d549

0800d5dc <__sfp_lock_acquire>:
 800d5dc:	4801      	ldr	r0, [pc, #4]	@ (800d5e4 <__sfp_lock_acquire+0x8>)
 800d5de:	f000 b91c 	b.w	800d81a <__retarget_lock_acquire_recursive>
 800d5e2:	bf00      	nop
 800d5e4:	20004d01 	.word	0x20004d01

0800d5e8 <__sfp_lock_release>:
 800d5e8:	4801      	ldr	r0, [pc, #4]	@ (800d5f0 <__sfp_lock_release+0x8>)
 800d5ea:	f000 b917 	b.w	800d81c <__retarget_lock_release_recursive>
 800d5ee:	bf00      	nop
 800d5f0:	20004d01 	.word	0x20004d01

0800d5f4 <__sinit>:
 800d5f4:	b510      	push	{r4, lr}
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	f7ff fff0 	bl	800d5dc <__sfp_lock_acquire>
 800d5fc:	6a23      	ldr	r3, [r4, #32]
 800d5fe:	b11b      	cbz	r3, 800d608 <__sinit+0x14>
 800d600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d604:	f7ff bff0 	b.w	800d5e8 <__sfp_lock_release>
 800d608:	4b04      	ldr	r3, [pc, #16]	@ (800d61c <__sinit+0x28>)
 800d60a:	6223      	str	r3, [r4, #32]
 800d60c:	4b04      	ldr	r3, [pc, #16]	@ (800d620 <__sinit+0x2c>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1f5      	bne.n	800d600 <__sinit+0xc>
 800d614:	f7ff ffc4 	bl	800d5a0 <global_stdio_init.part.0>
 800d618:	e7f2      	b.n	800d600 <__sinit+0xc>
 800d61a:	bf00      	nop
 800d61c:	0800d561 	.word	0x0800d561
 800d620:	20004cf8 	.word	0x20004cf8

0800d624 <_fwalk_sglue>:
 800d624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d628:	4607      	mov	r7, r0
 800d62a:	4688      	mov	r8, r1
 800d62c:	4614      	mov	r4, r2
 800d62e:	2600      	movs	r6, #0
 800d630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d634:	f1b9 0901 	subs.w	r9, r9, #1
 800d638:	d505      	bpl.n	800d646 <_fwalk_sglue+0x22>
 800d63a:	6824      	ldr	r4, [r4, #0]
 800d63c:	2c00      	cmp	r4, #0
 800d63e:	d1f7      	bne.n	800d630 <_fwalk_sglue+0xc>
 800d640:	4630      	mov	r0, r6
 800d642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d646:	89ab      	ldrh	r3, [r5, #12]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d907      	bls.n	800d65c <_fwalk_sglue+0x38>
 800d64c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d650:	3301      	adds	r3, #1
 800d652:	d003      	beq.n	800d65c <_fwalk_sglue+0x38>
 800d654:	4629      	mov	r1, r5
 800d656:	4638      	mov	r0, r7
 800d658:	47c0      	blx	r8
 800d65a:	4306      	orrs	r6, r0
 800d65c:	3568      	adds	r5, #104	@ 0x68
 800d65e:	e7e9      	b.n	800d634 <_fwalk_sglue+0x10>

0800d660 <siprintf>:
 800d660:	b40e      	push	{r1, r2, r3}
 800d662:	b500      	push	{lr}
 800d664:	b09c      	sub	sp, #112	@ 0x70
 800d666:	ab1d      	add	r3, sp, #116	@ 0x74
 800d668:	9002      	str	r0, [sp, #8]
 800d66a:	9006      	str	r0, [sp, #24]
 800d66c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d670:	4809      	ldr	r0, [pc, #36]	@ (800d698 <siprintf+0x38>)
 800d672:	9107      	str	r1, [sp, #28]
 800d674:	9104      	str	r1, [sp, #16]
 800d676:	4909      	ldr	r1, [pc, #36]	@ (800d69c <siprintf+0x3c>)
 800d678:	f853 2b04 	ldr.w	r2, [r3], #4
 800d67c:	9105      	str	r1, [sp, #20]
 800d67e:	6800      	ldr	r0, [r0, #0]
 800d680:	9301      	str	r3, [sp, #4]
 800d682:	a902      	add	r1, sp, #8
 800d684:	f000 fa54 	bl	800db30 <_svfiprintf_r>
 800d688:	9b02      	ldr	r3, [sp, #8]
 800d68a:	2200      	movs	r2, #0
 800d68c:	701a      	strb	r2, [r3, #0]
 800d68e:	b01c      	add	sp, #112	@ 0x70
 800d690:	f85d eb04 	ldr.w	lr, [sp], #4
 800d694:	b003      	add	sp, #12
 800d696:	4770      	bx	lr
 800d698:	20000064 	.word	0x20000064
 800d69c:	ffff0208 	.word	0xffff0208

0800d6a0 <__sread>:
 800d6a0:	b510      	push	{r4, lr}
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6a8:	f000 f868 	bl	800d77c <_read_r>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	bfab      	itete	ge
 800d6b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d6b2:	89a3      	ldrhlt	r3, [r4, #12]
 800d6b4:	181b      	addge	r3, r3, r0
 800d6b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d6ba:	bfac      	ite	ge
 800d6bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d6be:	81a3      	strhlt	r3, [r4, #12]
 800d6c0:	bd10      	pop	{r4, pc}

0800d6c2 <__swrite>:
 800d6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c6:	461f      	mov	r7, r3
 800d6c8:	898b      	ldrh	r3, [r1, #12]
 800d6ca:	05db      	lsls	r3, r3, #23
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	460c      	mov	r4, r1
 800d6d0:	4616      	mov	r6, r2
 800d6d2:	d505      	bpl.n	800d6e0 <__swrite+0x1e>
 800d6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6d8:	2302      	movs	r3, #2
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f000 f83c 	bl	800d758 <_lseek_r>
 800d6e0:	89a3      	ldrh	r3, [r4, #12]
 800d6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6ea:	81a3      	strh	r3, [r4, #12]
 800d6ec:	4632      	mov	r2, r6
 800d6ee:	463b      	mov	r3, r7
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f6:	f000 b853 	b.w	800d7a0 <_write_r>

0800d6fa <__sseek>:
 800d6fa:	b510      	push	{r4, lr}
 800d6fc:	460c      	mov	r4, r1
 800d6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d702:	f000 f829 	bl	800d758 <_lseek_r>
 800d706:	1c43      	adds	r3, r0, #1
 800d708:	89a3      	ldrh	r3, [r4, #12]
 800d70a:	bf15      	itete	ne
 800d70c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d70e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d712:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d716:	81a3      	strheq	r3, [r4, #12]
 800d718:	bf18      	it	ne
 800d71a:	81a3      	strhne	r3, [r4, #12]
 800d71c:	bd10      	pop	{r4, pc}

0800d71e <__sclose>:
 800d71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d722:	f000 b809 	b.w	800d738 <_close_r>

0800d726 <memset>:
 800d726:	4402      	add	r2, r0
 800d728:	4603      	mov	r3, r0
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d100      	bne.n	800d730 <memset+0xa>
 800d72e:	4770      	bx	lr
 800d730:	f803 1b01 	strb.w	r1, [r3], #1
 800d734:	e7f9      	b.n	800d72a <memset+0x4>
	...

0800d738 <_close_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4d06      	ldr	r5, [pc, #24]	@ (800d754 <_close_r+0x1c>)
 800d73c:	2300      	movs	r3, #0
 800d73e:	4604      	mov	r4, r0
 800d740:	4608      	mov	r0, r1
 800d742:	602b      	str	r3, [r5, #0]
 800d744:	f7f7 fa58 	bl	8004bf8 <_close>
 800d748:	1c43      	adds	r3, r0, #1
 800d74a:	d102      	bne.n	800d752 <_close_r+0x1a>
 800d74c:	682b      	ldr	r3, [r5, #0]
 800d74e:	b103      	cbz	r3, 800d752 <_close_r+0x1a>
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	bd38      	pop	{r3, r4, r5, pc}
 800d754:	20004cfc 	.word	0x20004cfc

0800d758 <_lseek_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	4d07      	ldr	r5, [pc, #28]	@ (800d778 <_lseek_r+0x20>)
 800d75c:	4604      	mov	r4, r0
 800d75e:	4608      	mov	r0, r1
 800d760:	4611      	mov	r1, r2
 800d762:	2200      	movs	r2, #0
 800d764:	602a      	str	r2, [r5, #0]
 800d766:	461a      	mov	r2, r3
 800d768:	f7f7 fa6d 	bl	8004c46 <_lseek>
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	d102      	bne.n	800d776 <_lseek_r+0x1e>
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	b103      	cbz	r3, 800d776 <_lseek_r+0x1e>
 800d774:	6023      	str	r3, [r4, #0]
 800d776:	bd38      	pop	{r3, r4, r5, pc}
 800d778:	20004cfc 	.word	0x20004cfc

0800d77c <_read_r>:
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	4d07      	ldr	r5, [pc, #28]	@ (800d79c <_read_r+0x20>)
 800d780:	4604      	mov	r4, r0
 800d782:	4608      	mov	r0, r1
 800d784:	4611      	mov	r1, r2
 800d786:	2200      	movs	r2, #0
 800d788:	602a      	str	r2, [r5, #0]
 800d78a:	461a      	mov	r2, r3
 800d78c:	f7f7 f9fb 	bl	8004b86 <_read>
 800d790:	1c43      	adds	r3, r0, #1
 800d792:	d102      	bne.n	800d79a <_read_r+0x1e>
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	b103      	cbz	r3, 800d79a <_read_r+0x1e>
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	bd38      	pop	{r3, r4, r5, pc}
 800d79c:	20004cfc 	.word	0x20004cfc

0800d7a0 <_write_r>:
 800d7a0:	b538      	push	{r3, r4, r5, lr}
 800d7a2:	4d07      	ldr	r5, [pc, #28]	@ (800d7c0 <_write_r+0x20>)
 800d7a4:	4604      	mov	r4, r0
 800d7a6:	4608      	mov	r0, r1
 800d7a8:	4611      	mov	r1, r2
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	602a      	str	r2, [r5, #0]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	f7f7 fa06 	bl	8004bc0 <_write>
 800d7b4:	1c43      	adds	r3, r0, #1
 800d7b6:	d102      	bne.n	800d7be <_write_r+0x1e>
 800d7b8:	682b      	ldr	r3, [r5, #0]
 800d7ba:	b103      	cbz	r3, 800d7be <_write_r+0x1e>
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	bd38      	pop	{r3, r4, r5, pc}
 800d7c0:	20004cfc 	.word	0x20004cfc

0800d7c4 <__errno>:
 800d7c4:	4b01      	ldr	r3, [pc, #4]	@ (800d7cc <__errno+0x8>)
 800d7c6:	6818      	ldr	r0, [r3, #0]
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	20000064 	.word	0x20000064

0800d7d0 <__libc_init_array>:
 800d7d0:	b570      	push	{r4, r5, r6, lr}
 800d7d2:	4d0d      	ldr	r5, [pc, #52]	@ (800d808 <__libc_init_array+0x38>)
 800d7d4:	4c0d      	ldr	r4, [pc, #52]	@ (800d80c <__libc_init_array+0x3c>)
 800d7d6:	1b64      	subs	r4, r4, r5
 800d7d8:	10a4      	asrs	r4, r4, #2
 800d7da:	2600      	movs	r6, #0
 800d7dc:	42a6      	cmp	r6, r4
 800d7de:	d109      	bne.n	800d7f4 <__libc_init_array+0x24>
 800d7e0:	4d0b      	ldr	r5, [pc, #44]	@ (800d810 <__libc_init_array+0x40>)
 800d7e2:	4c0c      	ldr	r4, [pc, #48]	@ (800d814 <__libc_init_array+0x44>)
 800d7e4:	f000 fff0 	bl	800e7c8 <_init>
 800d7e8:	1b64      	subs	r4, r4, r5
 800d7ea:	10a4      	asrs	r4, r4, #2
 800d7ec:	2600      	movs	r6, #0
 800d7ee:	42a6      	cmp	r6, r4
 800d7f0:	d105      	bne.n	800d7fe <__libc_init_array+0x2e>
 800d7f2:	bd70      	pop	{r4, r5, r6, pc}
 800d7f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7f8:	4798      	blx	r3
 800d7fa:	3601      	adds	r6, #1
 800d7fc:	e7ee      	b.n	800d7dc <__libc_init_array+0xc>
 800d7fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800d802:	4798      	blx	r3
 800d804:	3601      	adds	r6, #1
 800d806:	e7f2      	b.n	800d7ee <__libc_init_array+0x1e>
 800d808:	0801cd64 	.word	0x0801cd64
 800d80c:	0801cd64 	.word	0x0801cd64
 800d810:	0801cd64 	.word	0x0801cd64
 800d814:	0801cd68 	.word	0x0801cd68

0800d818 <__retarget_lock_init_recursive>:
 800d818:	4770      	bx	lr

0800d81a <__retarget_lock_acquire_recursive>:
 800d81a:	4770      	bx	lr

0800d81c <__retarget_lock_release_recursive>:
 800d81c:	4770      	bx	lr

0800d81e <memcpy>:
 800d81e:	440a      	add	r2, r1
 800d820:	4291      	cmp	r1, r2
 800d822:	f100 33ff 	add.w	r3, r0, #4294967295
 800d826:	d100      	bne.n	800d82a <memcpy+0xc>
 800d828:	4770      	bx	lr
 800d82a:	b510      	push	{r4, lr}
 800d82c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d830:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d834:	4291      	cmp	r1, r2
 800d836:	d1f9      	bne.n	800d82c <memcpy+0xe>
 800d838:	bd10      	pop	{r4, pc}
	...

0800d83c <__assert_func>:
 800d83c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d83e:	4614      	mov	r4, r2
 800d840:	461a      	mov	r2, r3
 800d842:	4b09      	ldr	r3, [pc, #36]	@ (800d868 <__assert_func+0x2c>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4605      	mov	r5, r0
 800d848:	68d8      	ldr	r0, [r3, #12]
 800d84a:	b954      	cbnz	r4, 800d862 <__assert_func+0x26>
 800d84c:	4b07      	ldr	r3, [pc, #28]	@ (800d86c <__assert_func+0x30>)
 800d84e:	461c      	mov	r4, r3
 800d850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d854:	9100      	str	r1, [sp, #0]
 800d856:	462b      	mov	r3, r5
 800d858:	4905      	ldr	r1, [pc, #20]	@ (800d870 <__assert_func+0x34>)
 800d85a:	f000 fc9f 	bl	800e19c <fiprintf>
 800d85e:	f000 fcd9 	bl	800e214 <abort>
 800d862:	4b04      	ldr	r3, [pc, #16]	@ (800d874 <__assert_func+0x38>)
 800d864:	e7f4      	b.n	800d850 <__assert_func+0x14>
 800d866:	bf00      	nop
 800d868:	20000064 	.word	0x20000064
 800d86c:	0801cd26 	.word	0x0801cd26
 800d870:	0801ccf8 	.word	0x0801ccf8
 800d874:	0801cceb 	.word	0x0801cceb

0800d878 <_free_r>:
 800d878:	b538      	push	{r3, r4, r5, lr}
 800d87a:	4605      	mov	r5, r0
 800d87c:	2900      	cmp	r1, #0
 800d87e:	d041      	beq.n	800d904 <_free_r+0x8c>
 800d880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d884:	1f0c      	subs	r4, r1, #4
 800d886:	2b00      	cmp	r3, #0
 800d888:	bfb8      	it	lt
 800d88a:	18e4      	addlt	r4, r4, r3
 800d88c:	f000 f8e8 	bl	800da60 <__malloc_lock>
 800d890:	4a1d      	ldr	r2, [pc, #116]	@ (800d908 <_free_r+0x90>)
 800d892:	6813      	ldr	r3, [r2, #0]
 800d894:	b933      	cbnz	r3, 800d8a4 <_free_r+0x2c>
 800d896:	6063      	str	r3, [r4, #4]
 800d898:	6014      	str	r4, [r2, #0]
 800d89a:	4628      	mov	r0, r5
 800d89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8a0:	f000 b8e4 	b.w	800da6c <__malloc_unlock>
 800d8a4:	42a3      	cmp	r3, r4
 800d8a6:	d908      	bls.n	800d8ba <_free_r+0x42>
 800d8a8:	6820      	ldr	r0, [r4, #0]
 800d8aa:	1821      	adds	r1, r4, r0
 800d8ac:	428b      	cmp	r3, r1
 800d8ae:	bf01      	itttt	eq
 800d8b0:	6819      	ldreq	r1, [r3, #0]
 800d8b2:	685b      	ldreq	r3, [r3, #4]
 800d8b4:	1809      	addeq	r1, r1, r0
 800d8b6:	6021      	streq	r1, [r4, #0]
 800d8b8:	e7ed      	b.n	800d896 <_free_r+0x1e>
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	b10b      	cbz	r3, 800d8c4 <_free_r+0x4c>
 800d8c0:	42a3      	cmp	r3, r4
 800d8c2:	d9fa      	bls.n	800d8ba <_free_r+0x42>
 800d8c4:	6811      	ldr	r1, [r2, #0]
 800d8c6:	1850      	adds	r0, r2, r1
 800d8c8:	42a0      	cmp	r0, r4
 800d8ca:	d10b      	bne.n	800d8e4 <_free_r+0x6c>
 800d8cc:	6820      	ldr	r0, [r4, #0]
 800d8ce:	4401      	add	r1, r0
 800d8d0:	1850      	adds	r0, r2, r1
 800d8d2:	4283      	cmp	r3, r0
 800d8d4:	6011      	str	r1, [r2, #0]
 800d8d6:	d1e0      	bne.n	800d89a <_free_r+0x22>
 800d8d8:	6818      	ldr	r0, [r3, #0]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	6053      	str	r3, [r2, #4]
 800d8de:	4408      	add	r0, r1
 800d8e0:	6010      	str	r0, [r2, #0]
 800d8e2:	e7da      	b.n	800d89a <_free_r+0x22>
 800d8e4:	d902      	bls.n	800d8ec <_free_r+0x74>
 800d8e6:	230c      	movs	r3, #12
 800d8e8:	602b      	str	r3, [r5, #0]
 800d8ea:	e7d6      	b.n	800d89a <_free_r+0x22>
 800d8ec:	6820      	ldr	r0, [r4, #0]
 800d8ee:	1821      	adds	r1, r4, r0
 800d8f0:	428b      	cmp	r3, r1
 800d8f2:	bf04      	itt	eq
 800d8f4:	6819      	ldreq	r1, [r3, #0]
 800d8f6:	685b      	ldreq	r3, [r3, #4]
 800d8f8:	6063      	str	r3, [r4, #4]
 800d8fa:	bf04      	itt	eq
 800d8fc:	1809      	addeq	r1, r1, r0
 800d8fe:	6021      	streq	r1, [r4, #0]
 800d900:	6054      	str	r4, [r2, #4]
 800d902:	e7ca      	b.n	800d89a <_free_r+0x22>
 800d904:	bd38      	pop	{r3, r4, r5, pc}
 800d906:	bf00      	nop
 800d908:	20004d08 	.word	0x20004d08

0800d90c <malloc>:
 800d90c:	4b02      	ldr	r3, [pc, #8]	@ (800d918 <malloc+0xc>)
 800d90e:	4601      	mov	r1, r0
 800d910:	6818      	ldr	r0, [r3, #0]
 800d912:	f000 b825 	b.w	800d960 <_malloc_r>
 800d916:	bf00      	nop
 800d918:	20000064 	.word	0x20000064

0800d91c <sbrk_aligned>:
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	4e0f      	ldr	r6, [pc, #60]	@ (800d95c <sbrk_aligned+0x40>)
 800d920:	460c      	mov	r4, r1
 800d922:	6831      	ldr	r1, [r6, #0]
 800d924:	4605      	mov	r5, r0
 800d926:	b911      	cbnz	r1, 800d92e <sbrk_aligned+0x12>
 800d928:	f000 fc64 	bl	800e1f4 <_sbrk_r>
 800d92c:	6030      	str	r0, [r6, #0]
 800d92e:	4621      	mov	r1, r4
 800d930:	4628      	mov	r0, r5
 800d932:	f000 fc5f 	bl	800e1f4 <_sbrk_r>
 800d936:	1c43      	adds	r3, r0, #1
 800d938:	d103      	bne.n	800d942 <sbrk_aligned+0x26>
 800d93a:	f04f 34ff 	mov.w	r4, #4294967295
 800d93e:	4620      	mov	r0, r4
 800d940:	bd70      	pop	{r4, r5, r6, pc}
 800d942:	1cc4      	adds	r4, r0, #3
 800d944:	f024 0403 	bic.w	r4, r4, #3
 800d948:	42a0      	cmp	r0, r4
 800d94a:	d0f8      	beq.n	800d93e <sbrk_aligned+0x22>
 800d94c:	1a21      	subs	r1, r4, r0
 800d94e:	4628      	mov	r0, r5
 800d950:	f000 fc50 	bl	800e1f4 <_sbrk_r>
 800d954:	3001      	adds	r0, #1
 800d956:	d1f2      	bne.n	800d93e <sbrk_aligned+0x22>
 800d958:	e7ef      	b.n	800d93a <sbrk_aligned+0x1e>
 800d95a:	bf00      	nop
 800d95c:	20004d04 	.word	0x20004d04

0800d960 <_malloc_r>:
 800d960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d964:	1ccd      	adds	r5, r1, #3
 800d966:	f025 0503 	bic.w	r5, r5, #3
 800d96a:	3508      	adds	r5, #8
 800d96c:	2d0c      	cmp	r5, #12
 800d96e:	bf38      	it	cc
 800d970:	250c      	movcc	r5, #12
 800d972:	2d00      	cmp	r5, #0
 800d974:	4606      	mov	r6, r0
 800d976:	db01      	blt.n	800d97c <_malloc_r+0x1c>
 800d978:	42a9      	cmp	r1, r5
 800d97a:	d904      	bls.n	800d986 <_malloc_r+0x26>
 800d97c:	230c      	movs	r3, #12
 800d97e:	6033      	str	r3, [r6, #0]
 800d980:	2000      	movs	r0, #0
 800d982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da5c <_malloc_r+0xfc>
 800d98a:	f000 f869 	bl	800da60 <__malloc_lock>
 800d98e:	f8d8 3000 	ldr.w	r3, [r8]
 800d992:	461c      	mov	r4, r3
 800d994:	bb44      	cbnz	r4, 800d9e8 <_malloc_r+0x88>
 800d996:	4629      	mov	r1, r5
 800d998:	4630      	mov	r0, r6
 800d99a:	f7ff ffbf 	bl	800d91c <sbrk_aligned>
 800d99e:	1c43      	adds	r3, r0, #1
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	d158      	bne.n	800da56 <_malloc_r+0xf6>
 800d9a4:	f8d8 4000 	ldr.w	r4, [r8]
 800d9a8:	4627      	mov	r7, r4
 800d9aa:	2f00      	cmp	r7, #0
 800d9ac:	d143      	bne.n	800da36 <_malloc_r+0xd6>
 800d9ae:	2c00      	cmp	r4, #0
 800d9b0:	d04b      	beq.n	800da4a <_malloc_r+0xea>
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	4639      	mov	r1, r7
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	eb04 0903 	add.w	r9, r4, r3
 800d9bc:	f000 fc1a 	bl	800e1f4 <_sbrk_r>
 800d9c0:	4581      	cmp	r9, r0
 800d9c2:	d142      	bne.n	800da4a <_malloc_r+0xea>
 800d9c4:	6821      	ldr	r1, [r4, #0]
 800d9c6:	1a6d      	subs	r5, r5, r1
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	f7ff ffa6 	bl	800d91c <sbrk_aligned>
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	d03a      	beq.n	800da4a <_malloc_r+0xea>
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	442b      	add	r3, r5
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	f8d8 3000 	ldr.w	r3, [r8]
 800d9de:	685a      	ldr	r2, [r3, #4]
 800d9e0:	bb62      	cbnz	r2, 800da3c <_malloc_r+0xdc>
 800d9e2:	f8c8 7000 	str.w	r7, [r8]
 800d9e6:	e00f      	b.n	800da08 <_malloc_r+0xa8>
 800d9e8:	6822      	ldr	r2, [r4, #0]
 800d9ea:	1b52      	subs	r2, r2, r5
 800d9ec:	d420      	bmi.n	800da30 <_malloc_r+0xd0>
 800d9ee:	2a0b      	cmp	r2, #11
 800d9f0:	d917      	bls.n	800da22 <_malloc_r+0xc2>
 800d9f2:	1961      	adds	r1, r4, r5
 800d9f4:	42a3      	cmp	r3, r4
 800d9f6:	6025      	str	r5, [r4, #0]
 800d9f8:	bf18      	it	ne
 800d9fa:	6059      	strne	r1, [r3, #4]
 800d9fc:	6863      	ldr	r3, [r4, #4]
 800d9fe:	bf08      	it	eq
 800da00:	f8c8 1000 	streq.w	r1, [r8]
 800da04:	5162      	str	r2, [r4, r5]
 800da06:	604b      	str	r3, [r1, #4]
 800da08:	4630      	mov	r0, r6
 800da0a:	f000 f82f 	bl	800da6c <__malloc_unlock>
 800da0e:	f104 000b 	add.w	r0, r4, #11
 800da12:	1d23      	adds	r3, r4, #4
 800da14:	f020 0007 	bic.w	r0, r0, #7
 800da18:	1ac2      	subs	r2, r0, r3
 800da1a:	bf1c      	itt	ne
 800da1c:	1a1b      	subne	r3, r3, r0
 800da1e:	50a3      	strne	r3, [r4, r2]
 800da20:	e7af      	b.n	800d982 <_malloc_r+0x22>
 800da22:	6862      	ldr	r2, [r4, #4]
 800da24:	42a3      	cmp	r3, r4
 800da26:	bf0c      	ite	eq
 800da28:	f8c8 2000 	streq.w	r2, [r8]
 800da2c:	605a      	strne	r2, [r3, #4]
 800da2e:	e7eb      	b.n	800da08 <_malloc_r+0xa8>
 800da30:	4623      	mov	r3, r4
 800da32:	6864      	ldr	r4, [r4, #4]
 800da34:	e7ae      	b.n	800d994 <_malloc_r+0x34>
 800da36:	463c      	mov	r4, r7
 800da38:	687f      	ldr	r7, [r7, #4]
 800da3a:	e7b6      	b.n	800d9aa <_malloc_r+0x4a>
 800da3c:	461a      	mov	r2, r3
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	42a3      	cmp	r3, r4
 800da42:	d1fb      	bne.n	800da3c <_malloc_r+0xdc>
 800da44:	2300      	movs	r3, #0
 800da46:	6053      	str	r3, [r2, #4]
 800da48:	e7de      	b.n	800da08 <_malloc_r+0xa8>
 800da4a:	230c      	movs	r3, #12
 800da4c:	6033      	str	r3, [r6, #0]
 800da4e:	4630      	mov	r0, r6
 800da50:	f000 f80c 	bl	800da6c <__malloc_unlock>
 800da54:	e794      	b.n	800d980 <_malloc_r+0x20>
 800da56:	6005      	str	r5, [r0, #0]
 800da58:	e7d6      	b.n	800da08 <_malloc_r+0xa8>
 800da5a:	bf00      	nop
 800da5c:	20004d08 	.word	0x20004d08

0800da60 <__malloc_lock>:
 800da60:	4801      	ldr	r0, [pc, #4]	@ (800da68 <__malloc_lock+0x8>)
 800da62:	f7ff beda 	b.w	800d81a <__retarget_lock_acquire_recursive>
 800da66:	bf00      	nop
 800da68:	20004d00 	.word	0x20004d00

0800da6c <__malloc_unlock>:
 800da6c:	4801      	ldr	r0, [pc, #4]	@ (800da74 <__malloc_unlock+0x8>)
 800da6e:	f7ff bed5 	b.w	800d81c <__retarget_lock_release_recursive>
 800da72:	bf00      	nop
 800da74:	20004d00 	.word	0x20004d00

0800da78 <__ssputs_r>:
 800da78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da7c:	688e      	ldr	r6, [r1, #8]
 800da7e:	461f      	mov	r7, r3
 800da80:	42be      	cmp	r6, r7
 800da82:	680b      	ldr	r3, [r1, #0]
 800da84:	4682      	mov	sl, r0
 800da86:	460c      	mov	r4, r1
 800da88:	4690      	mov	r8, r2
 800da8a:	d82d      	bhi.n	800dae8 <__ssputs_r+0x70>
 800da8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da94:	d026      	beq.n	800dae4 <__ssputs_r+0x6c>
 800da96:	6965      	ldr	r5, [r4, #20]
 800da98:	6909      	ldr	r1, [r1, #16]
 800da9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da9e:	eba3 0901 	sub.w	r9, r3, r1
 800daa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800daa6:	1c7b      	adds	r3, r7, #1
 800daa8:	444b      	add	r3, r9
 800daaa:	106d      	asrs	r5, r5, #1
 800daac:	429d      	cmp	r5, r3
 800daae:	bf38      	it	cc
 800dab0:	461d      	movcc	r5, r3
 800dab2:	0553      	lsls	r3, r2, #21
 800dab4:	d527      	bpl.n	800db06 <__ssputs_r+0x8e>
 800dab6:	4629      	mov	r1, r5
 800dab8:	f7ff ff52 	bl	800d960 <_malloc_r>
 800dabc:	4606      	mov	r6, r0
 800dabe:	b360      	cbz	r0, 800db1a <__ssputs_r+0xa2>
 800dac0:	6921      	ldr	r1, [r4, #16]
 800dac2:	464a      	mov	r2, r9
 800dac4:	f7ff feab 	bl	800d81e <memcpy>
 800dac8:	89a3      	ldrh	r3, [r4, #12]
 800daca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dad2:	81a3      	strh	r3, [r4, #12]
 800dad4:	6126      	str	r6, [r4, #16]
 800dad6:	6165      	str	r5, [r4, #20]
 800dad8:	444e      	add	r6, r9
 800dada:	eba5 0509 	sub.w	r5, r5, r9
 800dade:	6026      	str	r6, [r4, #0]
 800dae0:	60a5      	str	r5, [r4, #8]
 800dae2:	463e      	mov	r6, r7
 800dae4:	42be      	cmp	r6, r7
 800dae6:	d900      	bls.n	800daea <__ssputs_r+0x72>
 800dae8:	463e      	mov	r6, r7
 800daea:	6820      	ldr	r0, [r4, #0]
 800daec:	4632      	mov	r2, r6
 800daee:	4641      	mov	r1, r8
 800daf0:	f000 fb66 	bl	800e1c0 <memmove>
 800daf4:	68a3      	ldr	r3, [r4, #8]
 800daf6:	1b9b      	subs	r3, r3, r6
 800daf8:	60a3      	str	r3, [r4, #8]
 800dafa:	6823      	ldr	r3, [r4, #0]
 800dafc:	4433      	add	r3, r6
 800dafe:	6023      	str	r3, [r4, #0]
 800db00:	2000      	movs	r0, #0
 800db02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db06:	462a      	mov	r2, r5
 800db08:	f000 fb8b 	bl	800e222 <_realloc_r>
 800db0c:	4606      	mov	r6, r0
 800db0e:	2800      	cmp	r0, #0
 800db10:	d1e0      	bne.n	800dad4 <__ssputs_r+0x5c>
 800db12:	6921      	ldr	r1, [r4, #16]
 800db14:	4650      	mov	r0, sl
 800db16:	f7ff feaf 	bl	800d878 <_free_r>
 800db1a:	230c      	movs	r3, #12
 800db1c:	f8ca 3000 	str.w	r3, [sl]
 800db20:	89a3      	ldrh	r3, [r4, #12]
 800db22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db26:	81a3      	strh	r3, [r4, #12]
 800db28:	f04f 30ff 	mov.w	r0, #4294967295
 800db2c:	e7e9      	b.n	800db02 <__ssputs_r+0x8a>
	...

0800db30 <_svfiprintf_r>:
 800db30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db34:	4698      	mov	r8, r3
 800db36:	898b      	ldrh	r3, [r1, #12]
 800db38:	061b      	lsls	r3, r3, #24
 800db3a:	b09d      	sub	sp, #116	@ 0x74
 800db3c:	4607      	mov	r7, r0
 800db3e:	460d      	mov	r5, r1
 800db40:	4614      	mov	r4, r2
 800db42:	d510      	bpl.n	800db66 <_svfiprintf_r+0x36>
 800db44:	690b      	ldr	r3, [r1, #16]
 800db46:	b973      	cbnz	r3, 800db66 <_svfiprintf_r+0x36>
 800db48:	2140      	movs	r1, #64	@ 0x40
 800db4a:	f7ff ff09 	bl	800d960 <_malloc_r>
 800db4e:	6028      	str	r0, [r5, #0]
 800db50:	6128      	str	r0, [r5, #16]
 800db52:	b930      	cbnz	r0, 800db62 <_svfiprintf_r+0x32>
 800db54:	230c      	movs	r3, #12
 800db56:	603b      	str	r3, [r7, #0]
 800db58:	f04f 30ff 	mov.w	r0, #4294967295
 800db5c:	b01d      	add	sp, #116	@ 0x74
 800db5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db62:	2340      	movs	r3, #64	@ 0x40
 800db64:	616b      	str	r3, [r5, #20]
 800db66:	2300      	movs	r3, #0
 800db68:	9309      	str	r3, [sp, #36]	@ 0x24
 800db6a:	2320      	movs	r3, #32
 800db6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db70:	f8cd 800c 	str.w	r8, [sp, #12]
 800db74:	2330      	movs	r3, #48	@ 0x30
 800db76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dd14 <_svfiprintf_r+0x1e4>
 800db7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db7e:	f04f 0901 	mov.w	r9, #1
 800db82:	4623      	mov	r3, r4
 800db84:	469a      	mov	sl, r3
 800db86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db8a:	b10a      	cbz	r2, 800db90 <_svfiprintf_r+0x60>
 800db8c:	2a25      	cmp	r2, #37	@ 0x25
 800db8e:	d1f9      	bne.n	800db84 <_svfiprintf_r+0x54>
 800db90:	ebba 0b04 	subs.w	fp, sl, r4
 800db94:	d00b      	beq.n	800dbae <_svfiprintf_r+0x7e>
 800db96:	465b      	mov	r3, fp
 800db98:	4622      	mov	r2, r4
 800db9a:	4629      	mov	r1, r5
 800db9c:	4638      	mov	r0, r7
 800db9e:	f7ff ff6b 	bl	800da78 <__ssputs_r>
 800dba2:	3001      	adds	r0, #1
 800dba4:	f000 80a7 	beq.w	800dcf6 <_svfiprintf_r+0x1c6>
 800dba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbaa:	445a      	add	r2, fp
 800dbac:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbae:	f89a 3000 	ldrb.w	r3, [sl]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	f000 809f 	beq.w	800dcf6 <_svfiprintf_r+0x1c6>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	f04f 32ff 	mov.w	r2, #4294967295
 800dbbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbc2:	f10a 0a01 	add.w	sl, sl, #1
 800dbc6:	9304      	str	r3, [sp, #16]
 800dbc8:	9307      	str	r3, [sp, #28]
 800dbca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbce:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbd0:	4654      	mov	r4, sl
 800dbd2:	2205      	movs	r2, #5
 800dbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd8:	484e      	ldr	r0, [pc, #312]	@ (800dd14 <_svfiprintf_r+0x1e4>)
 800dbda:	f7f2 fb19 	bl	8000210 <memchr>
 800dbde:	9a04      	ldr	r2, [sp, #16]
 800dbe0:	b9d8      	cbnz	r0, 800dc1a <_svfiprintf_r+0xea>
 800dbe2:	06d0      	lsls	r0, r2, #27
 800dbe4:	bf44      	itt	mi
 800dbe6:	2320      	movmi	r3, #32
 800dbe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbec:	0711      	lsls	r1, r2, #28
 800dbee:	bf44      	itt	mi
 800dbf0:	232b      	movmi	r3, #43	@ 0x2b
 800dbf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbf6:	f89a 3000 	ldrb.w	r3, [sl]
 800dbfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbfc:	d015      	beq.n	800dc2a <_svfiprintf_r+0xfa>
 800dbfe:	9a07      	ldr	r2, [sp, #28]
 800dc00:	4654      	mov	r4, sl
 800dc02:	2000      	movs	r0, #0
 800dc04:	f04f 0c0a 	mov.w	ip, #10
 800dc08:	4621      	mov	r1, r4
 800dc0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc0e:	3b30      	subs	r3, #48	@ 0x30
 800dc10:	2b09      	cmp	r3, #9
 800dc12:	d94b      	bls.n	800dcac <_svfiprintf_r+0x17c>
 800dc14:	b1b0      	cbz	r0, 800dc44 <_svfiprintf_r+0x114>
 800dc16:	9207      	str	r2, [sp, #28]
 800dc18:	e014      	b.n	800dc44 <_svfiprintf_r+0x114>
 800dc1a:	eba0 0308 	sub.w	r3, r0, r8
 800dc1e:	fa09 f303 	lsl.w	r3, r9, r3
 800dc22:	4313      	orrs	r3, r2
 800dc24:	9304      	str	r3, [sp, #16]
 800dc26:	46a2      	mov	sl, r4
 800dc28:	e7d2      	b.n	800dbd0 <_svfiprintf_r+0xa0>
 800dc2a:	9b03      	ldr	r3, [sp, #12]
 800dc2c:	1d19      	adds	r1, r3, #4
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	9103      	str	r1, [sp, #12]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	bfbb      	ittet	lt
 800dc36:	425b      	neglt	r3, r3
 800dc38:	f042 0202 	orrlt.w	r2, r2, #2
 800dc3c:	9307      	strge	r3, [sp, #28]
 800dc3e:	9307      	strlt	r3, [sp, #28]
 800dc40:	bfb8      	it	lt
 800dc42:	9204      	strlt	r2, [sp, #16]
 800dc44:	7823      	ldrb	r3, [r4, #0]
 800dc46:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc48:	d10a      	bne.n	800dc60 <_svfiprintf_r+0x130>
 800dc4a:	7863      	ldrb	r3, [r4, #1]
 800dc4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc4e:	d132      	bne.n	800dcb6 <_svfiprintf_r+0x186>
 800dc50:	9b03      	ldr	r3, [sp, #12]
 800dc52:	1d1a      	adds	r2, r3, #4
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	9203      	str	r2, [sp, #12]
 800dc58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc5c:	3402      	adds	r4, #2
 800dc5e:	9305      	str	r3, [sp, #20]
 800dc60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dd24 <_svfiprintf_r+0x1f4>
 800dc64:	7821      	ldrb	r1, [r4, #0]
 800dc66:	2203      	movs	r2, #3
 800dc68:	4650      	mov	r0, sl
 800dc6a:	f7f2 fad1 	bl	8000210 <memchr>
 800dc6e:	b138      	cbz	r0, 800dc80 <_svfiprintf_r+0x150>
 800dc70:	9b04      	ldr	r3, [sp, #16]
 800dc72:	eba0 000a 	sub.w	r0, r0, sl
 800dc76:	2240      	movs	r2, #64	@ 0x40
 800dc78:	4082      	lsls	r2, r0
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	3401      	adds	r4, #1
 800dc7e:	9304      	str	r3, [sp, #16]
 800dc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc84:	4824      	ldr	r0, [pc, #144]	@ (800dd18 <_svfiprintf_r+0x1e8>)
 800dc86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc8a:	2206      	movs	r2, #6
 800dc8c:	f7f2 fac0 	bl	8000210 <memchr>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d036      	beq.n	800dd02 <_svfiprintf_r+0x1d2>
 800dc94:	4b21      	ldr	r3, [pc, #132]	@ (800dd1c <_svfiprintf_r+0x1ec>)
 800dc96:	bb1b      	cbnz	r3, 800dce0 <_svfiprintf_r+0x1b0>
 800dc98:	9b03      	ldr	r3, [sp, #12]
 800dc9a:	3307      	adds	r3, #7
 800dc9c:	f023 0307 	bic.w	r3, r3, #7
 800dca0:	3308      	adds	r3, #8
 800dca2:	9303      	str	r3, [sp, #12]
 800dca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dca6:	4433      	add	r3, r6
 800dca8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcaa:	e76a      	b.n	800db82 <_svfiprintf_r+0x52>
 800dcac:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	2001      	movs	r0, #1
 800dcb4:	e7a8      	b.n	800dc08 <_svfiprintf_r+0xd8>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	3401      	adds	r4, #1
 800dcba:	9305      	str	r3, [sp, #20]
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	f04f 0c0a 	mov.w	ip, #10
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcc8:	3a30      	subs	r2, #48	@ 0x30
 800dcca:	2a09      	cmp	r2, #9
 800dccc:	d903      	bls.n	800dcd6 <_svfiprintf_r+0x1a6>
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d0c6      	beq.n	800dc60 <_svfiprintf_r+0x130>
 800dcd2:	9105      	str	r1, [sp, #20]
 800dcd4:	e7c4      	b.n	800dc60 <_svfiprintf_r+0x130>
 800dcd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcda:	4604      	mov	r4, r0
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e7f0      	b.n	800dcc2 <_svfiprintf_r+0x192>
 800dce0:	ab03      	add	r3, sp, #12
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	462a      	mov	r2, r5
 800dce6:	4b0e      	ldr	r3, [pc, #56]	@ (800dd20 <_svfiprintf_r+0x1f0>)
 800dce8:	a904      	add	r1, sp, #16
 800dcea:	4638      	mov	r0, r7
 800dcec:	f3af 8000 	nop.w
 800dcf0:	1c42      	adds	r2, r0, #1
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	d1d6      	bne.n	800dca4 <_svfiprintf_r+0x174>
 800dcf6:	89ab      	ldrh	r3, [r5, #12]
 800dcf8:	065b      	lsls	r3, r3, #25
 800dcfa:	f53f af2d 	bmi.w	800db58 <_svfiprintf_r+0x28>
 800dcfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd00:	e72c      	b.n	800db5c <_svfiprintf_r+0x2c>
 800dd02:	ab03      	add	r3, sp, #12
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	462a      	mov	r2, r5
 800dd08:	4b05      	ldr	r3, [pc, #20]	@ (800dd20 <_svfiprintf_r+0x1f0>)
 800dd0a:	a904      	add	r1, sp, #16
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	f000 f879 	bl	800de04 <_printf_i>
 800dd12:	e7ed      	b.n	800dcf0 <_svfiprintf_r+0x1c0>
 800dd14:	0801cd27 	.word	0x0801cd27
 800dd18:	0801cd31 	.word	0x0801cd31
 800dd1c:	00000000 	.word	0x00000000
 800dd20:	0800da79 	.word	0x0800da79
 800dd24:	0801cd2d 	.word	0x0801cd2d

0800dd28 <_printf_common>:
 800dd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd2c:	4616      	mov	r6, r2
 800dd2e:	4698      	mov	r8, r3
 800dd30:	688a      	ldr	r2, [r1, #8]
 800dd32:	690b      	ldr	r3, [r1, #16]
 800dd34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	bfb8      	it	lt
 800dd3c:	4613      	movlt	r3, r2
 800dd3e:	6033      	str	r3, [r6, #0]
 800dd40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dd44:	4607      	mov	r7, r0
 800dd46:	460c      	mov	r4, r1
 800dd48:	b10a      	cbz	r2, 800dd4e <_printf_common+0x26>
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	6033      	str	r3, [r6, #0]
 800dd4e:	6823      	ldr	r3, [r4, #0]
 800dd50:	0699      	lsls	r1, r3, #26
 800dd52:	bf42      	ittt	mi
 800dd54:	6833      	ldrmi	r3, [r6, #0]
 800dd56:	3302      	addmi	r3, #2
 800dd58:	6033      	strmi	r3, [r6, #0]
 800dd5a:	6825      	ldr	r5, [r4, #0]
 800dd5c:	f015 0506 	ands.w	r5, r5, #6
 800dd60:	d106      	bne.n	800dd70 <_printf_common+0x48>
 800dd62:	f104 0a19 	add.w	sl, r4, #25
 800dd66:	68e3      	ldr	r3, [r4, #12]
 800dd68:	6832      	ldr	r2, [r6, #0]
 800dd6a:	1a9b      	subs	r3, r3, r2
 800dd6c:	42ab      	cmp	r3, r5
 800dd6e:	dc26      	bgt.n	800ddbe <_printf_common+0x96>
 800dd70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dd74:	6822      	ldr	r2, [r4, #0]
 800dd76:	3b00      	subs	r3, #0
 800dd78:	bf18      	it	ne
 800dd7a:	2301      	movne	r3, #1
 800dd7c:	0692      	lsls	r2, r2, #26
 800dd7e:	d42b      	bmi.n	800ddd8 <_printf_common+0xb0>
 800dd80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dd84:	4641      	mov	r1, r8
 800dd86:	4638      	mov	r0, r7
 800dd88:	47c8      	blx	r9
 800dd8a:	3001      	adds	r0, #1
 800dd8c:	d01e      	beq.n	800ddcc <_printf_common+0xa4>
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	6922      	ldr	r2, [r4, #16]
 800dd92:	f003 0306 	and.w	r3, r3, #6
 800dd96:	2b04      	cmp	r3, #4
 800dd98:	bf02      	ittt	eq
 800dd9a:	68e5      	ldreq	r5, [r4, #12]
 800dd9c:	6833      	ldreq	r3, [r6, #0]
 800dd9e:	1aed      	subeq	r5, r5, r3
 800dda0:	68a3      	ldr	r3, [r4, #8]
 800dda2:	bf0c      	ite	eq
 800dda4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dda8:	2500      	movne	r5, #0
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	bfc4      	itt	gt
 800ddae:	1a9b      	subgt	r3, r3, r2
 800ddb0:	18ed      	addgt	r5, r5, r3
 800ddb2:	2600      	movs	r6, #0
 800ddb4:	341a      	adds	r4, #26
 800ddb6:	42b5      	cmp	r5, r6
 800ddb8:	d11a      	bne.n	800ddf0 <_printf_common+0xc8>
 800ddba:	2000      	movs	r0, #0
 800ddbc:	e008      	b.n	800ddd0 <_printf_common+0xa8>
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	4652      	mov	r2, sl
 800ddc2:	4641      	mov	r1, r8
 800ddc4:	4638      	mov	r0, r7
 800ddc6:	47c8      	blx	r9
 800ddc8:	3001      	adds	r0, #1
 800ddca:	d103      	bne.n	800ddd4 <_printf_common+0xac>
 800ddcc:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd4:	3501      	adds	r5, #1
 800ddd6:	e7c6      	b.n	800dd66 <_printf_common+0x3e>
 800ddd8:	18e1      	adds	r1, r4, r3
 800ddda:	1c5a      	adds	r2, r3, #1
 800dddc:	2030      	movs	r0, #48	@ 0x30
 800ddde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dde2:	4422      	add	r2, r4
 800dde4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dde8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ddec:	3302      	adds	r3, #2
 800ddee:	e7c7      	b.n	800dd80 <_printf_common+0x58>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	4622      	mov	r2, r4
 800ddf4:	4641      	mov	r1, r8
 800ddf6:	4638      	mov	r0, r7
 800ddf8:	47c8      	blx	r9
 800ddfa:	3001      	adds	r0, #1
 800ddfc:	d0e6      	beq.n	800ddcc <_printf_common+0xa4>
 800ddfe:	3601      	adds	r6, #1
 800de00:	e7d9      	b.n	800ddb6 <_printf_common+0x8e>
	...

0800de04 <_printf_i>:
 800de04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de08:	7e0f      	ldrb	r7, [r1, #24]
 800de0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de0c:	2f78      	cmp	r7, #120	@ 0x78
 800de0e:	4691      	mov	r9, r2
 800de10:	4680      	mov	r8, r0
 800de12:	460c      	mov	r4, r1
 800de14:	469a      	mov	sl, r3
 800de16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de1a:	d807      	bhi.n	800de2c <_printf_i+0x28>
 800de1c:	2f62      	cmp	r7, #98	@ 0x62
 800de1e:	d80a      	bhi.n	800de36 <_printf_i+0x32>
 800de20:	2f00      	cmp	r7, #0
 800de22:	f000 80d2 	beq.w	800dfca <_printf_i+0x1c6>
 800de26:	2f58      	cmp	r7, #88	@ 0x58
 800de28:	f000 80b9 	beq.w	800df9e <_printf_i+0x19a>
 800de2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800de34:	e03a      	b.n	800deac <_printf_i+0xa8>
 800de36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800de3a:	2b15      	cmp	r3, #21
 800de3c:	d8f6      	bhi.n	800de2c <_printf_i+0x28>
 800de3e:	a101      	add	r1, pc, #4	@ (adr r1, 800de44 <_printf_i+0x40>)
 800de40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de44:	0800de9d 	.word	0x0800de9d
 800de48:	0800deb1 	.word	0x0800deb1
 800de4c:	0800de2d 	.word	0x0800de2d
 800de50:	0800de2d 	.word	0x0800de2d
 800de54:	0800de2d 	.word	0x0800de2d
 800de58:	0800de2d 	.word	0x0800de2d
 800de5c:	0800deb1 	.word	0x0800deb1
 800de60:	0800de2d 	.word	0x0800de2d
 800de64:	0800de2d 	.word	0x0800de2d
 800de68:	0800de2d 	.word	0x0800de2d
 800de6c:	0800de2d 	.word	0x0800de2d
 800de70:	0800dfb1 	.word	0x0800dfb1
 800de74:	0800dedb 	.word	0x0800dedb
 800de78:	0800df6b 	.word	0x0800df6b
 800de7c:	0800de2d 	.word	0x0800de2d
 800de80:	0800de2d 	.word	0x0800de2d
 800de84:	0800dfd3 	.word	0x0800dfd3
 800de88:	0800de2d 	.word	0x0800de2d
 800de8c:	0800dedb 	.word	0x0800dedb
 800de90:	0800de2d 	.word	0x0800de2d
 800de94:	0800de2d 	.word	0x0800de2d
 800de98:	0800df73 	.word	0x0800df73
 800de9c:	6833      	ldr	r3, [r6, #0]
 800de9e:	1d1a      	adds	r2, r3, #4
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	6032      	str	r2, [r6, #0]
 800dea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800deac:	2301      	movs	r3, #1
 800deae:	e09d      	b.n	800dfec <_printf_i+0x1e8>
 800deb0:	6833      	ldr	r3, [r6, #0]
 800deb2:	6820      	ldr	r0, [r4, #0]
 800deb4:	1d19      	adds	r1, r3, #4
 800deb6:	6031      	str	r1, [r6, #0]
 800deb8:	0606      	lsls	r6, r0, #24
 800deba:	d501      	bpl.n	800dec0 <_printf_i+0xbc>
 800debc:	681d      	ldr	r5, [r3, #0]
 800debe:	e003      	b.n	800dec8 <_printf_i+0xc4>
 800dec0:	0645      	lsls	r5, r0, #25
 800dec2:	d5fb      	bpl.n	800debc <_printf_i+0xb8>
 800dec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dec8:	2d00      	cmp	r5, #0
 800deca:	da03      	bge.n	800ded4 <_printf_i+0xd0>
 800decc:	232d      	movs	r3, #45	@ 0x2d
 800dece:	426d      	negs	r5, r5
 800ded0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ded4:	4859      	ldr	r0, [pc, #356]	@ (800e03c <_printf_i+0x238>)
 800ded6:	230a      	movs	r3, #10
 800ded8:	e011      	b.n	800defe <_printf_i+0xfa>
 800deda:	6821      	ldr	r1, [r4, #0]
 800dedc:	6833      	ldr	r3, [r6, #0]
 800dede:	0608      	lsls	r0, r1, #24
 800dee0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dee4:	d402      	bmi.n	800deec <_printf_i+0xe8>
 800dee6:	0649      	lsls	r1, r1, #25
 800dee8:	bf48      	it	mi
 800deea:	b2ad      	uxthmi	r5, r5
 800deec:	2f6f      	cmp	r7, #111	@ 0x6f
 800deee:	4853      	ldr	r0, [pc, #332]	@ (800e03c <_printf_i+0x238>)
 800def0:	6033      	str	r3, [r6, #0]
 800def2:	bf14      	ite	ne
 800def4:	230a      	movne	r3, #10
 800def6:	2308      	moveq	r3, #8
 800def8:	2100      	movs	r1, #0
 800defa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800defe:	6866      	ldr	r6, [r4, #4]
 800df00:	60a6      	str	r6, [r4, #8]
 800df02:	2e00      	cmp	r6, #0
 800df04:	bfa2      	ittt	ge
 800df06:	6821      	ldrge	r1, [r4, #0]
 800df08:	f021 0104 	bicge.w	r1, r1, #4
 800df0c:	6021      	strge	r1, [r4, #0]
 800df0e:	b90d      	cbnz	r5, 800df14 <_printf_i+0x110>
 800df10:	2e00      	cmp	r6, #0
 800df12:	d04b      	beq.n	800dfac <_printf_i+0x1a8>
 800df14:	4616      	mov	r6, r2
 800df16:	fbb5 f1f3 	udiv	r1, r5, r3
 800df1a:	fb03 5711 	mls	r7, r3, r1, r5
 800df1e:	5dc7      	ldrb	r7, [r0, r7]
 800df20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df24:	462f      	mov	r7, r5
 800df26:	42bb      	cmp	r3, r7
 800df28:	460d      	mov	r5, r1
 800df2a:	d9f4      	bls.n	800df16 <_printf_i+0x112>
 800df2c:	2b08      	cmp	r3, #8
 800df2e:	d10b      	bne.n	800df48 <_printf_i+0x144>
 800df30:	6823      	ldr	r3, [r4, #0]
 800df32:	07df      	lsls	r7, r3, #31
 800df34:	d508      	bpl.n	800df48 <_printf_i+0x144>
 800df36:	6923      	ldr	r3, [r4, #16]
 800df38:	6861      	ldr	r1, [r4, #4]
 800df3a:	4299      	cmp	r1, r3
 800df3c:	bfde      	ittt	le
 800df3e:	2330      	movle	r3, #48	@ 0x30
 800df40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800df48:	1b92      	subs	r2, r2, r6
 800df4a:	6122      	str	r2, [r4, #16]
 800df4c:	f8cd a000 	str.w	sl, [sp]
 800df50:	464b      	mov	r3, r9
 800df52:	aa03      	add	r2, sp, #12
 800df54:	4621      	mov	r1, r4
 800df56:	4640      	mov	r0, r8
 800df58:	f7ff fee6 	bl	800dd28 <_printf_common>
 800df5c:	3001      	adds	r0, #1
 800df5e:	d14a      	bne.n	800dff6 <_printf_i+0x1f2>
 800df60:	f04f 30ff 	mov.w	r0, #4294967295
 800df64:	b004      	add	sp, #16
 800df66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df6a:	6823      	ldr	r3, [r4, #0]
 800df6c:	f043 0320 	orr.w	r3, r3, #32
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	4833      	ldr	r0, [pc, #204]	@ (800e040 <_printf_i+0x23c>)
 800df74:	2778      	movs	r7, #120	@ 0x78
 800df76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800df7a:	6823      	ldr	r3, [r4, #0]
 800df7c:	6831      	ldr	r1, [r6, #0]
 800df7e:	061f      	lsls	r7, r3, #24
 800df80:	f851 5b04 	ldr.w	r5, [r1], #4
 800df84:	d402      	bmi.n	800df8c <_printf_i+0x188>
 800df86:	065f      	lsls	r7, r3, #25
 800df88:	bf48      	it	mi
 800df8a:	b2ad      	uxthmi	r5, r5
 800df8c:	6031      	str	r1, [r6, #0]
 800df8e:	07d9      	lsls	r1, r3, #31
 800df90:	bf44      	itt	mi
 800df92:	f043 0320 	orrmi.w	r3, r3, #32
 800df96:	6023      	strmi	r3, [r4, #0]
 800df98:	b11d      	cbz	r5, 800dfa2 <_printf_i+0x19e>
 800df9a:	2310      	movs	r3, #16
 800df9c:	e7ac      	b.n	800def8 <_printf_i+0xf4>
 800df9e:	4827      	ldr	r0, [pc, #156]	@ (800e03c <_printf_i+0x238>)
 800dfa0:	e7e9      	b.n	800df76 <_printf_i+0x172>
 800dfa2:	6823      	ldr	r3, [r4, #0]
 800dfa4:	f023 0320 	bic.w	r3, r3, #32
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	e7f6      	b.n	800df9a <_printf_i+0x196>
 800dfac:	4616      	mov	r6, r2
 800dfae:	e7bd      	b.n	800df2c <_printf_i+0x128>
 800dfb0:	6833      	ldr	r3, [r6, #0]
 800dfb2:	6825      	ldr	r5, [r4, #0]
 800dfb4:	6961      	ldr	r1, [r4, #20]
 800dfb6:	1d18      	adds	r0, r3, #4
 800dfb8:	6030      	str	r0, [r6, #0]
 800dfba:	062e      	lsls	r6, r5, #24
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	d501      	bpl.n	800dfc4 <_printf_i+0x1c0>
 800dfc0:	6019      	str	r1, [r3, #0]
 800dfc2:	e002      	b.n	800dfca <_printf_i+0x1c6>
 800dfc4:	0668      	lsls	r0, r5, #25
 800dfc6:	d5fb      	bpl.n	800dfc0 <_printf_i+0x1bc>
 800dfc8:	8019      	strh	r1, [r3, #0]
 800dfca:	2300      	movs	r3, #0
 800dfcc:	6123      	str	r3, [r4, #16]
 800dfce:	4616      	mov	r6, r2
 800dfd0:	e7bc      	b.n	800df4c <_printf_i+0x148>
 800dfd2:	6833      	ldr	r3, [r6, #0]
 800dfd4:	1d1a      	adds	r2, r3, #4
 800dfd6:	6032      	str	r2, [r6, #0]
 800dfd8:	681e      	ldr	r6, [r3, #0]
 800dfda:	6862      	ldr	r2, [r4, #4]
 800dfdc:	2100      	movs	r1, #0
 800dfde:	4630      	mov	r0, r6
 800dfe0:	f7f2 f916 	bl	8000210 <memchr>
 800dfe4:	b108      	cbz	r0, 800dfea <_printf_i+0x1e6>
 800dfe6:	1b80      	subs	r0, r0, r6
 800dfe8:	6060      	str	r0, [r4, #4]
 800dfea:	6863      	ldr	r3, [r4, #4]
 800dfec:	6123      	str	r3, [r4, #16]
 800dfee:	2300      	movs	r3, #0
 800dff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dff4:	e7aa      	b.n	800df4c <_printf_i+0x148>
 800dff6:	6923      	ldr	r3, [r4, #16]
 800dff8:	4632      	mov	r2, r6
 800dffa:	4649      	mov	r1, r9
 800dffc:	4640      	mov	r0, r8
 800dffe:	47d0      	blx	sl
 800e000:	3001      	adds	r0, #1
 800e002:	d0ad      	beq.n	800df60 <_printf_i+0x15c>
 800e004:	6823      	ldr	r3, [r4, #0]
 800e006:	079b      	lsls	r3, r3, #30
 800e008:	d413      	bmi.n	800e032 <_printf_i+0x22e>
 800e00a:	68e0      	ldr	r0, [r4, #12]
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	4298      	cmp	r0, r3
 800e010:	bfb8      	it	lt
 800e012:	4618      	movlt	r0, r3
 800e014:	e7a6      	b.n	800df64 <_printf_i+0x160>
 800e016:	2301      	movs	r3, #1
 800e018:	4632      	mov	r2, r6
 800e01a:	4649      	mov	r1, r9
 800e01c:	4640      	mov	r0, r8
 800e01e:	47d0      	blx	sl
 800e020:	3001      	adds	r0, #1
 800e022:	d09d      	beq.n	800df60 <_printf_i+0x15c>
 800e024:	3501      	adds	r5, #1
 800e026:	68e3      	ldr	r3, [r4, #12]
 800e028:	9903      	ldr	r1, [sp, #12]
 800e02a:	1a5b      	subs	r3, r3, r1
 800e02c:	42ab      	cmp	r3, r5
 800e02e:	dcf2      	bgt.n	800e016 <_printf_i+0x212>
 800e030:	e7eb      	b.n	800e00a <_printf_i+0x206>
 800e032:	2500      	movs	r5, #0
 800e034:	f104 0619 	add.w	r6, r4, #25
 800e038:	e7f5      	b.n	800e026 <_printf_i+0x222>
 800e03a:	bf00      	nop
 800e03c:	0801cd38 	.word	0x0801cd38
 800e040:	0801cd49 	.word	0x0801cd49

0800e044 <__sflush_r>:
 800e044:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e04c:	0716      	lsls	r6, r2, #28
 800e04e:	4605      	mov	r5, r0
 800e050:	460c      	mov	r4, r1
 800e052:	d454      	bmi.n	800e0fe <__sflush_r+0xba>
 800e054:	684b      	ldr	r3, [r1, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	dc02      	bgt.n	800e060 <__sflush_r+0x1c>
 800e05a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	dd48      	ble.n	800e0f2 <__sflush_r+0xae>
 800e060:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e062:	2e00      	cmp	r6, #0
 800e064:	d045      	beq.n	800e0f2 <__sflush_r+0xae>
 800e066:	2300      	movs	r3, #0
 800e068:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e06c:	682f      	ldr	r7, [r5, #0]
 800e06e:	6a21      	ldr	r1, [r4, #32]
 800e070:	602b      	str	r3, [r5, #0]
 800e072:	d030      	beq.n	800e0d6 <__sflush_r+0x92>
 800e074:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e076:	89a3      	ldrh	r3, [r4, #12]
 800e078:	0759      	lsls	r1, r3, #29
 800e07a:	d505      	bpl.n	800e088 <__sflush_r+0x44>
 800e07c:	6863      	ldr	r3, [r4, #4]
 800e07e:	1ad2      	subs	r2, r2, r3
 800e080:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e082:	b10b      	cbz	r3, 800e088 <__sflush_r+0x44>
 800e084:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e086:	1ad2      	subs	r2, r2, r3
 800e088:	2300      	movs	r3, #0
 800e08a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e08c:	6a21      	ldr	r1, [r4, #32]
 800e08e:	4628      	mov	r0, r5
 800e090:	47b0      	blx	r6
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	89a3      	ldrh	r3, [r4, #12]
 800e096:	d106      	bne.n	800e0a6 <__sflush_r+0x62>
 800e098:	6829      	ldr	r1, [r5, #0]
 800e09a:	291d      	cmp	r1, #29
 800e09c:	d82b      	bhi.n	800e0f6 <__sflush_r+0xb2>
 800e09e:	4a2a      	ldr	r2, [pc, #168]	@ (800e148 <__sflush_r+0x104>)
 800e0a0:	410a      	asrs	r2, r1
 800e0a2:	07d6      	lsls	r6, r2, #31
 800e0a4:	d427      	bmi.n	800e0f6 <__sflush_r+0xb2>
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	6062      	str	r2, [r4, #4]
 800e0aa:	04d9      	lsls	r1, r3, #19
 800e0ac:	6922      	ldr	r2, [r4, #16]
 800e0ae:	6022      	str	r2, [r4, #0]
 800e0b0:	d504      	bpl.n	800e0bc <__sflush_r+0x78>
 800e0b2:	1c42      	adds	r2, r0, #1
 800e0b4:	d101      	bne.n	800e0ba <__sflush_r+0x76>
 800e0b6:	682b      	ldr	r3, [r5, #0]
 800e0b8:	b903      	cbnz	r3, 800e0bc <__sflush_r+0x78>
 800e0ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800e0bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0be:	602f      	str	r7, [r5, #0]
 800e0c0:	b1b9      	cbz	r1, 800e0f2 <__sflush_r+0xae>
 800e0c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0c6:	4299      	cmp	r1, r3
 800e0c8:	d002      	beq.n	800e0d0 <__sflush_r+0x8c>
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	f7ff fbd4 	bl	800d878 <_free_r>
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0d4:	e00d      	b.n	800e0f2 <__sflush_r+0xae>
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	4628      	mov	r0, r5
 800e0da:	47b0      	blx	r6
 800e0dc:	4602      	mov	r2, r0
 800e0de:	1c50      	adds	r0, r2, #1
 800e0e0:	d1c9      	bne.n	800e076 <__sflush_r+0x32>
 800e0e2:	682b      	ldr	r3, [r5, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d0c6      	beq.n	800e076 <__sflush_r+0x32>
 800e0e8:	2b1d      	cmp	r3, #29
 800e0ea:	d001      	beq.n	800e0f0 <__sflush_r+0xac>
 800e0ec:	2b16      	cmp	r3, #22
 800e0ee:	d11e      	bne.n	800e12e <__sflush_r+0xea>
 800e0f0:	602f      	str	r7, [r5, #0]
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	e022      	b.n	800e13c <__sflush_r+0xf8>
 800e0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0fa:	b21b      	sxth	r3, r3
 800e0fc:	e01b      	b.n	800e136 <__sflush_r+0xf2>
 800e0fe:	690f      	ldr	r7, [r1, #16]
 800e100:	2f00      	cmp	r7, #0
 800e102:	d0f6      	beq.n	800e0f2 <__sflush_r+0xae>
 800e104:	0793      	lsls	r3, r2, #30
 800e106:	680e      	ldr	r6, [r1, #0]
 800e108:	bf08      	it	eq
 800e10a:	694b      	ldreq	r3, [r1, #20]
 800e10c:	600f      	str	r7, [r1, #0]
 800e10e:	bf18      	it	ne
 800e110:	2300      	movne	r3, #0
 800e112:	eba6 0807 	sub.w	r8, r6, r7
 800e116:	608b      	str	r3, [r1, #8]
 800e118:	f1b8 0f00 	cmp.w	r8, #0
 800e11c:	dde9      	ble.n	800e0f2 <__sflush_r+0xae>
 800e11e:	6a21      	ldr	r1, [r4, #32]
 800e120:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e122:	4643      	mov	r3, r8
 800e124:	463a      	mov	r2, r7
 800e126:	4628      	mov	r0, r5
 800e128:	47b0      	blx	r6
 800e12a:	2800      	cmp	r0, #0
 800e12c:	dc08      	bgt.n	800e140 <__sflush_r+0xfc>
 800e12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e136:	81a3      	strh	r3, [r4, #12]
 800e138:	f04f 30ff 	mov.w	r0, #4294967295
 800e13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e140:	4407      	add	r7, r0
 800e142:	eba8 0800 	sub.w	r8, r8, r0
 800e146:	e7e7      	b.n	800e118 <__sflush_r+0xd4>
 800e148:	dfbffffe 	.word	0xdfbffffe

0800e14c <_fflush_r>:
 800e14c:	b538      	push	{r3, r4, r5, lr}
 800e14e:	690b      	ldr	r3, [r1, #16]
 800e150:	4605      	mov	r5, r0
 800e152:	460c      	mov	r4, r1
 800e154:	b913      	cbnz	r3, 800e15c <_fflush_r+0x10>
 800e156:	2500      	movs	r5, #0
 800e158:	4628      	mov	r0, r5
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	b118      	cbz	r0, 800e166 <_fflush_r+0x1a>
 800e15e:	6a03      	ldr	r3, [r0, #32]
 800e160:	b90b      	cbnz	r3, 800e166 <_fflush_r+0x1a>
 800e162:	f7ff fa47 	bl	800d5f4 <__sinit>
 800e166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d0f3      	beq.n	800e156 <_fflush_r+0xa>
 800e16e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e170:	07d0      	lsls	r0, r2, #31
 800e172:	d404      	bmi.n	800e17e <_fflush_r+0x32>
 800e174:	0599      	lsls	r1, r3, #22
 800e176:	d402      	bmi.n	800e17e <_fflush_r+0x32>
 800e178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e17a:	f7ff fb4e 	bl	800d81a <__retarget_lock_acquire_recursive>
 800e17e:	4628      	mov	r0, r5
 800e180:	4621      	mov	r1, r4
 800e182:	f7ff ff5f 	bl	800e044 <__sflush_r>
 800e186:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e188:	07da      	lsls	r2, r3, #31
 800e18a:	4605      	mov	r5, r0
 800e18c:	d4e4      	bmi.n	800e158 <_fflush_r+0xc>
 800e18e:	89a3      	ldrh	r3, [r4, #12]
 800e190:	059b      	lsls	r3, r3, #22
 800e192:	d4e1      	bmi.n	800e158 <_fflush_r+0xc>
 800e194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e196:	f7ff fb41 	bl	800d81c <__retarget_lock_release_recursive>
 800e19a:	e7dd      	b.n	800e158 <_fflush_r+0xc>

0800e19c <fiprintf>:
 800e19c:	b40e      	push	{r1, r2, r3}
 800e19e:	b503      	push	{r0, r1, lr}
 800e1a0:	4601      	mov	r1, r0
 800e1a2:	ab03      	add	r3, sp, #12
 800e1a4:	4805      	ldr	r0, [pc, #20]	@ (800e1bc <fiprintf+0x20>)
 800e1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1aa:	6800      	ldr	r0, [r0, #0]
 800e1ac:	9301      	str	r3, [sp, #4]
 800e1ae:	f000 f88f 	bl	800e2d0 <_vfiprintf_r>
 800e1b2:	b002      	add	sp, #8
 800e1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1b8:	b003      	add	sp, #12
 800e1ba:	4770      	bx	lr
 800e1bc:	20000064 	.word	0x20000064

0800e1c0 <memmove>:
 800e1c0:	4288      	cmp	r0, r1
 800e1c2:	b510      	push	{r4, lr}
 800e1c4:	eb01 0402 	add.w	r4, r1, r2
 800e1c8:	d902      	bls.n	800e1d0 <memmove+0x10>
 800e1ca:	4284      	cmp	r4, r0
 800e1cc:	4623      	mov	r3, r4
 800e1ce:	d807      	bhi.n	800e1e0 <memmove+0x20>
 800e1d0:	1e43      	subs	r3, r0, #1
 800e1d2:	42a1      	cmp	r1, r4
 800e1d4:	d008      	beq.n	800e1e8 <memmove+0x28>
 800e1d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1de:	e7f8      	b.n	800e1d2 <memmove+0x12>
 800e1e0:	4402      	add	r2, r0
 800e1e2:	4601      	mov	r1, r0
 800e1e4:	428a      	cmp	r2, r1
 800e1e6:	d100      	bne.n	800e1ea <memmove+0x2a>
 800e1e8:	bd10      	pop	{r4, pc}
 800e1ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1f2:	e7f7      	b.n	800e1e4 <memmove+0x24>

0800e1f4 <_sbrk_r>:
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	4d06      	ldr	r5, [pc, #24]	@ (800e210 <_sbrk_r+0x1c>)
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	4608      	mov	r0, r1
 800e1fe:	602b      	str	r3, [r5, #0]
 800e200:	f7f6 fd2e 	bl	8004c60 <_sbrk>
 800e204:	1c43      	adds	r3, r0, #1
 800e206:	d102      	bne.n	800e20e <_sbrk_r+0x1a>
 800e208:	682b      	ldr	r3, [r5, #0]
 800e20a:	b103      	cbz	r3, 800e20e <_sbrk_r+0x1a>
 800e20c:	6023      	str	r3, [r4, #0]
 800e20e:	bd38      	pop	{r3, r4, r5, pc}
 800e210:	20004cfc 	.word	0x20004cfc

0800e214 <abort>:
 800e214:	b508      	push	{r3, lr}
 800e216:	2006      	movs	r0, #6
 800e218:	f000 fa2e 	bl	800e678 <raise>
 800e21c:	2001      	movs	r0, #1
 800e21e:	f7f6 fca7 	bl	8004b70 <_exit>

0800e222 <_realloc_r>:
 800e222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e226:	4680      	mov	r8, r0
 800e228:	4615      	mov	r5, r2
 800e22a:	460c      	mov	r4, r1
 800e22c:	b921      	cbnz	r1, 800e238 <_realloc_r+0x16>
 800e22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e232:	4611      	mov	r1, r2
 800e234:	f7ff bb94 	b.w	800d960 <_malloc_r>
 800e238:	b92a      	cbnz	r2, 800e246 <_realloc_r+0x24>
 800e23a:	f7ff fb1d 	bl	800d878 <_free_r>
 800e23e:	2400      	movs	r4, #0
 800e240:	4620      	mov	r0, r4
 800e242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e246:	f000 fa33 	bl	800e6b0 <_malloc_usable_size_r>
 800e24a:	4285      	cmp	r5, r0
 800e24c:	4606      	mov	r6, r0
 800e24e:	d802      	bhi.n	800e256 <_realloc_r+0x34>
 800e250:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e254:	d8f4      	bhi.n	800e240 <_realloc_r+0x1e>
 800e256:	4629      	mov	r1, r5
 800e258:	4640      	mov	r0, r8
 800e25a:	f7ff fb81 	bl	800d960 <_malloc_r>
 800e25e:	4607      	mov	r7, r0
 800e260:	2800      	cmp	r0, #0
 800e262:	d0ec      	beq.n	800e23e <_realloc_r+0x1c>
 800e264:	42b5      	cmp	r5, r6
 800e266:	462a      	mov	r2, r5
 800e268:	4621      	mov	r1, r4
 800e26a:	bf28      	it	cs
 800e26c:	4632      	movcs	r2, r6
 800e26e:	f7ff fad6 	bl	800d81e <memcpy>
 800e272:	4621      	mov	r1, r4
 800e274:	4640      	mov	r0, r8
 800e276:	f7ff faff 	bl	800d878 <_free_r>
 800e27a:	463c      	mov	r4, r7
 800e27c:	e7e0      	b.n	800e240 <_realloc_r+0x1e>

0800e27e <__sfputc_r>:
 800e27e:	6893      	ldr	r3, [r2, #8]
 800e280:	3b01      	subs	r3, #1
 800e282:	2b00      	cmp	r3, #0
 800e284:	b410      	push	{r4}
 800e286:	6093      	str	r3, [r2, #8]
 800e288:	da08      	bge.n	800e29c <__sfputc_r+0x1e>
 800e28a:	6994      	ldr	r4, [r2, #24]
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	db01      	blt.n	800e294 <__sfputc_r+0x16>
 800e290:	290a      	cmp	r1, #10
 800e292:	d103      	bne.n	800e29c <__sfputc_r+0x1e>
 800e294:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e298:	f000 b932 	b.w	800e500 <__swbuf_r>
 800e29c:	6813      	ldr	r3, [r2, #0]
 800e29e:	1c58      	adds	r0, r3, #1
 800e2a0:	6010      	str	r0, [r2, #0]
 800e2a2:	7019      	strb	r1, [r3, #0]
 800e2a4:	4608      	mov	r0, r1
 800e2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <__sfputs_r>:
 800e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	460f      	mov	r7, r1
 800e2b2:	4614      	mov	r4, r2
 800e2b4:	18d5      	adds	r5, r2, r3
 800e2b6:	42ac      	cmp	r4, r5
 800e2b8:	d101      	bne.n	800e2be <__sfputs_r+0x12>
 800e2ba:	2000      	movs	r0, #0
 800e2bc:	e007      	b.n	800e2ce <__sfputs_r+0x22>
 800e2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2c2:	463a      	mov	r2, r7
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f7ff ffda 	bl	800e27e <__sfputc_r>
 800e2ca:	1c43      	adds	r3, r0, #1
 800e2cc:	d1f3      	bne.n	800e2b6 <__sfputs_r+0xa>
 800e2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2d0 <_vfiprintf_r>:
 800e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d4:	460d      	mov	r5, r1
 800e2d6:	b09d      	sub	sp, #116	@ 0x74
 800e2d8:	4614      	mov	r4, r2
 800e2da:	4698      	mov	r8, r3
 800e2dc:	4606      	mov	r6, r0
 800e2de:	b118      	cbz	r0, 800e2e8 <_vfiprintf_r+0x18>
 800e2e0:	6a03      	ldr	r3, [r0, #32]
 800e2e2:	b90b      	cbnz	r3, 800e2e8 <_vfiprintf_r+0x18>
 800e2e4:	f7ff f986 	bl	800d5f4 <__sinit>
 800e2e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2ea:	07d9      	lsls	r1, r3, #31
 800e2ec:	d405      	bmi.n	800e2fa <_vfiprintf_r+0x2a>
 800e2ee:	89ab      	ldrh	r3, [r5, #12]
 800e2f0:	059a      	lsls	r2, r3, #22
 800e2f2:	d402      	bmi.n	800e2fa <_vfiprintf_r+0x2a>
 800e2f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2f6:	f7ff fa90 	bl	800d81a <__retarget_lock_acquire_recursive>
 800e2fa:	89ab      	ldrh	r3, [r5, #12]
 800e2fc:	071b      	lsls	r3, r3, #28
 800e2fe:	d501      	bpl.n	800e304 <_vfiprintf_r+0x34>
 800e300:	692b      	ldr	r3, [r5, #16]
 800e302:	b99b      	cbnz	r3, 800e32c <_vfiprintf_r+0x5c>
 800e304:	4629      	mov	r1, r5
 800e306:	4630      	mov	r0, r6
 800e308:	f000 f938 	bl	800e57c <__swsetup_r>
 800e30c:	b170      	cbz	r0, 800e32c <_vfiprintf_r+0x5c>
 800e30e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e310:	07dc      	lsls	r4, r3, #31
 800e312:	d504      	bpl.n	800e31e <_vfiprintf_r+0x4e>
 800e314:	f04f 30ff 	mov.w	r0, #4294967295
 800e318:	b01d      	add	sp, #116	@ 0x74
 800e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31e:	89ab      	ldrh	r3, [r5, #12]
 800e320:	0598      	lsls	r0, r3, #22
 800e322:	d4f7      	bmi.n	800e314 <_vfiprintf_r+0x44>
 800e324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e326:	f7ff fa79 	bl	800d81c <__retarget_lock_release_recursive>
 800e32a:	e7f3      	b.n	800e314 <_vfiprintf_r+0x44>
 800e32c:	2300      	movs	r3, #0
 800e32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e330:	2320      	movs	r3, #32
 800e332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e336:	f8cd 800c 	str.w	r8, [sp, #12]
 800e33a:	2330      	movs	r3, #48	@ 0x30
 800e33c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e4ec <_vfiprintf_r+0x21c>
 800e340:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e344:	f04f 0901 	mov.w	r9, #1
 800e348:	4623      	mov	r3, r4
 800e34a:	469a      	mov	sl, r3
 800e34c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e350:	b10a      	cbz	r2, 800e356 <_vfiprintf_r+0x86>
 800e352:	2a25      	cmp	r2, #37	@ 0x25
 800e354:	d1f9      	bne.n	800e34a <_vfiprintf_r+0x7a>
 800e356:	ebba 0b04 	subs.w	fp, sl, r4
 800e35a:	d00b      	beq.n	800e374 <_vfiprintf_r+0xa4>
 800e35c:	465b      	mov	r3, fp
 800e35e:	4622      	mov	r2, r4
 800e360:	4629      	mov	r1, r5
 800e362:	4630      	mov	r0, r6
 800e364:	f7ff ffa2 	bl	800e2ac <__sfputs_r>
 800e368:	3001      	adds	r0, #1
 800e36a:	f000 80a7 	beq.w	800e4bc <_vfiprintf_r+0x1ec>
 800e36e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e370:	445a      	add	r2, fp
 800e372:	9209      	str	r2, [sp, #36]	@ 0x24
 800e374:	f89a 3000 	ldrb.w	r3, [sl]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	f000 809f 	beq.w	800e4bc <_vfiprintf_r+0x1ec>
 800e37e:	2300      	movs	r3, #0
 800e380:	f04f 32ff 	mov.w	r2, #4294967295
 800e384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e388:	f10a 0a01 	add.w	sl, sl, #1
 800e38c:	9304      	str	r3, [sp, #16]
 800e38e:	9307      	str	r3, [sp, #28]
 800e390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e394:	931a      	str	r3, [sp, #104]	@ 0x68
 800e396:	4654      	mov	r4, sl
 800e398:	2205      	movs	r2, #5
 800e39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e39e:	4853      	ldr	r0, [pc, #332]	@ (800e4ec <_vfiprintf_r+0x21c>)
 800e3a0:	f7f1 ff36 	bl	8000210 <memchr>
 800e3a4:	9a04      	ldr	r2, [sp, #16]
 800e3a6:	b9d8      	cbnz	r0, 800e3e0 <_vfiprintf_r+0x110>
 800e3a8:	06d1      	lsls	r1, r2, #27
 800e3aa:	bf44      	itt	mi
 800e3ac:	2320      	movmi	r3, #32
 800e3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3b2:	0713      	lsls	r3, r2, #28
 800e3b4:	bf44      	itt	mi
 800e3b6:	232b      	movmi	r3, #43	@ 0x2b
 800e3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e3c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3c2:	d015      	beq.n	800e3f0 <_vfiprintf_r+0x120>
 800e3c4:	9a07      	ldr	r2, [sp, #28]
 800e3c6:	4654      	mov	r4, sl
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	f04f 0c0a 	mov.w	ip, #10
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3d4:	3b30      	subs	r3, #48	@ 0x30
 800e3d6:	2b09      	cmp	r3, #9
 800e3d8:	d94b      	bls.n	800e472 <_vfiprintf_r+0x1a2>
 800e3da:	b1b0      	cbz	r0, 800e40a <_vfiprintf_r+0x13a>
 800e3dc:	9207      	str	r2, [sp, #28]
 800e3de:	e014      	b.n	800e40a <_vfiprintf_r+0x13a>
 800e3e0:	eba0 0308 	sub.w	r3, r0, r8
 800e3e4:	fa09 f303 	lsl.w	r3, r9, r3
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	9304      	str	r3, [sp, #16]
 800e3ec:	46a2      	mov	sl, r4
 800e3ee:	e7d2      	b.n	800e396 <_vfiprintf_r+0xc6>
 800e3f0:	9b03      	ldr	r3, [sp, #12]
 800e3f2:	1d19      	adds	r1, r3, #4
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	9103      	str	r1, [sp, #12]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	bfbb      	ittet	lt
 800e3fc:	425b      	neglt	r3, r3
 800e3fe:	f042 0202 	orrlt.w	r2, r2, #2
 800e402:	9307      	strge	r3, [sp, #28]
 800e404:	9307      	strlt	r3, [sp, #28]
 800e406:	bfb8      	it	lt
 800e408:	9204      	strlt	r2, [sp, #16]
 800e40a:	7823      	ldrb	r3, [r4, #0]
 800e40c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e40e:	d10a      	bne.n	800e426 <_vfiprintf_r+0x156>
 800e410:	7863      	ldrb	r3, [r4, #1]
 800e412:	2b2a      	cmp	r3, #42	@ 0x2a
 800e414:	d132      	bne.n	800e47c <_vfiprintf_r+0x1ac>
 800e416:	9b03      	ldr	r3, [sp, #12]
 800e418:	1d1a      	adds	r2, r3, #4
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	9203      	str	r2, [sp, #12]
 800e41e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e422:	3402      	adds	r4, #2
 800e424:	9305      	str	r3, [sp, #20]
 800e426:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e4fc <_vfiprintf_r+0x22c>
 800e42a:	7821      	ldrb	r1, [r4, #0]
 800e42c:	2203      	movs	r2, #3
 800e42e:	4650      	mov	r0, sl
 800e430:	f7f1 feee 	bl	8000210 <memchr>
 800e434:	b138      	cbz	r0, 800e446 <_vfiprintf_r+0x176>
 800e436:	9b04      	ldr	r3, [sp, #16]
 800e438:	eba0 000a 	sub.w	r0, r0, sl
 800e43c:	2240      	movs	r2, #64	@ 0x40
 800e43e:	4082      	lsls	r2, r0
 800e440:	4313      	orrs	r3, r2
 800e442:	3401      	adds	r4, #1
 800e444:	9304      	str	r3, [sp, #16]
 800e446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e44a:	4829      	ldr	r0, [pc, #164]	@ (800e4f0 <_vfiprintf_r+0x220>)
 800e44c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e450:	2206      	movs	r2, #6
 800e452:	f7f1 fedd 	bl	8000210 <memchr>
 800e456:	2800      	cmp	r0, #0
 800e458:	d03f      	beq.n	800e4da <_vfiprintf_r+0x20a>
 800e45a:	4b26      	ldr	r3, [pc, #152]	@ (800e4f4 <_vfiprintf_r+0x224>)
 800e45c:	bb1b      	cbnz	r3, 800e4a6 <_vfiprintf_r+0x1d6>
 800e45e:	9b03      	ldr	r3, [sp, #12]
 800e460:	3307      	adds	r3, #7
 800e462:	f023 0307 	bic.w	r3, r3, #7
 800e466:	3308      	adds	r3, #8
 800e468:	9303      	str	r3, [sp, #12]
 800e46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e46c:	443b      	add	r3, r7
 800e46e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e470:	e76a      	b.n	800e348 <_vfiprintf_r+0x78>
 800e472:	fb0c 3202 	mla	r2, ip, r2, r3
 800e476:	460c      	mov	r4, r1
 800e478:	2001      	movs	r0, #1
 800e47a:	e7a8      	b.n	800e3ce <_vfiprintf_r+0xfe>
 800e47c:	2300      	movs	r3, #0
 800e47e:	3401      	adds	r4, #1
 800e480:	9305      	str	r3, [sp, #20]
 800e482:	4619      	mov	r1, r3
 800e484:	f04f 0c0a 	mov.w	ip, #10
 800e488:	4620      	mov	r0, r4
 800e48a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e48e:	3a30      	subs	r2, #48	@ 0x30
 800e490:	2a09      	cmp	r2, #9
 800e492:	d903      	bls.n	800e49c <_vfiprintf_r+0x1cc>
 800e494:	2b00      	cmp	r3, #0
 800e496:	d0c6      	beq.n	800e426 <_vfiprintf_r+0x156>
 800e498:	9105      	str	r1, [sp, #20]
 800e49a:	e7c4      	b.n	800e426 <_vfiprintf_r+0x156>
 800e49c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e7f0      	b.n	800e488 <_vfiprintf_r+0x1b8>
 800e4a6:	ab03      	add	r3, sp, #12
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	462a      	mov	r2, r5
 800e4ac:	4b12      	ldr	r3, [pc, #72]	@ (800e4f8 <_vfiprintf_r+0x228>)
 800e4ae:	a904      	add	r1, sp, #16
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f3af 8000 	nop.w
 800e4b6:	4607      	mov	r7, r0
 800e4b8:	1c78      	adds	r0, r7, #1
 800e4ba:	d1d6      	bne.n	800e46a <_vfiprintf_r+0x19a>
 800e4bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4be:	07d9      	lsls	r1, r3, #31
 800e4c0:	d405      	bmi.n	800e4ce <_vfiprintf_r+0x1fe>
 800e4c2:	89ab      	ldrh	r3, [r5, #12]
 800e4c4:	059a      	lsls	r2, r3, #22
 800e4c6:	d402      	bmi.n	800e4ce <_vfiprintf_r+0x1fe>
 800e4c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4ca:	f7ff f9a7 	bl	800d81c <__retarget_lock_release_recursive>
 800e4ce:	89ab      	ldrh	r3, [r5, #12]
 800e4d0:	065b      	lsls	r3, r3, #25
 800e4d2:	f53f af1f 	bmi.w	800e314 <_vfiprintf_r+0x44>
 800e4d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4d8:	e71e      	b.n	800e318 <_vfiprintf_r+0x48>
 800e4da:	ab03      	add	r3, sp, #12
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	462a      	mov	r2, r5
 800e4e0:	4b05      	ldr	r3, [pc, #20]	@ (800e4f8 <_vfiprintf_r+0x228>)
 800e4e2:	a904      	add	r1, sp, #16
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	f7ff fc8d 	bl	800de04 <_printf_i>
 800e4ea:	e7e4      	b.n	800e4b6 <_vfiprintf_r+0x1e6>
 800e4ec:	0801cd27 	.word	0x0801cd27
 800e4f0:	0801cd31 	.word	0x0801cd31
 800e4f4:	00000000 	.word	0x00000000
 800e4f8:	0800e2ad 	.word	0x0800e2ad
 800e4fc:	0801cd2d 	.word	0x0801cd2d

0800e500 <__swbuf_r>:
 800e500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e502:	460e      	mov	r6, r1
 800e504:	4614      	mov	r4, r2
 800e506:	4605      	mov	r5, r0
 800e508:	b118      	cbz	r0, 800e512 <__swbuf_r+0x12>
 800e50a:	6a03      	ldr	r3, [r0, #32]
 800e50c:	b90b      	cbnz	r3, 800e512 <__swbuf_r+0x12>
 800e50e:	f7ff f871 	bl	800d5f4 <__sinit>
 800e512:	69a3      	ldr	r3, [r4, #24]
 800e514:	60a3      	str	r3, [r4, #8]
 800e516:	89a3      	ldrh	r3, [r4, #12]
 800e518:	071a      	lsls	r2, r3, #28
 800e51a:	d501      	bpl.n	800e520 <__swbuf_r+0x20>
 800e51c:	6923      	ldr	r3, [r4, #16]
 800e51e:	b943      	cbnz	r3, 800e532 <__swbuf_r+0x32>
 800e520:	4621      	mov	r1, r4
 800e522:	4628      	mov	r0, r5
 800e524:	f000 f82a 	bl	800e57c <__swsetup_r>
 800e528:	b118      	cbz	r0, 800e532 <__swbuf_r+0x32>
 800e52a:	f04f 37ff 	mov.w	r7, #4294967295
 800e52e:	4638      	mov	r0, r7
 800e530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e532:	6823      	ldr	r3, [r4, #0]
 800e534:	6922      	ldr	r2, [r4, #16]
 800e536:	1a98      	subs	r0, r3, r2
 800e538:	6963      	ldr	r3, [r4, #20]
 800e53a:	b2f6      	uxtb	r6, r6
 800e53c:	4283      	cmp	r3, r0
 800e53e:	4637      	mov	r7, r6
 800e540:	dc05      	bgt.n	800e54e <__swbuf_r+0x4e>
 800e542:	4621      	mov	r1, r4
 800e544:	4628      	mov	r0, r5
 800e546:	f7ff fe01 	bl	800e14c <_fflush_r>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	d1ed      	bne.n	800e52a <__swbuf_r+0x2a>
 800e54e:	68a3      	ldr	r3, [r4, #8]
 800e550:	3b01      	subs	r3, #1
 800e552:	60a3      	str	r3, [r4, #8]
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	1c5a      	adds	r2, r3, #1
 800e558:	6022      	str	r2, [r4, #0]
 800e55a:	701e      	strb	r6, [r3, #0]
 800e55c:	6962      	ldr	r2, [r4, #20]
 800e55e:	1c43      	adds	r3, r0, #1
 800e560:	429a      	cmp	r2, r3
 800e562:	d004      	beq.n	800e56e <__swbuf_r+0x6e>
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	07db      	lsls	r3, r3, #31
 800e568:	d5e1      	bpl.n	800e52e <__swbuf_r+0x2e>
 800e56a:	2e0a      	cmp	r6, #10
 800e56c:	d1df      	bne.n	800e52e <__swbuf_r+0x2e>
 800e56e:	4621      	mov	r1, r4
 800e570:	4628      	mov	r0, r5
 800e572:	f7ff fdeb 	bl	800e14c <_fflush_r>
 800e576:	2800      	cmp	r0, #0
 800e578:	d0d9      	beq.n	800e52e <__swbuf_r+0x2e>
 800e57a:	e7d6      	b.n	800e52a <__swbuf_r+0x2a>

0800e57c <__swsetup_r>:
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	4b29      	ldr	r3, [pc, #164]	@ (800e624 <__swsetup_r+0xa8>)
 800e580:	4605      	mov	r5, r0
 800e582:	6818      	ldr	r0, [r3, #0]
 800e584:	460c      	mov	r4, r1
 800e586:	b118      	cbz	r0, 800e590 <__swsetup_r+0x14>
 800e588:	6a03      	ldr	r3, [r0, #32]
 800e58a:	b90b      	cbnz	r3, 800e590 <__swsetup_r+0x14>
 800e58c:	f7ff f832 	bl	800d5f4 <__sinit>
 800e590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e594:	0719      	lsls	r1, r3, #28
 800e596:	d422      	bmi.n	800e5de <__swsetup_r+0x62>
 800e598:	06da      	lsls	r2, r3, #27
 800e59a:	d407      	bmi.n	800e5ac <__swsetup_r+0x30>
 800e59c:	2209      	movs	r2, #9
 800e59e:	602a      	str	r2, [r5, #0]
 800e5a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5a4:	81a3      	strh	r3, [r4, #12]
 800e5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e5aa:	e033      	b.n	800e614 <__swsetup_r+0x98>
 800e5ac:	0758      	lsls	r0, r3, #29
 800e5ae:	d512      	bpl.n	800e5d6 <__swsetup_r+0x5a>
 800e5b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5b2:	b141      	cbz	r1, 800e5c6 <__swsetup_r+0x4a>
 800e5b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5b8:	4299      	cmp	r1, r3
 800e5ba:	d002      	beq.n	800e5c2 <__swsetup_r+0x46>
 800e5bc:	4628      	mov	r0, r5
 800e5be:	f7ff f95b 	bl	800d878 <_free_r>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5c6:	89a3      	ldrh	r3, [r4, #12]
 800e5c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e5cc:	81a3      	strh	r3, [r4, #12]
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	6063      	str	r3, [r4, #4]
 800e5d2:	6923      	ldr	r3, [r4, #16]
 800e5d4:	6023      	str	r3, [r4, #0]
 800e5d6:	89a3      	ldrh	r3, [r4, #12]
 800e5d8:	f043 0308 	orr.w	r3, r3, #8
 800e5dc:	81a3      	strh	r3, [r4, #12]
 800e5de:	6923      	ldr	r3, [r4, #16]
 800e5e0:	b94b      	cbnz	r3, 800e5f6 <__swsetup_r+0x7a>
 800e5e2:	89a3      	ldrh	r3, [r4, #12]
 800e5e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e5e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5ec:	d003      	beq.n	800e5f6 <__swsetup_r+0x7a>
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	4628      	mov	r0, r5
 800e5f2:	f000 f88b 	bl	800e70c <__smakebuf_r>
 800e5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5fa:	f013 0201 	ands.w	r2, r3, #1
 800e5fe:	d00a      	beq.n	800e616 <__swsetup_r+0x9a>
 800e600:	2200      	movs	r2, #0
 800e602:	60a2      	str	r2, [r4, #8]
 800e604:	6962      	ldr	r2, [r4, #20]
 800e606:	4252      	negs	r2, r2
 800e608:	61a2      	str	r2, [r4, #24]
 800e60a:	6922      	ldr	r2, [r4, #16]
 800e60c:	b942      	cbnz	r2, 800e620 <__swsetup_r+0xa4>
 800e60e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e612:	d1c5      	bne.n	800e5a0 <__swsetup_r+0x24>
 800e614:	bd38      	pop	{r3, r4, r5, pc}
 800e616:	0799      	lsls	r1, r3, #30
 800e618:	bf58      	it	pl
 800e61a:	6962      	ldrpl	r2, [r4, #20]
 800e61c:	60a2      	str	r2, [r4, #8]
 800e61e:	e7f4      	b.n	800e60a <__swsetup_r+0x8e>
 800e620:	2000      	movs	r0, #0
 800e622:	e7f7      	b.n	800e614 <__swsetup_r+0x98>
 800e624:	20000064 	.word	0x20000064

0800e628 <_raise_r>:
 800e628:	291f      	cmp	r1, #31
 800e62a:	b538      	push	{r3, r4, r5, lr}
 800e62c:	4605      	mov	r5, r0
 800e62e:	460c      	mov	r4, r1
 800e630:	d904      	bls.n	800e63c <_raise_r+0x14>
 800e632:	2316      	movs	r3, #22
 800e634:	6003      	str	r3, [r0, #0]
 800e636:	f04f 30ff 	mov.w	r0, #4294967295
 800e63a:	bd38      	pop	{r3, r4, r5, pc}
 800e63c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e63e:	b112      	cbz	r2, 800e646 <_raise_r+0x1e>
 800e640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e644:	b94b      	cbnz	r3, 800e65a <_raise_r+0x32>
 800e646:	4628      	mov	r0, r5
 800e648:	f000 f830 	bl	800e6ac <_getpid_r>
 800e64c:	4622      	mov	r2, r4
 800e64e:	4601      	mov	r1, r0
 800e650:	4628      	mov	r0, r5
 800e652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e656:	f000 b817 	b.w	800e688 <_kill_r>
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d00a      	beq.n	800e674 <_raise_r+0x4c>
 800e65e:	1c59      	adds	r1, r3, #1
 800e660:	d103      	bne.n	800e66a <_raise_r+0x42>
 800e662:	2316      	movs	r3, #22
 800e664:	6003      	str	r3, [r0, #0]
 800e666:	2001      	movs	r0, #1
 800e668:	e7e7      	b.n	800e63a <_raise_r+0x12>
 800e66a:	2100      	movs	r1, #0
 800e66c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e670:	4620      	mov	r0, r4
 800e672:	4798      	blx	r3
 800e674:	2000      	movs	r0, #0
 800e676:	e7e0      	b.n	800e63a <_raise_r+0x12>

0800e678 <raise>:
 800e678:	4b02      	ldr	r3, [pc, #8]	@ (800e684 <raise+0xc>)
 800e67a:	4601      	mov	r1, r0
 800e67c:	6818      	ldr	r0, [r3, #0]
 800e67e:	f7ff bfd3 	b.w	800e628 <_raise_r>
 800e682:	bf00      	nop
 800e684:	20000064 	.word	0x20000064

0800e688 <_kill_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4d07      	ldr	r5, [pc, #28]	@ (800e6a8 <_kill_r+0x20>)
 800e68c:	2300      	movs	r3, #0
 800e68e:	4604      	mov	r4, r0
 800e690:	4608      	mov	r0, r1
 800e692:	4611      	mov	r1, r2
 800e694:	602b      	str	r3, [r5, #0]
 800e696:	f7f6 fa5b 	bl	8004b50 <_kill>
 800e69a:	1c43      	adds	r3, r0, #1
 800e69c:	d102      	bne.n	800e6a4 <_kill_r+0x1c>
 800e69e:	682b      	ldr	r3, [r5, #0]
 800e6a0:	b103      	cbz	r3, 800e6a4 <_kill_r+0x1c>
 800e6a2:	6023      	str	r3, [r4, #0]
 800e6a4:	bd38      	pop	{r3, r4, r5, pc}
 800e6a6:	bf00      	nop
 800e6a8:	20004cfc 	.word	0x20004cfc

0800e6ac <_getpid_r>:
 800e6ac:	f7f6 ba48 	b.w	8004b40 <_getpid>

0800e6b0 <_malloc_usable_size_r>:
 800e6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6b4:	1f18      	subs	r0, r3, #4
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	bfbc      	itt	lt
 800e6ba:	580b      	ldrlt	r3, [r1, r0]
 800e6bc:	18c0      	addlt	r0, r0, r3
 800e6be:	4770      	bx	lr

0800e6c0 <__swhatbuf_r>:
 800e6c0:	b570      	push	{r4, r5, r6, lr}
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6c8:	2900      	cmp	r1, #0
 800e6ca:	b096      	sub	sp, #88	@ 0x58
 800e6cc:	4615      	mov	r5, r2
 800e6ce:	461e      	mov	r6, r3
 800e6d0:	da0d      	bge.n	800e6ee <__swhatbuf_r+0x2e>
 800e6d2:	89a3      	ldrh	r3, [r4, #12]
 800e6d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e6d8:	f04f 0100 	mov.w	r1, #0
 800e6dc:	bf14      	ite	ne
 800e6de:	2340      	movne	r3, #64	@ 0x40
 800e6e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	6031      	str	r1, [r6, #0]
 800e6e8:	602b      	str	r3, [r5, #0]
 800e6ea:	b016      	add	sp, #88	@ 0x58
 800e6ec:	bd70      	pop	{r4, r5, r6, pc}
 800e6ee:	466a      	mov	r2, sp
 800e6f0:	f000 f848 	bl	800e784 <_fstat_r>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	dbec      	blt.n	800e6d2 <__swhatbuf_r+0x12>
 800e6f8:	9901      	ldr	r1, [sp, #4]
 800e6fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e6fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e702:	4259      	negs	r1, r3
 800e704:	4159      	adcs	r1, r3
 800e706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e70a:	e7eb      	b.n	800e6e4 <__swhatbuf_r+0x24>

0800e70c <__smakebuf_r>:
 800e70c:	898b      	ldrh	r3, [r1, #12]
 800e70e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e710:	079d      	lsls	r5, r3, #30
 800e712:	4606      	mov	r6, r0
 800e714:	460c      	mov	r4, r1
 800e716:	d507      	bpl.n	800e728 <__smakebuf_r+0x1c>
 800e718:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e71c:	6023      	str	r3, [r4, #0]
 800e71e:	6123      	str	r3, [r4, #16]
 800e720:	2301      	movs	r3, #1
 800e722:	6163      	str	r3, [r4, #20]
 800e724:	b003      	add	sp, #12
 800e726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e728:	ab01      	add	r3, sp, #4
 800e72a:	466a      	mov	r2, sp
 800e72c:	f7ff ffc8 	bl	800e6c0 <__swhatbuf_r>
 800e730:	9f00      	ldr	r7, [sp, #0]
 800e732:	4605      	mov	r5, r0
 800e734:	4639      	mov	r1, r7
 800e736:	4630      	mov	r0, r6
 800e738:	f7ff f912 	bl	800d960 <_malloc_r>
 800e73c:	b948      	cbnz	r0, 800e752 <__smakebuf_r+0x46>
 800e73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e742:	059a      	lsls	r2, r3, #22
 800e744:	d4ee      	bmi.n	800e724 <__smakebuf_r+0x18>
 800e746:	f023 0303 	bic.w	r3, r3, #3
 800e74a:	f043 0302 	orr.w	r3, r3, #2
 800e74e:	81a3      	strh	r3, [r4, #12]
 800e750:	e7e2      	b.n	800e718 <__smakebuf_r+0xc>
 800e752:	89a3      	ldrh	r3, [r4, #12]
 800e754:	6020      	str	r0, [r4, #0]
 800e756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e75a:	81a3      	strh	r3, [r4, #12]
 800e75c:	9b01      	ldr	r3, [sp, #4]
 800e75e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e762:	b15b      	cbz	r3, 800e77c <__smakebuf_r+0x70>
 800e764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e768:	4630      	mov	r0, r6
 800e76a:	f000 f81d 	bl	800e7a8 <_isatty_r>
 800e76e:	b128      	cbz	r0, 800e77c <__smakebuf_r+0x70>
 800e770:	89a3      	ldrh	r3, [r4, #12]
 800e772:	f023 0303 	bic.w	r3, r3, #3
 800e776:	f043 0301 	orr.w	r3, r3, #1
 800e77a:	81a3      	strh	r3, [r4, #12]
 800e77c:	89a3      	ldrh	r3, [r4, #12]
 800e77e:	431d      	orrs	r5, r3
 800e780:	81a5      	strh	r5, [r4, #12]
 800e782:	e7cf      	b.n	800e724 <__smakebuf_r+0x18>

0800e784 <_fstat_r>:
 800e784:	b538      	push	{r3, r4, r5, lr}
 800e786:	4d07      	ldr	r5, [pc, #28]	@ (800e7a4 <_fstat_r+0x20>)
 800e788:	2300      	movs	r3, #0
 800e78a:	4604      	mov	r4, r0
 800e78c:	4608      	mov	r0, r1
 800e78e:	4611      	mov	r1, r2
 800e790:	602b      	str	r3, [r5, #0]
 800e792:	f7f6 fa3d 	bl	8004c10 <_fstat>
 800e796:	1c43      	adds	r3, r0, #1
 800e798:	d102      	bne.n	800e7a0 <_fstat_r+0x1c>
 800e79a:	682b      	ldr	r3, [r5, #0]
 800e79c:	b103      	cbz	r3, 800e7a0 <_fstat_r+0x1c>
 800e79e:	6023      	str	r3, [r4, #0]
 800e7a0:	bd38      	pop	{r3, r4, r5, pc}
 800e7a2:	bf00      	nop
 800e7a4:	20004cfc 	.word	0x20004cfc

0800e7a8 <_isatty_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4d06      	ldr	r5, [pc, #24]	@ (800e7c4 <_isatty_r+0x1c>)
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	4608      	mov	r0, r1
 800e7b2:	602b      	str	r3, [r5, #0]
 800e7b4:	f7f6 fa3c 	bl	8004c30 <_isatty>
 800e7b8:	1c43      	adds	r3, r0, #1
 800e7ba:	d102      	bne.n	800e7c2 <_isatty_r+0x1a>
 800e7bc:	682b      	ldr	r3, [r5, #0]
 800e7be:	b103      	cbz	r3, 800e7c2 <_isatty_r+0x1a>
 800e7c0:	6023      	str	r3, [r4, #0]
 800e7c2:	bd38      	pop	{r3, r4, r5, pc}
 800e7c4:	20004cfc 	.word	0x20004cfc

0800e7c8 <_init>:
 800e7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ca:	bf00      	nop
 800e7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ce:	bc08      	pop	{r3}
 800e7d0:	469e      	mov	lr, r3
 800e7d2:	4770      	bx	lr

0800e7d4 <_fini>:
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d6:	bf00      	nop
 800e7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7da:	bc08      	pop	{r3}
 800e7dc:	469e      	mov	lr, r3
 800e7de:	4770      	bx	lr
