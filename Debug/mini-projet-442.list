
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f60c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e58c  0800f7dc  0800f7dc  000107dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dd68  0801dd68  0001f0b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801dd68  0801dd68  0001ed68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dd70  0801dd70  0001f0b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dd70  0801dd70  0001ed70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dd74  0801dd74  0001ed74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0801dd78  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c70  200000b4  0801de2c  0001f0b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d24  0801de2c  0001fd24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f0b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000313bc  00000000  00000000  0001f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074da  00000000  00000000  000504a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002850  00000000  00000000  00057980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f15  00000000  00000000  0005a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003139d  00000000  00000000  0005c0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003640e  00000000  00000000  0008d482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119485  00000000  00000000  000c3890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dcd15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b364  00000000  00000000  001dcd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001e80bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f7c4 	.word	0x0800f7c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800f7c4 	.word	0x0800f7c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_ADC1_Init+0x9c>)
 8000d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dbe:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_ADC1_Init+0xa0>)
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dde:	f005 f82d 	bl	8005e3c <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de8:	f002 fc26 	bl	8003638 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dfe:	f005 f9c7 	bl	8006190 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e08:	f002 fc16 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000d0 	.word	0x200000d0
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	0f000001 	.word	0x0f000001

08000e20 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_ADC3_Init+0x9c>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <MX_ADC3_Init+0xa0>)
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e82:	f004 ffdb 	bl	8005e3c <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f002 fbd4 	bl	8003638 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e90:	2306      	movs	r3, #6
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000ea2:	f005 f975 	bl	8006190 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000eac:	f002 fbc4 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000118 	.word	0x20000118
 8000ebc:	40012200 	.word	0x40012200
 8000ec0:	0f000001 	.word	0x0f000001

08000ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d124      	bne.n	8000f30 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a29      	ldr	r2, [pc, #164]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	@ (8000f94 <HAL_ADC_MspInit+0xd0>)
 8000f2a:	f006 fa9d 	bl	8007468 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f2e:	e029      	b.n	8000f84 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_ADC_MspInit+0xd4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d124      	bne.n	8000f84 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f6a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <HAL_ADC_MspInit+0xd8>)
 8000f80:	f006 fa72 	bl	8007468 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	@ 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40012200 	.word	0x40012200
 8000f9c:	40021400 	.word	0x40021400

08000fa0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_DAC_Init+0x4c>)
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <MX_DAC_Init+0x50>)
 8000fb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <MX_DAC_Init+0x4c>)
 8000fb6:	f005 fc1d 	bl	80067f4 <HAL_DAC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fc0:	f002 fb3a 	bl	8003638 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <MX_DAC_Init+0x4c>)
 8000fd4:	f005 fc94 	bl	8006900 <HAL_DAC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fde:	f002 fb2b 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000160 	.word	0x20000160
 8000ff0:	40007400 	.word	0x40007400

08000ff4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a19      	ldr	r2, [pc, #100]	@ (8001078 <HAL_DAC_MspInit+0x84>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12b      	bne.n	800106e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <HAL_DAC_MspInit+0x88>)
 800101c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001020:	6413      	str	r3, [r2, #64]	@ 0x40
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <HAL_DAC_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001046:	2310      	movs	r3, #16
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104a:	2303      	movs	r3, #3
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4809      	ldr	r0, [pc, #36]	@ (8001080 <HAL_DAC_MspInit+0x8c>)
 800105a:	f006 fa05 	bl	8007468 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	210f      	movs	r1, #15
 8001062:	2036      	movs	r0, #54	@ 0x36
 8001064:	f005 fb9c 	bl	80067a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001068:	2036      	movs	r0, #54	@ 0x36
 800106a:	f005 fbb5 	bl	80067d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	@ 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40007400 	.word	0x40007400
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000

08001084 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 800108a:	4a16      	ldr	r2, [pc, #88]	@ (80010e4 <MX_DMA2D_Init+0x60>)
 800108c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010ba:	f005 fe39 	bl	8006d30 <HAL_DMA2D_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80010c4:	f002 fab8 	bl	8003638 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010c8:	2101      	movs	r1, #1
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010cc:	f006 f89e 	bl	800720c <HAL_DMA2D_ConfigLayer>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80010d6:	f002 faaf 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000174 	.word	0x20000174
 80010e4:	4002b000 	.word	0x4002b000

080010e8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <HAL_DMA2D_MspInit+0x44>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d113      	bne.n	8001122 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_DMA2D_MspInit+0x48>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <HAL_DMA2D_MspInit+0x48>)
 8001100:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_DMA2D_MspInit+0x48>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2105      	movs	r1, #5
 8001116:	205a      	movs	r0, #90	@ 0x5a
 8001118:	f005 fb42 	bl	80067a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800111c:	205a      	movs	r0, #90	@ 0x5a
 800111e:	f005 fb5b 	bl	80067d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	4002b000 	.word	0x4002b000
 8001130:	40023800 	.word	0x40023800

08001134 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_FMC_Init+0x98>)
 800114e:	4a20      	ldr	r2, [pc, #128]	@ (80011d0 <MX_FMC_Init+0x9c>)
 8001150:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001152:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <MX_FMC_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_FMC_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_FMC_Init+0x98>)
 8001160:	2204      	movs	r2, #4
 8001162:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_FMC_Init+0x98>)
 8001166:	2210      	movs	r2, #16
 8001168:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_FMC_Init+0x98>)
 800116c:	2240      	movs	r2, #64	@ 0x40
 800116e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001170:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <MX_FMC_Init+0x98>)
 8001172:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001176:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_FMC_Init+0x98>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <MX_FMC_Init+0x98>)
 8001180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001184:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_FMC_Init+0x98>)
 8001188:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_FMC_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001198:	2307      	movs	r3, #7
 800119a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80011a0:	2307      	movs	r3, #7
 80011a2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80011a4:	2303      	movs	r3, #3
 80011a6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_FMC_Init+0x98>)
 80011b6:	f009 fab1 	bl	800a71c <HAL_SDRAM_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80011c0:	f002 fa3a 	bl	8003638 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001b4 	.word	0x200001b4
 80011d0:	a0000140 	.word	0xa0000140

080011d4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011e8:	4b3a      	ldr	r3, [pc, #232]	@ (80012d4 <HAL_FMC_MspInit+0x100>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d16d      	bne.n	80012cc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80011f0:	4b38      	ldr	r3, [pc, #224]	@ (80012d4 <HAL_FMC_MspInit+0x100>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <HAL_FMC_MspInit+0x104>)
 80011f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fa:	4a37      	ldr	r2, [pc, #220]	@ (80012d8 <HAL_FMC_MspInit+0x104>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6393      	str	r3, [r2, #56]	@ 0x38
 8001202:	4b35      	ldr	r3, [pc, #212]	@ (80012d8 <HAL_FMC_MspInit+0x104>)
 8001204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800120e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001212:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001220:	230c      	movs	r3, #12
 8001222:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	482c      	ldr	r0, [pc, #176]	@ (80012dc <HAL_FMC_MspInit+0x108>)
 800122a:	f006 f91d 	bl	8007468 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800122e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001232:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001240:	230c      	movs	r3, #12
 8001242:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4825      	ldr	r0, [pc, #148]	@ (80012e0 <HAL_FMC_MspInit+0x10c>)
 800124a:	f006 f90d 	bl	8007468 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800124e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001252:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001260:	230c      	movs	r3, #12
 8001262:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	481e      	ldr	r0, [pc, #120]	@ (80012e4 <HAL_FMC_MspInit+0x110>)
 800126a:	f006 f8fd 	bl	8007468 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800126e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001272:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001280:	230c      	movs	r3, #12
 8001282:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4817      	ldr	r0, [pc, #92]	@ (80012e8 <HAL_FMC_MspInit+0x114>)
 800128a:	f006 f8ed 	bl	8007468 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800128e:	2328      	movs	r3, #40	@ 0x28
 8001290:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800129e:	230c      	movs	r3, #12
 80012a0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4811      	ldr	r0, [pc, #68]	@ (80012ec <HAL_FMC_MspInit+0x118>)
 80012a8:	f006 f8de 	bl	8007468 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80012ac:	2308      	movs	r3, #8
 80012ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012bc:	230c      	movs	r3, #12
 80012be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	480a      	ldr	r0, [pc, #40]	@ (80012f0 <HAL_FMC_MspInit+0x11c>)
 80012c6:	f006 f8cf 	bl	8007468 <HAL_GPIO_Init>
 80012ca:	e000      	b.n	80012ce <HAL_FMC_MspInit+0xfa>
    return;
 80012cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200001e8 	.word	0x200001e8
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021c00 	.word	0x40021c00
 80012f0:	40020800 	.word	0x40020800

080012f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012fc:	f7ff ff6a 	bl	80011d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <vApplicationGetIdleTaskMemory+0x2c>)
 8001318:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <vApplicationGetIdleTaskMemory+0x30>)
 800131e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2280      	movs	r2, #128	@ 0x80
 8001324:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200003c8 	.word	0x200003c8
 8001338:	20000468 	.word	0x20000468

0800133c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b0a6      	sub	sp, #152	@ 0x98
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 800134e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001352:	4618      	mov	r0, r3
 8001354:	f00a fdb9 	bl	800beca <osMutexCreate>
 8001358:	4603      	mov	r3, r0
 800135a:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <MX_FREERTOS_Init+0xe4>)
 800135c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800135e:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <MX_FREERTOS_Init+0xe8>)
 8001360:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001364:	461d      	mov	r5, r3
 8001366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800136e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001372:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f00a fd46 	bl	800be0a <osThreadCreate>
 800137e:	4603      	mov	r3, r0
 8001380:	4a29      	ldr	r2, [pc, #164]	@ (8001428 <MX_FREERTOS_Init+0xec>)
 8001382:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 8001384:	4b29      	ldr	r3, [pc, #164]	@ (800142c <MX_FREERTOS_Init+0xf0>)
 8001386:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800138a:	461d      	mov	r5, r3
 800138c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001390:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001398:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f00a fd33 	bl	800be0a <osThreadCreate>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <MX_FREERTOS_Init+0xf4>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 80013aa:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <MX_FREERTOS_Init+0xf8>)
 80013ac:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80013b0:	461d      	mov	r5, r3
 80013b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 80013be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00a fd20 	bl	800be0a <osThreadCreate>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001438 <MX_FREERTOS_Init+0xfc>)
 80013ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_FREERTOS_Init+0x100>)
 80013d2:	f107 0420 	add.w	r4, r7, #32
 80013d6:	461d      	mov	r5, r3
 80013d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00a fd0d 	bl	800be0a <osThreadCreate>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <MX_FREERTOS_Init+0x104>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <MX_FREERTOS_Init+0x108>)
 80013f8:	1d3c      	adds	r4, r7, #4
 80013fa:	461d      	mov	r5, r3
 80013fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001400:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001404:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f00a fcfc 	bl	800be0a <osThreadCreate>
 8001412:	4603      	mov	r3, r0
 8001414:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <MX_FREERTOS_Init+0x10c>)
 8001416:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001418:	bf00      	nop
 800141a:	3798      	adds	r7, #152	@ 0x98
 800141c:	46bd      	mov	sp, r7
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	200003c4 	.word	0x200003c4
 8001424:	0800f7e8 	.word	0x0800f7e8
 8001428:	200003b0 	.word	0x200003b0
 800142c:	0800f810 	.word	0x0800f810
 8001430:	200003b4 	.word	0x200003b4
 8001434:	0800f83c 	.word	0x0800f83c
 8001438:	200003b8 	.word	0x200003b8
 800143c:	0800f868 	.word	0x0800f868
 8001440:	200003bc 	.word	0x200003bc
 8001444:	0800f894 	.word	0x0800f894
 8001448:	200003c0 	.word	0x200003c0

0800144c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f00a fd24 	bl	800bea2 <osDelay>
 800145a:	e7fb      	b.n	8001454 <StartDefaultTask+0x8>

0800145c <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0d0      	sub	sp, #320	@ 0x140
 8001460:	af00      	add	r7, sp, #0
 8001462:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001466:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800146a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if (gameOver || gamePaused || !gameStarted) {
 800146c:	4bbc      	ldr	r3, [pc, #752]	@ (8001760 <StartDisplayTask+0x304>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d107      	bne.n	8001484 <StartDisplayTask+0x28>
 8001474:	4bbb      	ldr	r3, [pc, #748]	@ (8001764 <StartDisplayTask+0x308>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <StartDisplayTask+0x28>
 800147c:	4bba      	ldr	r3, [pc, #744]	@ (8001768 <StartDisplayTask+0x30c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d110      	bne.n	80014a6 <StartDisplayTask+0x4a>
      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001484:	4bb9      	ldr	r3, [pc, #740]	@ (800176c <StartDisplayTask+0x310>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	4618      	mov	r0, r3
 800148e:	f00b f895 	bl	800c5bc <xQueueSemaphoreTake>
      displayGameStatus();
 8001492:	f000 ff1f 	bl	80022d4 <displayGameStatus>
      xSemaphoreGive(displayMutexHandle);
 8001496:	4bb5      	ldr	r3, [pc, #724]	@ (800176c <StartDisplayTask+0x310>)
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	f00a ff82 	bl	800c3a8 <xQueueGenericSend>
 80014a4:	e20d      	b.n	80018c2 <StartDisplayTask+0x466>
    }
    else {
      // On convertit la direction en texte
      char directionText[100];
      switch (direction) {
 80014a6:	4bb2      	ldr	r3, [pc, #712]	@ (8001770 <StartDisplayTask+0x314>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d826      	bhi.n	80014fc <StartDisplayTask+0xa0>
 80014ae:	a201      	add	r2, pc, #4	@ (adr r2, 80014b4 <StartDisplayTask+0x58>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014d3 	.word	0x080014d3
 80014bc:	080014e1 	.word	0x080014e1
 80014c0:	080014ef 	.word	0x080014ef
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	49aa      	ldr	r1, [pc, #680]	@ (8001774 <StartDisplayTask+0x318>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00d f870 	bl	800e5b0 <siprintf>
          break;
 80014d0:	e014      	b.n	80014fc <StartDisplayTask+0xa0>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	49a8      	ldr	r1, [pc, #672]	@ (8001778 <StartDisplayTask+0x31c>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f00d f869 	bl	800e5b0 <siprintf>
          break;
 80014de:	e00d      	b.n	80014fc <StartDisplayTask+0xa0>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	49a5      	ldr	r1, [pc, #660]	@ (800177c <StartDisplayTask+0x320>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f00d f862 	bl	800e5b0 <siprintf>
          break;
 80014ec:	e006      	b.n	80014fc <StartDisplayTask+0xa0>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	49a3      	ldr	r1, [pc, #652]	@ (8001780 <StartDisplayTask+0x324>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00d f85b 	bl	800e5b0 <siprintf>
          break;
 80014fa:	bf00      	nop
      }
      // On convertit le score en texte
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 80014fc:	4ba1      	ldr	r3, [pc, #644]	@ (8001784 <StartDisplayTask+0x328>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001506:	49a0      	ldr	r1, [pc, #640]	@ (8001788 <StartDisplayTask+0x32c>)
 8001508:	4618      	mov	r0, r3
 800150a:	f00d f851 	bl	800e5b0 <siprintf>

      // On convertit la vitesse en texte
      char speedText[100];
      sprintf(speedText, (char *)"Speed: %d Hz", speed);
 800150e:	4b9f      	ldr	r3, [pc, #636]	@ (800178c <StartDisplayTask+0x330>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001518:	499d      	ldr	r1, [pc, #628]	@ (8001790 <StartDisplayTask+0x334>)
 800151a:	4618      	mov	r0, r3
 800151c:	f00d f848 	bl	800e5b0 <siprintf>

      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001520:	4b92      	ldr	r3, [pc, #584]	@ (800176c <StartDisplayTask+0x310>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	4618      	mov	r0, r3
 800152a:	f00b f847 	bl	800c5bc <xQueueSemaphoreTake>
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800152e:	4899      	ldr	r0, [pc, #612]	@ (8001794 <StartDisplayTask+0x338>)
 8001530:	f002 fca6 	bl	8003e80 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 8001534:	f002 fc0c 	bl	8003d50 <BSP_LCD_GetXSize>
 8001538:	4603      	mov	r3, r0
 800153a:	b29b      	uxth	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001542:	2000      	movs	r0, #0
 8001544:	f002 fe1c 	bl	8004180 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 8001548:	f002 fc02 	bl	8003d50 <BSP_LCD_GetXSize>
 800154c:	4603      	mov	r3, r0
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	f240 1101 	movw	r1, #257	@ 0x101
 8001556:	2000      	movs	r0, #0
 8001558:	f002 fe12 	bl	8004180 <BSP_LCD_DrawHLine>

      // On affiche la direction, le score et la vitesse
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 800155c:	f107 020c 	add.w	r2, r7, #12
 8001560:	2303      	movs	r3, #3
 8001562:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001566:	2000      	movs	r0, #0
 8001568:	f002 fd42 	bl	8003ff0 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 800156c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001570:	2303      	movs	r3, #3
 8001572:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001576:	20c8      	movs	r0, #200	@ 0xc8
 8001578:	f002 fd3a 	bl	8003ff0 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(350, 8*32 + 2, (uint8_t *)speedText, LEFT_MODE);
 800157c:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001580:	2303      	movs	r3, #3
 8001582:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001586:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800158a:	f002 fd31 	bl	8003ff0 <BSP_LCD_DisplayStringAt>

      // On affiche la tête du snake
      switch (headPart) {
 800158e:	4b82      	ldr	r3, [pc, #520]	@ (8001798 <StartDisplayTask+0x33c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d83a      	bhi.n	800160c <StartDisplayTask+0x1b0>
 8001596:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <StartDisplayTask+0x140>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015c5 	.word	0x080015c5
 80015a0:	080015ad 	.word	0x080015ad
 80015a4:	080015dd 	.word	0x080015dd
 80015a8:	080015f5 	.word	0x080015f5
        case HeadBottom:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 80015ac:	4b7b      	ldr	r3, [pc, #492]	@ (800179c <StartDisplayTask+0x340>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	015b      	lsls	r3, r3, #5
 80015b2:	4618      	mov	r0, r3
 80015b4:	4b79      	ldr	r3, [pc, #484]	@ (800179c <StartDisplayTask+0x340>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	015b      	lsls	r3, r3, #5
 80015ba:	4a79      	ldr	r2, [pc, #484]	@ (80017a0 <StartDisplayTask+0x344>)
 80015bc:	4619      	mov	r1, r3
 80015be:	f002 fe85 	bl	80042cc <BSP_LCD_DrawBitmap>
          break;
 80015c2:	e023      	b.n	800160c <StartDisplayTask+0x1b0>
        case HeadTop:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 80015c4:	4b75      	ldr	r3, [pc, #468]	@ (800179c <StartDisplayTask+0x340>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	4618      	mov	r0, r3
 80015cc:	4b73      	ldr	r3, [pc, #460]	@ (800179c <StartDisplayTask+0x340>)
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	015b      	lsls	r3, r3, #5
 80015d2:	4a74      	ldr	r2, [pc, #464]	@ (80017a4 <StartDisplayTask+0x348>)
 80015d4:	4619      	mov	r1, r3
 80015d6:	f002 fe79 	bl	80042cc <BSP_LCD_DrawBitmap>
          break;
 80015da:	e017      	b.n	800160c <StartDisplayTask+0x1b0>
        case HeadLeft:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 80015dc:	4b6f      	ldr	r3, [pc, #444]	@ (800179c <StartDisplayTask+0x340>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	4618      	mov	r0, r3
 80015e4:	4b6d      	ldr	r3, [pc, #436]	@ (800179c <StartDisplayTask+0x340>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	015b      	lsls	r3, r3, #5
 80015ea:	4a6f      	ldr	r2, [pc, #444]	@ (80017a8 <StartDisplayTask+0x34c>)
 80015ec:	4619      	mov	r1, r3
 80015ee:	f002 fe6d 	bl	80042cc <BSP_LCD_DrawBitmap>
          break;
 80015f2:	e00b      	b.n	800160c <StartDisplayTask+0x1b0>
        case HeadRight:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 80015f4:	4b69      	ldr	r3, [pc, #420]	@ (800179c <StartDisplayTask+0x340>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	015b      	lsls	r3, r3, #5
 80015fa:	4618      	mov	r0, r3
 80015fc:	4b67      	ldr	r3, [pc, #412]	@ (800179c <StartDisplayTask+0x340>)
 80015fe:	785b      	ldrb	r3, [r3, #1]
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	4a6a      	ldr	r2, [pc, #424]	@ (80017ac <StartDisplayTask+0x350>)
 8001604:	4619      	mov	r1, r3
 8001606:	f002 fe61 	bl	80042cc <BSP_LCD_DrawBitmap>
          break;
 800160a:	bf00      	nop
      }

      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001612:	e08e      	b.n	8001732 <StartDisplayTask+0x2d6>
        switch (snakeBodyParts[i]) {
 8001614:	4a66      	ldr	r2, [pc, #408]	@ (80017b0 <StartDisplayTask+0x354>)
 8001616:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b05      	cmp	r3, #5
 8001620:	f200 8082 	bhi.w	8001728 <StartDisplayTask+0x2cc>
 8001624:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <StartDisplayTask+0x1d0>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	08001645 	.word	0x08001645
 8001630:	0800166b 	.word	0x0800166b
 8001634:	08001691 	.word	0x08001691
 8001638:	080016b7 	.word	0x080016b7
 800163c:	080016dd 	.word	0x080016dd
 8001640:	08001703 	.word	0x08001703
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 8001644:	4a5b      	ldr	r2, [pc, #364]	@ (80017b4 <StartDisplayTask+0x358>)
 8001646:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800164a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	4618      	mov	r0, r3
 8001652:	4a58      	ldr	r2, [pc, #352]	@ (80017b4 <StartDisplayTask+0x358>)
 8001654:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	015b      	lsls	r3, r3, #5
 8001660:	4a55      	ldr	r2, [pc, #340]	@ (80017b8 <StartDisplayTask+0x35c>)
 8001662:	4619      	mov	r1, r3
 8001664:	f002 fe32 	bl	80042cc <BSP_LCD_DrawBitmap>
            break;
 8001668:	e05e      	b.n	8001728 <StartDisplayTask+0x2cc>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 800166a:	4a52      	ldr	r2, [pc, #328]	@ (80017b4 <StartDisplayTask+0x358>)
 800166c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001670:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	4618      	mov	r0, r3
 8001678:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <StartDisplayTask+0x358>)
 800167a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	015b      	lsls	r3, r3, #5
 8001686:	4a4d      	ldr	r2, [pc, #308]	@ (80017bc <StartDisplayTask+0x360>)
 8001688:	4619      	mov	r1, r3
 800168a:	f002 fe1f 	bl	80042cc <BSP_LCD_DrawBitmap>
            break;
 800168e:	e04b      	b.n	8001728 <StartDisplayTask+0x2cc>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 8001690:	4a48      	ldr	r2, [pc, #288]	@ (80017b4 <StartDisplayTask+0x358>)
 8001692:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001696:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800169a:	015b      	lsls	r3, r3, #5
 800169c:	4618      	mov	r0, r3
 800169e:	4a45      	ldr	r2, [pc, #276]	@ (80017b4 <StartDisplayTask+0x358>)
 80016a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	4a44      	ldr	r2, [pc, #272]	@ (80017c0 <StartDisplayTask+0x364>)
 80016ae:	4619      	mov	r1, r3
 80016b0:	f002 fe0c 	bl	80042cc <BSP_LCD_DrawBitmap>
            break;
 80016b4:	e038      	b.n	8001728 <StartDisplayTask+0x2cc>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 80016b6:	4a3f      	ldr	r2, [pc, #252]	@ (80017b4 <StartDisplayTask+0x358>)
 80016b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016bc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	4618      	mov	r0, r3
 80016c4:	4a3b      	ldr	r2, [pc, #236]	@ (80017b4 <StartDisplayTask+0x358>)
 80016c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	015b      	lsls	r3, r3, #5
 80016d2:	4a3c      	ldr	r2, [pc, #240]	@ (80017c4 <StartDisplayTask+0x368>)
 80016d4:	4619      	mov	r1, r3
 80016d6:	f002 fdf9 	bl	80042cc <BSP_LCD_DrawBitmap>
            break;
 80016da:	e025      	b.n	8001728 <StartDisplayTask+0x2cc>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 80016dc:	4a35      	ldr	r2, [pc, #212]	@ (80017b4 <StartDisplayTask+0x358>)
 80016de:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016e6:	015b      	lsls	r3, r3, #5
 80016e8:	4618      	mov	r0, r3
 80016ea:	4a32      	ldr	r2, [pc, #200]	@ (80017b4 <StartDisplayTask+0x358>)
 80016ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	785b      	ldrb	r3, [r3, #1]
 80016f6:	015b      	lsls	r3, r3, #5
 80016f8:	4a33      	ldr	r2, [pc, #204]	@ (80017c8 <StartDisplayTask+0x36c>)
 80016fa:	4619      	mov	r1, r3
 80016fc:	f002 fde6 	bl	80042cc <BSP_LCD_DrawBitmap>
            break;
 8001700:	e012      	b.n	8001728 <StartDisplayTask+0x2cc>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 8001702:	4a2c      	ldr	r2, [pc, #176]	@ (80017b4 <StartDisplayTask+0x358>)
 8001704:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001708:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800170c:	015b      	lsls	r3, r3, #5
 800170e:	4618      	mov	r0, r3
 8001710:	4a28      	ldr	r2, [pc, #160]	@ (80017b4 <StartDisplayTask+0x358>)
 8001712:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	015b      	lsls	r3, r3, #5
 800171e:	4a2b      	ldr	r2, [pc, #172]	@ (80017cc <StartDisplayTask+0x370>)
 8001720:	4619      	mov	r1, r3
 8001722:	f002 fdd3 	bl	80042cc <BSP_LCD_DrawBitmap>
            break;
 8001726:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 8001728:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800172c:	3301      	adds	r3, #1
 800172e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <StartDisplayTask+0x328>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800173c:	4293      	cmp	r3, r2
 800173e:	f6ff af69 	blt.w	8001614 <StartDisplayTask+0x1b8>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 8001742:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <StartDisplayTask+0x374>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d874      	bhi.n	8001834 <StartDisplayTask+0x3d8>
 800174a:	a201      	add	r2, pc, #4	@ (adr r2, 8001750 <StartDisplayTask+0x2f4>)
 800174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001750:	080017d5 	.word	0x080017d5
 8001754:	080017ed 	.word	0x080017ed
 8001758:	08001805 	.word	0x08001805
 800175c:	0800181d 	.word	0x0800181d
 8001760:	200002a8 	.word	0x200002a8
 8001764:	200002ac 	.word	0x200002ac
 8001768:	200002b0 	.word	0x200002b0
 800176c:	200003c4 	.word	0x200003c4
 8001770:	20000224 	.word	0x20000224
 8001774:	0800f8b0 	.word	0x0800f8b0
 8001778:	0800f8c4 	.word	0x0800f8c4
 800177c:	0800f8d8 	.word	0x0800f8d8
 8001780:	0800f8ec 	.word	0x0800f8ec
 8001784:	200002a0 	.word	0x200002a0
 8001788:	0800f900 	.word	0x0800f900
 800178c:	20000000 	.word	0x20000000
 8001790:	0800f90c 	.word	0x0800f90c
 8001794:	ffa52a2a 	.word	0xffa52a2a
 8001798:	20000225 	.word	0x20000225
 800179c:	20000004 	.word	0x20000004
 80017a0:	08012bcc 	.word	0x08012bcc
 80017a4:	08013858 	.word	0x08013858
 80017a8:	080144e4 	.word	0x080144e4
 80017ac:	08015170 	.word	0x08015170
 80017b0:	20000228 	.word	0x20000228
 80017b4:	200002b4 	.word	0x200002b4
 80017b8:	08010628 	.word	0x08010628
 80017bc:	080112b4 	.word	0x080112b4
 80017c0:	08011f40 	.word	0x08011f40
 80017c4:	08015dfc 	.word	0x08015dfc
 80017c8:	08016a88 	.word	0x08016a88
 80017cc:	08017714 	.word	0x08017714
 80017d0:	20000001 	.word	0x20000001
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 80017d4:	4b3d      	ldr	r3, [pc, #244]	@ (80018cc <StartDisplayTask+0x470>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	015b      	lsls	r3, r3, #5
 80017da:	4618      	mov	r0, r3
 80017dc:	4b3b      	ldr	r3, [pc, #236]	@ (80018cc <StartDisplayTask+0x470>)
 80017de:	785b      	ldrb	r3, [r3, #1]
 80017e0:	015b      	lsls	r3, r3, #5
 80017e2:	4a3b      	ldr	r2, [pc, #236]	@ (80018d0 <StartDisplayTask+0x474>)
 80017e4:	4619      	mov	r1, r3
 80017e6:	f002 fd71 	bl	80042cc <BSP_LCD_DrawBitmap>
          break;
 80017ea:	e023      	b.n	8001834 <StartDisplayTask+0x3d8>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 80017ec:	4b37      	ldr	r3, [pc, #220]	@ (80018cc <StartDisplayTask+0x470>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	015b      	lsls	r3, r3, #5
 80017f2:	4618      	mov	r0, r3
 80017f4:	4b35      	ldr	r3, [pc, #212]	@ (80018cc <StartDisplayTask+0x470>)
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	015b      	lsls	r3, r3, #5
 80017fa:	4a36      	ldr	r2, [pc, #216]	@ (80018d4 <StartDisplayTask+0x478>)
 80017fc:	4619      	mov	r1, r3
 80017fe:	f002 fd65 	bl	80042cc <BSP_LCD_DrawBitmap>
          break;
 8001802:	e017      	b.n	8001834 <StartDisplayTask+0x3d8>
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 8001804:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <StartDisplayTask+0x470>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	4618      	mov	r0, r3
 800180c:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <StartDisplayTask+0x470>)
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	015b      	lsls	r3, r3, #5
 8001812:	4a31      	ldr	r2, [pc, #196]	@ (80018d8 <StartDisplayTask+0x47c>)
 8001814:	4619      	mov	r1, r3
 8001816:	f002 fd59 	bl	80042cc <BSP_LCD_DrawBitmap>
          break;
 800181a:	e00b      	b.n	8001834 <StartDisplayTask+0x3d8>
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 800181c:	4b2b      	ldr	r3, [pc, #172]	@ (80018cc <StartDisplayTask+0x470>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	015b      	lsls	r3, r3, #5
 8001822:	4618      	mov	r0, r3
 8001824:	4b29      	ldr	r3, [pc, #164]	@ (80018cc <StartDisplayTask+0x470>)
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	015b      	lsls	r3, r3, #5
 800182a:	4a2c      	ldr	r2, [pc, #176]	@ (80018dc <StartDisplayTask+0x480>)
 800182c:	4619      	mov	r1, r3
 800182e:	f002 fd4d 	bl	80042cc <BSP_LCD_DrawBitmap>
          break;
 8001832:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <StartDisplayTask+0x484>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d11a      	bne.n	8001872 <StartDisplayTask+0x416>
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <StartDisplayTask+0x488>)
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	4b29      	ldr	r3, [pc, #164]	@ (80018e8 <StartDisplayTask+0x48c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d105      	bne.n	8001854 <StartDisplayTask+0x3f8>
 8001848:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <StartDisplayTask+0x488>)
 800184a:	785a      	ldrb	r2, [r3, #1]
 800184c:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <StartDisplayTask+0x48c>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	429a      	cmp	r2, r3
 8001852:	d00e      	beq.n	8001872 <StartDisplayTask+0x416>
        // On efface l'ancienne queue si:
        //    - le snake a avancé (la queue n'est pas restée à la même position)
        // ou
        //    - la tête n'est pas à la position de l'ancienne queue (le snake suit sa queue)
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 8001854:	4825      	ldr	r0, [pc, #148]	@ (80018ec <StartDisplayTask+0x490>)
 8001856:	f002 fb13 	bl	8003e80 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <StartDisplayTask+0x48c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	015b      	lsls	r3, r3, #5
 8001860:	b298      	uxth	r0, r3
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <StartDisplayTask+0x48c>)
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	015b      	lsls	r3, r3, #5
 8001868:	b299      	uxth	r1, r3
 800186a:	2320      	movs	r3, #32
 800186c:	2220      	movs	r2, #32
 800186e:	f002 fddf 	bl	8004430 <BSP_LCD_FillRect>
      }

      // On affiche les pommes
      for (int i = 0; i < NBApple; i++) {
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001878:	e016      	b.n	80018a8 <StartDisplayTask+0x44c>
        BSP_LCD_DrawBitmap(applePosition[i][0]*32, applePosition[i][1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 800187a:	4a1d      	ldr	r2, [pc, #116]	@ (80018f0 <StartDisplayTask+0x494>)
 800187c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001880:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001884:	015b      	lsls	r3, r3, #5
 8001886:	4618      	mov	r0, r3
 8001888:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <StartDisplayTask+0x494>)
 800188a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	015b      	lsls	r3, r3, #5
 8001896:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <StartDisplayTask+0x498>)
 8001898:	4619      	mov	r1, r3
 800189a:	f002 fd17 	bl	80042cc <BSP_LCD_DrawBitmap>
      for (int i = 0; i < NBApple; i++) {
 800189e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018a2:	3301      	adds	r3, #1
 80018a4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80018a8:	2304      	movs	r3, #4
 80018aa:	461a      	mov	r2, r3
 80018ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018b0:	4293      	cmp	r3, r2
 80018b2:	dbe2      	blt.n	800187a <StartDisplayTask+0x41e>
      }
      xSemaphoreGive(displayMutexHandle);
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <StartDisplayTask+0x49c>)
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	f00a fd73 	bl	800c3a8 <xQueueGenericSend>
    }

    osDelay(100);
 80018c2:	2064      	movs	r0, #100	@ 0x64
 80018c4:	f00a faed 	bl	800bea2 <osDelay>
    if (gameOver || gamePaused || !gameStarted) {
 80018c8:	e5d0      	b.n	800146c <StartDisplayTask+0x10>
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008
 80018d0:	080183a0 	.word	0x080183a0
 80018d4:	0801902c 	.word	0x0801902c
 80018d8:	08019cb8 	.word	0x08019cb8
 80018dc:	0801a944 	.word	0x0801a944
 80018e0:	200002a4 	.word	0x200002a4
 80018e4:	20000004 	.word	0x20000004
 80018e8:	200003a4 	.word	0x200003a4
 80018ec:	ff81cd4b 	.word	0xff81cd4b
 80018f0:	200003a8 	.word	0x200003a8
 80018f4:	0800f99c 	.word	0x0800f99c
 80018f8:	200003c4 	.word	0x200003c4

080018fc <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 8001904:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <StartJoystickTask+0xcc>)
 8001906:	2208      	movs	r2, #8
 8001908:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800190a:	492f      	ldr	r1, [pc, #188]	@ (80019c8 <StartJoystickTask+0xcc>)
 800190c:	482f      	ldr	r0, [pc, #188]	@ (80019cc <StartJoystickTask+0xd0>)
 800190e:	f004 fc3f 	bl	8006190 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 8001912:	482e      	ldr	r0, [pc, #184]	@ (80019cc <StartJoystickTask+0xd0>)
 8001914:	f004 fad6 	bl	8005ec4 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001918:	bf00      	nop
 800191a:	2164      	movs	r1, #100	@ 0x64
 800191c:	482b      	ldr	r0, [pc, #172]	@ (80019cc <StartJoystickTask+0xd0>)
 800191e:	f004 fb9f 	bl	8006060 <HAL_ADC_PollForConversion>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f8      	bne.n	800191a <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 8001928:	4828      	ldr	r0, [pc, #160]	@ (80019cc <StartJoystickTask+0xd0>)
 800192a:	f004 fc24 	bl	8006176 <HAL_ADC_GetValue>
 800192e:	4603      	mov	r3, r0
 8001930:	4a27      	ldr	r2, [pc, #156]	@ (80019d0 <StartJoystickTask+0xd4>)
 8001932:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 8001934:	4827      	ldr	r0, [pc, #156]	@ (80019d4 <StartJoystickTask+0xd8>)
 8001936:	f004 fac5 	bl	8005ec4 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 800193a:	bf00      	nop
 800193c:	2164      	movs	r1, #100	@ 0x64
 800193e:	4825      	ldr	r0, [pc, #148]	@ (80019d4 <StartJoystickTask+0xd8>)
 8001940:	f004 fb8e 	bl	8006060 <HAL_ADC_PollForConversion>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f8      	bne.n	800193c <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 800194a:	4822      	ldr	r0, [pc, #136]	@ (80019d4 <StartJoystickTask+0xd8>)
 800194c:	f004 fc13 	bl	8006176 <HAL_ADC_GetValue>
 8001950:	4603      	mov	r3, r0
 8001952:	4a21      	ldr	r2, [pc, #132]	@ (80019d8 <StartJoystickTask+0xdc>)
 8001954:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 8001956:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <StartJoystickTask+0xd4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800195e:	d207      	bcs.n	8001970 <StartJoystickTask+0x74>
 8001960:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <StartJoystickTask+0xe0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <StartJoystickTask+0x74>
      direction = Down;
 8001968:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <StartJoystickTask+0xe4>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e027      	b.n	80019c0 <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8001970:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <StartJoystickTask+0xd4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001978:	4293      	cmp	r3, r2
 800197a:	d907      	bls.n	800198c <StartJoystickTask+0x90>
 800197c:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <StartJoystickTask+0xe0>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d003      	beq.n	800198c <StartJoystickTask+0x90>
      direction = Up;
 8001984:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <StartJoystickTask+0xe4>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e019      	b.n	80019c0 <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <StartJoystickTask+0xdc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001994:	d207      	bcs.n	80019a6 <StartJoystickTask+0xaa>
 8001996:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <StartJoystickTask+0xe0>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <StartJoystickTask+0xaa>
      direction = Right;
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <StartJoystickTask+0xe4>)
 80019a0:	2203      	movs	r2, #3
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e00c      	b.n	80019c0 <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <StartJoystickTask+0xdc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d906      	bls.n	80019c0 <StartJoystickTask+0xc4>
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <StartJoystickTask+0xe0>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d002      	beq.n	80019c0 <StartJoystickTask+0xc4>
      direction = Left;
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <StartJoystickTask+0xe4>)
 80019bc:	2202      	movs	r2, #2
 80019be:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10);
 80019c0:	200a      	movs	r0, #10
 80019c2:	f00a fa6e 	bl	800bea2 <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 80019c6:	e79d      	b.n	8001904 <StartJoystickTask+0x8>
 80019c8:	200007c0 	.word	0x200007c0
 80019cc:	20000118 	.word	0x20000118
 80019d0:	2000021c 	.word	0x2000021c
 80019d4:	200000d0 	.word	0x200000d0
 80019d8:	20000220 	.word	0x20000220
 80019dc:	20000225 	.word	0x20000225
 80019e0:	20000224 	.word	0x20000224

080019e4 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b08c      	sub	sp, #48	@ 0x30
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80019ec:	f00b fb92 	bl	800d114 <xTaskGetTickCount>
 80019f0:	4603      	mov	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]
  const TickType_t delay = pdMS_TO_TICKS(1000. / speed);
 80019f4:	4b79      	ldr	r3, [pc, #484]	@ (8001bdc <StartManageBodyParts+0x1f8>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fdab 	bl	8000554 <__aeabi_i2d>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	4976      	ldr	r1, [pc, #472]	@ (8001be0 <StartManageBodyParts+0x1fc>)
 8001a08:	f7fe ff38 	bl	800087c <__aeabi_ddiv>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7ff f81a 	bl	8000a4c <__aeabi_d2uiz>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	4a70      	ldr	r2, [pc, #448]	@ (8001be4 <StartManageBodyParts+0x200>)
 8001a24:	fba2 2303 	umull	r2, r3, r2, r3
 8001a28:	099b      	lsrs	r3, r3, #6
 8001a2a:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
    if (!gameOver && !gamePaused && gameStarted) {
 8001a2c:	4b6e      	ldr	r3, [pc, #440]	@ (8001be8 <StartManageBodyParts+0x204>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f040 8277 	bne.w	8001f24 <StartManageBodyParts+0x540>
 8001a36:	4b6d      	ldr	r3, [pc, #436]	@ (8001bec <StartManageBodyParts+0x208>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 8272 	bne.w	8001f24 <StartManageBodyParts+0x540>
 8001a40:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf0 <StartManageBodyParts+0x20c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 826d 	beq.w	8001f24 <StartManageBodyParts+0x540>
      // Le jeu est en cours

      // On sauvegarde la position de la queue et de la tête
      oldTailPosition[0] = snakeTailPosition[0];
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf4 <StartManageBodyParts+0x210>)
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf8 <StartManageBodyParts+0x214>)
 8001a50:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 8001a52:	4b68      	ldr	r3, [pc, #416]	@ (8001bf4 <StartManageBodyParts+0x210>)
 8001a54:	785a      	ldrb	r2, [r3, #1]
 8001a56:	4b68      	ldr	r3, [pc, #416]	@ (8001bf8 <StartManageBodyParts+0x214>)
 8001a58:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 8001a5a:	4b68      	ldr	r3, [pc, #416]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	723b      	strb	r3, [r7, #8]
      oldHeadPosition[1] = snakeHeadPosition[1];
 8001a60:	4b66      	ldr	r3, [pc, #408]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	727b      	strb	r3, [r7, #9]


      // On met a jour la position de la tête en fonction de la direction
      switch (direction) {
 8001a66:	4b66      	ldr	r3, [pc, #408]	@ (8001c00 <StartManageBodyParts+0x21c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d832      	bhi.n	8001ad4 <StartManageBodyParts+0xf0>
 8001a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a74 <StartManageBodyParts+0x90>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001a99 	.word	0x08001a99
 8001a7c:	08001aad 	.word	0x08001aad
 8001a80:	08001ac1 	.word	0x08001ac1
        case Up:
          headPart = HeadTop;
 8001a84:	4b5f      	ldr	r3, [pc, #380]	@ (8001c04 <StartManageBodyParts+0x220>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001a8c:	785b      	ldrb	r3, [r3, #1]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b5a      	ldr	r3, [pc, #360]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001a94:	705a      	strb	r2, [r3, #1]
          break;
 8001a96:	e01d      	b.n	8001ad4 <StartManageBodyParts+0xf0>
        case Down:
          headPart = HeadBottom;
 8001a98:	4b5a      	ldr	r3, [pc, #360]	@ (8001c04 <StartManageBodyParts+0x220>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 8001a9e:	4b57      	ldr	r3, [pc, #348]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b55      	ldr	r3, [pc, #340]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001aa8:	705a      	strb	r2, [r3, #1]
          break;
 8001aaa:	e013      	b.n	8001ad4 <StartManageBodyParts+0xf0>
        case Left:
          headPart = HeadLeft;
 8001aac:	4b55      	ldr	r3, [pc, #340]	@ (8001c04 <StartManageBodyParts+0x220>)
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 8001ab2:	4b52      	ldr	r3, [pc, #328]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b50      	ldr	r3, [pc, #320]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001abc:	701a      	strb	r2, [r3, #0]
          break;
 8001abe:	e009      	b.n	8001ad4 <StartManageBodyParts+0xf0>
        case Right:
          headPart = HeadRight;
 8001ac0:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <StartManageBodyParts+0x220>)
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b4b      	ldr	r3, [pc, #300]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001ad0:	701a      	strb	r2, [r3, #0]
          break;
 8001ad2:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001ad4:	4b49      	ldr	r3, [pc, #292]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	220f      	movs	r2, #15
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d204      	bcs.n	8001ae8 <StartManageBodyParts+0x104>
 8001ade:	4b47      	ldr	r3, [pc, #284]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001ae0:	785b      	ldrb	r3, [r3, #1]
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d303      	bcc.n	8001af0 <StartManageBodyParts+0x10c>
        // On a touché un mur
        gameOver = 1;
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8001be8 <StartManageBodyParts+0x204>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e01f      	b.n	8001b30 <StartManageBodyParts+0x14c>

        // displayGameStatus();
      }
      else  {
        for (int i = 0; i < snakeSize; i++) {
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af4:	e016      	b.n	8001b24 <StartManageBodyParts+0x140>
          if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 8001af6:	4b41      	ldr	r3, [pc, #260]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	4943      	ldr	r1, [pc, #268]	@ (8001c08 <StartManageBodyParts+0x224>)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d10b      	bne.n	8001b1e <StartManageBodyParts+0x13a>
 8001b06:	4b3d      	ldr	r3, [pc, #244]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001b08:	785a      	ldrb	r2, [r3, #1]
 8001b0a:	493f      	ldr	r1, [pc, #252]	@ (8001c08 <StartManageBodyParts+0x224>)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	440b      	add	r3, r1
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d102      	bne.n	8001b1e <StartManageBodyParts+0x13a>
            // On a touché notre corps
            gameOver = 1;
 8001b18:	4b33      	ldr	r3, [pc, #204]	@ (8001be8 <StartManageBodyParts+0x204>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < snakeSize; i++) {
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b24:	4b39      	ldr	r3, [pc, #228]	@ (8001c0c <StartManageBodyParts+0x228>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	dbe2      	blt.n	8001af6 <StartManageBodyParts+0x112>
      */


      
      // On vérifie si on a mangé la pomme avant de bouger le corps et la queue
      appleEaten = 0;
 8001b30:	4b37      	ldr	r3, [pc, #220]	@ (8001c10 <StartManageBodyParts+0x22c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NBApple; i++) {
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
 8001b3a:	e0cf      	b.n	8001cdc <StartManageBodyParts+0x2f8>
        if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1]) {
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	4934      	ldr	r1, [pc, #208]	@ (8001c14 <StartManageBodyParts+0x230>)
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 80c4 	bne.w	8001cd6 <StartManageBodyParts+0x2f2>
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <StartManageBodyParts+0x218>)
 8001b50:	785a      	ldrb	r2, [r3, #1]
 8001b52:	4930      	ldr	r1, [pc, #192]	@ (8001c14 <StartManageBodyParts+0x230>)
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	440b      	add	r3, r1
 8001b5a:	785b      	ldrb	r3, [r3, #1]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 80ba 	bne.w	8001cd6 <StartManageBodyParts+0x2f2>
          snakeSize++;
 8001b62:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <StartManageBodyParts+0x228>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <StartManageBodyParts+0x228>)
 8001b6c:	701a      	strb	r2, [r3, #0]
          appleEaten = 1;
 8001b6e:	4b28      	ldr	r3, [pc, #160]	@ (8001c10 <StartManageBodyParts+0x22c>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

          // On ajoute un bodyPart à la queue
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <StartManageBodyParts+0x228>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	e020      	b.n	8001bc0 <StartManageBodyParts+0x1dc>
            snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	4a25      	ldr	r2, [pc, #148]	@ (8001c18 <StartManageBodyParts+0x234>)
 8001b84:	5cd1      	ldrb	r1, [r2, r3]
 8001b86:	4a24      	ldr	r2, [pc, #144]	@ (8001c18 <StartManageBodyParts+0x234>)
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	701a      	strb	r2, [r3, #0]
            snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <StartManageBodyParts+0x224>)
 8001b96:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c08 <StartManageBodyParts+0x224>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <StartManageBodyParts+0x224>)
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	7859      	ldrb	r1, [r3, #1]
 8001bae:	4a16      	ldr	r2, [pc, #88]	@ (8001c08 <StartManageBodyParts+0x224>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	705a      	strb	r2, [r3, #1]
          for (int i = snakeSize - 1; i > 0; i--) {
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dcdb      	bgt.n	8001b7e <StartManageBodyParts+0x19a>

          // On met a jour le premier bodyPart
          uint8_t backX;
          uint8_t backY;

          if (snakeSize > 1) {
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <StartManageBodyParts+0x228>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d926      	bls.n	8001c1c <StartManageBodyParts+0x238>
            backX = snakeBodyPosition[0][0];
 8001bce:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <StartManageBodyParts+0x224>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	76fb      	strb	r3, [r7, #27]
            backY = snakeBodyPosition[0][1];
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <StartManageBodyParts+0x224>)
 8001bd6:	785b      	ldrb	r3, [r3, #1]
 8001bd8:	76bb      	strb	r3, [r7, #26]
 8001bda:	e025      	b.n	8001c28 <StartManageBodyParts+0x244>
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	408f4000 	.word	0x408f4000
 8001be4:	10624dd3 	.word	0x10624dd3
 8001be8:	200002a8 	.word	0x200002a8
 8001bec:	200002ac 	.word	0x200002ac
 8001bf0:	200002b0 	.word	0x200002b0
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	200003a4 	.word	0x200003a4
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	20000224 	.word	0x20000224
 8001c04:	20000225 	.word	0x20000225
 8001c08:	200002b4 	.word	0x200002b4
 8001c0c:	200002a0 	.word	0x200002a0
 8001c10:	200002a4 	.word	0x200002a4
 8001c14:	200003a8 	.word	0x200003a8
 8001c18:	20000228 	.word	0x20000228
          }
          else {
            backX = snakeTailPosition[0];
 8001c1c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	76fb      	strb	r3, [r7, #27]
            backY = snakeTailPosition[1];
 8001c22:	4b9f      	ldr	r3, [pc, #636]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001c24:	785b      	ldrb	r3, [r3, #1]
 8001c26:	76bb      	strb	r3, [r7, #26]
          }

          // Trouve le type de bodyPart à mettre
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8001c28:	4b9e      	ldr	r3, [pc, #632]	@ (8001ea4 <StartManageBodyParts+0x4c0>)
 8001c2a:	7818      	ldrb	r0, [r3, #0]
 8001c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea4 <StartManageBodyParts+0x4c0>)
 8001c2e:	7859      	ldrb	r1, [r3, #1]
 8001c30:	7a3b      	ldrb	r3, [r7, #8]
 8001c32:	7a7a      	ldrb	r2, [r7, #9]
 8001c34:	7ebd      	ldrb	r5, [r7, #26]
 8001c36:	7efc      	ldrb	r4, [r7, #27]
 8001c38:	9201      	str	r2, [sp, #4]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	4622      	mov	r2, r4
 8001c40:	f000 f9ea 	bl	8002018 <whatBodyPart>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b97      	ldr	r3, [pc, #604]	@ (8001ea8 <StartManageBodyParts+0x4c4>)
 8001c4a:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001c4c:	7a3a      	ldrb	r2, [r7, #8]
 8001c4e:	4b97      	ldr	r3, [pc, #604]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001c50:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001c52:	7a7a      	ldrb	r2, [r7, #9]
 8001c54:	4b95      	ldr	r3, [pc, #596]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001c56:	705a      	strb	r2, [r3, #1]

          // On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
          // TODO: Si on arrive a la fin du jeu, on ne peut plus générer de pomme car toutes les cases sont prises
          do {
            applePosition[i][0] = rand() % gridSizeX;
 8001c58:	f00c fbaa 	bl	800e3b0 <rand>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c64:	fb01 f202 	mul.w	r2, r1, r2
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	b2d9      	uxtb	r1, r3
 8001c6c:	4a90      	ldr	r2, [pc, #576]	@ (8001eb0 <StartManageBodyParts+0x4cc>)
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            applePosition[i][1] = rand() % gridSizeY;
 8001c74:	f00c fb9c 	bl	800e3b0 <rand>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c80:	fb01 f202 	mul.w	r2, r1, r2
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	b2d9      	uxtb	r1, r3
 8001c88:	4a89      	ldr	r2, [pc, #548]	@ (8001eb0 <StartManageBodyParts+0x4cc>)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	460a      	mov	r2, r1
 8001c92:	705a      	strb	r2, [r3, #1]
          } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001c94:	4a86      	ldr	r2, [pc, #536]	@ (8001eb0 <StartManageBodyParts+0x4cc>)
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001c9c:	4984      	ldr	r1, [pc, #528]	@ (8001eb0 <StartManageBodyParts+0x4cc>)
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	440b      	add	r3, r1
 8001ca4:	785b      	ldrb	r3, [r3, #1]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4610      	mov	r0, r2
 8001caa:	f000 fa17 	bl	80020dc <isSnakePosition>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1d1      	bne.n	8001c58 <StartManageBodyParts+0x274>
 8001cb4:	4a7e      	ldr	r2, [pc, #504]	@ (8001eb0 <StartManageBodyParts+0x4cc>)
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8001cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8001eb0 <StartManageBodyParts+0x4cc>)
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	6a3a      	ldr	r2, [r7, #32]
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f000 fa52 	bl	8002174 <isApplePosition>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1c0      	bne.n	8001c58 <StartManageBodyParts+0x274>
      for (int i = 0; i < NBApple; i++) {
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	2304      	movs	r3, #4
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	f6ff af2a 	blt.w	8001b3c <StartManageBodyParts+0x158>
        }
      }


      // On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
      if (!appleEaten) {
 8001ce8:	4b72      	ldr	r3, [pc, #456]	@ (8001eb4 <StartManageBodyParts+0x4d0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f040 8119 	bne.w	8001f24 <StartManageBodyParts+0x540>
        // on met a jour la position de la queue
        if (snakeSize > 0) {
 8001cf2:	4b71      	ldr	r3, [pc, #452]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d011      	beq.n	8001d1e <StartManageBodyParts+0x33a>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8001cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	4a6a      	ldr	r2, [pc, #424]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001d02:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001d06:	4b66      	ldr	r3, [pc, #408]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001d08:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8001d0a:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	4a66      	ldr	r2, [pc, #408]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	785a      	ldrb	r2, [r3, #1]
 8001d18:	4b61      	ldr	r3, [pc, #388]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001d1a:	705a      	strb	r2, [r3, #1]
 8001d1c:	e005      	b.n	8001d2a <StartManageBodyParts+0x346>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 8001d1e:	7a3a      	ldrb	r2, [r7, #8]
 8001d20:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001d22:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 8001d24:	7a7a      	ldrb	r2, [r7, #9]
 8001d26:	4b5e      	ldr	r3, [pc, #376]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001d28:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d2a:	4b63      	ldr	r3, [pc, #396]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e020      	b.n	8001d76 <StartManageBodyParts+0x392>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea8 <StartManageBodyParts+0x4c4>)
 8001d3a:	5cd1      	ldrb	r1, [r2, r3]
 8001d3c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ea8 <StartManageBodyParts+0x4c4>)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	4413      	add	r3, r2
 8001d42:	460a      	mov	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	4a58      	ldr	r2, [pc, #352]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001d4c:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001d50:	4a56      	ldr	r2, [pc, #344]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	4a53      	ldr	r2, [pc, #332]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	7859      	ldrb	r1, [r3, #1]
 8001d64:	4a51      	ldr	r2, [pc, #324]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	dcdb      	bgt.n	8001d34 <StartManageBodyParts+0x350>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 8001d7c:	4b4e      	ldr	r3, [pc, #312]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80b0 	beq.w	8001ee6 <StartManageBodyParts+0x502>
          // On trouve le type de bodyPart à mettre juste derrière la tête
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8001d86:	4b47      	ldr	r3, [pc, #284]	@ (8001ea4 <StartManageBodyParts+0x4c0>)
 8001d88:	7818      	ldrb	r0, [r3, #0]
 8001d8a:	4b46      	ldr	r3, [pc, #280]	@ (8001ea4 <StartManageBodyParts+0x4c0>)
 8001d8c:	7859      	ldrb	r1, [r3, #1]
 8001d8e:	4b47      	ldr	r3, [pc, #284]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001d90:	781c      	ldrb	r4, [r3, #0]
 8001d92:	4b46      	ldr	r3, [pc, #280]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001d94:	785d      	ldrb	r5, [r3, #1]
 8001d96:	7a3b      	ldrb	r3, [r7, #8]
 8001d98:	7a7a      	ldrb	r2, [r7, #9]
 8001d9a:	9201      	str	r2, [sp, #4]
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	462b      	mov	r3, r5
 8001da0:	4622      	mov	r2, r4
 8001da2:	f000 f939 	bl	8002018 <whatBodyPart>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea8 <StartManageBodyParts+0x4c4>)
 8001dac:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001dae:	7a3a      	ldrb	r2, [r7, #8]
 8001db0:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001db2:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001db4:	7a7a      	ldrb	r2, [r7, #9]
 8001db6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001db8:	705a      	strb	r2, [r3, #1]

          // On met a jour le l'orientation de la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001dba:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	4a39      	ldr	r2, [pc, #228]	@ (8001ea8 <StartManageBodyParts+0x4c4>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	f200 80ad 	bhi.w	8001f24 <StartManageBodyParts+0x540>
 8001dca:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd0 <StartManageBodyParts+0x3ec>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001de9 	.word	0x08001de9
 8001dd4:	08001e0d 	.word	0x08001e0d
 8001dd8:	08001e31 	.word	0x08001e31
 8001ddc:	08001e57 	.word	0x08001e57
 8001de0:	08001e7b 	.word	0x08001e7b
 8001de4:	08001ec1 	.word	0x08001ec1
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001de8:	4b33      	ldr	r3, [pc, #204]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	4a2f      	ldr	r2, [pc, #188]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001df0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001df4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d103      	bne.n	8001e04 <StartManageBodyParts+0x420>
                tailPart = TailTop;
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001ebc <StartManageBodyParts+0x4d8>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e02:	e08f      	b.n	8001f24 <StartManageBodyParts+0x540>
                tailPart = TailRight;
 8001e04:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <StartManageBodyParts+0x4d8>)
 8001e06:	2203      	movs	r2, #3
 8001e08:	701a      	strb	r2, [r3, #0]
              break;
 8001e0a:	e08b      	b.n	8001f24 <StartManageBodyParts+0x540>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	4a26      	ldr	r2, [pc, #152]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001e14:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e18:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d103      	bne.n	8001e28 <StartManageBodyParts+0x444>
                tailPart = TailTop;
 8001e20:	4b26      	ldr	r3, [pc, #152]	@ (8001ebc <StartManageBodyParts+0x4d8>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 8001e26:	e07d      	b.n	8001f24 <StartManageBodyParts+0x540>
                tailPart = TailLeft;
 8001e28:	4b24      	ldr	r3, [pc, #144]	@ (8001ebc <StartManageBodyParts+0x4d8>)
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	701a      	strb	r2, [r3, #0]
              break;
 8001e2e:	e079      	b.n	8001f24 <StartManageBodyParts+0x540>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 8001e30:	4b21      	ldr	r3, [pc, #132]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	4a1d      	ldr	r2, [pc, #116]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	785a      	ldrb	r2, [r3, #1]
 8001e3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d203      	bcs.n	8001e4e <StartManageBodyParts+0x46a>
                tailPart = TailTop;
 8001e46:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <StartManageBodyParts+0x4d8>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001e4c:	e06a      	b.n	8001f24 <StartManageBodyParts+0x540>
                tailPart = TailBottom;
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <StartManageBodyParts+0x4d8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
              break;
 8001e54:	e066      	b.n	8001f24 <StartManageBodyParts+0x540>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 8001e56:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	4a13      	ldr	r2, [pc, #76]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001e5e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d203      	bcs.n	8001e72 <StartManageBodyParts+0x48e>
                tailPart = TailLeft;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <StartManageBodyParts+0x4d8>)
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e70:	e058      	b.n	8001f24 <StartManageBodyParts+0x540>
                tailPart = TailRight;
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <StartManageBodyParts+0x4d8>)
 8001e74:	2203      	movs	r2, #3
 8001e76:	701a      	strb	r2, [r3, #0]
              break;
 8001e78:	e054      	b.n	8001f24 <StartManageBodyParts+0x540>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <StartManageBodyParts+0x4d4>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <StartManageBodyParts+0x4c8>)
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	785a      	ldrb	r2, [r3, #1]
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <StartManageBodyParts+0x4bc>)
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d103      	bne.n	8001e98 <StartManageBodyParts+0x4b4>
                tailPart = TailRight;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <StartManageBodyParts+0x4d8>)
 8001e92:	2203      	movs	r2, #3
 8001e94:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001e96:	e045      	b.n	8001f24 <StartManageBodyParts+0x540>
                tailPart = TailBottom;
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <StartManageBodyParts+0x4d8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
              break;
 8001e9e:	e041      	b.n	8001f24 <StartManageBodyParts+0x540>
 8001ea0:	20000008 	.word	0x20000008
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	20000228 	.word	0x20000228
 8001eac:	200002b4 	.word	0x200002b4
 8001eb0:	200003a8 	.word	0x200003a8
 8001eb4:	200002a4 	.word	0x200002a4
 8001eb8:	200002a0 	.word	0x200002a0
 8001ebc:	20000001 	.word	0x20000001
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <StartManageBodyParts+0x550>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f38 <StartManageBodyParts+0x554>)
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	785a      	ldrb	r2, [r3, #1]
 8001ece:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <StartManageBodyParts+0x558>)
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d103      	bne.n	8001ede <StartManageBodyParts+0x4fa>
                tailPart = TailLeft;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <StartManageBodyParts+0x55c>)
 8001ed8:	2202      	movs	r2, #2
 8001eda:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001edc:	e022      	b.n	8001f24 <StartManageBodyParts+0x540>
                tailPart = TailBottom;
 8001ede:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <StartManageBodyParts+0x55c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
              break;
 8001ee4:	e01e      	b.n	8001f24 <StartManageBodyParts+0x540>
          }
        }
        else {
          switch (headPart) {
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <StartManageBodyParts+0x560>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d81a      	bhi.n	8001f24 <StartManageBodyParts+0x540>
 8001eee:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef4 <StartManageBodyParts+0x510>)
 8001ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef4:	08001f05 	.word	0x08001f05
 8001ef8:	08001f0d 	.word	0x08001f0d
 8001efc:	08001f15 	.word	0x08001f15
 8001f00:	08001f1d 	.word	0x08001f1d
            case HeadTop:
              tailPart = TailTop;
 8001f04:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <StartManageBodyParts+0x55c>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
              break;
 8001f0a:	e00b      	b.n	8001f24 <StartManageBodyParts+0x540>
            case HeadBottom:
              tailPart = TailBottom;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <StartManageBodyParts+0x55c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
              break;
 8001f12:	e007      	b.n	8001f24 <StartManageBodyParts+0x540>
            case HeadLeft:
              tailPart = TailLeft;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <StartManageBodyParts+0x55c>)
 8001f16:	2202      	movs	r2, #2
 8001f18:	701a      	strb	r2, [r3, #0]
              break;
 8001f1a:	e003      	b.n	8001f24 <StartManageBodyParts+0x540>
            case HeadRight:
              tailPart = TailRight;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <StartManageBodyParts+0x55c>)
 8001f1e:	2203      	movs	r2, #3
 8001f20:	701a      	strb	r2, [r3, #0]
              break;
 8001f22:	bf00      	nop
          }
        }
      }
    }

    vTaskDelayUntil(&xLastWakeTime, delay);
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	6939      	ldr	r1, [r7, #16]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f00a ff18 	bl	800cd60 <vTaskDelayUntil>
    if (!gameOver && !gamePaused && gameStarted) {
 8001f30:	e57c      	b.n	8001a2c <StartManageBodyParts+0x48>
 8001f32:	bf00      	nop
 8001f34:	200002a0 	.word	0x200002a0
 8001f38:	200002b4 	.word	0x200002b4
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000001 	.word	0x20000001
 8001f44:	20000225 	.word	0x20000225

08001f48 <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    if (!gameStarted)
 8001f50:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <StartTsHandlerTask+0xb4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <StartTsHandlerTask+0x14>
      rand();
 8001f58:	f00c fa2a 	bl	800e3b0 <rand>
    

    BSP_TS_GetState(&TS_State);
 8001f5c:	4828      	ldr	r0, [pc, #160]	@ (8002000 <StartTsHandlerTask+0xb8>)
 8001f5e:	f002 ff33 	bl	8004dc8 <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 8001f62:	4b27      	ldr	r3, [pc, #156]	@ (8002000 <StartTsHandlerTask+0xb8>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d139      	bne.n	8001fde <StartTsHandlerTask+0x96>
 8001f6a:	4b26      	ldr	r3, [pc, #152]	@ (8002004 <StartTsHandlerTask+0xbc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d035      	beq.n	8001fde <StartTsHandlerTask+0x96>
      if (gameOver) {
 8001f72:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <StartTsHandlerTask+0xc0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <StartTsHandlerTask+0x44>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001f7a:	4824      	ldr	r0, [pc, #144]	@ (800200c <StartTsHandlerTask+0xc4>)
 8001f7c:	f001 ffcc 	bl	8003f18 <BSP_LCD_Clear>
        gameOver = 0;
 8001f80:	4b21      	ldr	r3, [pc, #132]	@ (8002008 <StartTsHandlerTask+0xc0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
        restartGame();
 8001f86:	f000 f929 	bl	80021dc <restartGame>
 8001f8a:	e028      	b.n	8001fde <StartTsHandlerTask+0x96>
      }
      else if (gamePaused) {
 8001f8c:	4b20      	ldr	r3, [pc, #128]	@ (8002010 <StartTsHandlerTask+0xc8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d014      	beq.n	8001fbe <StartTsHandlerTask+0x76>
        xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001f94:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <StartTsHandlerTask+0xcc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00a fb0d 	bl	800c5bc <xQueueSemaphoreTake>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fa2:	481a      	ldr	r0, [pc, #104]	@ (800200c <StartTsHandlerTask+0xc4>)
 8001fa4:	f001 ffb8 	bl	8003f18 <BSP_LCD_Clear>
        xSemaphoreGive(displayMutexHandle);
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <StartTsHandlerTask+0xcc>)
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	2300      	movs	r3, #0
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	f00a f9f9 	bl	800c3a8 <xQueueGenericSend>
        gamePaused = 0;
 8001fb6:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <StartTsHandlerTask+0xc8>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e00f      	b.n	8001fde <StartTsHandlerTask+0x96>
      }
      else if (!gameStarted) {
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <StartTsHandlerTask+0xb4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d108      	bne.n	8001fd8 <StartTsHandlerTask+0x90>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fc6:	4811      	ldr	r0, [pc, #68]	@ (800200c <StartTsHandlerTask+0xc4>)
 8001fc8:	f001 ffa6 	bl	8003f18 <BSP_LCD_Clear>
        restartGame();
 8001fcc:	f000 f906 	bl	80021dc <restartGame>
        gameStarted = 1;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <StartTsHandlerTask+0xb4>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e002      	b.n	8001fde <StartTsHandlerTask+0x96>
      }
      else {
        gamePaused = 1;
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002010 <StartTsHandlerTask+0xc8>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
      }
    }

    if (TS_State.touchDetected) {
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <StartTsHandlerTask+0xb8>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <StartTsHandlerTask+0xa6>
      screenPressed = 1;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <StartTsHandlerTask+0xbc>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e002      	b.n	8001ff4 <StartTsHandlerTask+0xac>
    }
    else {
      screenPressed = 0;
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <StartTsHandlerTask+0xbc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f009 ff54 	bl	800bea2 <osDelay>
    if (!gameStarted)
 8001ffa:	e7a9      	b.n	8001f50 <StartTsHandlerTask+0x8>
 8001ffc:	200002b0 	.word	0x200002b0
 8002000:	200001ec 	.word	0x200001ec
 8002004:	20000218 	.word	0x20000218
 8002008:	200002a8 	.word	0x200002a8
 800200c:	ff81cd4b 	.word	0xff81cd4b
 8002010:	200002ac 	.word	0x200002ac
 8002014:	200003c4 	.word	0x200003c4

08002018 <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 8002018:	b490      	push	{r4, r7}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	4604      	mov	r4, r0
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	4603      	mov	r3, r0
 800202c:	71bb      	strb	r3, [r7, #6]
 800202e:	460b      	mov	r3, r1
 8002030:	717b      	strb	r3, [r7, #5]
 8002032:	4613      	mov	r3, r2
 8002034:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 8002036:	79fa      	ldrb	r2, [r7, #7]
 8002038:	797b      	ldrb	r3, [r7, #5]
 800203a:	429a      	cmp	r2, r3
 800203c:	d101      	bne.n	8002042 <whatBodyPart+0x2a>
    return BottomTop;
 800203e:	2302      	movs	r3, #2
 8002040:	e046      	b.n	80020d0 <whatBodyPart+0xb8>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 8002042:	79ba      	ldrb	r2, [r7, #6]
 8002044:	793b      	ldrb	r3, [r7, #4]
 8002046:	429a      	cmp	r2, r3
 8002048:	d101      	bne.n	800204e <whatBodyPart+0x36>
    return LeftRight;
 800204a:	2303      	movs	r3, #3
 800204c:	e040      	b.n	80020d0 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY) {
 800204e:	79fa      	ldrb	r2, [r7, #7]
 8002050:	797b      	ldrb	r3, [r7, #5]
 8002052:	429a      	cmp	r2, r3
 8002054:	d20b      	bcs.n	800206e <whatBodyPart+0x56>
 8002056:	79ba      	ldrb	r2, [r7, #6]
 8002058:	793b      	ldrb	r3, [r7, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	d907      	bls.n	800206e <whatBodyPart+0x56>
    if (missingX == frontX)
 800205e:	7c3a      	ldrb	r2, [r7, #16]
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	429a      	cmp	r2, r3
 8002064:	d101      	bne.n	800206a <whatBodyPart+0x52>
      return BottomRight;
 8002066:	2301      	movs	r3, #1
 8002068:	e032      	b.n	80020d0 <whatBodyPart+0xb8>
    else
      return LeftTop;
 800206a:	2304      	movs	r3, #4
 800206c:	e030      	b.n	80020d0 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY) {
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	797b      	ldrb	r3, [r7, #5]
 8002072:	429a      	cmp	r2, r3
 8002074:	d20b      	bcs.n	800208e <whatBodyPart+0x76>
 8002076:	79ba      	ldrb	r2, [r7, #6]
 8002078:	793b      	ldrb	r3, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	d207      	bcs.n	800208e <whatBodyPart+0x76>
    if (missingX == frontX)
 800207e:	7c3a      	ldrb	r2, [r7, #16]
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	429a      	cmp	r2, r3
 8002084:	d101      	bne.n	800208a <whatBodyPart+0x72>
      return RightTop;
 8002086:	2305      	movs	r3, #5
 8002088:	e022      	b.n	80020d0 <whatBodyPart+0xb8>
    else
      return BottomLeft;
 800208a:	2300      	movs	r3, #0
 800208c:	e020      	b.n	80020d0 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY) {
 800208e:	79fa      	ldrb	r2, [r7, #7]
 8002090:	797b      	ldrb	r3, [r7, #5]
 8002092:	429a      	cmp	r2, r3
 8002094:	d90b      	bls.n	80020ae <whatBodyPart+0x96>
 8002096:	79ba      	ldrb	r2, [r7, #6]
 8002098:	793b      	ldrb	r3, [r7, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	d207      	bcs.n	80020ae <whatBodyPart+0x96>
    if (missingX == frontX)
 800209e:	7c3a      	ldrb	r2, [r7, #16]
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d101      	bne.n	80020aa <whatBodyPart+0x92>
      return LeftTop;
 80020a6:	2304      	movs	r3, #4
 80020a8:	e012      	b.n	80020d0 <whatBodyPart+0xb8>
    else
      return BottomRight;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e010      	b.n	80020d0 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY) {
 80020ae:	79fa      	ldrb	r2, [r7, #7]
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d90b      	bls.n	80020ce <whatBodyPart+0xb6>
 80020b6:	79ba      	ldrb	r2, [r7, #6]
 80020b8:	793b      	ldrb	r3, [r7, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d907      	bls.n	80020ce <whatBodyPart+0xb6>
    if (missingX == frontX)
 80020be:	7c3a      	ldrb	r2, [r7, #16]
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d101      	bne.n	80020ca <whatBodyPart+0xb2>
      return BottomLeft;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e002      	b.n	80020d0 <whatBodyPart+0xb8>
    else
      return RightTop;
 80020ca:	2305      	movs	r3, #5
 80020cc:	e000      	b.n	80020d0 <whatBodyPart+0xb8>
  }

  return BottomTop; // should never happen
 80020ce:	2302      	movs	r3, #2
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc90      	pop	{r4, r7}
 80020d8:	4770      	bx	lr
	...

080020dc <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	460a      	mov	r2, r1
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	4613      	mov	r3, r2
 80020ea:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <isSnakePosition+0x88>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	79fa      	ldrb	r2, [r7, #7]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d106      	bne.n	8002104 <isSnakePosition+0x28>
 80020f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002164 <isSnakePosition+0x88>)
 80020f8:	785b      	ldrb	r3, [r3, #1]
 80020fa:	79ba      	ldrb	r2, [r7, #6]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d101      	bne.n	8002104 <isSnakePosition+0x28>
    return 1;
 8002100:	2301      	movs	r3, #1
 8002102:	e029      	b.n	8002158 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e013      	b.n	8002132 <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 800210a:	4a17      	ldr	r2, [pc, #92]	@ (8002168 <isSnakePosition+0x8c>)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002112:	79fa      	ldrb	r2, [r7, #7]
 8002114:	429a      	cmp	r2, r3
 8002116:	d109      	bne.n	800212c <isSnakePosition+0x50>
 8002118:	4a13      	ldr	r2, [pc, #76]	@ (8002168 <isSnakePosition+0x8c>)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	79ba      	ldrb	r2, [r7, #6]
 8002124:	429a      	cmp	r2, r3
 8002126:	d101      	bne.n	800212c <isSnakePosition+0x50>
      return 1;
 8002128:	2301      	movs	r3, #1
 800212a:	e015      	b.n	8002158 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3301      	adds	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <isSnakePosition+0x90>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4293      	cmp	r3, r2
 800213c:	dbe5      	blt.n	800210a <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <isSnakePosition+0x94>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	79fa      	ldrb	r2, [r7, #7]
 8002144:	429a      	cmp	r2, r3
 8002146:	d106      	bne.n	8002156 <isSnakePosition+0x7a>
 8002148:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <isSnakePosition+0x94>)
 800214a:	785b      	ldrb	r3, [r3, #1]
 800214c:	79ba      	ldrb	r2, [r7, #6]
 800214e:	429a      	cmp	r2, r3
 8002150:	d101      	bne.n	8002156 <isSnakePosition+0x7a>
    return 1;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <isSnakePosition+0x7c>

  return 0;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	20000004 	.word	0x20000004
 8002168:	200002b4 	.word	0x200002b4
 800216c:	200002a0 	.word	0x200002a0
 8002170:	20000008 	.word	0x20000008

08002174 <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
 800217e:	460b      	mov	r3, r1
 8002180:	71bb      	strb	r3, [r7, #6]
 8002182:	4613      	mov	r3, r2
 8002184:	717b      	strb	r3, [r7, #5]
  for (int i = 0; i < NBApple; i++) {
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e018      	b.n	80021be <isApplePosition+0x4a>
    if (i == appleIndex)
 800218c:	797b      	ldrb	r3, [r7, #5]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d010      	beq.n	80021b6 <isApplePosition+0x42>
      continue;

    if (x == applePosition[i][0] && y == applePosition[i][1])
 8002194:	4a10      	ldr	r2, [pc, #64]	@ (80021d8 <isApplePosition+0x64>)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800219c:	79fa      	ldrb	r2, [r7, #7]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d10a      	bne.n	80021b8 <isApplePosition+0x44>
 80021a2:	4a0d      	ldr	r2, [pc, #52]	@ (80021d8 <isApplePosition+0x64>)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	785b      	ldrb	r3, [r3, #1]
 80021ac:	79ba      	ldrb	r2, [r7, #6]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d102      	bne.n	80021b8 <isApplePosition+0x44>
      return 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e009      	b.n	80021ca <isApplePosition+0x56>
      continue;
 80021b6:	bf00      	nop
  for (int i = 0; i < NBApple; i++) {
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3301      	adds	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	2304      	movs	r3, #4
 80021c0:	461a      	mov	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4293      	cmp	r3, r2
 80021c6:	dbe1      	blt.n	800218c <isApplePosition+0x18>
  }

  return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	200003a8 	.word	0x200003a8

080021dc <restartGame>:

void restartGame()
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  snakeSize = 0;
 80021e2:	4b34      	ldr	r3, [pc, #208]	@ (80022b4 <restartGame+0xd8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 80021e8:	4b33      	ldr	r3, [pc, #204]	@ (80022b8 <restartGame+0xdc>)
 80021ea:	2207      	movs	r2, #7
 80021ec:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 80021ee:	4b32      	ldr	r3, [pc, #200]	@ (80022b8 <restartGame+0xdc>)
 80021f0:	2206      	movs	r2, #6
 80021f2:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 80021f4:	4b31      	ldr	r3, [pc, #196]	@ (80022bc <restartGame+0xe0>)
 80021f6:	2207      	movs	r2, #7
 80021f8:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 80021fa:	4b30      	ldr	r3, [pc, #192]	@ (80022bc <restartGame+0xe0>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	705a      	strb	r2, [r3, #1]
  direction = Up;
 8002200:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <restartGame+0xe4>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 8002206:	4b2f      	ldr	r3, [pc, #188]	@ (80022c4 <restartGame+0xe8>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 800220c:	4b2e      	ldr	r3, [pc, #184]	@ (80022c8 <restartGame+0xec>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < NBApple; i++) {
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	e041      	b.n	800229c <restartGame+0xc0>
    do {
      applePosition[i][0] = rand() % gridSizeX;
 8002218:	f00c f8ca 	bl	800e3b0 <rand>
 800221c:	4603      	mov	r3, r0
 800221e:	220f      	movs	r2, #15
 8002220:	fb93 f1f2 	sdiv	r1, r3, r2
 8002224:	fb01 f202 	mul.w	r2, r1, r2
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	b2d9      	uxtb	r1, r3
 800222c:	4a27      	ldr	r2, [pc, #156]	@ (80022cc <restartGame+0xf0>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      applePosition[i][1] = rand() % gridSizeY;
 8002234:	f00c f8bc 	bl	800e3b0 <rand>
 8002238:	4603      	mov	r3, r0
 800223a:	2208      	movs	r2, #8
 800223c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002240:	fb01 f202 	mul.w	r2, r1, r2
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	b2d9      	uxtb	r1, r3
 8002248:	4a20      	ldr	r2, [pc, #128]	@ (80022cc <restartGame+0xf0>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	460a      	mov	r2, r1
 8002252:	705a      	strb	r2, [r3, #1]
    } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8002254:	4a1d      	ldr	r2, [pc, #116]	@ (80022cc <restartGame+0xf0>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800225c:	491b      	ldr	r1, [pc, #108]	@ (80022cc <restartGame+0xf0>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	440b      	add	r3, r1
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	4619      	mov	r1, r3
 8002268:	4610      	mov	r0, r2
 800226a:	f7ff ff37 	bl	80020dc <isSnakePosition>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1d1      	bne.n	8002218 <restartGame+0x3c>
 8002274:	4a15      	ldr	r2, [pc, #84]	@ (80022cc <restartGame+0xf0>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800227c:	4a13      	ldr	r2, [pc, #76]	@ (80022cc <restartGame+0xf0>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	785b      	ldrb	r3, [r3, #1]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f7ff ff72 	bl	8002174 <isApplePosition>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1c0      	bne.n	8002218 <restartGame+0x3c>
  for (int i = 0; i < NBApple; i++) {
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3301      	adds	r3, #1
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	2304      	movs	r3, #4
 800229e:	461a      	mov	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4293      	cmp	r3, r2
 80022a4:	dbb8      	blt.n	8002218 <restartGame+0x3c>
  }

  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80022a6:	480a      	ldr	r0, [pc, #40]	@ (80022d0 <restartGame+0xf4>)
 80022a8:	f001 fe36 	bl	8003f18 <BSP_LCD_Clear>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	200002a0 	.word	0x200002a0
 80022b8:	20000004 	.word	0x20000004
 80022bc:	20000008 	.word	0x20000008
 80022c0:	20000224 	.word	0x20000224
 80022c4:	20000225 	.word	0x20000225
 80022c8:	20000001 	.word	0x20000001
 80022cc:	200003a8 	.word	0x200003a8
 80022d0:	ff81cd4b 	.word	0xff81cd4b

080022d4 <displayGameStatus>:

void displayGameStatus()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  if (gameOver) {
 80022d8:	4b27      	ldr	r3, [pc, #156]	@ (8002378 <displayGameStatus+0xa4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80022e0:	4826      	ldr	r0, [pc, #152]	@ (800237c <displayGameStatus+0xa8>)
 80022e2:	f001 fdcd 	bl	8003e80 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 80022e6:	4826      	ldr	r0, [pc, #152]	@ (8002380 <displayGameStatus+0xac>)
 80022e8:	f001 fdfc 	bl	8003ee4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 80022ec:	2301      	movs	r3, #1
 80022ee:	4a25      	ldr	r2, [pc, #148]	@ (8002384 <displayGameStatus+0xb0>)
 80022f0:	2164      	movs	r1, #100	@ 0x64
 80022f2:	2000      	movs	r0, #0
 80022f4:	f001 fe7c 	bl	8003ff0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 80022f8:	4823      	ldr	r0, [pc, #140]	@ (8002388 <displayGameStatus+0xb4>)
 80022fa:	f001 fdf3 	bl	8003ee4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 80022fe:	2301      	movs	r3, #1
 8002300:	4a22      	ldr	r2, [pc, #136]	@ (800238c <displayGameStatus+0xb8>)
 8002302:	2182      	movs	r1, #130	@ 0x82
 8002304:	2000      	movs	r0, #0
 8002306:	f001 fe73 	bl	8003ff0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
  }
}
 800230a:	e032      	b.n	8002372 <displayGameStatus+0x9e>
  else if (gamePaused) {
 800230c:	4b20      	ldr	r3, [pc, #128]	@ (8002390 <displayGameStatus+0xbc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <displayGameStatus+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002314:	4819      	ldr	r0, [pc, #100]	@ (800237c <displayGameStatus+0xa8>)
 8002316:	f001 fdb3 	bl	8003e80 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 800231a:	4819      	ldr	r0, [pc, #100]	@ (8002380 <displayGameStatus+0xac>)
 800231c:	f001 fde2 	bl	8003ee4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8002320:	2301      	movs	r3, #1
 8002322:	4a1c      	ldr	r2, [pc, #112]	@ (8002394 <displayGameStatus+0xc0>)
 8002324:	2164      	movs	r1, #100	@ 0x64
 8002326:	2000      	movs	r0, #0
 8002328:	f001 fe62 	bl	8003ff0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 800232c:	4816      	ldr	r0, [pc, #88]	@ (8002388 <displayGameStatus+0xb4>)
 800232e:	f001 fdd9 	bl	8003ee4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 8002332:	2301      	movs	r3, #1
 8002334:	4a18      	ldr	r2, [pc, #96]	@ (8002398 <displayGameStatus+0xc4>)
 8002336:	2182      	movs	r1, #130	@ 0x82
 8002338:	2000      	movs	r0, #0
 800233a:	f001 fe59 	bl	8003ff0 <BSP_LCD_DisplayStringAt>
}
 800233e:	e018      	b.n	8002372 <displayGameStatus+0x9e>
  else if (!gameStarted) {
 8002340:	4b16      	ldr	r3, [pc, #88]	@ (800239c <displayGameStatus+0xc8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d114      	bne.n	8002372 <displayGameStatus+0x9e>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002348:	480c      	ldr	r0, [pc, #48]	@ (800237c <displayGameStatus+0xa8>)
 800234a:	f001 fd99 	bl	8003e80 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 800234e:	480c      	ldr	r0, [pc, #48]	@ (8002380 <displayGameStatus+0xac>)
 8002350:	f001 fdc8 	bl	8003ee4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 8002354:	2301      	movs	r3, #1
 8002356:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <displayGameStatus+0xcc>)
 8002358:	2164      	movs	r1, #100	@ 0x64
 800235a:	2000      	movs	r0, #0
 800235c:	f001 fe48 	bl	8003ff0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002360:	4809      	ldr	r0, [pc, #36]	@ (8002388 <displayGameStatus+0xb4>)
 8002362:	f001 fdbf 	bl	8003ee4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 8002366:	2301      	movs	r3, #1
 8002368:	4a0e      	ldr	r2, [pc, #56]	@ (80023a4 <displayGameStatus+0xd0>)
 800236a:	2182      	movs	r1, #130	@ 0x82
 800236c:	2000      	movs	r0, #0
 800236e:	f001 fe3f 	bl	8003ff0 <BSP_LCD_DisplayStringAt>
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200002a8 	.word	0x200002a8
 800237c:	ffa52a2a 	.word	0xffa52a2a
 8002380:	20000034 	.word	0x20000034
 8002384:	0800f91c 	.word	0x0800f91c
 8002388:	2000003c 	.word	0x2000003c
 800238c:	0800f928 	.word	0x0800f928
 8002390:	200002ac 	.word	0x200002ac
 8002394:	0800f944 	.word	0x0800f944
 8002398:	0800f950 	.word	0x0800f950
 800239c:	200002b0 	.word	0x200002b0
 80023a0:	0800f96c 	.word	0x0800f96c
 80023a4:	0800f978 	.word	0x0800f978

080023a8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80023b2:	20c8      	movs	r0, #200	@ 0xc8
 80023b4:	f001 fc50 	bl	8003c58 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80023b8:	f000 fa7a 	bl	80028b0 <ft5336_I2C_InitializeIfRequired>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80023ec:	2300      	movs	r3, #0
 80023ee:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80023f0:	f000 fa5e 	bl	80028b0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	e010      	b.n	800241c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	21a8      	movs	r1, #168	@ 0xa8
 8002400:	4618      	mov	r0, r3
 8002402:	f001 fc0b 	bl	8003c1c <TS_IO_Read>
 8002406:	4603      	mov	r3, r0
 8002408:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800240a:	7b7b      	ldrb	r3, [r7, #13]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b51      	cmp	r3, #81	@ 0x51
 8002410:	d101      	bne.n	8002416 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8002412:	2301      	movs	r3, #1
 8002414:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	3301      	adds	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d802      	bhi.n	8002428 <ft5336_ReadID+0x4e>
 8002422:	7bbb      	ldrb	r3, [r7, #14]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0e8      	beq.n	80023fa <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002428:	7b7b      	ldrb	r3, [r7, #13]
 800242a:	b2db      	uxtb	r3, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fa45 	bl	80028d0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f933 	bl	80026b4 <ft5336_TS_DisableIT>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2102      	movs	r1, #2
 800246c:	4618      	mov	r0, r3
 800246e:	f001 fbd5 	bl	8003c1c <TS_IO_Read>
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	b2db      	uxtb	r3, r3
 8002480:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b05      	cmp	r3, #5
 8002488:	d901      	bls.n	800248e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <ft5336_TS_DetectTouch+0x50>)
 8002494:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <ft5336_TS_DetectTouch+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	b2db      	uxtb	r3, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000668 	.word	0x20000668

080024ac <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80024ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002684 <ft5336_TS_GetXY+0x1d8>)
 80024d0:	789a      	ldrb	r2, [r3, #2]
 80024d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002684 <ft5336_TS_GetXY+0x1d8>)
 80024d4:	785b      	ldrb	r3, [r3, #1]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	f080 80cf 	bcs.w	800267a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80024dc:	4b69      	ldr	r3, [pc, #420]	@ (8002684 <ft5336_TS_GetXY+0x1d8>)
 80024de:	789b      	ldrb	r3, [r3, #2]
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d871      	bhi.n	80025c8 <ft5336_TS_GetXY+0x11c>
 80024e4:	a201      	add	r2, pc, #4	@ (adr r2, 80024ec <ft5336_TS_GetXY+0x40>)
 80024e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ea:	bf00      	nop
 80024ec:	08002515 	.word	0x08002515
 80024f0:	08002527 	.word	0x08002527
 80024f4:	08002539 	.word	0x08002539
 80024f8:	0800254b 	.word	0x0800254b
 80024fc:	0800255d 	.word	0x0800255d
 8002500:	0800256f 	.word	0x0800256f
 8002504:	08002581 	.word	0x08002581
 8002508:	08002593 	.word	0x08002593
 800250c:	080025a5 	.word	0x080025a5
 8002510:	080025b7 	.word	0x080025b7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8002514:	2304      	movs	r3, #4
 8002516:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002518:	2303      	movs	r3, #3
 800251a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800251c:	2306      	movs	r3, #6
 800251e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002520:	2305      	movs	r3, #5
 8002522:	753b      	strb	r3, [r7, #20]
      break;
 8002524:	e051      	b.n	80025ca <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8002526:	230a      	movs	r3, #10
 8002528:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800252a:	2309      	movs	r3, #9
 800252c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800252e:	230c      	movs	r3, #12
 8002530:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8002532:	230b      	movs	r3, #11
 8002534:	753b      	strb	r3, [r7, #20]
      break;
 8002536:	e048      	b.n	80025ca <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002538:	2310      	movs	r3, #16
 800253a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800253c:	230f      	movs	r3, #15
 800253e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002540:	2312      	movs	r3, #18
 8002542:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8002544:	2311      	movs	r3, #17
 8002546:	753b      	strb	r3, [r7, #20]
      break;
 8002548:	e03f      	b.n	80025ca <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800254a:	2316      	movs	r3, #22
 800254c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800254e:	2315      	movs	r3, #21
 8002550:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8002552:	2318      	movs	r3, #24
 8002554:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8002556:	2317      	movs	r3, #23
 8002558:	753b      	strb	r3, [r7, #20]
      break;
 800255a:	e036      	b.n	80025ca <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800255c:	231c      	movs	r3, #28
 800255e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8002560:	231b      	movs	r3, #27
 8002562:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8002564:	231e      	movs	r3, #30
 8002566:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8002568:	231d      	movs	r3, #29
 800256a:	753b      	strb	r3, [r7, #20]
      break;
 800256c:	e02d      	b.n	80025ca <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800256e:	2322      	movs	r3, #34	@ 0x22
 8002570:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8002572:	2321      	movs	r3, #33	@ 0x21
 8002574:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8002576:	2324      	movs	r3, #36	@ 0x24
 8002578:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800257a:	2323      	movs	r3, #35	@ 0x23
 800257c:	753b      	strb	r3, [r7, #20]
      break;
 800257e:	e024      	b.n	80025ca <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8002580:	2328      	movs	r3, #40	@ 0x28
 8002582:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8002584:	2327      	movs	r3, #39	@ 0x27
 8002586:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8002588:	232a      	movs	r3, #42	@ 0x2a
 800258a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800258c:	2329      	movs	r3, #41	@ 0x29
 800258e:	753b      	strb	r3, [r7, #20]
      break;
 8002590:	e01b      	b.n	80025ca <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8002592:	232e      	movs	r3, #46	@ 0x2e
 8002594:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8002596:	232d      	movs	r3, #45	@ 0x2d
 8002598:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800259a:	2330      	movs	r3, #48	@ 0x30
 800259c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800259e:	232f      	movs	r3, #47	@ 0x2f
 80025a0:	753b      	strb	r3, [r7, #20]
      break;
 80025a2:	e012      	b.n	80025ca <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80025a4:	2334      	movs	r3, #52	@ 0x34
 80025a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80025a8:	2333      	movs	r3, #51	@ 0x33
 80025aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80025ac:	2336      	movs	r3, #54	@ 0x36
 80025ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80025b0:	2335      	movs	r3, #53	@ 0x35
 80025b2:	753b      	strb	r3, [r7, #20]
      break;
 80025b4:	e009      	b.n	80025ca <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80025b6:	233a      	movs	r3, #58	@ 0x3a
 80025b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80025ba:	2339      	movs	r3, #57	@ 0x39
 80025bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80025be:	233c      	movs	r3, #60	@ 0x3c
 80025c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80025c2:	233b      	movs	r3, #59	@ 0x3b
 80025c4:	753b      	strb	r3, [r7, #20]
      break;
 80025c6:	e000      	b.n	80025ca <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80025c8:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	7dfa      	ldrb	r2, [r7, #23]
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 fb22 	bl	8003c1c <TS_IO_Read>
 80025d8:	4603      	mov	r3, r0
 80025da:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b29      	ldr	r3, [pc, #164]	@ (8002688 <ft5336_TS_GetXY+0x1dc>)
 80025e4:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	7dba      	ldrb	r2, [r7, #22]
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fb14 	bl	8003c1c <TS_IO_Read>
 80025f4:	4603      	mov	r3, r0
 80025f6:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002602:	b21a      	sxth	r2, r3
 8002604:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <ft5336_TS_GetXY+0x1dc>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b21b      	sxth	r3, r3
 800260a:	4313      	orrs	r3, r2
 800260c:	b21b      	sxth	r3, r3
 800260e:	b29a      	uxth	r2, r3
 8002610:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <ft5336_TS_GetXY+0x1dc>)
 8002612:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8002614:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <ft5336_TS_GetXY+0x1dc>)
 8002616:	881a      	ldrh	r2, [r3, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	7d7a      	ldrb	r2, [r7, #21]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f001 faf9 	bl	8003c1c <TS_IO_Read>
 800262a:	4603      	mov	r3, r0
 800262c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <ft5336_TS_GetXY+0x1dc>)
 8002636:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002638:	89fb      	ldrh	r3, [r7, #14]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	7d3a      	ldrb	r2, [r7, #20]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f001 faeb 	bl	8003c1c <TS_IO_Read>
 8002646:	4603      	mov	r3, r0
 8002648:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002654:	b21a      	sxth	r2, r3
 8002656:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <ft5336_TS_GetXY+0x1dc>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b21b      	sxth	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	b21b      	sxth	r3, r3
 8002660:	b29a      	uxth	r2, r3
 8002662:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <ft5336_TS_GetXY+0x1dc>)
 8002664:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8002666:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <ft5336_TS_GetXY+0x1dc>)
 8002668:	881a      	ldrh	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800266e:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <ft5336_TS_GetXY+0x1d8>)
 8002670:	789b      	ldrb	r3, [r3, #2]
 8002672:	3301      	adds	r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b03      	ldr	r3, [pc, #12]	@ (8002684 <ft5336_TS_GetXY+0x1d8>)
 8002678:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000668 	.word	0x20000668
 8002688:	2000066c 	.word	0x2000066c

0800268c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	21a4      	movs	r1, #164	@ 0xa4
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 fa9e 	bl	8003be8 <TS_IO_Write>
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	21a4      	movs	r1, #164	@ 0xa4
 80026ce:	4618      	mov	r0, r3
 80026d0:	f001 fa8a 	bl	8003be8 <TS_IO_Write>
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	6039      	str	r1, [r7, #0]
 8002714:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f001 fa7b 	bl	8003c1c <TS_IO_Read>
 8002726:	4603      	mov	r3, r0
 8002728:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	4603      	mov	r3, r0
 800274a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800275c:	4b4d      	ldr	r3, [pc, #308]	@ (8002894 <ft5336_TS_GetTouchInfo+0x158>)
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	461a      	mov	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	4293      	cmp	r3, r2
 8002766:	f080 8090 	bcs.w	800288a <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b09      	cmp	r3, #9
 800276e:	d85d      	bhi.n	800282c <ft5336_TS_GetTouchInfo+0xf0>
 8002770:	a201      	add	r2, pc, #4	@ (adr r2, 8002778 <ft5336_TS_GetTouchInfo+0x3c>)
 8002772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002776:	bf00      	nop
 8002778:	080027a1 	.word	0x080027a1
 800277c:	080027af 	.word	0x080027af
 8002780:	080027bd 	.word	0x080027bd
 8002784:	080027cb 	.word	0x080027cb
 8002788:	080027d9 	.word	0x080027d9
 800278c:	080027e7 	.word	0x080027e7
 8002790:	080027f5 	.word	0x080027f5
 8002794:	08002803 	.word	0x08002803
 8002798:	08002811 	.word	0x08002811
 800279c:	0800281f 	.word	0x0800281f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80027a0:	2303      	movs	r3, #3
 80027a2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80027a4:	2307      	movs	r3, #7
 80027a6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80027a8:	2308      	movs	r3, #8
 80027aa:	757b      	strb	r3, [r7, #21]
      break;
 80027ac:	e03f      	b.n	800282e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80027ae:	2309      	movs	r3, #9
 80027b0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80027b2:	230d      	movs	r3, #13
 80027b4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80027b6:	230e      	movs	r3, #14
 80027b8:	757b      	strb	r3, [r7, #21]
      break;
 80027ba:	e038      	b.n	800282e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80027bc:	230f      	movs	r3, #15
 80027be:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80027c0:	2313      	movs	r3, #19
 80027c2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80027c4:	2314      	movs	r3, #20
 80027c6:	757b      	strb	r3, [r7, #21]
      break;
 80027c8:	e031      	b.n	800282e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80027ca:	2315      	movs	r3, #21
 80027cc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80027ce:	2319      	movs	r3, #25
 80027d0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80027d2:	231a      	movs	r3, #26
 80027d4:	757b      	strb	r3, [r7, #21]
      break;
 80027d6:	e02a      	b.n	800282e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80027d8:	231b      	movs	r3, #27
 80027da:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80027dc:	231f      	movs	r3, #31
 80027de:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80027e0:	2320      	movs	r3, #32
 80027e2:	757b      	strb	r3, [r7, #21]
      break;
 80027e4:	e023      	b.n	800282e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80027e6:	2321      	movs	r3, #33	@ 0x21
 80027e8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80027ea:	2325      	movs	r3, #37	@ 0x25
 80027ec:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80027ee:	2326      	movs	r3, #38	@ 0x26
 80027f0:	757b      	strb	r3, [r7, #21]
      break;
 80027f2:	e01c      	b.n	800282e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80027f4:	2327      	movs	r3, #39	@ 0x27
 80027f6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80027f8:	232b      	movs	r3, #43	@ 0x2b
 80027fa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80027fc:	232c      	movs	r3, #44	@ 0x2c
 80027fe:	757b      	strb	r3, [r7, #21]
      break;
 8002800:	e015      	b.n	800282e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8002802:	232d      	movs	r3, #45	@ 0x2d
 8002804:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8002806:	2331      	movs	r3, #49	@ 0x31
 8002808:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800280a:	2332      	movs	r3, #50	@ 0x32
 800280c:	757b      	strb	r3, [r7, #21]
      break;
 800280e:	e00e      	b.n	800282e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002810:	2333      	movs	r3, #51	@ 0x33
 8002812:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8002814:	2337      	movs	r3, #55	@ 0x37
 8002816:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002818:	2338      	movs	r3, #56	@ 0x38
 800281a:	757b      	strb	r3, [r7, #21]
      break;
 800281c:	e007      	b.n	800282e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800281e:	2339      	movs	r3, #57	@ 0x39
 8002820:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8002822:	233d      	movs	r3, #61	@ 0x3d
 8002824:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8002826:	233e      	movs	r3, #62	@ 0x3e
 8002828:	757b      	strb	r3, [r7, #21]
      break;
 800282a:	e000      	b.n	800282e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800282c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800282e:	89fb      	ldrh	r3, [r7, #14]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	7dfa      	ldrb	r2, [r7, #23]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f001 f9f0 	bl	8003c1c <TS_IO_Read>
 800283c:	4603      	mov	r3, r0
 800283e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002840:	7d3b      	ldrb	r3, [r7, #20]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	119b      	asrs	r3, r3, #6
 8002846:	f003 0203 	and.w	r2, r3, #3
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800284e:	89fb      	ldrh	r3, [r7, #14]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	7dba      	ldrb	r2, [r7, #22]
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f001 f9e0 	bl	8003c1c <TS_IO_Read>
 800285c:	4603      	mov	r3, r0
 800285e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8002860:	7d3b      	ldrb	r3, [r7, #20]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	7d7a      	ldrb	r2, [r7, #21]
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f001 f9d2 	bl	8003c1c <TS_IO_Read>
 8002878:	4603      	mov	r3, r0
 800287a:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800287c:	7d3b      	ldrb	r3, [r7, #20]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	111b      	asrs	r3, r3, #4
 8002882:	f003 0204 	and.w	r2, r3, #4
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000668 	.word	0x20000668

08002898 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800289c:	4b03      	ldr	r3, [pc, #12]	@ (80028ac <ft5336_Get_I2C_InitializedStatus+0x14>)
 800289e:	781b      	ldrb	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000668 	.word	0x20000668

080028b0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80028b4:	f7ff fff0 	bl	8002898 <ft5336_Get_I2C_InitializedStatus>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d104      	bne.n	80028c8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80028be:	f001 f989 	bl	8003bd4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80028c2:	4b02      	ldr	r3, [pc, #8]	@ (80028cc <ft5336_I2C_InitializeIfRequired+0x1c>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
  }
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000668 	.word	0x20000668

080028d0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b090      	sub	sp, #64	@ 0x40
 80028f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]
 8002900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002902:	4baf      	ldr	r3, [pc, #700]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4aae      	ldr	r2, [pc, #696]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4bac      	ldr	r3, [pc, #688]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800291a:	4ba9      	ldr	r3, [pc, #676]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	4aa8      	ldr	r2, [pc, #672]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002924:	6313      	str	r3, [r2, #48]	@ 0x30
 8002926:	4ba6      	ldr	r3, [pc, #664]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	4ba3      	ldr	r3, [pc, #652]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4aa2      	ldr	r2, [pc, #648]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4ba0      	ldr	r3, [pc, #640]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800294a:	4b9d      	ldr	r3, [pc, #628]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a9c      	ldr	r2, [pc, #624]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002950:	f043 0308 	orr.w	r3, r3, #8
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b9a      	ldr	r3, [pc, #616]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	4b97      	ldr	r3, [pc, #604]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a96      	ldr	r2, [pc, #600]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b94      	ldr	r3, [pc, #592]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	4b91      	ldr	r3, [pc, #580]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4a90      	ldr	r2, [pc, #576]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4b8e      	ldr	r3, [pc, #568]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002992:	4b8b      	ldr	r3, [pc, #556]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a8a      	ldr	r2, [pc, #552]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002998:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b88      	ldr	r3, [pc, #544]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029aa:	4b85      	ldr	r3, [pc, #532]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a84      	ldr	r2, [pc, #528]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b82      	ldr	r3, [pc, #520]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80029c2:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029da:	4b79      	ldr	r3, [pc, #484]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a78      	ldr	r2, [pc, #480]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029e0:	f043 0320 	orr.w	r3, r3, #32
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b76      	ldr	r3, [pc, #472]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029f2:	4b73      	ldr	r3, [pc, #460]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a72      	ldr	r2, [pc, #456]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 80029f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b70      	ldr	r3, [pc, #448]	@ (8002bc0 <MX_GPIO_Init+0x2d4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2160      	movs	r1, #96	@ 0x60
 8002a0e:	486d      	ldr	r0, [pc, #436]	@ (8002bc4 <MX_GPIO_Init+0x2d8>)
 8002a10:	f004 ffe2 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a14:	2201      	movs	r2, #1
 8002a16:	2120      	movs	r1, #32
 8002a18:	486b      	ldr	r0, [pc, #428]	@ (8002bc8 <MX_GPIO_Init+0x2dc>)
 8002a1a:	f004 ffdd 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2108      	movs	r1, #8
 8002a22:	4869      	ldr	r0, [pc, #420]	@ (8002bc8 <MX_GPIO_Init+0x2dc>)
 8002a24:	f004 ffd8 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002a28:	2201      	movs	r2, #1
 8002a2a:	2108      	movs	r1, #8
 8002a2c:	4867      	ldr	r0, [pc, #412]	@ (8002bcc <MX_GPIO_Init+0x2e0>)
 8002a2e:	f004 ffd3 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002a32:	2201      	movs	r2, #1
 8002a34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a38:	4865      	ldr	r0, [pc, #404]	@ (8002bd0 <MX_GPIO_Init+0x2e4>)
 8002a3a:	f004 ffcd 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002a44:	4863      	ldr	r0, [pc, #396]	@ (8002bd4 <MX_GPIO_Init+0x2e8>)
 8002a46:	f004 ffc7 	bl	80079d8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	21c8      	movs	r1, #200	@ 0xc8
 8002a4e:	4862      	ldr	r0, [pc, #392]	@ (8002bd8 <MX_GPIO_Init+0x2ec>)
 8002a50:	f004 ffc2 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002a54:	2308      	movs	r3, #8
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a64:	4619      	mov	r1, r3
 8002a66:	4857      	ldr	r0, [pc, #348]	@ (8002bc4 <MX_GPIO_Init+0x2d8>)
 8002a68:	f004 fcfe 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a70:	2302      	movs	r3, #2
 8002a72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a7c:	2309      	movs	r3, #9
 8002a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a84:	4619      	mov	r1, r3
 8002a86:	484f      	ldr	r0, [pc, #316]	@ (8002bc4 <MX_GPIO_Init+0x2d8>)
 8002a88:	f004 fcee 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002a8c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a9e:	230b      	movs	r3, #11
 8002aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	484b      	ldr	r0, [pc, #300]	@ (8002bd8 <MX_GPIO_Init+0x2ec>)
 8002aaa:	f004 fcdd 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002aae:	f643 0323 	movw	r3, #14371	@ 0x3823
 8002ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ac0:	230a      	movs	r3, #10
 8002ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4844      	ldr	r0, [pc, #272]	@ (8002bdc <MX_GPIO_Init+0x2f0>)
 8002acc:	f004 fccc 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002adc:	2300      	movs	r3, #0
 8002ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002ae0:	2308      	movs	r3, #8
 8002ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002ae4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4837      	ldr	r0, [pc, #220]	@ (8002bc8 <MX_GPIO_Init+0x2dc>)
 8002aec:	f004 fcbc 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002af0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002b02:	230c      	movs	r3, #12
 8002b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4834      	ldr	r0, [pc, #208]	@ (8002be0 <MX_GPIO_Init+0x2f4>)
 8002b0e:	f004 fcab 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002b12:	f248 1340 	movw	r3, #33088	@ 0x8140
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b24:	4619      	mov	r1, r3
 8002b26:	482f      	ldr	r0, [pc, #188]	@ (8002be4 <MX_GPIO_Init+0x2f8>)
 8002b28:	f004 fc9e 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002b2c:	2360      	movs	r3, #96	@ 0x60
 8002b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b30:	2301      	movs	r3, #1
 8002b32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b40:	4619      	mov	r1, r3
 8002b42:	4820      	ldr	r0, [pc, #128]	@ (8002bc4 <MX_GPIO_Init+0x2d8>)
 8002b44:	f004 fc90 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002b48:	2340      	movs	r3, #64	@ 0x40
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b58:	230a      	movs	r3, #10
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002b5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b60:	4619      	mov	r1, r3
 8002b62:	481e      	ldr	r0, [pc, #120]	@ (8002bdc <MX_GPIO_Init+0x2f0>)
 8002b64:	f004 fc80 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	481a      	ldr	r0, [pc, #104]	@ (8002be8 <MX_GPIO_Init+0x2fc>)
 8002b7e:	f004 fc73 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002b82:	2340      	movs	r3, #64	@ 0x40
 8002b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b86:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b94:	4619      	mov	r1, r3
 8002b96:	480c      	ldr	r0, [pc, #48]	@ (8002bc8 <MX_GPIO_Init+0x2dc>)
 8002b98:	f004 fc66 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002b9c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002baa:	2303      	movs	r3, #3
 8002bac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bae:	230a      	movs	r3, #10
 8002bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	480a      	ldr	r0, [pc, #40]	@ (8002be4 <MX_GPIO_Init+0x2f8>)
 8002bba:	f004 fc55 	bl	8007468 <HAL_GPIO_Init>
 8002bbe:	e015      	b.n	8002bec <MX_GPIO_Init+0x300>
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40020c00 	.word	0x40020c00
 8002bcc:	40022800 	.word	0x40022800
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40021c00 	.word	0x40021c00
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	40020400 	.word	0x40020400
 8002be0:	40020800 	.word	0x40020800
 8002be4:	40020000 	.word	0x40020000
 8002be8:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002bec:	23f0      	movs	r3, #240	@ 0xf0
 8002bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002bfc:	230a      	movs	r3, #10
 8002bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c04:	4619      	mov	r1, r3
 8002c06:	4891      	ldr	r0, [pc, #580]	@ (8002e4c <MX_GPIO_Init+0x560>)
 8002c08:	f004 fc2e 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002c1e:	230a      	movs	r3, #10
 8002c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002c22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c26:	4619      	mov	r1, r3
 8002c28:	4889      	ldr	r0, [pc, #548]	@ (8002e50 <MX_GPIO_Init+0x564>)
 8002c2a:	f004 fc1d 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002c2e:	2328      	movs	r3, #40	@ 0x28
 8002c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c32:	2301      	movs	r3, #1
 8002c34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c42:	4619      	mov	r1, r3
 8002c44:	4883      	ldr	r0, [pc, #524]	@ (8002e54 <MX_GPIO_Init+0x568>)
 8002c46:	f004 fc0f 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c50:	2300      	movs	r3, #0
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002c58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	487e      	ldr	r0, [pc, #504]	@ (8002e58 <MX_GPIO_Init+0x56c>)
 8002c60:	f004 fc02 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002c64:	2308      	movs	r3, #8
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4878      	ldr	r0, [pc, #480]	@ (8002e5c <MX_GPIO_Init+0x570>)
 8002c7c:	f004 fbf4 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002c80:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c86:	2300      	movs	r3, #0
 8002c88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c92:	4619      	mov	r1, r3
 8002c94:	486e      	ldr	r0, [pc, #440]	@ (8002e50 <MX_GPIO_Init+0x564>)
 8002c96:	f004 fbe7 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ca6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002caa:	4619      	mov	r1, r3
 8002cac:	4869      	ldr	r0, [pc, #420]	@ (8002e54 <MX_GPIO_Init+0x568>)
 8002cae:	f004 fbdb 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002cc2:	230c      	movs	r3, #12
 8002cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4861      	ldr	r0, [pc, #388]	@ (8002e54 <MX_GPIO_Init+0x568>)
 8002cce:	f004 fbcb 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002cd2:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8002cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	485e      	ldr	r0, [pc, #376]	@ (8002e60 <MX_GPIO_Init+0x574>)
 8002ce8:	f004 fbbe 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d02:	4619      	mov	r1, r3
 8002d04:	4851      	ldr	r0, [pc, #324]	@ (8002e4c <MX_GPIO_Init+0x560>)
 8002d06:	f004 fbaf 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002d0a:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8002d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d10:	2301      	movs	r3, #1
 8002d12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d20:	4619      	mov	r1, r3
 8002d22:	484f      	ldr	r0, [pc, #316]	@ (8002e60 <MX_GPIO_Init+0x574>)
 8002d24:	f004 fba0 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002d28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d2e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002d32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002d38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4843      	ldr	r0, [pc, #268]	@ (8002e4c <MX_GPIO_Init+0x560>)
 8002d40:	f004 fb92 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002d44:	2310      	movs	r3, #16
 8002d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d54:	230a      	movs	r3, #10
 8002d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4840      	ldr	r0, [pc, #256]	@ (8002e60 <MX_GPIO_Init+0x574>)
 8002d60:	f004 fb82 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002d64:	23c8      	movs	r3, #200	@ 0xc8
 8002d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	2300      	movs	r3, #0
 8002d72:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4835      	ldr	r0, [pc, #212]	@ (8002e50 <MX_GPIO_Init+0x564>)
 8002d7c:	f004 fb74 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002d80:	2305      	movs	r3, #5
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d90:	230a      	movs	r3, #10
 8002d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d98:	4619      	mov	r1, r3
 8002d9a:	482f      	ldr	r0, [pc, #188]	@ (8002e58 <MX_GPIO_Init+0x56c>)
 8002d9c:	f004 fb64 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002da0:	2332      	movs	r3, #50	@ 0x32
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002db0:	230b      	movs	r3, #11
 8002db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db8:	4619      	mov	r1, r3
 8002dba:	4827      	ldr	r0, [pc, #156]	@ (8002e58 <MX_GPIO_Init+0x56c>)
 8002dbc:	f004 fb54 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002dd0:	2309      	movs	r3, #9
 8002dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4822      	ldr	r0, [pc, #136]	@ (8002e64 <MX_GPIO_Init+0x578>)
 8002ddc:	f004 fb44 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002de0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002df2:	2309      	movs	r3, #9
 8002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4815      	ldr	r0, [pc, #84]	@ (8002e54 <MX_GPIO_Init+0x568>)
 8002dfe:	f004 fb33 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002e02:	2386      	movs	r3, #134	@ 0x86
 8002e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e12:	230b      	movs	r3, #11
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4812      	ldr	r0, [pc, #72]	@ (8002e68 <MX_GPIO_Init+0x57c>)
 8002e1e:	f004 fb23 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002e22:	2328      	movs	r3, #40	@ 0x28
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e32:	230a      	movs	r3, #10
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480a      	ldr	r0, [pc, #40]	@ (8002e68 <MX_GPIO_Init+0x57c>)
 8002e3e:	f004 fb13 	bl	8007468 <HAL_GPIO_Init>

}
 8002e42:	bf00      	nop
 8002e44:	3740      	adds	r7, #64	@ 0x40
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40022000 	.word	0x40022000
 8002e50:	40021800 	.word	0x40021800
 8002e54:	40020c00 	.word	0x40020c00
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40022800 	.word	0x40022800
 8002e60:	40021c00 	.word	0x40021c00
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40020000 	.word	0x40020000

08002e6c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002e72:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee4 <MX_I2C1_Init+0x78>)
 8002e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002e76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002e78:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <MX_I2C1_Init+0x7c>)
 8002e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e7c:	4b18      	ldr	r3, [pc, #96]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e82:	4b17      	ldr	r3, [pc, #92]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e88:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e94:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ea6:	480e      	ldr	r0, [pc, #56]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002ea8:	f004 fdb0 	bl	8007a0c <HAL_I2C_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002eb2:	f000 fbc1 	bl	8003638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4809      	ldr	r0, [pc, #36]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002eba:	f005 fb3d 	bl	8008538 <HAL_I2CEx_ConfigAnalogFilter>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ec4:	f000 fbb8 	bl	8003638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4805      	ldr	r0, [pc, #20]	@ (8002ee0 <MX_I2C1_Init+0x74>)
 8002ecc:	f005 fb7f 	bl	80085ce <HAL_I2CEx_ConfigDigitalFilter>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ed6:	f000 fbaf 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000670 	.word	0x20000670
 8002ee4:	40005400 	.word	0x40005400
 8002ee8:	00c0eaff 	.word	0x00c0eaff

08002eec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f64 <MX_I2C3_Init+0x78>)
 8002ef4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f68 <MX_I2C3_Init+0x7c>)
 8002efa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002efc:	4b18      	ldr	r3, [pc, #96]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f02:	4b17      	ldr	r3, [pc, #92]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f08:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002f0e:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f14:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f20:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002f26:	480e      	ldr	r0, [pc, #56]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002f28:	f004 fd70 	bl	8007a0c <HAL_I2C_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002f32:	f000 fb81 	bl	8003638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f36:	2100      	movs	r1, #0
 8002f38:	4809      	ldr	r0, [pc, #36]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002f3a:	f005 fafd 	bl	8008538 <HAL_I2CEx_ConfigAnalogFilter>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002f44:	f000 fb78 	bl	8003638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4805      	ldr	r0, [pc, #20]	@ (8002f60 <MX_I2C3_Init+0x74>)
 8002f4c:	f005 fb3f 	bl	80085ce <HAL_I2CEx_ConfigDigitalFilter>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002f56:	f000 fb6f 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200006c4 	.word	0x200006c4
 8002f64:	40005c00 	.word	0x40005c00
 8002f68:	00c0eaff 	.word	0x00c0eaff

08002f6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b0ac      	sub	sp, #176	@ 0xb0
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f84:	f107 0318 	add.w	r3, r7, #24
 8002f88:	2284      	movs	r2, #132	@ 0x84
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f00b fb72 	bl	800e676 <memset>
  if(i2cHandle->Instance==I2C1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a44      	ldr	r2, [pc, #272]	@ (80030a8 <HAL_I2C_MspInit+0x13c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d13d      	bne.n	8003018 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa6:	f107 0318 	add.w	r3, r7, #24
 8002faa:	4618      	mov	r0, r3
 8002fac:	f006 fbf0 	bl	8009790 <HAL_RCCEx_PeriphCLKConfig>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002fb6:	f000 fb3f 	bl	8003638 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fba:	4b3c      	ldr	r3, [pc, #240]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	4a3b      	ldr	r2, [pc, #236]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc6:	4b39      	ldr	r3, [pc, #228]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fda:	2312      	movs	r3, #18
 8002fdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fec:	2304      	movs	r3, #4
 8002fee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	482d      	ldr	r0, [pc, #180]	@ (80030b0 <HAL_I2C_MspInit+0x144>)
 8002ffa:	f004 fa35 	bl	8007468 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	4a2a      	ldr	r2, [pc, #168]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 8003004:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003008:	6413      	str	r3, [r2, #64]	@ 0x40
 800300a:	4b28      	ldr	r3, [pc, #160]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003016:	e042      	b.n	800309e <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a25      	ldr	r2, [pc, #148]	@ (80030b4 <HAL_I2C_MspInit+0x148>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d13d      	bne.n	800309e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003022:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003026:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003028:	2300      	movs	r3, #0
 800302a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800302e:	f107 0318 	add.w	r3, r7, #24
 8003032:	4618      	mov	r0, r3
 8003034:	f006 fbac 	bl	8009790 <HAL_RCCEx_PeriphCLKConfig>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800303e:	f000 fafb 	bl	8003638 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003042:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	4a19      	ldr	r2, [pc, #100]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 8003048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800304c:	6313      	str	r3, [r2, #48]	@ 0x30
 800304e:	4b17      	ldr	r3, [pc, #92]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800305a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800305e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003062:	2312      	movs	r3, #18
 8003064:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003068:	2301      	movs	r3, #1
 800306a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306e:	2303      	movs	r3, #3
 8003070:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003074:	2304      	movs	r3, #4
 8003076:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800307a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800307e:	4619      	mov	r1, r3
 8003080:	480d      	ldr	r0, [pc, #52]	@ (80030b8 <HAL_I2C_MspInit+0x14c>)
 8003082:	f004 f9f1 	bl	8007468 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003086:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	4a08      	ldr	r2, [pc, #32]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 800308c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003090:	6413      	str	r3, [r2, #64]	@ 0x40
 8003092:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <HAL_I2C_MspInit+0x140>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
}
 800309e:	bf00      	nop
 80030a0:	37b0      	adds	r7, #176	@ 0xb0
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40005400 	.word	0x40005400
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40020400 	.word	0x40020400
 80030b4:	40005c00 	.word	0x40005c00
 80030b8:	40021c00 	.word	0x40021c00

080030bc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a15      	ldr	r2, [pc, #84]	@ (8003120 <HAL_I2C_MspDeInit+0x64>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d110      	bne.n	80030f0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <HAL_I2C_MspDeInit+0x68>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	4a14      	ldr	r2, [pc, #80]	@ (8003124 <HAL_I2C_MspDeInit+0x68>)
 80030d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030d8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80030da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030de:	4812      	ldr	r0, [pc, #72]	@ (8003128 <HAL_I2C_MspDeInit+0x6c>)
 80030e0:	f004 fb6e 	bl	80077c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80030e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030e8:	480f      	ldr	r0, [pc, #60]	@ (8003128 <HAL_I2C_MspDeInit+0x6c>)
 80030ea:	f004 fb69 	bl	80077c0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80030ee:	e013      	b.n	8003118 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0d      	ldr	r2, [pc, #52]	@ (800312c <HAL_I2C_MspDeInit+0x70>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10e      	bne.n	8003118 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <HAL_I2C_MspDeInit+0x68>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <HAL_I2C_MspDeInit+0x68>)
 8003100:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003104:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003106:	2180      	movs	r1, #128	@ 0x80
 8003108:	4809      	ldr	r0, [pc, #36]	@ (8003130 <HAL_I2C_MspDeInit+0x74>)
 800310a:	f004 fb59 	bl	80077c0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800310e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003112:	4807      	ldr	r0, [pc, #28]	@ (8003130 <HAL_I2C_MspDeInit+0x74>)
 8003114:	f004 fb54 	bl	80077c0 <HAL_GPIO_DeInit>
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40005400 	.word	0x40005400
 8003124:	40023800 	.word	0x40023800
 8003128:	40020400 	.word	0x40020400
 800312c:	40005c00 	.word	0x40005c00
 8003130:	40021c00 	.word	0x40021c00

08003134 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08e      	sub	sp, #56	@ 0x38
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	2234      	movs	r2, #52	@ 0x34
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f00b fa98 	bl	800e676 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003146:	4b3a      	ldr	r3, [pc, #232]	@ (8003230 <MX_LTDC_Init+0xfc>)
 8003148:	4a3a      	ldr	r2, [pc, #232]	@ (8003234 <MX_LTDC_Init+0x100>)
 800314a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800314c:	4b38      	ldr	r3, [pc, #224]	@ (8003230 <MX_LTDC_Init+0xfc>)
 800314e:	2200      	movs	r2, #0
 8003150:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003152:	4b37      	ldr	r3, [pc, #220]	@ (8003230 <MX_LTDC_Init+0xfc>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003158:	4b35      	ldr	r3, [pc, #212]	@ (8003230 <MX_LTDC_Init+0xfc>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800315e:	4b34      	ldr	r3, [pc, #208]	@ (8003230 <MX_LTDC_Init+0xfc>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8003164:	4b32      	ldr	r3, [pc, #200]	@ (8003230 <MX_LTDC_Init+0xfc>)
 8003166:	2228      	movs	r2, #40	@ 0x28
 8003168:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800316a:	4b31      	ldr	r3, [pc, #196]	@ (8003230 <MX_LTDC_Init+0xfc>)
 800316c:	2209      	movs	r2, #9
 800316e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8003170:	4b2f      	ldr	r3, [pc, #188]	@ (8003230 <MX_LTDC_Init+0xfc>)
 8003172:	2235      	movs	r2, #53	@ 0x35
 8003174:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8003176:	4b2e      	ldr	r3, [pc, #184]	@ (8003230 <MX_LTDC_Init+0xfc>)
 8003178:	220b      	movs	r2, #11
 800317a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800317c:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <MX_LTDC_Init+0xfc>)
 800317e:	f240 2215 	movw	r2, #533	@ 0x215
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003184:	4b2a      	ldr	r3, [pc, #168]	@ (8003230 <MX_LTDC_Init+0xfc>)
 8003186:	f240 121b 	movw	r2, #283	@ 0x11b
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 800318c:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <MX_LTDC_Init+0xfc>)
 800318e:	f240 2235 	movw	r2, #565	@ 0x235
 8003192:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003194:	4b26      	ldr	r3, [pc, #152]	@ (8003230 <MX_LTDC_Init+0xfc>)
 8003196:	f240 121d 	movw	r2, #285	@ 0x11d
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800319c:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <MX_LTDC_Init+0xfc>)
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80031a4:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <MX_LTDC_Init+0xfc>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80031ac:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <MX_LTDC_Init+0xfc>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80031b4:	481e      	ldr	r0, [pc, #120]	@ (8003230 <MX_LTDC_Init+0xfc>)
 80031b6:	f005 fa57 	bl	8008668 <HAL_LTDC_Init>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80031c0:	f000 fa3a 	bl	8003638 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80031c8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80031cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80031d2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80031d6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80031d8:	2302      	movs	r3, #2
 80031da:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80031dc:	23ff      	movs	r3, #255	@ 0xff
 80031de:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80031e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80031e8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80031ea:	2307      	movs	r3, #7
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80031ee:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80031f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80031f4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80031f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80031fa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80031fe:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	2200      	movs	r2, #0
 8003216:	4619      	mov	r1, r3
 8003218:	4805      	ldr	r0, [pc, #20]	@ (8003230 <MX_LTDC_Init+0xfc>)
 800321a:	f005 fbb7 	bl	800898c <HAL_LTDC_ConfigLayer>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8003224:	f000 fa08 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003228:	bf00      	nop
 800322a:	3738      	adds	r7, #56	@ 0x38
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000718 	.word	0x20000718
 8003234:	40016800 	.word	0x40016800

08003238 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b0ae      	sub	sp, #184	@ 0xb8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003250:	f107 0320 	add.w	r3, r7, #32
 8003254:	2284      	movs	r2, #132	@ 0x84
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f00b fa0c 	bl	800e676 <memset>
  if(ltdcHandle->Instance==LTDC)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6f      	ldr	r2, [pc, #444]	@ (8003420 <HAL_LTDC_MspInit+0x1e8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	f040 80d6 	bne.w	8003416 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800326a:	2308      	movs	r3, #8
 800326c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800326e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003272:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003274:	2305      	movs	r3, #5
 8003276:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003278:	2302      	movs	r3, #2
 800327a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800327c:	2303      	movs	r3, #3
 800327e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003280:	2301      	movs	r3, #1
 8003282:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003284:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003288:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800328a:	f107 0320 	add.w	r3, r7, #32
 800328e:	4618      	mov	r0, r3
 8003290:	f006 fa7e 	bl	8009790 <HAL_RCCEx_PeriphCLKConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 800329a:	f000 f9cd 	bl	8003638 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800329e:	4b61      	ldr	r3, [pc, #388]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	4a60      	ldr	r2, [pc, #384]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032aa:	4b5e      	ldr	r3, [pc, #376]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032bc:	f043 0310 	orr.w	r3, r3, #16
 80032c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c2:	4b58      	ldr	r3, [pc, #352]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80032ce:	4b55      	ldr	r3, [pc, #340]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	4a54      	ldr	r2, [pc, #336]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032da:	4b52      	ldr	r3, [pc, #328]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80032e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	4a4e      	ldr	r2, [pc, #312]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032fe:	4b49      	ldr	r3, [pc, #292]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	4a48      	ldr	r2, [pc, #288]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 8003304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003308:	6313      	str	r3, [r2, #48]	@ 0x30
 800330a:	4b46      	ldr	r3, [pc, #280]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003316:	4b43      	ldr	r3, [pc, #268]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a42      	ldr	r2, [pc, #264]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b40      	ldr	r3, [pc, #256]	@ (8003424 <HAL_LTDC_MspInit+0x1ec>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800332e:	2310      	movs	r3, #16
 8003330:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003334:	2302      	movs	r3, #2
 8003336:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003340:	2300      	movs	r3, #0
 8003342:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003346:	230e      	movs	r3, #14
 8003348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800334c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003350:	4619      	mov	r1, r3
 8003352:	4835      	ldr	r0, [pc, #212]	@ (8003428 <HAL_LTDC_MspInit+0x1f0>)
 8003354:	f004 f888 	bl	8007468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003358:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800335c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003372:	230e      	movs	r3, #14
 8003374:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003378:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800337c:	4619      	mov	r1, r3
 800337e:	482b      	ldr	r0, [pc, #172]	@ (800342c <HAL_LTDC_MspInit+0x1f4>)
 8003380:	f004 f872 	bl	8007468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003384:	23f7      	movs	r3, #247	@ 0xf7
 8003386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338a:	2302      	movs	r3, #2
 800338c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003396:	2300      	movs	r3, #0
 8003398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800339c:	230e      	movs	r3, #14
 800339e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80033a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033a6:	4619      	mov	r1, r3
 80033a8:	4821      	ldr	r0, [pc, #132]	@ (8003430 <HAL_LTDC_MspInit+0x1f8>)
 80033aa:	f004 f85d 	bl	8007468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80033ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80033c8:	2309      	movs	r3, #9
 80033ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80033ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033d2:	4619      	mov	r1, r3
 80033d4:	4817      	ldr	r0, [pc, #92]	@ (8003434 <HAL_LTDC_MspInit+0x1fc>)
 80033d6:	f004 f847 	bl	8007468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80033da:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80033de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e2:	2302      	movs	r3, #2
 80033e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033f4:	230e      	movs	r3, #14
 80033f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033fa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033fe:	4619      	mov	r1, r3
 8003400:	480d      	ldr	r0, [pc, #52]	@ (8003438 <HAL_LTDC_MspInit+0x200>)
 8003402:	f004 f831 	bl	8007468 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003406:	2200      	movs	r2, #0
 8003408:	2105      	movs	r1, #5
 800340a:	2058      	movs	r0, #88	@ 0x58
 800340c:	f003 f9c8 	bl	80067a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003410:	2058      	movs	r0, #88	@ 0x58
 8003412:	f003 f9e1 	bl	80067d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003416:	bf00      	nop
 8003418:	37b8      	adds	r7, #184	@ 0xb8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40016800 	.word	0x40016800
 8003424:	40023800 	.word	0x40023800
 8003428:	40021000 	.word	0x40021000
 800342c:	40022400 	.word	0x40022400
 8003430:	40022800 	.word	0x40022800
 8003434:	40021800 	.word	0x40021800
 8003438:	40022000 	.word	0x40022000

0800343c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800343c:	b598      	push	{r3, r4, r7, lr}
 800343e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003440:	4b37      	ldr	r3, [pc, #220]	@ (8003520 <main+0xe4>)
 8003442:	2201      	movs	r2, #1
 8003444:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003446:	4b36      	ldr	r3, [pc, #216]	@ (8003520 <main+0xe4>)
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800344c:	f002 fca5 	bl	8005d9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003450:	f000 f86e 	bl	8003530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003454:	f7ff fa4a 	bl	80028ec <MX_GPIO_Init>
  MX_ADC3_Init();
 8003458:	f7fd fce2 	bl	8000e20 <MX_ADC3_Init>
  MX_DMA2D_Init();
 800345c:	f7fd fe12 	bl	8001084 <MX_DMA2D_Init>
  MX_FMC_Init();
 8003460:	f7fd fe68 	bl	8001134 <MX_FMC_Init>
  MX_I2C1_Init();
 8003464:	f7ff fd02 	bl	8002e6c <MX_I2C1_Init>
  MX_I2C3_Init();
 8003468:	f7ff fd40 	bl	8002eec <MX_I2C3_Init>
  MX_LTDC_Init();
 800346c:	f7ff fe62 	bl	8003134 <MX_LTDC_Init>
  MX_RTC_Init();
 8003470:	f000 f8e8 	bl	8003644 <MX_RTC_Init>
  MX_SPI2_Init();
 8003474:	f000 f9b8 	bl	80037e8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003478:	f002 f8a2 	bl	80055c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800347c:	f002 f8f4 	bl	8005668 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003480:	f002 f940 	bl	8005704 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003484:	f002 f98c 	bl	80057a0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8003488:	f002 f9d8 	bl	800583c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800348c:	f002 faec 	bl	8005a68 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003490:	f002 fb1a 	bl	8005ac8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8003494:	f7fd fc72 	bl	8000d7c <MX_ADC1_Init>
  MX_DAC_Init();
 8003498:	f7fd fd82 	bl	8000fa0 <MX_DAC_Init>
  MX_UART7_Init();
 800349c:	f002 fab4 	bl	8005a08 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80034a0:	f000 fbe6 	bl	8003c70 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80034a4:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80034a8:	2000      	movs	r0, #0
 80034aa:	f000 fc79 	bl	8003da0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 80034ae:	f000 fc4f 	bl	8003d50 <BSP_LCD_GetXSize>
 80034b2:	4604      	mov	r4, r0
 80034b4:	f000 fc60 	bl	8003d78 <BSP_LCD_GetYSize>
 80034b8:	4603      	mov	r3, r0
 80034ba:	fb04 f303 	mul.w	r3, r4, r3
 80034be:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4619      	mov	r1, r3
 80034c6:	2001      	movs	r0, #1
 80034c8:	f000 fc6a 	bl	8003da0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 80034cc:	f001 f82a 	bl	8004524 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 80034d0:	2000      	movs	r0, #0
 80034d2:	f000 fcc5 	bl	8003e60 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80034d6:	4813      	ldr	r0, [pc, #76]	@ (8003524 <main+0xe8>)
 80034d8:	f000 fd1e 	bl	8003f18 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 80034dc:	2001      	movs	r0, #1
 80034de:	f000 fcbf 	bl	8003e60 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 80034e2:	2000      	movs	r0, #0
 80034e4:	f000 fd18 	bl	8003f18 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 80034e8:	480f      	ldr	r0, [pc, #60]	@ (8003528 <main+0xec>)
 80034ea:	f000 fcfb 	bl	8003ee4 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80034ee:	480f      	ldr	r0, [pc, #60]	@ (800352c <main+0xf0>)
 80034f0:	f000 fcc6 	bl	8003e80 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 80034f4:	2000      	movs	r0, #0
 80034f6:	f000 fcdb 	bl	8003eb0 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80034fa:	f000 fc29 	bl	8003d50 <BSP_LCD_GetXSize>
 80034fe:	4603      	mov	r3, r0
 8003500:	b29c      	uxth	r4, r3
 8003502:	f000 fc39 	bl	8003d78 <BSP_LCD_GetYSize>
 8003506:	4603      	mov	r3, r0
 8003508:	b29b      	uxth	r3, r3
 800350a:	4619      	mov	r1, r3
 800350c:	4620      	mov	r0, r4
 800350e:	f001 fc1b 	bl	8004d48 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003512:	f7fd ff13 	bl	800133c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003516:	f008 fc71 	bl	800bdfc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800351a:	bf00      	nop
 800351c:	e7fd      	b.n	800351a <main+0xde>
 800351e:	bf00      	nop
 8003520:	200007c0 	.word	0x200007c0
 8003524:	ff81cd4b 	.word	0xff81cd4b
 8003528:	2000003c 	.word	0x2000003c
 800352c:	ffa52a2a 	.word	0xffa52a2a

08003530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b094      	sub	sp, #80	@ 0x50
 8003534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003536:	f107 0320 	add.w	r3, r7, #32
 800353a:	2230      	movs	r2, #48	@ 0x30
 800353c:	2100      	movs	r1, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f00b f899 	bl	800e676 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003554:	f005 fc00 	bl	8008d58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003558:	4b2c      	ldr	r3, [pc, #176]	@ (800360c <SystemClock_Config+0xdc>)
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	4a2b      	ldr	r2, [pc, #172]	@ (800360c <SystemClock_Config+0xdc>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003562:	6413      	str	r3, [r2, #64]	@ 0x40
 8003564:	4b29      	ldr	r3, [pc, #164]	@ (800360c <SystemClock_Config+0xdc>)
 8003566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <SystemClock_Config+0xe0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a26      	ldr	r2, [pc, #152]	@ (8003610 <SystemClock_Config+0xe0>)
 8003576:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b24      	ldr	r3, [pc, #144]	@ (8003610 <SystemClock_Config+0xe0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003588:	2309      	movs	r3, #9
 800358a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800358c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003592:	2301      	movs	r3, #1
 8003594:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003596:	2302      	movs	r3, #2
 8003598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800359a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800359e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80035a0:	2319      	movs	r3, #25
 80035a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80035a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80035a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035aa:	2302      	movs	r3, #2
 80035ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80035ae:	2309      	movs	r3, #9
 80035b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035b2:	f107 0320 	add.w	r3, r7, #32
 80035b6:	4618      	mov	r0, r3
 80035b8:	f005 fc2e 	bl	8008e18 <HAL_RCC_OscConfig>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80035c2:	f000 f839 	bl	8003638 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80035c6:	f005 fbd7 	bl	8008d78 <HAL_PWREx_EnableOverDrive>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80035d0:	f000 f832 	bl	8003638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035d4:	230f      	movs	r3, #15
 80035d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035d8:	2302      	movs	r3, #2
 80035da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80035e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	2106      	movs	r1, #6
 80035f2:	4618      	mov	r0, r3
 80035f4:	f005 feb4 	bl	8009360 <HAL_RCC_ClockConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80035fe:	f000 f81b 	bl	8003638 <Error_Handler>
  }
}
 8003602:	bf00      	nop
 8003604:	3750      	adds	r7, #80	@ 0x50
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	40007000 	.word	0x40007000

08003614 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a04      	ldr	r2, [pc, #16]	@ (8003634 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003626:	f002 fbc5 	bl	8005db4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40001000 	.word	0x40001000

08003638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800363c:	b672      	cpsid	i
}
 800363e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <Error_Handler+0x8>

08003644 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b090      	sub	sp, #64	@ 0x40
 8003648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800364a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	60da      	str	r2, [r3, #12]
 8003658:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800365a:	2300      	movs	r3, #0
 800365c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800365e:	463b      	mov	r3, r7
 8003660:	2228      	movs	r2, #40	@ 0x28
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f00b f806 	bl	800e676 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800366a:	4b46      	ldr	r3, [pc, #280]	@ (8003784 <MX_RTC_Init+0x140>)
 800366c:	4a46      	ldr	r2, [pc, #280]	@ (8003788 <MX_RTC_Init+0x144>)
 800366e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003670:	4b44      	ldr	r3, [pc, #272]	@ (8003784 <MX_RTC_Init+0x140>)
 8003672:	2200      	movs	r2, #0
 8003674:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003676:	4b43      	ldr	r3, [pc, #268]	@ (8003784 <MX_RTC_Init+0x140>)
 8003678:	227f      	movs	r2, #127	@ 0x7f
 800367a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800367c:	4b41      	ldr	r3, [pc, #260]	@ (8003784 <MX_RTC_Init+0x140>)
 800367e:	22ff      	movs	r2, #255	@ 0xff
 8003680:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003682:	4b40      	ldr	r3, [pc, #256]	@ (8003784 <MX_RTC_Init+0x140>)
 8003684:	2200      	movs	r2, #0
 8003686:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003688:	4b3e      	ldr	r3, [pc, #248]	@ (8003784 <MX_RTC_Init+0x140>)
 800368a:	2200      	movs	r2, #0
 800368c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800368e:	4b3d      	ldr	r3, [pc, #244]	@ (8003784 <MX_RTC_Init+0x140>)
 8003690:	2200      	movs	r2, #0
 8003692:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003694:	483b      	ldr	r0, [pc, #236]	@ (8003784 <MX_RTC_Init+0x140>)
 8003696:	f006 fc6b 	bl	8009f70 <HAL_RTC_Init>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80036a0:	f7ff ffca 	bl	8003638 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036c2:	2201      	movs	r2, #1
 80036c4:	4619      	mov	r1, r3
 80036c6:	482f      	ldr	r0, [pc, #188]	@ (8003784 <MX_RTC_Init+0x140>)
 80036c8:	f006 fcd6 	bl	800a078 <HAL_RTC_SetTime>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80036d2:	f7ff ffb1 	bl	8003638 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80036ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036f2:	2201      	movs	r2, #1
 80036f4:	4619      	mov	r1, r3
 80036f6:	4823      	ldr	r0, [pc, #140]	@ (8003784 <MX_RTC_Init+0x140>)
 80036f8:	f006 fd58 	bl	800a1ac <HAL_RTC_SetDate>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003702:	f7ff ff99 	bl	8003638 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003706:	2300      	movs	r3, #0
 8003708:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800370a:	2300      	movs	r3, #0
 800370c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800370e:	2300      	movs	r3, #0
 8003710:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003712:	2300      	movs	r3, #0
 8003714:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003736:	463b      	mov	r3, r7
 8003738:	2201      	movs	r2, #1
 800373a:	4619      	mov	r1, r3
 800373c:	4811      	ldr	r0, [pc, #68]	@ (8003784 <MX_RTC_Init+0x140>)
 800373e:	f006 fdb9 	bl	800a2b4 <HAL_RTC_SetAlarm>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003748:	f7ff ff76 	bl	8003638 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800374c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003752:	463b      	mov	r3, r7
 8003754:	2201      	movs	r2, #1
 8003756:	4619      	mov	r1, r3
 8003758:	480a      	ldr	r0, [pc, #40]	@ (8003784 <MX_RTC_Init+0x140>)
 800375a:	f006 fdab 	bl	800a2b4 <HAL_RTC_SetAlarm>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8003764:	f7ff ff68 	bl	8003638 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8003768:	2202      	movs	r2, #2
 800376a:	2100      	movs	r1, #0
 800376c:	4805      	ldr	r0, [pc, #20]	@ (8003784 <MX_RTC_Init+0x140>)
 800376e:	f006 ff6d 	bl	800a64c <HAL_RTCEx_SetTimeStamp>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8003778:	f7ff ff5e 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800377c:	bf00      	nop
 800377e:	3740      	adds	r7, #64	@ 0x40
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	200007d0 	.word	0x200007d0
 8003788:	40002800 	.word	0x40002800

0800378c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b0a4      	sub	sp, #144	@ 0x90
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003794:	f107 030c 	add.w	r3, r7, #12
 8003798:	2284      	movs	r2, #132	@ 0x84
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f00a ff6a 	bl	800e676 <memset>
  if(rtcHandle->Instance==RTC)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a0e      	ldr	r2, [pc, #56]	@ (80037e0 <HAL_RTC_MspInit+0x54>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d114      	bne.n	80037d6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80037ac:	2320      	movs	r3, #32
 80037ae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80037b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037b6:	f107 030c 	add.w	r3, r7, #12
 80037ba:	4618      	mov	r0, r3
 80037bc:	f005 ffe8 	bl	8009790 <HAL_RCCEx_PeriphCLKConfig>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80037c6:	f7ff ff37 	bl	8003638 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037ca:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_RTC_MspInit+0x58>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	4a05      	ldr	r2, [pc, #20]	@ (80037e4 <HAL_RTC_MspInit+0x58>)
 80037d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037d4:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80037d6:	bf00      	nop
 80037d8:	3790      	adds	r7, #144	@ 0x90
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40002800 	.word	0x40002800
 80037e4:	40023800 	.word	0x40023800

080037e8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <MX_SPI2_Init+0x74>)
 80037ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003860 <MX_SPI2_Init+0x78>)
 80037f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037f2:	4b1a      	ldr	r3, [pc, #104]	@ (800385c <MX_SPI2_Init+0x74>)
 80037f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80037f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037fa:	4b18      	ldr	r3, [pc, #96]	@ (800385c <MX_SPI2_Init+0x74>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003800:	4b16      	ldr	r3, [pc, #88]	@ (800385c <MX_SPI2_Init+0x74>)
 8003802:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003806:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003808:	4b14      	ldr	r3, [pc, #80]	@ (800385c <MX_SPI2_Init+0x74>)
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800380e:	4b13      	ldr	r3, [pc, #76]	@ (800385c <MX_SPI2_Init+0x74>)
 8003810:	2200      	movs	r2, #0
 8003812:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003814:	4b11      	ldr	r3, [pc, #68]	@ (800385c <MX_SPI2_Init+0x74>)
 8003816:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800381a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <MX_SPI2_Init+0x74>)
 800381e:	2200      	movs	r2, #0
 8003820:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003822:	4b0e      	ldr	r3, [pc, #56]	@ (800385c <MX_SPI2_Init+0x74>)
 8003824:	2200      	movs	r2, #0
 8003826:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003828:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <MX_SPI2_Init+0x74>)
 800382a:	2200      	movs	r2, #0
 800382c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <MX_SPI2_Init+0x74>)
 8003830:	2200      	movs	r2, #0
 8003832:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003834:	4b09      	ldr	r3, [pc, #36]	@ (800385c <MX_SPI2_Init+0x74>)
 8003836:	2207      	movs	r2, #7
 8003838:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800383a:	4b08      	ldr	r3, [pc, #32]	@ (800385c <MX_SPI2_Init+0x74>)
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <MX_SPI2_Init+0x74>)
 8003842:	2208      	movs	r2, #8
 8003844:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003846:	4805      	ldr	r0, [pc, #20]	@ (800385c <MX_SPI2_Init+0x74>)
 8003848:	f006 fff9 	bl	800a83e <HAL_SPI_Init>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003852:	f7ff fef1 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200007f0 	.word	0x200007f0
 8003860:	40003800 	.word	0x40003800

08003864 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	@ 0x28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a25      	ldr	r2, [pc, #148]	@ (8003918 <HAL_SPI_MspInit+0xb4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d144      	bne.n	8003910 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003886:	4b25      	ldr	r3, [pc, #148]	@ (800391c <HAL_SPI_MspInit+0xb8>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	4a24      	ldr	r2, [pc, #144]	@ (800391c <HAL_SPI_MspInit+0xb8>)
 800388c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003890:	6413      	str	r3, [r2, #64]	@ 0x40
 8003892:	4b22      	ldr	r3, [pc, #136]	@ (800391c <HAL_SPI_MspInit+0xb8>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800389e:	4b1f      	ldr	r3, [pc, #124]	@ (800391c <HAL_SPI_MspInit+0xb8>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	4a1e      	ldr	r2, [pc, #120]	@ (800391c <HAL_SPI_MspInit+0xb8>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038aa:	4b1c      	ldr	r3, [pc, #112]	@ (800391c <HAL_SPI_MspInit+0xb8>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b6:	4b19      	ldr	r3, [pc, #100]	@ (800391c <HAL_SPI_MspInit+0xb8>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	4a18      	ldr	r2, [pc, #96]	@ (800391c <HAL_SPI_MspInit+0xb8>)
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c2:	4b16      	ldr	r3, [pc, #88]	@ (800391c <HAL_SPI_MspInit+0xb8>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80038ce:	2303      	movs	r3, #3
 80038d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	2302      	movs	r3, #2
 80038d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038da:	2303      	movs	r3, #3
 80038dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038de:	2305      	movs	r3, #5
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80038e2:	f107 0314 	add.w	r3, r7, #20
 80038e6:	4619      	mov	r1, r3
 80038e8:	480d      	ldr	r0, [pc, #52]	@ (8003920 <HAL_SPI_MspInit+0xbc>)
 80038ea:	f003 fdbd 	bl	8007468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80038ee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80038f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fc:	2300      	movs	r3, #0
 80038fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003900:	2305      	movs	r3, #5
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	4619      	mov	r1, r3
 800390a:	4806      	ldr	r0, [pc, #24]	@ (8003924 <HAL_SPI_MspInit+0xc0>)
 800390c:	f003 fdac 	bl	8007468 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003910:	bf00      	nop
 8003912:	3728      	adds	r7, #40	@ 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40003800 	.word	0x40003800
 800391c:	40023800 	.word	0x40023800
 8003920:	40022000 	.word	0x40022000
 8003924:	40020400 	.word	0x40020400

08003928 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08c      	sub	sp, #48	@ 0x30
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a51      	ldr	r2, [pc, #324]	@ (8003a78 <I2Cx_MspInit+0x150>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d14d      	bne.n	80039d4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003938:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <I2Cx_MspInit+0x154>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393c:	4a4f      	ldr	r2, [pc, #316]	@ (8003a7c <I2Cx_MspInit+0x154>)
 800393e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003942:	6313      	str	r3, [r2, #48]	@ 0x30
 8003944:	4b4d      	ldr	r3, [pc, #308]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003950:	2380      	movs	r3, #128	@ 0x80
 8003952:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003954:	2312      	movs	r3, #18
 8003956:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800395c:	2302      	movs	r3, #2
 800395e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003960:	2304      	movs	r3, #4
 8003962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003964:	f107 031c 	add.w	r3, r7, #28
 8003968:	4619      	mov	r1, r3
 800396a:	4845      	ldr	r0, [pc, #276]	@ (8003a80 <I2Cx_MspInit+0x158>)
 800396c:	f003 fd7c 	bl	8007468 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003976:	f107 031c 	add.w	r3, r7, #28
 800397a:	4619      	mov	r1, r3
 800397c:	4840      	ldr	r0, [pc, #256]	@ (8003a80 <I2Cx_MspInit+0x158>)
 800397e:	f003 fd73 	bl	8007468 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003982:	4b3e      	ldr	r3, [pc, #248]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	4a3d      	ldr	r2, [pc, #244]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003988:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800398c:	6413      	str	r3, [r2, #64]	@ 0x40
 800398e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800399a:	4b38      	ldr	r3, [pc, #224]	@ (8003a7c <I2Cx_MspInit+0x154>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4a37      	ldr	r2, [pc, #220]	@ (8003a7c <I2Cx_MspInit+0x154>)
 80039a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039a4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80039a6:	4b35      	ldr	r3, [pc, #212]	@ (8003a7c <I2Cx_MspInit+0x154>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4a34      	ldr	r2, [pc, #208]	@ (8003a7c <I2Cx_MspInit+0x154>)
 80039ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80039b0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80039b2:	2200      	movs	r2, #0
 80039b4:	210f      	movs	r1, #15
 80039b6:	2048      	movs	r0, #72	@ 0x48
 80039b8:	f002 fef2 	bl	80067a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80039bc:	2048      	movs	r0, #72	@ 0x48
 80039be:	f002 ff0b 	bl	80067d8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	210f      	movs	r1, #15
 80039c6:	2049      	movs	r0, #73	@ 0x49
 80039c8:	f002 feea 	bl	80067a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80039cc:	2049      	movs	r0, #73	@ 0x49
 80039ce:	f002 ff03 	bl	80067d8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80039d2:	e04d      	b.n	8003a70 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80039d4:	4b29      	ldr	r3, [pc, #164]	@ (8003a7c <I2Cx_MspInit+0x154>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	4a28      	ldr	r2, [pc, #160]	@ (8003a7c <I2Cx_MspInit+0x154>)
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e0:	4b26      	ldr	r3, [pc, #152]	@ (8003a7c <I2Cx_MspInit+0x154>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80039ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039f0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80039f2:	2312      	movs	r3, #18
 80039f4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80039fa:	2302      	movs	r3, #2
 80039fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80039fe:	2304      	movs	r3, #4
 8003a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a02:	f107 031c 	add.w	r3, r7, #28
 8003a06:	4619      	mov	r1, r3
 8003a08:	481e      	ldr	r0, [pc, #120]	@ (8003a84 <I2Cx_MspInit+0x15c>)
 8003a0a:	f003 fd2d 	bl	8007468 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003a0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a14:	f107 031c 	add.w	r3, r7, #28
 8003a18:	4619      	mov	r1, r3
 8003a1a:	481a      	ldr	r0, [pc, #104]	@ (8003a84 <I2Cx_MspInit+0x15c>)
 8003a1c:	f003 fd24 	bl	8007468 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003a20:	4b16      	ldr	r3, [pc, #88]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	4a15      	ldr	r2, [pc, #84]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003a26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a2c:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003a38:	4b10      	ldr	r3, [pc, #64]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003a3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a42:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003a44:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a0c      	ldr	r2, [pc, #48]	@ (8003a7c <I2Cx_MspInit+0x154>)
 8003a4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a4e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	210f      	movs	r1, #15
 8003a54:	201f      	movs	r0, #31
 8003a56:	f002 fea3 	bl	80067a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003a5a:	201f      	movs	r0, #31
 8003a5c:	f002 febc 	bl	80067d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003a60:	2200      	movs	r2, #0
 8003a62:	210f      	movs	r1, #15
 8003a64:	2020      	movs	r0, #32
 8003a66:	f002 fe9b 	bl	80067a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003a6a:	2020      	movs	r0, #32
 8003a6c:	f002 feb4 	bl	80067d8 <HAL_NVIC_EnableIRQ>
}
 8003a70:	bf00      	nop
 8003a72:	3730      	adds	r7, #48	@ 0x30
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000854 	.word	0x20000854
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40021c00 	.word	0x40021c00
 8003a84:	40020400 	.word	0x40020400

08003a88 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f004 faa9 	bl	8007fe8 <HAL_I2C_GetState>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d125      	bne.n	8003ae8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a14      	ldr	r2, [pc, #80]	@ (8003af0 <I2Cx_Init+0x68>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d103      	bne.n	8003aac <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a13      	ldr	r2, [pc, #76]	@ (8003af4 <I2Cx_Init+0x6c>)
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e002      	b.n	8003ab2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <I2Cx_Init+0x70>)
 8003ab0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a11      	ldr	r2, [pc, #68]	@ (8003afc <I2Cx_Init+0x74>)
 8003ab6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff23 	bl	8003928 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f003 ff92 	bl	8007a0c <HAL_I2C_Init>
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000854 	.word	0x20000854
 8003af4:	40005c00 	.word	0x40005c00
 8003af8:	40005400 	.word	0x40005400
 8003afc:	40912732 	.word	0x40912732

08003b00 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	@ 0x28
 8003b04:	af04      	add	r7, sp, #16
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	72fb      	strb	r3, [r7, #11]
 8003b12:	460b      	mov	r3, r1
 8003b14:	813b      	strh	r3, [r7, #8]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
 8003b20:	b299      	uxth	r1, r3
 8003b22:	88f8      	ldrh	r0, [r7, #6]
 8003b24:	893a      	ldrh	r2, [r7, #8]
 8003b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b2a:	9302      	str	r3, [sp, #8]
 8003b2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	4603      	mov	r3, r0
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f004 f93c 	bl	8007db4 <HAL_I2C_Mem_Read>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003b46:	7afb      	ldrb	r3, [r7, #11]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f832 	bl	8003bb4 <I2Cx_Error>
  }
  return status;    
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b08a      	sub	sp, #40	@ 0x28
 8003b5e:	af04      	add	r7, sp, #16
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	4608      	mov	r0, r1
 8003b64:	4611      	mov	r1, r2
 8003b66:	461a      	mov	r2, r3
 8003b68:	4603      	mov	r3, r0
 8003b6a:	72fb      	strb	r3, [r7, #11]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	813b      	strh	r3, [r7, #8]
 8003b70:	4613      	mov	r3, r2
 8003b72:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b78:	7afb      	ldrb	r3, [r7, #11]
 8003b7a:	b299      	uxth	r1, r3
 8003b7c:	88f8      	ldrh	r0, [r7, #6]
 8003b7e:	893a      	ldrh	r2, [r7, #8]
 8003b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b84:	9302      	str	r3, [sp, #8]
 8003b86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	4603      	mov	r3, r0
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f003 fffb 	bl	8007b8c <HAL_I2C_Mem_Write>
 8003b96:	4603      	mov	r3, r0
 8003b98:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003ba0:	7afb      	ldrb	r3, [r7, #11]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f805 	bl	8003bb4 <I2Cx_Error>
  }
  return status;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f003 ffb3 	bl	8007b2c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ff5e 	bl	8003a88 <I2Cx_Init>
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003bd8:	4802      	ldr	r0, [pc, #8]	@ (8003be4 <TS_IO_Init+0x10>)
 8003bda:	f7ff ff55 	bl	8003a88 <I2Cx_Init>
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000854 	.word	0x20000854

08003be8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	71bb      	strb	r3, [r7, #6]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003bfa:	79bb      	ldrb	r3, [r7, #6]
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	79f9      	ldrb	r1, [r7, #7]
 8003c00:	2301      	movs	r3, #1
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	1d7b      	adds	r3, r7, #5
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2301      	movs	r3, #1
 8003c0a:	4803      	ldr	r0, [pc, #12]	@ (8003c18 <TS_IO_Write+0x30>)
 8003c0c:	f7ff ffa5 	bl	8003b5a <I2Cx_WriteMultiple>
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20000854 	.word	0x20000854

08003c1c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	4603      	mov	r3, r0
 8003c24:	460a      	mov	r2, r1
 8003c26:	71fb      	strb	r3, [r7, #7]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003c30:	79bb      	ldrb	r3, [r7, #6]
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	79f9      	ldrb	r1, [r7, #7]
 8003c36:	2301      	movs	r3, #1
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	f107 030f 	add.w	r3, r7, #15
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2301      	movs	r3, #1
 8003c42:	4804      	ldr	r0, [pc, #16]	@ (8003c54 <TS_IO_Read+0x38>)
 8003c44:	f7ff ff5c 	bl	8003b00 <I2Cx_ReadMultiple>

  return read_value;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000854 	.word	0x20000854

08003c58 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f002 f8c7 	bl	8005df4 <HAL_Delay>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003c74:	4b31      	ldr	r3, [pc, #196]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003c76:	2228      	movs	r2, #40	@ 0x28
 8003c78:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003c7a:	4b30      	ldr	r3, [pc, #192]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003c7c:	2209      	movs	r2, #9
 8003c7e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003c80:	4b2e      	ldr	r3, [pc, #184]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003c82:	2235      	movs	r2, #53	@ 0x35
 8003c84:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003c86:	4b2d      	ldr	r3, [pc, #180]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003c88:	220b      	movs	r2, #11
 8003c8a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003c8e:	f240 121b 	movw	r2, #283	@ 0x11b
 8003c92:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003c94:	4b29      	ldr	r3, [pc, #164]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003c96:	f240 2215 	movw	r2, #533	@ 0x215
 8003c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003c9c:	4b27      	ldr	r3, [pc, #156]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003c9e:	f240 121d 	movw	r2, #285	@ 0x11d
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003ca4:	4b25      	ldr	r3, [pc, #148]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003ca6:	f240 2235 	movw	r2, #565	@ 0x235
 8003caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003cac:	2100      	movs	r1, #0
 8003cae:	4823      	ldr	r0, [pc, #140]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cb0:	f000 fd30 	bl	8004714 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003cb4:	4b21      	ldr	r3, [pc, #132]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cb6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003cba:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cbe:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8003cc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003cd4:	4b19      	ldr	r3, [pc, #100]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003cdc:	4b17      	ldr	r3, [pc, #92]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003ce2:	4b16      	ldr	r3, [pc, #88]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003ce8:	4b14      	ldr	r3, [pc, #80]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003cee:	4b13      	ldr	r3, [pc, #76]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003cf4:	4b11      	ldr	r3, [pc, #68]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cf6:	4a12      	ldr	r2, [pc, #72]	@ (8003d40 <BSP_LCD_Init+0xd0>)
 8003cf8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003cfa:	4810      	ldr	r0, [pc, #64]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003cfc:	f004 fe84 	bl	8008a08 <HAL_LTDC_GetState>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003d06:	2100      	movs	r1, #0
 8003d08:	480c      	ldr	r0, [pc, #48]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003d0a:	f000 fc29 	bl	8004560 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003d0e:	480b      	ldr	r0, [pc, #44]	@ (8003d3c <BSP_LCD_Init+0xcc>)
 8003d10:	f004 fcaa 	bl	8008668 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003d14:	2201      	movs	r2, #1
 8003d16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d1a:	480a      	ldr	r0, [pc, #40]	@ (8003d44 <BSP_LCD_Init+0xd4>)
 8003d1c:	f003 fe5c 	bl	80079d8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003d20:	2201      	movs	r2, #1
 8003d22:	2108      	movs	r1, #8
 8003d24:	4808      	ldr	r0, [pc, #32]	@ (8003d48 <BSP_LCD_Init+0xd8>)
 8003d26:	f003 fe57 	bl	80079d8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003d2a:	f000 fe57 	bl	80049dc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003d2e:	4807      	ldr	r0, [pc, #28]	@ (8003d4c <BSP_LCD_Init+0xdc>)
 8003d30:	f000 f8d8 	bl	8003ee4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200008a8 	.word	0x200008a8
 8003d40:	40016800 	.word	0x40016800
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40022800 	.word	0x40022800
 8003d4c:	20000034 	.word	0x20000034

08003d50 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003d54:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <BSP_LCD_GetXSize+0x20>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a06      	ldr	r2, [pc, #24]	@ (8003d74 <BSP_LCD_GetXSize+0x24>)
 8003d5a:	2134      	movs	r1, #52	@ 0x34
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	3360      	adds	r3, #96	@ 0x60
 8003d64:	681b      	ldr	r3, [r3, #0]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20000990 	.word	0x20000990
 8003d74:	200008a8 	.word	0x200008a8

08003d78 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <BSP_LCD_GetYSize+0x20>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a06      	ldr	r2, [pc, #24]	@ (8003d9c <BSP_LCD_GetYSize+0x24>)
 8003d82:	2134      	movs	r1, #52	@ 0x34
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3364      	adds	r3, #100	@ 0x64
 8003d8c:	681b      	ldr	r3, [r3, #0]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	20000990 	.word	0x20000990
 8003d9c:	200008a8 	.word	0x200008a8

08003da0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b090      	sub	sp, #64	@ 0x40
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	6039      	str	r1, [r7, #0]
 8003daa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003db0:	f7ff ffce 	bl	8003d50 <BSP_LCD_GetXSize>
 8003db4:	4603      	mov	r3, r0
 8003db6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003dbc:	f7ff ffdc 	bl	8003d78 <BSP_LCD_GetYSize>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8003dcc:	23ff      	movs	r3, #255	@ 0xff
 8003dce:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003de6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003dec:	2307      	movs	r3, #7
 8003dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003df0:	f7ff ffae 	bl	8003d50 <BSP_LCD_GetXSize>
 8003df4:	4603      	mov	r3, r0
 8003df6:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003df8:	f7ff ffbe 	bl	8003d78 <BSP_LCD_GetYSize>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003e00:	88fa      	ldrh	r2, [r7, #6]
 8003e02:	f107 030c 	add.w	r3, r7, #12
 8003e06:	4619      	mov	r1, r3
 8003e08:	4812      	ldr	r0, [pc, #72]	@ (8003e54 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003e0a:	f004 fdbf 	bl	800898c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	4911      	ldr	r1, [pc, #68]	@ (8003e58 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e22:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003e24:	88fa      	ldrh	r2, [r7, #6]
 8003e26:	490c      	ldr	r1, [pc, #48]	@ (8003e58 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3308      	adds	r3, #8
 8003e34:	4a09      	ldr	r2, [pc, #36]	@ (8003e5c <BSP_LCD_LayerDefaultInit+0xbc>)
 8003e36:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	4907      	ldr	r1, [pc, #28]	@ (8003e58 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003e4a:	601a      	str	r2, [r3, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	3740      	adds	r7, #64	@ 0x40
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	200008a8 	.word	0x200008a8
 8003e58:	20000994 	.word	0x20000994
 8003e5c:	20000034 	.word	0x20000034

08003e60 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003e68:	4a04      	ldr	r2, [pc, #16]	@ (8003e7c <BSP_LCD_SelectLayer+0x1c>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6013      	str	r3, [r2, #0]
} 
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000990 	.word	0x20000990

08003e80 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003e88:	4b07      	ldr	r3, [pc, #28]	@ (8003ea8 <BSP_LCD_SetTextColor+0x28>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4907      	ldr	r1, [pc, #28]	@ (8003eac <BSP_LCD_SetTextColor+0x2c>)
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	601a      	str	r2, [r3, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	20000990 	.word	0x20000990
 8003eac:	20000994 	.word	0x20000994

08003eb0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003eb8:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <BSP_LCD_SetBackColor+0x2c>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4908      	ldr	r1, [pc, #32]	@ (8003ee0 <BSP_LCD_SetBackColor+0x30>)
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3304      	adds	r3, #4
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	601a      	str	r2, [r3, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000990 	.word	0x20000990
 8003ee0:	20000994 	.word	0x20000994

08003ee4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003eec:	4b08      	ldr	r3, [pc, #32]	@ (8003f10 <BSP_LCD_SetFont+0x2c>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4908      	ldr	r1, [pc, #32]	@ (8003f14 <BSP_LCD_SetFont+0x30>)
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	3308      	adds	r3, #8
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000990 	.word	0x20000990
 8003f14:	20000994 	.word	0x20000994

08003f18 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003f20:	4b0f      	ldr	r3, [pc, #60]	@ (8003f60 <BSP_LCD_Clear+0x48>)
 8003f22:	681c      	ldr	r4, [r3, #0]
 8003f24:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <BSP_LCD_Clear+0x48>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0e      	ldr	r2, [pc, #56]	@ (8003f64 <BSP_LCD_Clear+0x4c>)
 8003f2a:	2134      	movs	r1, #52	@ 0x34
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	335c      	adds	r3, #92	@ 0x5c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461e      	mov	r6, r3
 8003f38:	f7ff ff0a 	bl	8003d50 <BSP_LCD_GetXSize>
 8003f3c:	4605      	mov	r5, r0
 8003f3e:	f7ff ff1b 	bl	8003d78 <BSP_LCD_GetYSize>
 8003f42:	4602      	mov	r2, r0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	462a      	mov	r2, r5
 8003f50:	4631      	mov	r1, r6
 8003f52:	4620      	mov	r0, r4
 8003f54:	f000 fcb2 	bl	80048bc <LL_FillBuffer>
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f60:	20000990 	.word	0x20000990
 8003f64:	200008a8 	.word	0x200008a8

08003f68 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80fb      	strh	r3, [r7, #6]
 8003f72:	460b      	mov	r3, r1
 8003f74:	80bb      	strh	r3, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe8 <BSP_LCD_DisplayChar+0x80>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	491b      	ldr	r1, [pc, #108]	@ (8003fec <BSP_LCD_DisplayChar+0x84>)
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003f96:	4b14      	ldr	r3, [pc, #80]	@ (8003fe8 <BSP_LCD_DisplayChar+0x80>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4c14      	ldr	r4, [pc, #80]	@ (8003fec <BSP_LCD_DisplayChar+0x84>)
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4423      	add	r3, r4
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003fac:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <BSP_LCD_DisplayChar+0x80>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4c0d      	ldr	r4, [pc, #52]	@ (8003fec <BSP_LCD_DisplayChar+0x84>)
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4423      	add	r3, r4
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	889b      	ldrh	r3, [r3, #4]
 8003fc6:	3307      	adds	r3, #7
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	da00      	bge.n	8003fce <BSP_LCD_DisplayChar+0x66>
 8003fcc:	3307      	adds	r3, #7
 8003fce:	10db      	asrs	r3, r3, #3
 8003fd0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003fd4:	18ca      	adds	r2, r1, r3
 8003fd6:	88b9      	ldrh	r1, [r7, #4]
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fbb6 	bl	800474c <DrawChar>
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd90      	pop	{r4, r7, pc}
 8003fe8:	20000990 	.word	0x20000990
 8003fec:	20000994 	.word	0x20000994

08003ff0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003ff0:	b5b0      	push	{r4, r5, r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60ba      	str	r2, [r7, #8]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	81fb      	strh	r3, [r7, #14]
 8003ffe:	460b      	mov	r3, r1
 8004000:	81bb      	strh	r3, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004006:	2301      	movs	r3, #1
 8004008:	83fb      	strh	r3, [r7, #30]
 800400a:	2300      	movs	r3, #0
 800400c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800401a:	e002      	b.n	8004022 <BSP_LCD_DisplayStringAt+0x32>
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	3301      	adds	r3, #1
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	617a      	str	r2, [r7, #20]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f6      	bne.n	800401c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800402e:	f7ff fe8f 	bl	8003d50 <BSP_LCD_GetXSize>
 8004032:	4601      	mov	r1, r0
 8004034:	4b50      	ldr	r3, [pc, #320]	@ (8004178 <BSP_LCD_DisplayStringAt+0x188>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4850      	ldr	r0, [pc, #320]	@ (800417c <BSP_LCD_DisplayStringAt+0x18c>)
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4403      	add	r3, r0
 8004044:	3308      	adds	r3, #8
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	889b      	ldrh	r3, [r3, #4]
 800404a:	fbb1 f3f3 	udiv	r3, r1, r3
 800404e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d01c      	beq.n	8004090 <BSP_LCD_DisplayStringAt+0xa0>
 8004056:	2b03      	cmp	r3, #3
 8004058:	dc33      	bgt.n	80040c2 <BSP_LCD_DisplayStringAt+0xd2>
 800405a:	2b01      	cmp	r3, #1
 800405c:	d002      	beq.n	8004064 <BSP_LCD_DisplayStringAt+0x74>
 800405e:	2b02      	cmp	r3, #2
 8004060:	d019      	beq.n	8004096 <BSP_LCD_DisplayStringAt+0xa6>
 8004062:	e02e      	b.n	80040c2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	1ad1      	subs	r1, r2, r3
 800406a:	4b43      	ldr	r3, [pc, #268]	@ (8004178 <BSP_LCD_DisplayStringAt+0x188>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4843      	ldr	r0, [pc, #268]	@ (800417c <BSP_LCD_DisplayStringAt+0x18c>)
 8004070:	4613      	mov	r3, r2
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4403      	add	r3, r0
 800407a:	3308      	adds	r3, #8
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	889b      	ldrh	r3, [r3, #4]
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	89fb      	ldrh	r3, [r7, #14]
 800408a:	4413      	add	r3, r2
 800408c:	83fb      	strh	r3, [r7, #30]
      break;
 800408e:	e01b      	b.n	80040c8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004090:	89fb      	ldrh	r3, [r7, #14]
 8004092:	83fb      	strh	r3, [r7, #30]
      break;
 8004094:	e018      	b.n	80040c8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	b299      	uxth	r1, r3
 800409e:	4b36      	ldr	r3, [pc, #216]	@ (8004178 <BSP_LCD_DisplayStringAt+0x188>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4836      	ldr	r0, [pc, #216]	@ (800417c <BSP_LCD_DisplayStringAt+0x18c>)
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4403      	add	r3, r0
 80040ae:	3308      	adds	r3, #8
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	889b      	ldrh	r3, [r3, #4]
 80040b4:	fb11 f303 	smulbb	r3, r1, r3
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	89fb      	ldrh	r3, [r7, #14]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	83fb      	strh	r3, [r7, #30]
      break;
 80040c0:	e002      	b.n	80040c8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80040c2:	89fb      	ldrh	r3, [r7, #14]
 80040c4:	83fb      	strh	r3, [r7, #30]
      break;
 80040c6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80040c8:	8bfb      	ldrh	r3, [r7, #30]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <BSP_LCD_DisplayStringAt+0xe6>
 80040ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	da1d      	bge.n	8004112 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80040d6:	2301      	movs	r3, #1
 80040d8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80040da:	e01a      	b.n	8004112 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	89b9      	ldrh	r1, [r7, #12]
 80040e2:	8bfb      	ldrh	r3, [r7, #30]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff3f 	bl	8003f68 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80040ea:	4b23      	ldr	r3, [pc, #140]	@ (8004178 <BSP_LCD_DisplayStringAt+0x188>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4923      	ldr	r1, [pc, #140]	@ (800417c <BSP_LCD_DisplayStringAt+0x18c>)
 80040f0:	4613      	mov	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	3308      	adds	r3, #8
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	889a      	ldrh	r2, [r3, #4]
 8004100:	8bfb      	ldrh	r3, [r7, #30]
 8004102:	4413      	add	r3, r2
 8004104:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	3301      	adds	r3, #1
 800410a:	60bb      	str	r3, [r7, #8]
    i++;
 800410c:	8bbb      	ldrh	r3, [r7, #28]
 800410e:	3301      	adds	r3, #1
 8004110:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2dc      	uxtb	r4, r3
 8004120:	f7ff fe16 	bl	8003d50 <BSP_LCD_GetXSize>
 8004124:	8bb9      	ldrh	r1, [r7, #28]
 8004126:	4b14      	ldr	r3, [pc, #80]	@ (8004178 <BSP_LCD_DisplayStringAt+0x188>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4d14      	ldr	r5, [pc, #80]	@ (800417c <BSP_LCD_DisplayStringAt+0x18c>)
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	442b      	add	r3, r5
 8004136:	3308      	adds	r3, #8
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	889b      	ldrh	r3, [r3, #4]
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	1ac3      	subs	r3, r0, r3
 8004142:	b299      	uxth	r1, r3
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <BSP_LCD_DisplayStringAt+0x188>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	480c      	ldr	r0, [pc, #48]	@ (800417c <BSP_LCD_DisplayStringAt+0x18c>)
 800414a:	4613      	mov	r3, r2
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4403      	add	r3, r0
 8004154:	3308      	adds	r3, #8
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	889b      	ldrh	r3, [r3, #4]
 800415a:	4299      	cmp	r1, r3
 800415c:	bf2c      	ite	cs
 800415e:	2301      	movcs	r3, #1
 8004160:	2300      	movcc	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4023      	ands	r3, r4
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1b7      	bne.n	80040dc <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bdb0      	pop	{r4, r5, r7, pc}
 8004176:	bf00      	nop
 8004178:	20000990 	.word	0x20000990
 800417c:	20000994 	.word	0x20000994

08004180 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004180:	b5b0      	push	{r4, r5, r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	4603      	mov	r3, r0
 8004188:	80fb      	strh	r3, [r7, #6]
 800418a:	460b      	mov	r3, r1
 800418c:	80bb      	strh	r3, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004196:	4b26      	ldr	r3, [pc, #152]	@ (8004230 <BSP_LCD_DrawHLine+0xb0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a26      	ldr	r2, [pc, #152]	@ (8004234 <BSP_LCD_DrawHLine+0xb4>)
 800419c:	2134      	movs	r1, #52	@ 0x34
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3348      	adds	r3, #72	@ 0x48
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d114      	bne.n	80041d6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80041ac:	4b20      	ldr	r3, [pc, #128]	@ (8004230 <BSP_LCD_DrawHLine+0xb0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a20      	ldr	r2, [pc, #128]	@ (8004234 <BSP_LCD_DrawHLine+0xb4>)
 80041b2:	2134      	movs	r1, #52	@ 0x34
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	335c      	adds	r3, #92	@ 0x5c
 80041bc:	681c      	ldr	r4, [r3, #0]
 80041be:	f7ff fdc7 	bl	8003d50 <BSP_LCD_GetXSize>
 80041c2:	4602      	mov	r2, r0
 80041c4:	88bb      	ldrh	r3, [r7, #4]
 80041c6:	fb03 f202 	mul.w	r2, r3, r2
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	4413      	add	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4423      	add	r3, r4
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	e013      	b.n	80041fe <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80041d6:	4b16      	ldr	r3, [pc, #88]	@ (8004230 <BSP_LCD_DrawHLine+0xb0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a16      	ldr	r2, [pc, #88]	@ (8004234 <BSP_LCD_DrawHLine+0xb4>)
 80041dc:	2134      	movs	r1, #52	@ 0x34
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	4413      	add	r3, r2
 80041e4:	335c      	adds	r3, #92	@ 0x5c
 80041e6:	681c      	ldr	r4, [r3, #0]
 80041e8:	f7ff fdb2 	bl	8003d50 <BSP_LCD_GetXSize>
 80041ec:	4602      	mov	r2, r0
 80041ee:	88bb      	ldrh	r3, [r7, #4]
 80041f0:	fb03 f202 	mul.w	r2, r3, r2
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4423      	add	r3, r4
 80041fc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80041fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004230 <BSP_LCD_DrawHLine+0xb0>)
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	887c      	ldrh	r4, [r7, #2]
 8004206:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <BSP_LCD_DrawHLine+0xb0>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4d0b      	ldr	r5, [pc, #44]	@ (8004238 <BSP_LCD_DrawHLine+0xb8>)
 800420c:	4613      	mov	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	442b      	add	r3, r5
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	2300      	movs	r3, #0
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2301      	movs	r3, #1
 8004220:	4622      	mov	r2, r4
 8004222:	f000 fb4b 	bl	80048bc <LL_FillBuffer>
}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bdb0      	pop	{r4, r5, r7, pc}
 800422e:	bf00      	nop
 8004230:	20000990 	.word	0x20000990
 8004234:	200008a8 	.word	0x200008a8
 8004238:	20000994 	.word	0x20000994

0800423c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800423c:	b5b0      	push	{r4, r5, r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	603a      	str	r2, [r7, #0]
 8004246:	80fb      	strh	r3, [r7, #6]
 8004248:	460b      	mov	r3, r1
 800424a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800424c:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <BSP_LCD_DrawPixel+0x88>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1d      	ldr	r2, [pc, #116]	@ (80042c8 <BSP_LCD_DrawPixel+0x8c>)
 8004252:	2134      	movs	r1, #52	@ 0x34
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	4413      	add	r3, r2
 800425a:	3348      	adds	r3, #72	@ 0x48
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d116      	bne.n	8004290 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004262:	4b18      	ldr	r3, [pc, #96]	@ (80042c4 <BSP_LCD_DrawPixel+0x88>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a18      	ldr	r2, [pc, #96]	@ (80042c8 <BSP_LCD_DrawPixel+0x8c>)
 8004268:	2134      	movs	r1, #52	@ 0x34
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	4413      	add	r3, r2
 8004270:	335c      	adds	r3, #92	@ 0x5c
 8004272:	681c      	ldr	r4, [r3, #0]
 8004274:	88bd      	ldrh	r5, [r7, #4]
 8004276:	f7ff fd6b 	bl	8003d50 <BSP_LCD_GetXSize>
 800427a:	4603      	mov	r3, r0
 800427c:	fb03 f205 	mul.w	r2, r3, r5
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	4413      	add	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4423      	add	r3, r4
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	b292      	uxth	r2, r2
 800428c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800428e:	e015      	b.n	80042bc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004290:	4b0c      	ldr	r3, [pc, #48]	@ (80042c4 <BSP_LCD_DrawPixel+0x88>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0c      	ldr	r2, [pc, #48]	@ (80042c8 <BSP_LCD_DrawPixel+0x8c>)
 8004296:	2134      	movs	r1, #52	@ 0x34
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	4413      	add	r3, r2
 800429e:	335c      	adds	r3, #92	@ 0x5c
 80042a0:	681c      	ldr	r4, [r3, #0]
 80042a2:	88bd      	ldrh	r5, [r7, #4]
 80042a4:	f7ff fd54 	bl	8003d50 <BSP_LCD_GetXSize>
 80042a8:	4603      	mov	r3, r0
 80042aa:	fb03 f205 	mul.w	r2, r3, r5
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4423      	add	r3, r4
 80042b6:	461a      	mov	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6013      	str	r3, [r2, #0]
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bdb0      	pop	{r4, r5, r7, pc}
 80042c4:	20000990 	.word	0x20000990
 80042c8:	200008a8 	.word	0x200008a8

080042cc <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80042cc:	b590      	push	{r4, r7, lr}
 80042ce:	b08b      	sub	sp, #44	@ 0x2c
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
 80042dc:	2300      	movs	r3, #0
 80042de:	61bb      	str	r3, [r7, #24]
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	330a      	adds	r3, #10
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	330b      	adds	r3, #11
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	441a      	add	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	330c      	adds	r3, #12
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	041b      	lsls	r3, r3, #16
 8004306:	441a      	add	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	330d      	adds	r3, #13
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	061b      	lsls	r3, r3, #24
 8004310:	4413      	add	r3, r2
 8004312:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3312      	adds	r3, #18
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3313      	adds	r3, #19
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	441a      	add	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3314      	adds	r3, #20
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	441a      	add	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3315      	adds	r3, #21
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	061b      	lsls	r3, r3, #24
 8004338:	4413      	add	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3316      	adds	r3, #22
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3317      	adds	r3, #23
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	441a      	add	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3318      	adds	r3, #24
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	441a      	add	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3319      	adds	r3, #25
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	061b      	lsls	r3, r3, #24
 8004360:	4413      	add	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	331c      	adds	r3, #28
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	331d      	adds	r3, #29
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	4413      	add	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8004378:	4b2b      	ldr	r3, [pc, #172]	@ (8004428 <BSP_LCD_DrawBitmap+0x15c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2b      	ldr	r2, [pc, #172]	@ (800442c <BSP_LCD_DrawBitmap+0x160>)
 800437e:	2134      	movs	r1, #52	@ 0x34
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	4413      	add	r3, r2
 8004386:	335c      	adds	r3, #92	@ 0x5c
 8004388:	681c      	ldr	r4, [r3, #0]
 800438a:	f7ff fce1 	bl	8003d50 <BSP_LCD_GetXSize>
 800438e:	4602      	mov	r2, r0
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	fb03 f202 	mul.w	r2, r3, r2
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4423      	add	r3, r4
 800439e:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	3b20      	subs	r3, #32
 80043a4:	2b07      	cmp	r3, #7
 80043a6:	d802      	bhi.n	80043ae <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	e008      	b.n	80043c0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	3b10      	subs	r3, #16
 80043b2:	2b07      	cmp	r3, #7
 80043b4:	d802      	bhi.n	80043bc <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80043b6:	2302      	movs	r3, #2
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	e001      	b.n	80043c0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80043bc:	2301      	movs	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	08d2      	lsrs	r2, r2, #3
 80043ce:	fb03 f202 	mul.w	r2, r3, r2
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	4413      	add	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80043dc:	2300      	movs	r3, #0
 80043de:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e0:	e018      	b.n	8004414 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80043e2:	6a39      	ldr	r1, [r7, #32]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fab3 	bl	8004954 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80043ee:	f7ff fcaf 	bl	8003d50 <BSP_LCD_GetXSize>
 80043f2:	4603      	mov	r3, r0
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	6a3a      	ldr	r2, [r7, #32]
 80043f8:	4413      	add	r3, r2
 80043fa:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	08db      	lsrs	r3, r3, #3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	425b      	negs	r3, r3
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4413      	add	r3, r2
 800440c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	3301      	adds	r3, #1
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
 8004414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	429a      	cmp	r2, r3
 800441a:	d3e2      	bcc.n	80043e2 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 800441c:	bf00      	nop
 800441e:	bf00      	nop
 8004420:	372c      	adds	r7, #44	@ 0x2c
 8004422:	46bd      	mov	sp, r7
 8004424:	bd90      	pop	{r4, r7, pc}
 8004426:	bf00      	nop
 8004428:	20000990 	.word	0x20000990
 800442c:	200008a8 	.word	0x200008a8

08004430 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af02      	add	r7, sp, #8
 8004438:	4604      	mov	r4, r0
 800443a:	4608      	mov	r0, r1
 800443c:	4611      	mov	r1, r2
 800443e:	461a      	mov	r2, r3
 8004440:	4623      	mov	r3, r4
 8004442:	80fb      	strh	r3, [r7, #6]
 8004444:	4603      	mov	r3, r0
 8004446:	80bb      	strh	r3, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
 800444c:	4613      	mov	r3, r2
 800444e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004454:	4b30      	ldr	r3, [pc, #192]	@ (8004518 <BSP_LCD_FillRect+0xe8>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4930      	ldr	r1, [pc, #192]	@ (800451c <BSP_LCD_FillRect+0xec>)
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fd0a 	bl	8003e80 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800446c:	4b2a      	ldr	r3, [pc, #168]	@ (8004518 <BSP_LCD_FillRect+0xe8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2b      	ldr	r2, [pc, #172]	@ (8004520 <BSP_LCD_FillRect+0xf0>)
 8004472:	2134      	movs	r1, #52	@ 0x34
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	4413      	add	r3, r2
 800447a:	3348      	adds	r3, #72	@ 0x48
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d114      	bne.n	80044ac <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004482:	4b25      	ldr	r3, [pc, #148]	@ (8004518 <BSP_LCD_FillRect+0xe8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a26      	ldr	r2, [pc, #152]	@ (8004520 <BSP_LCD_FillRect+0xf0>)
 8004488:	2134      	movs	r1, #52	@ 0x34
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	335c      	adds	r3, #92	@ 0x5c
 8004492:	681c      	ldr	r4, [r3, #0]
 8004494:	f7ff fc5c 	bl	8003d50 <BSP_LCD_GetXSize>
 8004498:	4602      	mov	r2, r0
 800449a:	88bb      	ldrh	r3, [r7, #4]
 800449c:	fb03 f202 	mul.w	r2, r3, r2
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	4413      	add	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4423      	add	r3, r4
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	e013      	b.n	80044d4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80044ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004518 <BSP_LCD_FillRect+0xe8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <BSP_LCD_FillRect+0xf0>)
 80044b2:	2134      	movs	r1, #52	@ 0x34
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	335c      	adds	r3, #92	@ 0x5c
 80044bc:	681c      	ldr	r4, [r3, #0]
 80044be:	f7ff fc47 	bl	8003d50 <BSP_LCD_GetXSize>
 80044c2:	4602      	mov	r2, r0
 80044c4:	88bb      	ldrh	r3, [r7, #4]
 80044c6:	fb03 f202 	mul.w	r2, r3, r2
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4423      	add	r3, r4
 80044d2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80044d4:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <BSP_LCD_FillRect+0xe8>)
 80044d6:	681c      	ldr	r4, [r3, #0]
 80044d8:	68fd      	ldr	r5, [r7, #12]
 80044da:	887e      	ldrh	r6, [r7, #2]
 80044dc:	f8b7 8000 	ldrh.w	r8, [r7]
 80044e0:	f7ff fc36 	bl	8003d50 <BSP_LCD_GetXSize>
 80044e4:	4602      	mov	r2, r0
 80044e6:	887b      	ldrh	r3, [r7, #2]
 80044e8:	1ad1      	subs	r1, r2, r3
 80044ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <BSP_LCD_FillRect+0xe8>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	480b      	ldr	r0, [pc, #44]	@ (800451c <BSP_LCD_FillRect+0xec>)
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4403      	add	r3, r0
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	9100      	str	r1, [sp, #0]
 8004500:	4643      	mov	r3, r8
 8004502:	4632      	mov	r2, r6
 8004504:	4629      	mov	r1, r5
 8004506:	4620      	mov	r0, r4
 8004508:	f000 f9d8 	bl	80048bc <LL_FillBuffer>
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004516:	bf00      	nop
 8004518:	20000990 	.word	0x20000990
 800451c:	20000994 	.word	0x20000994
 8004520:	200008a8 	.word	0x200008a8

08004524 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004528:	4b0a      	ldr	r3, [pc, #40]	@ (8004554 <BSP_LCD_DisplayOn+0x30>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <BSP_LCD_DisplayOn+0x30>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004538:	2201      	movs	r2, #1
 800453a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800453e:	4806      	ldr	r0, [pc, #24]	@ (8004558 <BSP_LCD_DisplayOn+0x34>)
 8004540:	f003 fa4a 	bl	80079d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004544:	2201      	movs	r2, #1
 8004546:	2108      	movs	r1, #8
 8004548:	4804      	ldr	r0, [pc, #16]	@ (800455c <BSP_LCD_DisplayOn+0x38>)
 800454a:	f003 fa45 	bl	80079d8 <HAL_GPIO_WritePin>
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200008a8 	.word	0x200008a8
 8004558:	40022000 	.word	0x40022000
 800455c:	40022800 	.word	0x40022800

08004560 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b090      	sub	sp, #64	@ 0x40
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800456a:	4b64      	ldr	r3, [pc, #400]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456e:	4a63      	ldr	r2, [pc, #396]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004570:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004574:	6453      	str	r3, [r2, #68]	@ 0x44
 8004576:	4b61      	ldr	r3, [pc, #388]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800457e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004582:	4b5e      	ldr	r3, [pc, #376]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	4a5d      	ldr	r2, [pc, #372]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004588:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800458c:	6313      	str	r3, [r2, #48]	@ 0x30
 800458e:	4b5b      	ldr	r3, [pc, #364]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800459a:	4b58      	ldr	r3, [pc, #352]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	4a57      	ldr	r2, [pc, #348]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045a0:	f043 0310 	orr.w	r3, r3, #16
 80045a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045a6:	4b55      	ldr	r3, [pc, #340]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	623b      	str	r3, [r7, #32]
 80045b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80045b2:	4b52      	ldr	r3, [pc, #328]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	4a51      	ldr	r2, [pc, #324]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80045be:	4b4f      	ldr	r3, [pc, #316]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80045ca:	4b4c      	ldr	r3, [pc, #304]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	4a4b      	ldr	r2, [pc, #300]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045d6:	4b49      	ldr	r3, [pc, #292]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80045e2:	4b46      	ldr	r3, [pc, #280]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	4a45      	ldr	r2, [pc, #276]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ee:	4b43      	ldr	r3, [pc, #268]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80045fa:	4b40      	ldr	r3, [pc, #256]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	4a3f      	ldr	r2, [pc, #252]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004600:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004604:	6313      	str	r3, [r2, #48]	@ 0x30
 8004606:	4b3d      	ldr	r3, [pc, #244]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004612:	4b3a      	ldr	r3, [pc, #232]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	4a39      	ldr	r2, [pc, #228]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461c:	6313      	str	r3, [r2, #48]	@ 0x30
 800461e:	4b37      	ldr	r3, [pc, #220]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800462a:	4b34      	ldr	r3, [pc, #208]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	4a33      	ldr	r2, [pc, #204]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004630:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004634:	6313      	str	r3, [r2, #48]	@ 0x30
 8004636:	4b31      	ldr	r3, [pc, #196]	@ (80046fc <BSP_LCD_MspInit+0x19c>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004642:	2310      	movs	r3, #16
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004646:	2302      	movs	r3, #2
 8004648:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800464a:	2300      	movs	r3, #0
 800464c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800464e:	2302      	movs	r3, #2
 8004650:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004652:	230e      	movs	r3, #14
 8004654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004656:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800465a:	4619      	mov	r1, r3
 800465c:	4828      	ldr	r0, [pc, #160]	@ (8004700 <BSP_LCD_MspInit+0x1a0>)
 800465e:	f002 ff03 	bl	8007468 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004668:	2302      	movs	r3, #2
 800466a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800466c:	2309      	movs	r3, #9
 800466e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004670:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004674:	4619      	mov	r1, r3
 8004676:	4823      	ldr	r0, [pc, #140]	@ (8004704 <BSP_LCD_MspInit+0x1a4>)
 8004678:	f002 fef6 	bl	8007468 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800467c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8004680:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004682:	2302      	movs	r3, #2
 8004684:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004686:	230e      	movs	r3, #14
 8004688:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800468a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800468e:	4619      	mov	r1, r3
 8004690:	481d      	ldr	r0, [pc, #116]	@ (8004708 <BSP_LCD_MspInit+0x1a8>)
 8004692:	f002 fee9 	bl	8007468 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004696:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800469a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80046a0:	230e      	movs	r3, #14
 80046a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80046a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046a8:	4619      	mov	r1, r3
 80046aa:	4818      	ldr	r0, [pc, #96]	@ (800470c <BSP_LCD_MspInit+0x1ac>)
 80046ac:	f002 fedc 	bl	8007468 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80046b0:	23f7      	movs	r3, #247	@ 0xf7
 80046b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046b4:	2302      	movs	r3, #2
 80046b6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80046b8:	230e      	movs	r3, #14
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80046bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046c0:	4619      	mov	r1, r3
 80046c2:	4813      	ldr	r0, [pc, #76]	@ (8004710 <BSP_LCD_MspInit+0x1b0>)
 80046c4:	f002 fed0 	bl	8007468 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80046c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80046ce:	2301      	movs	r3, #1
 80046d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80046d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046d6:	4619      	mov	r1, r3
 80046d8:	480b      	ldr	r0, [pc, #44]	@ (8004708 <BSP_LCD_MspInit+0x1a8>)
 80046da:	f002 fec5 	bl	8007468 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80046de:	2308      	movs	r3, #8
 80046e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80046e2:	2301      	movs	r3, #1
 80046e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80046e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046ea:	4619      	mov	r1, r3
 80046ec:	4808      	ldr	r0, [pc, #32]	@ (8004710 <BSP_LCD_MspInit+0x1b0>)
 80046ee:	f002 febb 	bl	8007468 <HAL_GPIO_Init>
}
 80046f2:	bf00      	nop
 80046f4:	3740      	adds	r7, #64	@ 0x40
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800
 8004700:	40021000 	.word	0x40021000
 8004704:	40021800 	.word	0x40021800
 8004708:	40022000 	.word	0x40022000
 800470c:	40022400 	.word	0x40022400
 8004710:	40022800 	.word	0x40022800

08004714 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800471e:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <BSP_LCD_ClockConfig+0x34>)
 8004720:	2208      	movs	r2, #8
 8004722:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004724:	4b08      	ldr	r3, [pc, #32]	@ (8004748 <BSP_LCD_ClockConfig+0x34>)
 8004726:	22c0      	movs	r2, #192	@ 0xc0
 8004728:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800472a:	4b07      	ldr	r3, [pc, #28]	@ (8004748 <BSP_LCD_ClockConfig+0x34>)
 800472c:	2205      	movs	r2, #5
 800472e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <BSP_LCD_ClockConfig+0x34>)
 8004732:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004736:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004738:	4803      	ldr	r0, [pc, #12]	@ (8004748 <BSP_LCD_ClockConfig+0x34>)
 800473a:	f005 f829 	bl	8009790 <HAL_RCCEx_PeriphCLKConfig>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	200009ac 	.word	0x200009ac

0800474c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	603a      	str	r2, [r7, #0]
 8004756:	80fb      	strh	r3, [r7, #6]
 8004758:	460b      	mov	r3, r1
 800475a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	2300      	movs	r3, #0
 8004762:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004764:	4b53      	ldr	r3, [pc, #332]	@ (80048b4 <DrawChar+0x168>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4953      	ldr	r1, [pc, #332]	@ (80048b8 <DrawChar+0x16c>)
 800476a:	4613      	mov	r3, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	3308      	adds	r3, #8
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	88db      	ldrh	r3, [r3, #6]
 800477a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800477c:	4b4d      	ldr	r3, [pc, #308]	@ (80048b4 <DrawChar+0x168>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	494d      	ldr	r1, [pc, #308]	@ (80048b8 <DrawChar+0x16c>)
 8004782:	4613      	mov	r3, r2
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	3308      	adds	r3, #8
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	889b      	ldrh	r3, [r3, #4]
 8004792:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004794:	8a3b      	ldrh	r3, [r7, #16]
 8004796:	3307      	adds	r3, #7
 8004798:	2b00      	cmp	r3, #0
 800479a:	da00      	bge.n	800479e <DrawChar+0x52>
 800479c:	3307      	adds	r3, #7
 800479e:	10db      	asrs	r3, r3, #3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	8a3b      	ldrh	r3, [r7, #16]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e076      	b.n	80048a2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80047b4:	8a3b      	ldrh	r3, [r7, #16]
 80047b6:	3307      	adds	r3, #7
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	da00      	bge.n	80047be <DrawChar+0x72>
 80047bc:	3307      	adds	r3, #7
 80047be:	10db      	asrs	r3, r3, #3
 80047c0:	461a      	mov	r2, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	fb02 f303 	mul.w	r3, r2, r3
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	4413      	add	r3, r2
 80047cc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80047ce:	8a3b      	ldrh	r3, [r7, #16]
 80047d0:	3307      	adds	r3, #7
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da00      	bge.n	80047d8 <DrawChar+0x8c>
 80047d6:	3307      	adds	r3, #7
 80047d8:	10db      	asrs	r3, r3, #3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d002      	beq.n	80047e4 <DrawChar+0x98>
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d004      	beq.n	80047ec <DrawChar+0xa0>
 80047e2:	e00c      	b.n	80047fe <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	617b      	str	r3, [r7, #20]
      break;
 80047ea:	e016      	b.n	800481a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	3201      	adds	r2, #1
 80047f6:	7812      	ldrb	r2, [r2, #0]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
      break;
 80047fc:	e00d      	b.n	800481a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	041a      	lsls	r2, r3, #16
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	3301      	adds	r3, #1
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	4313      	orrs	r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	3202      	adds	r2, #2
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
      break;
 8004818:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	e036      	b.n	800488e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004820:	8a3a      	ldrh	r2, [r7, #16]
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	1ad2      	subs	r2, r2, r3
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	4413      	add	r3, r2
 800482a:	3b01      	subs	r3, #1
 800482c:	2201      	movs	r2, #1
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	461a      	mov	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d012      	beq.n	8004862 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	b29a      	uxth	r2, r3
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	4413      	add	r3, r2
 8004844:	b298      	uxth	r0, r3
 8004846:	4b1b      	ldr	r3, [pc, #108]	@ (80048b4 <DrawChar+0x168>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	491b      	ldr	r1, [pc, #108]	@ (80048b8 <DrawChar+0x16c>)
 800484c:	4613      	mov	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	88bb      	ldrh	r3, [r7, #4]
 800485a:	4619      	mov	r1, r3
 800485c:	f7ff fcee 	bl	800423c <BSP_LCD_DrawPixel>
 8004860:	e012      	b.n	8004888 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	b29a      	uxth	r2, r3
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	4413      	add	r3, r2
 800486a:	b298      	uxth	r0, r3
 800486c:	4b11      	ldr	r3, [pc, #68]	@ (80048b4 <DrawChar+0x168>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4911      	ldr	r1, [pc, #68]	@ (80048b8 <DrawChar+0x16c>)
 8004872:	4613      	mov	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	3304      	adds	r3, #4
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	88bb      	ldrh	r3, [r7, #4]
 8004882:	4619      	mov	r1, r3
 8004884:	f7ff fcda 	bl	800423c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	3301      	adds	r3, #1
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	8a3b      	ldrh	r3, [r7, #16]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	429a      	cmp	r2, r3
 8004894:	d3c4      	bcc.n	8004820 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004896:	88bb      	ldrh	r3, [r7, #4]
 8004898:	3301      	adds	r3, #1
 800489a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	3301      	adds	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	8a7b      	ldrh	r3, [r7, #18]
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d384      	bcc.n	80047b4 <DrawChar+0x68>
  }
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000990 	.word	0x20000990
 80048b8:	20000994 	.word	0x20000994

080048bc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80048ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004944 <LL_FillBuffer+0x88>)
 80048cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80048d0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80048d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <LL_FillBuffer+0x8c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1d      	ldr	r2, [pc, #116]	@ (800494c <LL_FillBuffer+0x90>)
 80048d8:	2134      	movs	r1, #52	@ 0x34
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	4413      	add	r3, r2
 80048e0:	3348      	adds	r3, #72	@ 0x48
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d103      	bne.n	80048f0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80048e8:	4b16      	ldr	r3, [pc, #88]	@ (8004944 <LL_FillBuffer+0x88>)
 80048ea:	2202      	movs	r2, #2
 80048ec:	609a      	str	r2, [r3, #8]
 80048ee:	e002      	b.n	80048f6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80048f0:	4b14      	ldr	r3, [pc, #80]	@ (8004944 <LL_FillBuffer+0x88>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80048f6:	4a13      	ldr	r2, [pc, #76]	@ (8004944 <LL_FillBuffer+0x88>)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80048fc:	4b11      	ldr	r3, [pc, #68]	@ (8004944 <LL_FillBuffer+0x88>)
 80048fe:	4a14      	ldr	r2, [pc, #80]	@ (8004950 <LL_FillBuffer+0x94>)
 8004900:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004902:	4810      	ldr	r0, [pc, #64]	@ (8004944 <LL_FillBuffer+0x88>)
 8004904:	f002 fa14 	bl	8006d30 <HAL_DMA2D_Init>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d115      	bne.n	800493a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800490e:	68f9      	ldr	r1, [r7, #12]
 8004910:	480c      	ldr	r0, [pc, #48]	@ (8004944 <LL_FillBuffer+0x88>)
 8004912:	f002 fc7b 	bl	800720c <HAL_DMA2D_ConfigLayer>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10e      	bne.n	800493a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69f9      	ldr	r1, [r7, #28]
 8004926:	4807      	ldr	r0, [pc, #28]	@ (8004944 <LL_FillBuffer+0x88>)
 8004928:	f002 fa4c 	bl	8006dc4 <HAL_DMA2D_Start>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004932:	210a      	movs	r1, #10
 8004934:	4803      	ldr	r0, [pc, #12]	@ (8004944 <LL_FillBuffer+0x88>)
 8004936:	f002 fa70 	bl	8006e1a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000950 	.word	0x20000950
 8004948:	20000990 	.word	0x20000990
 800494c:	200008a8 	.word	0x200008a8
 8004950:	4002b000 	.word	0x4002b000

08004954 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8004962:	4b1c      	ldr	r3, [pc, #112]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 8004964:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004968:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800496a:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8004970:	4b18      	ldr	r3, [pc, #96]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 8004972:	2200      	movs	r2, #0
 8004974:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004976:	4b17      	ldr	r3, [pc, #92]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800497c:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 800497e:	22ff      	movs	r2, #255	@ 0xff
 8004980:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8004982:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8004988:	4b12      	ldr	r3, [pc, #72]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 800498a:	2200      	movs	r2, #0
 800498c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800498e:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 8004990:	4a11      	ldr	r2, [pc, #68]	@ (80049d8 <LL_ConvertLineToARGB8888+0x84>)
 8004992:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004994:	480f      	ldr	r0, [pc, #60]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 8004996:	f002 f9cb 	bl	8006d30 <HAL_DMA2D_Init>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d115      	bne.n	80049cc <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80049a0:	2101      	movs	r1, #1
 80049a2:	480c      	ldr	r0, [pc, #48]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 80049a4:	f002 fc32 	bl	800720c <HAL_DMA2D_ConfigLayer>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10e      	bne.n	80049cc <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	2301      	movs	r3, #1
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4806      	ldr	r0, [pc, #24]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 80049ba:	f002 fa03 	bl	8006dc4 <HAL_DMA2D_Start>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80049c4:	210a      	movs	r1, #10
 80049c6:	4803      	ldr	r0, [pc, #12]	@ (80049d4 <LL_ConvertLineToARGB8888+0x80>)
 80049c8:	f002 fa27 	bl	8006e1a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000950 	.word	0x20000950
 80049d8:	4002b000 	.word	0x4002b000

080049dc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80049e0:	4b29      	ldr	r3, [pc, #164]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 80049e2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a8c <BSP_SDRAM_Init+0xb0>)
 80049e4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80049e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a90 <BSP_SDRAM_Init+0xb4>)
 80049e8:	2202      	movs	r2, #2
 80049ea:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80049ec:	4b28      	ldr	r3, [pc, #160]	@ (8004a90 <BSP_SDRAM_Init+0xb4>)
 80049ee:	2207      	movs	r2, #7
 80049f0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80049f2:	4b27      	ldr	r3, [pc, #156]	@ (8004a90 <BSP_SDRAM_Init+0xb4>)
 80049f4:	2204      	movs	r2, #4
 80049f6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80049f8:	4b25      	ldr	r3, [pc, #148]	@ (8004a90 <BSP_SDRAM_Init+0xb4>)
 80049fa:	2207      	movs	r2, #7
 80049fc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80049fe:	4b24      	ldr	r3, [pc, #144]	@ (8004a90 <BSP_SDRAM_Init+0xb4>)
 8004a00:	2202      	movs	r2, #2
 8004a02:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004a04:	4b22      	ldr	r3, [pc, #136]	@ (8004a90 <BSP_SDRAM_Init+0xb4>)
 8004a06:	2202      	movs	r2, #2
 8004a08:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004a0a:	4b21      	ldr	r3, [pc, #132]	@ (8004a90 <BSP_SDRAM_Init+0xb4>)
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004a10:	4b1d      	ldr	r3, [pc, #116]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004a16:	4b1c      	ldr	r3, [pc, #112]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a1e:	2204      	movs	r2, #4
 8004a20:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004a22:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a24:	2210      	movs	r2, #16
 8004a26:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004a28:	4b17      	ldr	r3, [pc, #92]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a2a:	2240      	movs	r2, #64	@ 0x40
 8004a2c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004a2e:	4b16      	ldr	r3, [pc, #88]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a34:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004a36:	4b14      	ldr	r3, [pc, #80]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004a3c:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a42:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004a44:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004a52:	2100      	movs	r1, #0
 8004a54:	480c      	ldr	r0, [pc, #48]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a56:	f000 f87f 	bl	8004b58 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004a5a:	490d      	ldr	r1, [pc, #52]	@ (8004a90 <BSP_SDRAM_Init+0xb4>)
 8004a5c:	480a      	ldr	r0, [pc, #40]	@ (8004a88 <BSP_SDRAM_Init+0xac>)
 8004a5e:	f005 fe5d 	bl	800a71c <HAL_SDRAM_Init>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004a68:	4b0a      	ldr	r3, [pc, #40]	@ (8004a94 <BSP_SDRAM_Init+0xb8>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e002      	b.n	8004a76 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004a70:	4b08      	ldr	r3, [pc, #32]	@ (8004a94 <BSP_SDRAM_Init+0xb8>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004a76:	f240 6003 	movw	r0, #1539	@ 0x603
 8004a7a:	f000 f80d 	bl	8004a98 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004a7e:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <BSP_SDRAM_Init+0xb8>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000a30 	.word	0x20000a30
 8004a8c:	a0000140 	.word	0xa0000140
 8004a90:	20000a64 	.word	0x20000a64
 8004a94:	20000044 	.word	0x20000044

08004a98 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004aaa:	4b29      	ldr	r3, [pc, #164]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aac:	2210      	movs	r2, #16
 8004aae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ab0:	4b27      	ldr	r3, [pc, #156]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004ab6:	4b26      	ldr	r3, [pc, #152]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ac0:	4923      	ldr	r1, [pc, #140]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ac2:	4824      	ldr	r0, [pc, #144]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004ac4:	f005 fe5e 	bl	800a784 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004ac8:	2001      	movs	r0, #1
 8004aca:	f001 f993 	bl	8005df4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004ace:	4b20      	ldr	r3, [pc, #128]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ada:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004ae6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004aea:	4919      	ldr	r1, [pc, #100]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aec:	4819      	ldr	r0, [pc, #100]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004aee:	f005 fe49 	bl	800a784 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004af2:	4b17      	ldr	r3, [pc, #92]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004af4:	2203      	movs	r2, #3
 8004af6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004af8:	4b15      	ldr	r3, [pc, #84]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004afa:	2210      	movs	r2, #16
 8004afc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004afe:	4b14      	ldr	r3, [pc, #80]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b00:	2208      	movs	r2, #8
 8004b02:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b04:	4b12      	ldr	r3, [pc, #72]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b0e:	4910      	ldr	r1, [pc, #64]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b10:	4810      	ldr	r0, [pc, #64]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b12:	f005 fe37 	bl	800a784 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004b16:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8004b1a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b1e:	2204      	movs	r2, #4
 8004b20:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b22:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b24:	2210      	movs	r2, #16
 8004b26:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b28:	4b09      	ldr	r3, [pc, #36]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a07      	ldr	r2, [pc, #28]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b32:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b38:	4905      	ldr	r1, [pc, #20]	@ (8004b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b3a:	4806      	ldr	r0, [pc, #24]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b3c:	f005 fe22 	bl	800a784 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4804      	ldr	r0, [pc, #16]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b44:	f005 fe53 	bl	800a7ee <HAL_SDRAM_ProgramRefreshRate>
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000a80 	.word	0x20000a80
 8004b54:	20000a30 	.word	0x20000a30

08004b58 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b090      	sub	sp, #64	@ 0x40
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004b62:	4b70      	ldr	r3, [pc, #448]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	4a6f      	ldr	r2, [pc, #444]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	6393      	str	r3, [r2, #56]	@ 0x38
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7e:	4a69      	ldr	r2, [pc, #420]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004b80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b86:	4b67      	ldr	r3, [pc, #412]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b92:	4b64      	ldr	r3, [pc, #400]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b96:	4a63      	ldr	r2, [pc, #396]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004b98:	f043 0304 	orr.w	r3, r3, #4
 8004b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b9e:	4b61      	ldr	r3, [pc, #388]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	623b      	str	r3, [r7, #32]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004baa:	4b5e      	ldr	r3, [pc, #376]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bae:	4a5d      	ldr	r2, [pc, #372]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004bb0:	f043 0308 	orr.w	r3, r3, #8
 8004bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bc2:	4b58      	ldr	r3, [pc, #352]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc6:	4a57      	ldr	r2, [pc, #348]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004bc8:	f043 0310 	orr.w	r3, r3, #16
 8004bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bce:	4b55      	ldr	r3, [pc, #340]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bda:	4b52      	ldr	r3, [pc, #328]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bde:	4a51      	ldr	r2, [pc, #324]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004be0:	f043 0320 	orr.w	r3, r3, #32
 8004be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004be6:	4b4f      	ldr	r3, [pc, #316]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf6:	4a4b      	ldr	r2, [pc, #300]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bfe:	4b49      	ldr	r3, [pc, #292]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c0a:	4b46      	ldr	r3, [pc, #280]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	4a45      	ldr	r2, [pc, #276]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c16:	4b43      	ldr	r3, [pc, #268]	@ (8004d24 <BSP_SDRAM_MspInit+0x1cc>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004c22:	2302      	movs	r3, #2
 8004c24:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004c26:	2301      	movs	r3, #1
 8004c28:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004c2e:	230c      	movs	r3, #12
 8004c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004c32:	2308      	movs	r3, #8
 8004c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	483a      	ldr	r0, [pc, #232]	@ (8004d28 <BSP_SDRAM_MspInit+0x1d0>)
 8004c3e:	f002 fc13 	bl	8007468 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004c42:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004c48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4837      	ldr	r0, [pc, #220]	@ (8004d2c <BSP_SDRAM_MspInit+0x1d4>)
 8004c50:	f002 fc0a 	bl	8007468 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004c54:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004c5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4833      	ldr	r0, [pc, #204]	@ (8004d30 <BSP_SDRAM_MspInit+0x1d8>)
 8004c62:	f002 fc01 	bl	8007468 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004c66:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004c6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c70:	4619      	mov	r1, r3
 8004c72:	4830      	ldr	r0, [pc, #192]	@ (8004d34 <BSP_SDRAM_MspInit+0x1dc>)
 8004c74:	f002 fbf8 	bl	8007468 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004c78:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c82:	4619      	mov	r1, r3
 8004c84:	482c      	ldr	r0, [pc, #176]	@ (8004d38 <BSP_SDRAM_MspInit+0x1e0>)
 8004c86:	f002 fbef 	bl	8007468 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004c8a:	2328      	movs	r3, #40	@ 0x28
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004c8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c92:	4619      	mov	r1, r3
 8004c94:	4829      	ldr	r0, [pc, #164]	@ (8004d3c <BSP_SDRAM_MspInit+0x1e4>)
 8004c96:	f002 fbe7 	bl	8007468 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004c9a:	4b29      	ldr	r3, [pc, #164]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004ca0:	4b27      	ldr	r3, [pc, #156]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004ca2:	2280      	movs	r2, #128	@ 0x80
 8004ca4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004ca6:	4b26      	ldr	r3, [pc, #152]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cac:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004cae:	4b24      	ldr	r3, [pc, #144]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004cb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cb4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004cb6:	4b22      	ldr	r3, [pc, #136]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004cb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004cbc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004cbe:	4b20      	ldr	r3, [pc, #128]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004cc0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004cc4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004cce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004cd2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004cda:	4b19      	ldr	r3, [pc, #100]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004cdc:	2203      	movs	r2, #3
 8004cde:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004ce0:	4b17      	ldr	r3, [pc, #92]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004ce6:	4b16      	ldr	r3, [pc, #88]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004cec:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004cee:	4a15      	ldr	r2, [pc, #84]	@ (8004d44 <BSP_SDRAM_MspInit+0x1ec>)
 8004cf0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a12      	ldr	r2, [pc, #72]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cf8:	4a11      	ldr	r2, [pc, #68]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004cfe:	4810      	ldr	r0, [pc, #64]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004d00:	f001 ff06 	bl	8006b10 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004d04:	480e      	ldr	r0, [pc, #56]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e8>)
 8004d06:	f001 fe55 	bl	80069b4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	210f      	movs	r1, #15
 8004d0e:	2038      	movs	r0, #56	@ 0x38
 8004d10:	f001 fd46 	bl	80067a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004d14:	2038      	movs	r0, #56	@ 0x38
 8004d16:	f001 fd5f 	bl	80067d8 <HAL_NVIC_EnableIRQ>
}
 8004d1a:	bf00      	nop
 8004d1c:	3740      	adds	r7, #64	@ 0x40
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40020800 	.word	0x40020800
 8004d2c:	40020c00 	.word	0x40020c00
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40021400 	.word	0x40021400
 8004d38:	40021800 	.word	0x40021800
 8004d3c:	40021c00 	.word	0x40021c00
 8004d40:	20000a90 	.word	0x20000a90
 8004d44:	40026410 	.word	0x40026410

08004d48 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	460a      	mov	r2, r1
 8004d52:	80fb      	strh	r3, [r7, #6]
 8004d54:	4613      	mov	r3, r2
 8004d56:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004d5c:	4a14      	ldr	r2, [pc, #80]	@ (8004db0 <BSP_TS_Init+0x68>)
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004d62:	4a14      	ldr	r2, [pc, #80]	@ (8004db4 <BSP_TS_Init+0x6c>)
 8004d64:	88bb      	ldrh	r3, [r7, #4]
 8004d66:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004d68:	4b13      	ldr	r3, [pc, #76]	@ (8004db8 <BSP_TS_Init+0x70>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2070      	movs	r0, #112	@ 0x70
 8004d6e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004d70:	4b11      	ldr	r3, [pc, #68]	@ (8004db8 <BSP_TS_Init+0x70>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2070      	movs	r0, #112	@ 0x70
 8004d76:	4798      	blx	r3
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b51      	cmp	r3, #81	@ 0x51
 8004d7c:	d110      	bne.n	8004da0 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dbc <BSP_TS_Init+0x74>)
 8004d80:	4a0d      	ldr	r2, [pc, #52]	@ (8004db8 <BSP_TS_Init+0x70>)
 8004d82:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004d84:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc0 <BSP_TS_Init+0x78>)
 8004d86:	2270      	movs	r2, #112	@ 0x70
 8004d88:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc4 <BSP_TS_Init+0x7c>)
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004d90:	4b0a      	ldr	r3, [pc, #40]	@ (8004dbc <BSP_TS_Init+0x74>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc0 <BSP_TS_Init+0x78>)
 8004d98:	7812      	ldrb	r2, [r2, #0]
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4798      	blx	r3
 8004d9e:	e001      	b.n	8004da4 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004da0:	2303      	movs	r3, #3
 8004da2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000af4 	.word	0x20000af4
 8004db4:	20000af6 	.word	0x20000af6
 8004db8:	2000000c 	.word	0x2000000c
 8004dbc:	20000af0 	.word	0x20000af0
 8004dc0:	20000af9 	.word	0x20000af9
 8004dc4:	20000af8 	.word	0x20000af8

08004dc8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b097      	sub	sp, #92	@ 0x5c
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004de2:	4bb8      	ldr	r3, [pc, #736]	@ (80050c4 <BSP_TS_GetState+0x2fc>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	4ab7      	ldr	r2, [pc, #732]	@ (80050c8 <BSP_TS_GetState+0x300>)
 8004dea:	7812      	ldrb	r2, [r2, #0]
 8004dec:	4610      	mov	r0, r2
 8004dee:	4798      	blx	r3
 8004df0:	4603      	mov	r3, r0
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8198 	beq.w	8005132 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004e02:	2300      	movs	r3, #0
 8004e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e06:	e187      	b.n	8005118 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004e08:	4bae      	ldr	r3, [pc, #696]	@ (80050c4 <BSP_TS_GetState+0x2fc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4aae      	ldr	r2, [pc, #696]	@ (80050c8 <BSP_TS_GetState+0x300>)
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	4614      	mov	r4, r2
 8004e14:	f107 0120 	add.w	r1, r7, #32
 8004e18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e1a:	0052      	lsls	r2, r2, #1
 8004e1c:	1888      	adds	r0, r1, r2
 8004e1e:	f107 0114 	add.w	r1, r7, #20
 8004e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e24:	0052      	lsls	r2, r2, #1
 8004e26:	440a      	add	r2, r1
 8004e28:	4601      	mov	r1, r0
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004e2e:	4ba7      	ldr	r3, [pc, #668]	@ (80050cc <BSP_TS_GetState+0x304>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d117      	bne.n	8004e66 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	3350      	adds	r3, #80	@ 0x50
 8004e3c:	443b      	add	r3, r7
 8004e3e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	3350      	adds	r3, #80	@ 0x50
 8004e48:	443b      	add	r3, r7
 8004e4a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	3350      	adds	r3, #80	@ 0x50
 8004e54:	443b      	add	r3, r7
 8004e56:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	3350      	adds	r3, #80	@ 0x50
 8004e60:	443b      	add	r3, r7
 8004e62:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004e66:	4b99      	ldr	r3, [pc, #612]	@ (80050cc <BSP_TS_GetState+0x304>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00e      	beq.n	8004e90 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8004e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	3350      	adds	r3, #80	@ 0x50
 8004e78:	443b      	add	r3, r7
 8004e7a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004e7e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	3350      	adds	r3, #80	@ 0x50
 8004e8a:	443b      	add	r3, r7
 8004e8c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004e90:	4b8e      	ldr	r3, [pc, #568]	@ (80050cc <BSP_TS_GetState+0x304>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00e      	beq.n	8004eba <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	3350      	adds	r3, #80	@ 0x50
 8004ea2:	443b      	add	r3, r7
 8004ea4:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004ea8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	3350      	adds	r3, #80	@ 0x50
 8004eb4:	443b      	add	r3, r7
 8004eb6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004eba:	4b84      	ldr	r3, [pc, #528]	@ (80050cc <BSP_TS_GetState+0x304>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d017      	beq.n	8004ef6 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8004ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	3350      	adds	r3, #80	@ 0x50
 8004ecc:	443b      	add	r3, r7
 8004ece:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	3350      	adds	r3, #80	@ 0x50
 8004ed8:	443b      	add	r3, r7
 8004eda:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	3350      	adds	r3, #80	@ 0x50
 8004ee4:	443b      	add	r3, r7
 8004ee6:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	3350      	adds	r3, #80	@ 0x50
 8004ef0:	443b      	add	r3, r7
 8004ef2:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	3350      	adds	r3, #80	@ 0x50
 8004efc:	443b      	add	r3, r7
 8004efe:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f02:	4619      	mov	r1, r3
 8004f04:	4a72      	ldr	r2, [pc, #456]	@ (80050d0 <BSP_TS_GetState+0x308>)
 8004f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f0c:	4299      	cmp	r1, r3
 8004f0e:	d90d      	bls.n	8004f2c <BSP_TS_GetState+0x164>
 8004f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	3350      	adds	r3, #80	@ 0x50
 8004f16:	443b      	add	r3, r7
 8004f18:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004f1c:	496c      	ldr	r1, [pc, #432]	@ (80050d0 <BSP_TS_GetState+0x308>)
 8004f1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	e00c      	b.n	8004f46 <BSP_TS_GetState+0x17e>
 8004f2c:	4a68      	ldr	r2, [pc, #416]	@ (80050d0 <BSP_TS_GetState+0x308>)
 8004f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	3350      	adds	r3, #80	@ 0x50
 8004f3c:	443b      	add	r3, r7
 8004f3e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	3350      	adds	r3, #80	@ 0x50
 8004f50:	443b      	add	r3, r7
 8004f52:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004f56:	4619      	mov	r1, r3
 8004f58:	4a5e      	ldr	r2, [pc, #376]	@ (80050d4 <BSP_TS_GetState+0x30c>)
 8004f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f60:	4299      	cmp	r1, r3
 8004f62:	d90d      	bls.n	8004f80 <BSP_TS_GetState+0x1b8>
 8004f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	3350      	adds	r3, #80	@ 0x50
 8004f6a:	443b      	add	r3, r7
 8004f6c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004f70:	4958      	ldr	r1, [pc, #352]	@ (80050d4 <BSP_TS_GetState+0x30c>)
 8004f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	e00c      	b.n	8004f9a <BSP_TS_GetState+0x1d2>
 8004f80:	4a54      	ldr	r2, [pc, #336]	@ (80050d4 <BSP_TS_GetState+0x30c>)
 8004f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	3350      	adds	r3, #80	@ 0x50
 8004f90:	443b      	add	r3, r7
 8004f92:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8004f9e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004fa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004fa6:	4413      	add	r3, r2
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	dd15      	ble.n	8004fd8 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8004fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	3350      	adds	r3, #80	@ 0x50
 8004fb2:	443b      	add	r3, r7
 8004fb4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4a45      	ldr	r2, [pc, #276]	@ (80050d0 <BSP_TS_GetState+0x308>)
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	3350      	adds	r3, #80	@ 0x50
 8004fc8:	443b      	add	r3, r7
 8004fca:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4a40      	ldr	r2, [pc, #256]	@ (80050d4 <BSP_TS_GetState+0x30c>)
 8004fd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80050c8 <BSP_TS_GetState+0x300>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b70      	cmp	r3, #112	@ 0x70
 8004fde:	d119      	bne.n	8005014 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	3350      	adds	r3, #80	@ 0x50
 8004fe6:	443b      	add	r3, r7
 8004fe8:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	460a      	mov	r2, r1
 8004ff6:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	3350      	adds	r3, #80	@ 0x50
 8004ffe:	443b      	add	r3, r7
 8005000:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005008:	3304      	adds	r3, #4
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	4413      	add	r3, r2
 800500e:	460a      	mov	r2, r1
 8005010:	809a      	strh	r2, [r3, #4]
 8005012:	e022      	b.n	800505a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005014:	4b30      	ldr	r3, [pc, #192]	@ (80050d8 <BSP_TS_GetState+0x310>)
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	4619      	mov	r1, r3
 800501a:	4a2d      	ldr	r2, [pc, #180]	@ (80050d0 <BSP_TS_GetState+0x308>)
 800501c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800501e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005022:	fb01 f303 	mul.w	r3, r1, r3
 8005026:	0b1b      	lsrs	r3, r3, #12
 8005028:	b299      	uxth	r1, r3
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4413      	add	r3, r2
 8005032:	460a      	mov	r2, r1
 8005034:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005036:	4b29      	ldr	r3, [pc, #164]	@ (80050dc <BSP_TS_GetState+0x314>)
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	4619      	mov	r1, r3
 800503c:	4a25      	ldr	r2, [pc, #148]	@ (80050d4 <BSP_TS_GetState+0x30c>)
 800503e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005044:	fb01 f303 	mul.w	r3, r1, r3
 8005048:	0b1b      	lsrs	r3, r3, #12
 800504a:	b299      	uxth	r1, r3
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005050:	3304      	adds	r3, #4
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4413      	add	r3, r2
 8005056:	460a      	mov	r2, r1
 8005058:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800505a:	4b1b      	ldr	r3, [pc, #108]	@ (80050c8 <BSP_TS_GetState+0x300>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f107 010c 	add.w	r1, r7, #12
 8005064:	f107 0210 	add.w	r2, r7, #16
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	460b      	mov	r3, r1
 8005070:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005072:	f7fd fb63 	bl	800273c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	b2d9      	uxtb	r1, r3
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800507e:	4413      	add	r3, r2
 8005080:	3316      	adds	r3, #22
 8005082:	460a      	mov	r2, r1
 8005084:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	b2d9      	uxtb	r1, r3
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800508e:	4413      	add	r3, r2
 8005090:	3320      	adds	r3, #32
 8005092:	460a      	mov	r2, r1
 8005094:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d836      	bhi.n	800510a <BSP_TS_GetState+0x342>
 800509c:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <BSP_TS_GetState+0x2dc>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050e1 	.word	0x080050e1
 80050ac:	080050ef 	.word	0x080050ef
 80050b0:	080050fd 	.word	0x080050fd
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050b8:	4413      	add	r3, r2
 80050ba:	331b      	adds	r3, #27
 80050bc:	2201      	movs	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]
          break;
 80050c0:	e027      	b.n	8005112 <BSP_TS_GetState+0x34a>
 80050c2:	bf00      	nop
 80050c4:	20000af0 	.word	0x20000af0
 80050c8:	20000af9 	.word	0x20000af9
 80050cc:	20000af8 	.word	0x20000af8
 80050d0:	20000afc 	.word	0x20000afc
 80050d4:	20000b10 	.word	0x20000b10
 80050d8:	20000af4 	.word	0x20000af4
 80050dc:	20000af6 	.word	0x20000af6
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e4:	4413      	add	r3, r2
 80050e6:	331b      	adds	r3, #27
 80050e8:	2202      	movs	r2, #2
 80050ea:	701a      	strb	r2, [r3, #0]
          break;
 80050ec:	e011      	b.n	8005112 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f2:	4413      	add	r3, r2
 80050f4:	331b      	adds	r3, #27
 80050f6:	2203      	movs	r2, #3
 80050f8:	701a      	strb	r2, [r3, #0]
          break;
 80050fa:	e00a      	b.n	8005112 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005100:	4413      	add	r3, r2
 8005102:	331b      	adds	r3, #27
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
          break;
 8005108:	e003      	b.n	8005112 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8005110:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005114:	3301      	adds	r3, #1
 8005116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005120:	4293      	cmp	r3, r2
 8005122:	f4ff ae71 	bcc.w	8004e08 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f80a 	bl	8005140 <BSP_TS_Get_GestureId>
 800512c:	4603      	mov	r3, r0
 800512e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005132:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005136:	4618      	mov	r0, r3
 8005138:	3754      	adds	r7, #84	@ 0x54
 800513a:	46bd      	mov	sp, r7
 800513c:	bd90      	pop	{r4, r7, pc}
 800513e:	bf00      	nop

08005140 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005150:	4b3b      	ldr	r3, [pc, #236]	@ (8005240 <BSP_TS_Get_GestureId+0x100>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	f107 0308 	add.w	r3, r7, #8
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f7fd fad4 	bl	800270a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b49      	cmp	r3, #73	@ 0x49
 8005166:	d05e      	beq.n	8005226 <BSP_TS_Get_GestureId+0xe6>
 8005168:	2b49      	cmp	r3, #73	@ 0x49
 800516a:	d860      	bhi.n	800522e <BSP_TS_Get_GestureId+0xee>
 800516c:	2b1c      	cmp	r3, #28
 800516e:	d83f      	bhi.n	80051f0 <BSP_TS_Get_GestureId+0xb0>
 8005170:	2b1c      	cmp	r3, #28
 8005172:	d85c      	bhi.n	800522e <BSP_TS_Get_GestureId+0xee>
 8005174:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <BSP_TS_Get_GestureId+0x3c>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	080051f7 	.word	0x080051f7
 8005180:	0800522f 	.word	0x0800522f
 8005184:	0800522f 	.word	0x0800522f
 8005188:	0800522f 	.word	0x0800522f
 800518c:	0800522f 	.word	0x0800522f
 8005190:	0800522f 	.word	0x0800522f
 8005194:	0800522f 	.word	0x0800522f
 8005198:	0800522f 	.word	0x0800522f
 800519c:	0800522f 	.word	0x0800522f
 80051a0:	0800522f 	.word	0x0800522f
 80051a4:	0800522f 	.word	0x0800522f
 80051a8:	0800522f 	.word	0x0800522f
 80051ac:	0800522f 	.word	0x0800522f
 80051b0:	0800522f 	.word	0x0800522f
 80051b4:	0800522f 	.word	0x0800522f
 80051b8:	0800522f 	.word	0x0800522f
 80051bc:	080051ff 	.word	0x080051ff
 80051c0:	0800522f 	.word	0x0800522f
 80051c4:	0800522f 	.word	0x0800522f
 80051c8:	0800522f 	.word	0x0800522f
 80051cc:	08005207 	.word	0x08005207
 80051d0:	0800522f 	.word	0x0800522f
 80051d4:	0800522f 	.word	0x0800522f
 80051d8:	0800522f 	.word	0x0800522f
 80051dc:	0800520f 	.word	0x0800520f
 80051e0:	0800522f 	.word	0x0800522f
 80051e4:	0800522f 	.word	0x0800522f
 80051e8:	0800522f 	.word	0x0800522f
 80051ec:	08005217 	.word	0x08005217
 80051f0:	2b40      	cmp	r3, #64	@ 0x40
 80051f2:	d014      	beq.n	800521e <BSP_TS_Get_GestureId+0xde>
 80051f4:	e01b      	b.n	800522e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80051fc:	e01a      	b.n	8005234 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005204:	e016      	b.n	8005234 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800520c:	e012      	b.n	8005234 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2203      	movs	r2, #3
 8005212:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005214:	e00e      	b.n	8005234 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2204      	movs	r2, #4
 800521a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800521c:	e00a      	b.n	8005234 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2205      	movs	r2, #5
 8005222:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005224:	e006      	b.n	8005234 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2206      	movs	r2, #6
 800522a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800522c:	e002      	b.n	8005234 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
      break;
 8005232:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005234:	7bfb      	ldrb	r3, [r7, #15]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000af9 	.word	0x20000af9

08005244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800524a:	4b11      	ldr	r3, [pc, #68]	@ (8005290 <HAL_MspInit+0x4c>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	4a10      	ldr	r2, [pc, #64]	@ (8005290 <HAL_MspInit+0x4c>)
 8005250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005254:	6413      	str	r3, [r2, #64]	@ 0x40
 8005256:	4b0e      	ldr	r3, [pc, #56]	@ (8005290 <HAL_MspInit+0x4c>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005262:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <HAL_MspInit+0x4c>)
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	4a0a      	ldr	r2, [pc, #40]	@ (8005290 <HAL_MspInit+0x4c>)
 8005268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800526c:	6453      	str	r3, [r2, #68]	@ 0x44
 800526e:	4b08      	ldr	r3, [pc, #32]	@ (8005290 <HAL_MspInit+0x4c>)
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800527a:	2200      	movs	r2, #0
 800527c:	210f      	movs	r1, #15
 800527e:	f06f 0001 	mvn.w	r0, #1
 8005282:	f001 fa8d 	bl	80067a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40023800 	.word	0x40023800

08005294 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08e      	sub	sp, #56	@ 0x38
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80052a4:	4b33      	ldr	r3, [pc, #204]	@ (8005374 <HAL_InitTick+0xe0>)
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	4a32      	ldr	r2, [pc, #200]	@ (8005374 <HAL_InitTick+0xe0>)
 80052aa:	f043 0310 	orr.w	r3, r3, #16
 80052ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80052b0:	4b30      	ldr	r3, [pc, #192]	@ (8005374 <HAL_InitTick+0xe0>)
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052bc:	f107 0210 	add.w	r2, r7, #16
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f004 fa30 	bl	800972c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80052d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80052d6:	f004 fa01 	bl	80096dc <HAL_RCC_GetPCLK1Freq>
 80052da:	6378      	str	r0, [r7, #52]	@ 0x34
 80052dc:	e004      	b.n	80052e8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80052de:	f004 f9fd 	bl	80096dc <HAL_RCC_GetPCLK1Freq>
 80052e2:	4603      	mov	r3, r0
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80052e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ea:	4a23      	ldr	r2, [pc, #140]	@ (8005378 <HAL_InitTick+0xe4>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	0c9b      	lsrs	r3, r3, #18
 80052f2:	3b01      	subs	r3, #1
 80052f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80052f6:	4b21      	ldr	r3, [pc, #132]	@ (800537c <HAL_InitTick+0xe8>)
 80052f8:	4a21      	ldr	r2, [pc, #132]	@ (8005380 <HAL_InitTick+0xec>)
 80052fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80052fc:	4b1f      	ldr	r3, [pc, #124]	@ (800537c <HAL_InitTick+0xe8>)
 80052fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005302:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005304:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <HAL_InitTick+0xe8>)
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800530a:	4b1c      	ldr	r3, [pc, #112]	@ (800537c <HAL_InitTick+0xe8>)
 800530c:	2200      	movs	r2, #0
 800530e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005310:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <HAL_InitTick+0xe8>)
 8005312:	2200      	movs	r2, #0
 8005314:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005316:	4b19      	ldr	r3, [pc, #100]	@ (800537c <HAL_InitTick+0xe8>)
 8005318:	2200      	movs	r2, #0
 800531a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800531c:	4817      	ldr	r0, [pc, #92]	@ (800537c <HAL_InitTick+0xe8>)
 800531e:	f005 fb39 	bl	800a994 <HAL_TIM_Base_Init>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005328:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800532c:	2b00      	cmp	r3, #0
 800532e:	d11b      	bne.n	8005368 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005330:	4812      	ldr	r0, [pc, #72]	@ (800537c <HAL_InitTick+0xe8>)
 8005332:	f005 fb87 	bl	800aa44 <HAL_TIM_Base_Start_IT>
 8005336:	4603      	mov	r3, r0
 8005338:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800533c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005340:	2b00      	cmp	r3, #0
 8005342:	d111      	bne.n	8005368 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005344:	2036      	movs	r0, #54	@ 0x36
 8005346:	f001 fa47 	bl	80067d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b0f      	cmp	r3, #15
 800534e:	d808      	bhi.n	8005362 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005350:	2200      	movs	r2, #0
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	2036      	movs	r0, #54	@ 0x36
 8005356:	f001 fa23 	bl	80067a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800535a:	4a0a      	ldr	r2, [pc, #40]	@ (8005384 <HAL_InitTick+0xf0>)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	e002      	b.n	8005368 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005368:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800536c:	4618      	mov	r0, r3
 800536e:	3738      	adds	r7, #56	@ 0x38
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	431bde83 	.word	0x431bde83
 800537c:	20000b24 	.word	0x20000b24
 8005380:	40001000 	.word	0x40001000
 8005384:	2000004c 	.word	0x2000004c

08005388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <NMI_Handler+0x4>

08005390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <HardFault_Handler+0x4>

08005398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800539c:	bf00      	nop
 800539e:	e7fd      	b.n	800539c <MemManage_Handler+0x4>

080053a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <BusFault_Handler+0x4>

080053a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053ac:	bf00      	nop
 80053ae:	e7fd      	b.n	80053ac <UsageFault_Handler+0x4>

080053b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80053c4:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <TIM6_DAC_IRQHandler+0x20>)
 80053c6:	791b      	ldrb	r3, [r3, #4]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80053ce:	4804      	ldr	r0, [pc, #16]	@ (80053e0 <TIM6_DAC_IRQHandler+0x20>)
 80053d0:	f001 fa32 	bl	8006838 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80053d4:	4803      	ldr	r0, [pc, #12]	@ (80053e4 <TIM6_DAC_IRQHandler+0x24>)
 80053d6:	f005 fbad 	bl	800ab34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80053da:	bf00      	nop
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000160 	.word	0x20000160
 80053e4:	20000b24 	.word	0x20000b24

080053e8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80053ec:	4802      	ldr	r0, [pc, #8]	@ (80053f8 <LTDC_IRQHandler+0x10>)
 80053ee:	f003 fa0b 	bl	8008808 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80053f2:	bf00      	nop
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000718 	.word	0x20000718

080053fc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005400:	4802      	ldr	r0, [pc, #8]	@ (800540c <DMA2D_IRQHandler+0x10>)
 8005402:	f001 fdf3 	bl	8006fec <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005406:	bf00      	nop
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000174 	.word	0x20000174

08005410 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
	return 1;
 8005414:	2301      	movs	r3, #1
}
 8005416:	4618      	mov	r0, r3
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <_kill>:

int _kill(int pid, int sig)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800542a:	f009 f9c9 	bl	800e7c0 <__errno>
 800542e:	4603      	mov	r3, r0
 8005430:	2216      	movs	r2, #22
 8005432:	601a      	str	r2, [r3, #0]
	return -1;
 8005434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <_exit>:

void _exit (int status)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005448:	f04f 31ff 	mov.w	r1, #4294967295
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff ffe7 	bl	8005420 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005452:	bf00      	nop
 8005454:	e7fd      	b.n	8005452 <_exit+0x12>

08005456 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b086      	sub	sp, #24
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e00a      	b.n	800547e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005468:	f3af 8000 	nop.w
 800546c:	4601      	mov	r1, r0
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	60ba      	str	r2, [r7, #8]
 8005474:	b2ca      	uxtb	r2, r1
 8005476:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3301      	adds	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	dbf0      	blt.n	8005468 <_read+0x12>
	}

return len;
 8005486:	687b      	ldr	r3, [r7, #4]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e009      	b.n	80054b6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	60ba      	str	r2, [r7, #8]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	3301      	adds	r3, #1
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	dbf1      	blt.n	80054a2 <_write+0x12>
	}
	return len;
 80054be:	687b      	ldr	r3, [r7, #4]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_close>:

int _close(int file)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	return -1;
 80054d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80054f0:	605a      	str	r2, [r3, #4]
	return 0;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <_isatty>:

int _isatty(int file)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	return 1;
 8005508:	2301      	movs	r3, #1
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
	return 0;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005538:	4a14      	ldr	r2, [pc, #80]	@ (800558c <_sbrk+0x5c>)
 800553a:	4b15      	ldr	r3, [pc, #84]	@ (8005590 <_sbrk+0x60>)
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005544:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <_sbrk+0x64>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800554c:	4b11      	ldr	r3, [pc, #68]	@ (8005594 <_sbrk+0x64>)
 800554e:	4a12      	ldr	r2, [pc, #72]	@ (8005598 <_sbrk+0x68>)
 8005550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005552:	4b10      	ldr	r3, [pc, #64]	@ (8005594 <_sbrk+0x64>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4413      	add	r3, r2
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	429a      	cmp	r2, r3
 800555e:	d207      	bcs.n	8005570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005560:	f009 f92e 	bl	800e7c0 <__errno>
 8005564:	4603      	mov	r3, r0
 8005566:	220c      	movs	r2, #12
 8005568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	e009      	b.n	8005584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005570:	4b08      	ldr	r3, [pc, #32]	@ (8005594 <_sbrk+0x64>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005576:	4b07      	ldr	r3, [pc, #28]	@ (8005594 <_sbrk+0x64>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	4a05      	ldr	r2, [pc, #20]	@ (8005594 <_sbrk+0x64>)
 8005580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20050000 	.word	0x20050000
 8005590:	00000400 	.word	0x00000400
 8005594:	20000b70 	.word	0x20000b70
 8005598:	20004d28 	.word	0x20004d28

0800559c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055a0:	4b06      	ldr	r3, [pc, #24]	@ (80055bc <SystemInit+0x20>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a6:	4a05      	ldr	r2, [pc, #20]	@ (80055bc <SystemInit+0x20>)
 80055a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055c6:	f107 0310 	add.w	r3, r7, #16
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	605a      	str	r2, [r3, #4]
 80055d0:	609a      	str	r2, [r3, #8]
 80055d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80055de:	4b20      	ldr	r3, [pc, #128]	@ (8005660 <MX_TIM1_Init+0xa0>)
 80055e0:	4a20      	ldr	r2, [pc, #128]	@ (8005664 <MX_TIM1_Init+0xa4>)
 80055e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80055e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005660 <MX_TIM1_Init+0xa0>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005660 <MX_TIM1_Init+0xa0>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80055f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005660 <MX_TIM1_Init+0xa0>)
 80055f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055f8:	4b19      	ldr	r3, [pc, #100]	@ (8005660 <MX_TIM1_Init+0xa0>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80055fe:	4b18      	ldr	r3, [pc, #96]	@ (8005660 <MX_TIM1_Init+0xa0>)
 8005600:	2200      	movs	r2, #0
 8005602:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005604:	4b16      	ldr	r3, [pc, #88]	@ (8005660 <MX_TIM1_Init+0xa0>)
 8005606:	2200      	movs	r2, #0
 8005608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800560a:	4815      	ldr	r0, [pc, #84]	@ (8005660 <MX_TIM1_Init+0xa0>)
 800560c:	f005 f9c2 	bl	800a994 <HAL_TIM_Base_Init>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8005616:	f7fe f80f 	bl	8003638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800561a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800561e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005620:	f107 0310 	add.w	r3, r7, #16
 8005624:	4619      	mov	r1, r3
 8005626:	480e      	ldr	r0, [pc, #56]	@ (8005660 <MX_TIM1_Init+0xa0>)
 8005628:	f005 fba4 	bl	800ad74 <HAL_TIM_ConfigClockSource>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8005632:	f7fe f801 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005636:	2300      	movs	r3, #0
 8005638:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4806      	ldr	r0, [pc, #24]	@ (8005660 <MX_TIM1_Init+0xa0>)
 8005648:	f005 fdc0 	bl	800b1cc <HAL_TIMEx_MasterConfigSynchronization>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005652:	f7fd fff1 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005656:	bf00      	nop
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000b74 	.word	0x20000b74
 8005664:	40010000 	.word	0x40010000

08005668 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800566e:	f107 0310 	add.w	r3, r7, #16
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	605a      	str	r2, [r3, #4]
 8005678:	609a      	str	r2, [r3, #8]
 800567a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800567c:	1d3b      	adds	r3, r7, #4
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	605a      	str	r2, [r3, #4]
 8005684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005686:	4b1e      	ldr	r3, [pc, #120]	@ (8005700 <MX_TIM2_Init+0x98>)
 8005688:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800568c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800568e:	4b1c      	ldr	r3, [pc, #112]	@ (8005700 <MX_TIM2_Init+0x98>)
 8005690:	2200      	movs	r2, #0
 8005692:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005694:	4b1a      	ldr	r3, [pc, #104]	@ (8005700 <MX_TIM2_Init+0x98>)
 8005696:	2200      	movs	r2, #0
 8005698:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800569a:	4b19      	ldr	r3, [pc, #100]	@ (8005700 <MX_TIM2_Init+0x98>)
 800569c:	f04f 32ff 	mov.w	r2, #4294967295
 80056a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056a2:	4b17      	ldr	r3, [pc, #92]	@ (8005700 <MX_TIM2_Init+0x98>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056a8:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <MX_TIM2_Init+0x98>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80056ae:	4814      	ldr	r0, [pc, #80]	@ (8005700 <MX_TIM2_Init+0x98>)
 80056b0:	f005 f970 	bl	800a994 <HAL_TIM_Base_Init>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80056ba:	f7fd ffbd 	bl	8003638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80056c4:	f107 0310 	add.w	r3, r7, #16
 80056c8:	4619      	mov	r1, r3
 80056ca:	480d      	ldr	r0, [pc, #52]	@ (8005700 <MX_TIM2_Init+0x98>)
 80056cc:	f005 fb52 	bl	800ad74 <HAL_TIM_ConfigClockSource>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80056d6:	f7fd ffaf 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056da:	2300      	movs	r3, #0
 80056dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	4619      	mov	r1, r3
 80056e6:	4806      	ldr	r0, [pc, #24]	@ (8005700 <MX_TIM2_Init+0x98>)
 80056e8:	f005 fd70 	bl	800b1cc <HAL_TIMEx_MasterConfigSynchronization>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80056f2:	f7fd ffa1 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80056f6:	bf00      	nop
 80056f8:	3720      	adds	r7, #32
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20000bc0 	.word	0x20000bc0

08005704 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800570a:	f107 0310 	add.w	r3, r7, #16
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005722:	4b1d      	ldr	r3, [pc, #116]	@ (8005798 <MX_TIM3_Init+0x94>)
 8005724:	4a1d      	ldr	r2, [pc, #116]	@ (800579c <MX_TIM3_Init+0x98>)
 8005726:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005728:	4b1b      	ldr	r3, [pc, #108]	@ (8005798 <MX_TIM3_Init+0x94>)
 800572a:	2200      	movs	r2, #0
 800572c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800572e:	4b1a      	ldr	r3, [pc, #104]	@ (8005798 <MX_TIM3_Init+0x94>)
 8005730:	2200      	movs	r2, #0
 8005732:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005734:	4b18      	ldr	r3, [pc, #96]	@ (8005798 <MX_TIM3_Init+0x94>)
 8005736:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800573a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800573c:	4b16      	ldr	r3, [pc, #88]	@ (8005798 <MX_TIM3_Init+0x94>)
 800573e:	2200      	movs	r2, #0
 8005740:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005742:	4b15      	ldr	r3, [pc, #84]	@ (8005798 <MX_TIM3_Init+0x94>)
 8005744:	2200      	movs	r2, #0
 8005746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005748:	4813      	ldr	r0, [pc, #76]	@ (8005798 <MX_TIM3_Init+0x94>)
 800574a:	f005 f923 	bl	800a994 <HAL_TIM_Base_Init>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005754:	f7fd ff70 	bl	8003638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800575c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800575e:	f107 0310 	add.w	r3, r7, #16
 8005762:	4619      	mov	r1, r3
 8005764:	480c      	ldr	r0, [pc, #48]	@ (8005798 <MX_TIM3_Init+0x94>)
 8005766:	f005 fb05 	bl	800ad74 <HAL_TIM_ConfigClockSource>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005770:	f7fd ff62 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005774:	2300      	movs	r3, #0
 8005776:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800577c:	1d3b      	adds	r3, r7, #4
 800577e:	4619      	mov	r1, r3
 8005780:	4805      	ldr	r0, [pc, #20]	@ (8005798 <MX_TIM3_Init+0x94>)
 8005782:	f005 fd23 	bl	800b1cc <HAL_TIMEx_MasterConfigSynchronization>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800578c:	f7fd ff54 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005790:	bf00      	nop
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000c0c 	.word	0x20000c0c
 800579c:	40000400 	.word	0x40000400

080057a0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057a6:	f107 0310 	add.w	r3, r7, #16
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	605a      	str	r2, [r3, #4]
 80057b0:	609a      	str	r2, [r3, #8]
 80057b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]
 80057bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80057be:	4b1d      	ldr	r3, [pc, #116]	@ (8005834 <MX_TIM5_Init+0x94>)
 80057c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005838 <MX_TIM5_Init+0x98>)
 80057c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80057c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <MX_TIM5_Init+0x94>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005834 <MX_TIM5_Init+0x94>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80057d0:	4b18      	ldr	r3, [pc, #96]	@ (8005834 <MX_TIM5_Init+0x94>)
 80057d2:	f04f 32ff 	mov.w	r2, #4294967295
 80057d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057d8:	4b16      	ldr	r3, [pc, #88]	@ (8005834 <MX_TIM5_Init+0x94>)
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057de:	4b15      	ldr	r3, [pc, #84]	@ (8005834 <MX_TIM5_Init+0x94>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80057e4:	4813      	ldr	r0, [pc, #76]	@ (8005834 <MX_TIM5_Init+0x94>)
 80057e6:	f005 f8d5 	bl	800a994 <HAL_TIM_Base_Init>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80057f0:	f7fd ff22 	bl	8003638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80057fa:	f107 0310 	add.w	r3, r7, #16
 80057fe:	4619      	mov	r1, r3
 8005800:	480c      	ldr	r0, [pc, #48]	@ (8005834 <MX_TIM5_Init+0x94>)
 8005802:	f005 fab7 	bl	800ad74 <HAL_TIM_ConfigClockSource>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800580c:	f7fd ff14 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005810:	2300      	movs	r3, #0
 8005812:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005818:	1d3b      	adds	r3, r7, #4
 800581a:	4619      	mov	r1, r3
 800581c:	4805      	ldr	r0, [pc, #20]	@ (8005834 <MX_TIM5_Init+0x94>)
 800581e:	f005 fcd5 	bl	800b1cc <HAL_TIMEx_MasterConfigSynchronization>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005828:	f7fd ff06 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800582c:	bf00      	nop
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000c58 	.word	0x20000c58
 8005838:	40000c00 	.word	0x40000c00

0800583c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005842:	f107 0310 	add.w	r3, r7, #16
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	605a      	str	r2, [r3, #4]
 800584c:	609a      	str	r2, [r3, #8]
 800584e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	605a      	str	r2, [r3, #4]
 8005858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800585a:	4b20      	ldr	r3, [pc, #128]	@ (80058dc <MX_TIM8_Init+0xa0>)
 800585c:	4a20      	ldr	r2, [pc, #128]	@ (80058e0 <MX_TIM8_Init+0xa4>)
 800585e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005860:	4b1e      	ldr	r3, [pc, #120]	@ (80058dc <MX_TIM8_Init+0xa0>)
 8005862:	2200      	movs	r2, #0
 8005864:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005866:	4b1d      	ldr	r3, [pc, #116]	@ (80058dc <MX_TIM8_Init+0xa0>)
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800586c:	4b1b      	ldr	r3, [pc, #108]	@ (80058dc <MX_TIM8_Init+0xa0>)
 800586e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005872:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005874:	4b19      	ldr	r3, [pc, #100]	@ (80058dc <MX_TIM8_Init+0xa0>)
 8005876:	2200      	movs	r2, #0
 8005878:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800587a:	4b18      	ldr	r3, [pc, #96]	@ (80058dc <MX_TIM8_Init+0xa0>)
 800587c:	2200      	movs	r2, #0
 800587e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005880:	4b16      	ldr	r3, [pc, #88]	@ (80058dc <MX_TIM8_Init+0xa0>)
 8005882:	2200      	movs	r2, #0
 8005884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005886:	4815      	ldr	r0, [pc, #84]	@ (80058dc <MX_TIM8_Init+0xa0>)
 8005888:	f005 f884 	bl	800a994 <HAL_TIM_Base_Init>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8005892:	f7fd fed1 	bl	8003638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800589a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800589c:	f107 0310 	add.w	r3, r7, #16
 80058a0:	4619      	mov	r1, r3
 80058a2:	480e      	ldr	r0, [pc, #56]	@ (80058dc <MX_TIM8_Init+0xa0>)
 80058a4:	f005 fa66 	bl	800ad74 <HAL_TIM_ConfigClockSource>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80058ae:	f7fd fec3 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	4619      	mov	r1, r3
 80058c2:	4806      	ldr	r0, [pc, #24]	@ (80058dc <MX_TIM8_Init+0xa0>)
 80058c4:	f005 fc82 	bl	800b1cc <HAL_TIMEx_MasterConfigSynchronization>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80058ce:	f7fd feb3 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80058d2:	bf00      	nop
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000ca4 	.word	0x20000ca4
 80058e0:	40010400 	.word	0x40010400

080058e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08e      	sub	sp, #56	@ 0x38
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	605a      	str	r2, [r3, #4]
 80058f6:	609a      	str	r2, [r3, #8]
 80058f8:	60da      	str	r2, [r3, #12]
 80058fa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a3b      	ldr	r2, [pc, #236]	@ (80059f0 <HAL_TIM_Base_MspInit+0x10c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10c      	bne.n	8005920 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005906:	4b3b      	ldr	r3, [pc, #236]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	4a3a      	ldr	r2, [pc, #232]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 800590c:	f043 0301 	orr.w	r3, r3, #1
 8005910:	6453      	str	r3, [r2, #68]	@ 0x44
 8005912:	4b38      	ldr	r3, [pc, #224]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 8005914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	623b      	str	r3, [r7, #32]
 800591c:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800591e:	e062      	b.n	80059e6 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005928:	d10c      	bne.n	8005944 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800592a:	4b32      	ldr	r3, [pc, #200]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592e:	4a31      	ldr	r2, [pc, #196]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	6413      	str	r3, [r2, #64]	@ 0x40
 8005936:	4b2f      	ldr	r3, [pc, #188]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	69fb      	ldr	r3, [r7, #28]
}
 8005942:	e050      	b.n	80059e6 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2b      	ldr	r2, [pc, #172]	@ (80059f8 <HAL_TIM_Base_MspInit+0x114>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d10c      	bne.n	8005968 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800594e:	4b29      	ldr	r3, [pc, #164]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005952:	4a28      	ldr	r2, [pc, #160]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 8005954:	f043 0302 	orr.w	r3, r3, #2
 8005958:	6413      	str	r3, [r2, #64]	@ 0x40
 800595a:	4b26      	ldr	r3, [pc, #152]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	69bb      	ldr	r3, [r7, #24]
}
 8005966:	e03e      	b.n	80059e6 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a23      	ldr	r2, [pc, #140]	@ (80059fc <HAL_TIM_Base_MspInit+0x118>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d10c      	bne.n	800598c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005972:	4b20      	ldr	r3, [pc, #128]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	4a1f      	ldr	r2, [pc, #124]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 8005978:	f043 0308 	orr.w	r3, r3, #8
 800597c:	6413      	str	r3, [r2, #64]	@ 0x40
 800597e:	4b1d      	ldr	r3, [pc, #116]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	697b      	ldr	r3, [r7, #20]
}
 800598a:	e02c      	b.n	80059e6 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1b      	ldr	r2, [pc, #108]	@ (8005a00 <HAL_TIM_Base_MspInit+0x11c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d127      	bne.n	80059e6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005996:	4b17      	ldr	r3, [pc, #92]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 8005998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599a:	4a16      	ldr	r2, [pc, #88]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 800599c:	f043 0302 	orr.w	r3, r3, #2
 80059a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80059a2:	4b14      	ldr	r3, [pc, #80]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 80059a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80059ae:	4b11      	ldr	r3, [pc, #68]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b2:	4a10      	ldr	r2, [pc, #64]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 80059b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80059ba:	4b0e      	ldr	r3, [pc, #56]	@ (80059f4 <HAL_TIM_Base_MspInit+0x110>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80059c6:	2304      	movs	r3, #4
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ca:	2302      	movs	r3, #2
 80059cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059d2:	2300      	movs	r3, #0
 80059d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80059d6:	2303      	movs	r3, #3
 80059d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80059da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059de:	4619      	mov	r1, r3
 80059e0:	4808      	ldr	r0, [pc, #32]	@ (8005a04 <HAL_TIM_Base_MspInit+0x120>)
 80059e2:	f001 fd41 	bl	8007468 <HAL_GPIO_Init>
}
 80059e6:	bf00      	nop
 80059e8:	3738      	adds	r7, #56	@ 0x38
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	40010000 	.word	0x40010000
 80059f4:	40023800 	.word	0x40023800
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000c00 	.word	0x40000c00
 8005a00:	40010400 	.word	0x40010400
 8005a04:	40022000 	.word	0x40022000

08005a08 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005a0c:	4b14      	ldr	r3, [pc, #80]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a0e:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <MX_UART7_Init+0x5c>)
 8005a10:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005a12:	4b13      	ldr	r3, [pc, #76]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005a18:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005a1a:	4b11      	ldr	r3, [pc, #68]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005a20:	4b0f      	ldr	r3, [pc, #60]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005a26:	4b0e      	ldr	r3, [pc, #56]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a2e:	220c      	movs	r2, #12
 8005a30:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a32:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a38:	4b09      	ldr	r3, [pc, #36]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a3e:	4b08      	ldr	r3, [pc, #32]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a44:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005a4a:	4805      	ldr	r0, [pc, #20]	@ (8005a60 <MX_UART7_Init+0x58>)
 8005a4c:	f005 fc6a 	bl	800b324 <HAL_UART_Init>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8005a56:	f7fd fdef 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005a5a:	bf00      	nop
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000cf0 	.word	0x20000cf0
 8005a64:	40007800 	.word	0x40007800

08005a68 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005a6c:	4b14      	ldr	r3, [pc, #80]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005a6e:	4a15      	ldr	r2, [pc, #84]	@ (8005ac4 <MX_USART1_UART_Init+0x5c>)
 8005a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005a72:	4b13      	ldr	r3, [pc, #76]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005a7a:	4b11      	ldr	r3, [pc, #68]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005a80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005a86:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005a8e:	220c      	movs	r2, #12
 8005a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a92:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a98:	4b09      	ldr	r3, [pc, #36]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a9e:	4b08      	ldr	r3, [pc, #32]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005aa4:	4b06      	ldr	r3, [pc, #24]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005aaa:	4805      	ldr	r0, [pc, #20]	@ (8005ac0 <MX_USART1_UART_Init+0x58>)
 8005aac:	f005 fc3a 	bl	800b324 <HAL_UART_Init>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005ab6:	f7fd fdbf 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000d78 	.word	0x20000d78
 8005ac4:	40011000 	.word	0x40011000

08005ac8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005acc:	4b14      	ldr	r3, [pc, #80]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005ace:	4a15      	ldr	r2, [pc, #84]	@ (8005b24 <MX_USART6_UART_Init+0x5c>)
 8005ad0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005ad2:	4b13      	ldr	r3, [pc, #76]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005ad8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005ada:	4b11      	ldr	r3, [pc, #68]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005aec:	4b0c      	ldr	r3, [pc, #48]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005aee:	220c      	movs	r2, #12
 8005af0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005af2:	4b0b      	ldr	r3, [pc, #44]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005af8:	4b09      	ldr	r3, [pc, #36]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005afe:	4b08      	ldr	r3, [pc, #32]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b04:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005b0a:	4805      	ldr	r0, [pc, #20]	@ (8005b20 <MX_USART6_UART_Init+0x58>)
 8005b0c:	f005 fc0a 	bl	800b324 <HAL_UART_Init>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005b16:	f7fd fd8f 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005b1a:	bf00      	nop
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000e00 	.word	0x20000e00
 8005b24:	40011400 	.word	0x40011400

08005b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b0b0      	sub	sp, #192	@ 0xc0
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	609a      	str	r2, [r3, #8]
 8005b3c:	60da      	str	r2, [r3, #12]
 8005b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005b40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b44:	2284      	movs	r2, #132	@ 0x84
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f008 fd94 	bl	800e676 <memset>
  if(uartHandle->Instance==UART7)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a75      	ldr	r2, [pc, #468]	@ (8005d28 <HAL_UART_MspInit+0x200>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d13d      	bne.n	8005bd4 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f003 fe11 	bl	8009790 <HAL_RCCEx_PeriphCLKConfig>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005b74:	f7fd fd60 	bl	8003638 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005b78:	4b6c      	ldr	r3, [pc, #432]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7c:	4a6b      	ldr	r2, [pc, #428]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005b7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b84:	4b69      	ldr	r3, [pc, #420]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b90:	4b66      	ldr	r3, [pc, #408]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	4a65      	ldr	r2, [pc, #404]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005b96:	f043 0320 	orr.w	r3, r3, #32
 8005b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b9c:	4b63      	ldr	r3, [pc, #396]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	623b      	str	r3, [r7, #32]
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005ba8:	23c0      	movs	r3, #192	@ 0xc0
 8005baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005bc6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4858      	ldr	r0, [pc, #352]	@ (8005d30 <HAL_UART_MspInit+0x208>)
 8005bce:	f001 fc4b 	bl	8007468 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005bd2:	e0a4      	b.n	8005d1e <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a56      	ldr	r2, [pc, #344]	@ (8005d34 <HAL_UART_MspInit+0x20c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d15d      	bne.n	8005c9a <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005bde:	2340      	movs	r3, #64	@ 0x40
 8005be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005be2:	2300      	movs	r3, #0
 8005be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005be6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005bea:	4618      	mov	r0, r3
 8005bec:	f003 fdd0 	bl	8009790 <HAL_RCCEx_PeriphCLKConfig>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8005bf6:	f7fd fd1f 	bl	8003638 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfe:	4a4b      	ldr	r2, [pc, #300]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005c00:	f043 0310 	orr.w	r3, r3, #16
 8005c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c06:	4b49      	ldr	r3, [pc, #292]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c12:	4b46      	ldr	r3, [pc, #280]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c16:	4a45      	ldr	r2, [pc, #276]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005c18:	f043 0302 	orr.w	r3, r3, #2
 8005c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c1e:	4b43      	ldr	r3, [pc, #268]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c2a:	4b40      	ldr	r3, [pc, #256]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c36:	4b3d      	ldr	r3, [pc, #244]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005c42:	2380      	movs	r3, #128	@ 0x80
 8005c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c54:	2300      	movs	r3, #0
 8005c56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c5a:	2307      	movs	r3, #7
 8005c5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005c60:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005c64:	4619      	mov	r1, r3
 8005c66:	4834      	ldr	r0, [pc, #208]	@ (8005d38 <HAL_UART_MspInit+0x210>)
 8005c68:	f001 fbfe 	bl	8007468 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c74:	2302      	movs	r3, #2
 8005c76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c86:	2307      	movs	r3, #7
 8005c88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005c8c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005c90:	4619      	mov	r1, r3
 8005c92:	482a      	ldr	r0, [pc, #168]	@ (8005d3c <HAL_UART_MspInit+0x214>)
 8005c94:	f001 fbe8 	bl	8007468 <HAL_GPIO_Init>
}
 8005c98:	e041      	b.n	8005d1e <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a28      	ldr	r2, [pc, #160]	@ (8005d40 <HAL_UART_MspInit+0x218>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d13c      	bne.n	8005d1e <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005ca4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005caa:	2300      	movs	r3, #0
 8005cac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f003 fd6b 	bl	8009790 <HAL_RCCEx_PeriphCLKConfig>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8005cc0:	f7fd fcba 	bl	8003638 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005cc4:	4b19      	ldr	r3, [pc, #100]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc8:	4a18      	ldr	r2, [pc, #96]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005cca:	f043 0320 	orr.w	r3, r3, #32
 8005cce:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cd0:	4b16      	ldr	r3, [pc, #88]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cdc:	4b13      	ldr	r3, [pc, #76]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce0:	4a12      	ldr	r2, [pc, #72]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005ce2:	f043 0304 	orr.w	r3, r3, #4
 8005ce6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ce8:	4b10      	ldr	r3, [pc, #64]	@ (8005d2c <HAL_UART_MspInit+0x204>)
 8005cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005cf4:	23c0      	movs	r3, #192	@ 0xc0
 8005cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d06:	2303      	movs	r3, #3
 8005d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005d0c:	2308      	movs	r3, #8
 8005d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d12:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005d16:	4619      	mov	r1, r3
 8005d18:	480a      	ldr	r0, [pc, #40]	@ (8005d44 <HAL_UART_MspInit+0x21c>)
 8005d1a:	f001 fba5 	bl	8007468 <HAL_GPIO_Init>
}
 8005d1e:	bf00      	nop
 8005d20:	37c0      	adds	r7, #192	@ 0xc0
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40007800 	.word	0x40007800
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	40021400 	.word	0x40021400
 8005d34:	40011000 	.word	0x40011000
 8005d38:	40020400 	.word	0x40020400
 8005d3c:	40020000 	.word	0x40020000
 8005d40:	40011400 	.word	0x40011400
 8005d44:	40020800 	.word	0x40020800

08005d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d4c:	480d      	ldr	r0, [pc, #52]	@ (8005d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005d4e:	490e      	ldr	r1, [pc, #56]	@ (8005d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d50:	4a0e      	ldr	r2, [pc, #56]	@ (8005d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d54:	e002      	b.n	8005d5c <LoopCopyDataInit>

08005d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d5a:	3304      	adds	r3, #4

08005d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d60:	d3f9      	bcc.n	8005d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d62:	4a0b      	ldr	r2, [pc, #44]	@ (8005d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005d64:	4c0b      	ldr	r4, [pc, #44]	@ (8005d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d68:	e001      	b.n	8005d6e <LoopFillZerobss>

08005d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d6c:	3204      	adds	r2, #4

08005d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d70:	d3fb      	bcc.n	8005d6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005d72:	f7ff fc13 	bl	800559c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d76:	f008 fd29 	bl	800e7cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d7a:	f7fd fb5f 	bl	800343c <main>
  bx  lr    
 8005d7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005d80:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d88:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8005d8c:	0801dd78 	.word	0x0801dd78
  ldr r2, =_sbss
 8005d90:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8005d94:	20004d24 	.word	0x20004d24

08005d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d98:	e7fe      	b.n	8005d98 <ADC_IRQHandler>

08005d9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d9e:	2003      	movs	r0, #3
 8005da0:	f000 fcf3 	bl	800678a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005da4:	200f      	movs	r0, #15
 8005da6:	f7ff fa75 	bl	8005294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005daa:	f7ff fa4b 	bl	8005244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005db8:	4b06      	ldr	r3, [pc, #24]	@ (8005dd4 <HAL_IncTick+0x20>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4b06      	ldr	r3, [pc, #24]	@ (8005dd8 <HAL_IncTick+0x24>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	4a04      	ldr	r2, [pc, #16]	@ (8005dd8 <HAL_IncTick+0x24>)
 8005dc6:	6013      	str	r3, [r2, #0]
}
 8005dc8:	bf00      	nop
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000050 	.word	0x20000050
 8005dd8:	20000e88 	.word	0x20000e88

08005ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  return uwTick;
 8005de0:	4b03      	ldr	r3, [pc, #12]	@ (8005df0 <HAL_GetTick+0x14>)
 8005de2:	681b      	ldr	r3, [r3, #0]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20000e88 	.word	0x20000e88

08005df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005dfc:	f7ff ffee 	bl	8005ddc <HAL_GetTick>
 8005e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d005      	beq.n	8005e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e38 <HAL_Delay+0x44>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e1a:	bf00      	nop
 8005e1c:	f7ff ffde 	bl	8005ddc <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d8f7      	bhi.n	8005e1c <HAL_Delay+0x28>
  {
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000050 	.word	0x20000050

08005e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e031      	b.n	8005eb6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d109      	bne.n	8005e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb f832 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d116      	bne.n	8005ea8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e7e:	4b10      	ldr	r3, [pc, #64]	@ (8005ec0 <HAL_ADC_Init+0x84>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	f043 0202 	orr.w	r2, r3, #2
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fad6 	bl	800643c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	f023 0303 	bic.w	r3, r3, #3
 8005e9e:	f043 0201 	orr.w	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ea6:	e001      	b.n	8005eac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	ffffeefd 	.word	0xffffeefd

08005ec4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_ADC_Start+0x1a>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e0ad      	b.n	800603a <HAL_ADC_Start+0x176>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d018      	beq.n	8005f26 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005f04:	4b50      	ldr	r3, [pc, #320]	@ (8006048 <HAL_ADC_Start+0x184>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a50      	ldr	r2, [pc, #320]	@ (800604c <HAL_ADC_Start+0x188>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	0c9a      	lsrs	r2, r3, #18
 8005f10:	4613      	mov	r3, r2
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	4413      	add	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005f18:	e002      	b.n	8005f20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f9      	bne.n	8005f1a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d175      	bne.n	8006020 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f38:	4b45      	ldr	r3, [pc, #276]	@ (8006050 <HAL_ADC_Start+0x18c>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005f5a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6e:	d106      	bne.n	8005f7e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f74:	f023 0206 	bic.w	r2, r3, #6
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f7c:	e002      	b.n	8005f84 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005f94:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005f96:	4b2f      	ldr	r3, [pc, #188]	@ (8006054 <HAL_ADC_Start+0x190>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10f      	bne.n	8005fc2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d143      	bne.n	8006038 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005fbe:	609a      	str	r2, [r3, #8]
 8005fc0:	e03a      	b.n	8006038 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a24      	ldr	r2, [pc, #144]	@ (8006058 <HAL_ADC_Start+0x194>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d10e      	bne.n	8005fea <HAL_ADC_Start+0x126>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d107      	bne.n	8005fea <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005fe8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005fea:	4b1a      	ldr	r3, [pc, #104]	@ (8006054 <HAL_ADC_Start+0x190>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d120      	bne.n	8006038 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a18      	ldr	r2, [pc, #96]	@ (800605c <HAL_ADC_Start+0x198>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d11b      	bne.n	8006038 <HAL_ADC_Start+0x174>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d114      	bne.n	8006038 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800601c:	609a      	str	r2, [r3, #8]
 800601e:	e00b      	b.n	8006038 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006024:	f043 0210 	orr.w	r2, r3, #16
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006030:	f043 0201 	orr.w	r2, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000048 	.word	0x20000048
 800604c:	431bde83 	.word	0x431bde83
 8006050:	fffff8fe 	.word	0xfffff8fe
 8006054:	40012300 	.word	0x40012300
 8006058:	40012000 	.word	0x40012000
 800605c:	40012200 	.word	0x40012200

08006060 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800607c:	d113      	bne.n	80060a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800608c:	d10b      	bne.n	80060a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e063      	b.n	800616e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80060a6:	f7ff fe99 	bl	8005ddc <HAL_GetTick>
 80060aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80060ac:	e021      	b.n	80060f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d01d      	beq.n	80060f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <HAL_ADC_PollForConversion+0x6c>
 80060bc:	f7ff fe8e 	bl	8005ddc <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d212      	bcs.n	80060f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d00b      	beq.n	80060f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	f043 0204 	orr.w	r2, r3, #4
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e03d      	b.n	800616e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d1d6      	bne.n	80060ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0212 	mvn.w	r2, #18
 8006108:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d123      	bne.n	800616c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006128:	2b00      	cmp	r3, #0
 800612a:	d11f      	bne.n	800616c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006132:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006136:	2b00      	cmp	r3, #0
 8006138:	d006      	beq.n	8006148 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006144:	2b00      	cmp	r3, #0
 8006146:	d111      	bne.n	800616c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d105      	bne.n	800616c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006164:	f043 0201 	orr.w	r2, r3, #1
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x1c>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e136      	b.n	800641a <HAL_ADC_ConfigChannel+0x28a>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b09      	cmp	r3, #9
 80061ba:	d93a      	bls.n	8006232 <HAL_ADC_ConfigChannel+0xa2>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061c4:	d035      	beq.n	8006232 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68d9      	ldr	r1, [r3, #12]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	4613      	mov	r3, r2
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	4413      	add	r3, r2
 80061da:	3b1e      	subs	r3, #30
 80061dc:	2207      	movs	r2, #7
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	43da      	mvns	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	400a      	ands	r2, r1
 80061ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a8d      	ldr	r2, [pc, #564]	@ (8006428 <HAL_ADC_ConfigChannel+0x298>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10a      	bne.n	800620c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68d9      	ldr	r1, [r3, #12]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	061a      	lsls	r2, r3, #24
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800620a:	e035      	b.n	8006278 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68d9      	ldr	r1, [r3, #12]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	4618      	mov	r0, r3
 800621e:	4603      	mov	r3, r0
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	4403      	add	r3, r0
 8006224:	3b1e      	subs	r3, #30
 8006226:	409a      	lsls	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006230:	e022      	b.n	8006278 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6919      	ldr	r1, [r3, #16]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	4613      	mov	r3, r2
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	4413      	add	r3, r2
 8006246:	2207      	movs	r2, #7
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	43da      	mvns	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	400a      	ands	r2, r1
 8006254:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6919      	ldr	r1, [r3, #16]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	4618      	mov	r0, r3
 8006268:	4603      	mov	r3, r0
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	4403      	add	r3, r0
 800626e:	409a      	lsls	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b06      	cmp	r3, #6
 800627e:	d824      	bhi.n	80062ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	3b05      	subs	r3, #5
 8006292:	221f      	movs	r2, #31
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43da      	mvns	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	400a      	ands	r2, r1
 80062a0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	4618      	mov	r0, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	3b05      	subs	r3, #5
 80062bc:	fa00 f203 	lsl.w	r2, r0, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80062c8:	e04c      	b.n	8006364 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b0c      	cmp	r3, #12
 80062d0:	d824      	bhi.n	800631c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	3b23      	subs	r3, #35	@ 0x23
 80062e4:	221f      	movs	r2, #31
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	43da      	mvns	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	400a      	ands	r2, r1
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	4618      	mov	r0, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	3b23      	subs	r3, #35	@ 0x23
 800630e:	fa00 f203 	lsl.w	r2, r0, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	631a      	str	r2, [r3, #48]	@ 0x30
 800631a:	e023      	b.n	8006364 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	3b41      	subs	r3, #65	@ 0x41
 800632e:	221f      	movs	r2, #31
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	43da      	mvns	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	400a      	ands	r2, r1
 800633c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	4618      	mov	r0, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	3b41      	subs	r3, #65	@ 0x41
 8006358:	fa00 f203 	lsl.w	r2, r0, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a30      	ldr	r2, [pc, #192]	@ (800642c <HAL_ADC_ConfigChannel+0x29c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d10a      	bne.n	8006384 <HAL_ADC_ConfigChannel+0x1f4>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006376:	d105      	bne.n	8006384 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006378:	4b2d      	ldr	r3, [pc, #180]	@ (8006430 <HAL_ADC_ConfigChannel+0x2a0>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	4a2c      	ldr	r2, [pc, #176]	@ (8006430 <HAL_ADC_ConfigChannel+0x2a0>)
 800637e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8006382:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a28      	ldr	r2, [pc, #160]	@ (800642c <HAL_ADC_ConfigChannel+0x29c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d10f      	bne.n	80063ae <HAL_ADC_ConfigChannel+0x21e>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b12      	cmp	r3, #18
 8006394:	d10b      	bne.n	80063ae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006396:	4b26      	ldr	r3, [pc, #152]	@ (8006430 <HAL_ADC_ConfigChannel+0x2a0>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	4a25      	ldr	r2, [pc, #148]	@ (8006430 <HAL_ADC_ConfigChannel+0x2a0>)
 800639c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80063a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80063a2:	4b23      	ldr	r3, [pc, #140]	@ (8006430 <HAL_ADC_ConfigChannel+0x2a0>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4a22      	ldr	r2, [pc, #136]	@ (8006430 <HAL_ADC_ConfigChannel+0x2a0>)
 80063a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80063ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1e      	ldr	r2, [pc, #120]	@ (800642c <HAL_ADC_ConfigChannel+0x29c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d12b      	bne.n	8006410 <HAL_ADC_ConfigChannel+0x280>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006428 <HAL_ADC_ConfigChannel+0x298>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <HAL_ADC_ConfigChannel+0x23a>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b11      	cmp	r3, #17
 80063c8:	d122      	bne.n	8006410 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80063ca:	4b19      	ldr	r3, [pc, #100]	@ (8006430 <HAL_ADC_ConfigChannel+0x2a0>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4a18      	ldr	r2, [pc, #96]	@ (8006430 <HAL_ADC_ConfigChannel+0x2a0>)
 80063d0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80063d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80063d6:	4b16      	ldr	r3, [pc, #88]	@ (8006430 <HAL_ADC_ConfigChannel+0x2a0>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4a15      	ldr	r2, [pc, #84]	@ (8006430 <HAL_ADC_ConfigChannel+0x2a0>)
 80063dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a10      	ldr	r2, [pc, #64]	@ (8006428 <HAL_ADC_ConfigChannel+0x298>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d111      	bne.n	8006410 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80063ec:	4b11      	ldr	r3, [pc, #68]	@ (8006434 <HAL_ADC_ConfigChannel+0x2a4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a11      	ldr	r2, [pc, #68]	@ (8006438 <HAL_ADC_ConfigChannel+0x2a8>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	0c9a      	lsrs	r2, r3, #18
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006402:	e002      	b.n	800640a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3b01      	subs	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1f9      	bne.n	8006404 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	10000012 	.word	0x10000012
 800642c:	40012000 	.word	0x40012000
 8006430:	40012300 	.word	0x40012300
 8006434:	20000048 	.word	0x20000048
 8006438:	431bde83 	.word	0x431bde83

0800643c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006444:	4b78      	ldr	r3, [pc, #480]	@ (8006628 <ADC_Init+0x1ec>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4a77      	ldr	r2, [pc, #476]	@ (8006628 <ADC_Init+0x1ec>)
 800644a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800644e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006450:	4b75      	ldr	r3, [pc, #468]	@ (8006628 <ADC_Init+0x1ec>)
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4973      	ldr	r1, [pc, #460]	@ (8006628 <ADC_Init+0x1ec>)
 800645a:	4313      	orrs	r3, r2
 800645c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800646c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6859      	ldr	r1, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	021a      	lsls	r2, r3, #8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6859      	ldr	r1, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6899      	ldr	r1, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ca:	4a58      	ldr	r2, [pc, #352]	@ (800662c <ADC_Init+0x1f0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80064de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6899      	ldr	r1, [r3, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6899      	ldr	r1, [r3, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	609a      	str	r2, [r3, #8]
 8006514:	e00f      	b.n	8006536 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006534:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0202 	bic.w	r2, r2, #2
 8006544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6899      	ldr	r1, [r3, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	005a      	lsls	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01b      	beq.n	800659c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006572:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006582:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	3b01      	subs	r3, #1
 8006590:	035a      	lsls	r2, r3, #13
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
 800659a:	e007      	b.n	80065ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80065ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	051a      	lsls	r2, r3, #20
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80065e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6899      	ldr	r1, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065ee:	025a      	lsls	r2, r3, #9
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6899      	ldr	r1, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	029a      	lsls	r2, r3, #10
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	609a      	str	r2, [r3, #8]
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	40012300 	.word	0x40012300
 800662c:	0f000001 	.word	0x0f000001

08006630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006640:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <__NVIC_SetPriorityGrouping+0x40>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800664c:	4013      	ands	r3, r2
 800664e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006658:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <__NVIC_SetPriorityGrouping+0x44>)
 800665a:	4313      	orrs	r3, r2
 800665c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800665e:	4a04      	ldr	r2, [pc, #16]	@ (8006670 <__NVIC_SetPriorityGrouping+0x40>)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	60d3      	str	r3, [r2, #12]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	e000ed00 	.word	0xe000ed00
 8006674:	05fa0000 	.word	0x05fa0000

08006678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800667c:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <__NVIC_GetPriorityGrouping+0x18>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	f003 0307 	and.w	r3, r3, #7
}
 8006686:	4618      	mov	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	e000ed00 	.word	0xe000ed00

08006694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	db0b      	blt.n	80066be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	f003 021f 	and.w	r2, r3, #31
 80066ac:	4907      	ldr	r1, [pc, #28]	@ (80066cc <__NVIC_EnableIRQ+0x38>)
 80066ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	2001      	movs	r0, #1
 80066b6:	fa00 f202 	lsl.w	r2, r0, r2
 80066ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	e000e100 	.word	0xe000e100

080066d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	db0a      	blt.n	80066fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	490c      	ldr	r1, [pc, #48]	@ (800671c <__NVIC_SetPriority+0x4c>)
 80066ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ee:	0112      	lsls	r2, r2, #4
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	440b      	add	r3, r1
 80066f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066f8:	e00a      	b.n	8006710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	4908      	ldr	r1, [pc, #32]	@ (8006720 <__NVIC_SetPriority+0x50>)
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	3b04      	subs	r3, #4
 8006708:	0112      	lsls	r2, r2, #4
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	440b      	add	r3, r1
 800670e:	761a      	strb	r2, [r3, #24]
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	e000e100 	.word	0xe000e100
 8006720:	e000ed00 	.word	0xe000ed00

08006724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006724:	b480      	push	{r7}
 8006726:	b089      	sub	sp, #36	@ 0x24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f1c3 0307 	rsb	r3, r3, #7
 800673e:	2b04      	cmp	r3, #4
 8006740:	bf28      	it	cs
 8006742:	2304      	movcs	r3, #4
 8006744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	3304      	adds	r3, #4
 800674a:	2b06      	cmp	r3, #6
 800674c:	d902      	bls.n	8006754 <NVIC_EncodePriority+0x30>
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	3b03      	subs	r3, #3
 8006752:	e000      	b.n	8006756 <NVIC_EncodePriority+0x32>
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006758:	f04f 32ff 	mov.w	r2, #4294967295
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	43da      	mvns	r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	401a      	ands	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800676c:	f04f 31ff 	mov.w	r1, #4294967295
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	fa01 f303 	lsl.w	r3, r1, r3
 8006776:	43d9      	mvns	r1, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800677c:	4313      	orrs	r3, r2
         );
}
 800677e:	4618      	mov	r0, r3
 8006780:	3724      	adds	r7, #36	@ 0x24
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff ff4c 	bl	8006630 <__NVIC_SetPriorityGrouping>
}
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067b2:	f7ff ff61 	bl	8006678 <__NVIC_GetPriorityGrouping>
 80067b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	6978      	ldr	r0, [r7, #20]
 80067be:	f7ff ffb1 	bl	8006724 <NVIC_EncodePriority>
 80067c2:	4602      	mov	r2, r0
 80067c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067c8:	4611      	mov	r1, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff ff80 	bl	80066d0 <__NVIC_SetPriority>
}
 80067d0:	bf00      	nop
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff ff54 	bl	8006694 <__NVIC_EnableIRQ>
}
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e014      	b.n	8006830 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	791b      	ldrb	r3, [r3, #4]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7fa fbec 	bl	8000ff4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800684a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800684e:	d120      	bne.n	8006892 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800685a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800685e:	d118      	bne.n	8006892 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2204      	movs	r2, #4
 8006864:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f043 0201 	orr.w	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800687a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800688a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f82d 	bl	80068ec <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800689c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068a0:	d120      	bne.n	80068e4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b0:	d118      	bne.n	80068e4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2204      	movs	r2, #4
 80068b6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f043 0202 	orr.w	r2, r3, #2
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80068cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80068dc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f85d 	bl	800699e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	795b      	ldrb	r3, [r3, #5]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_DAC_ConfigChannel+0x18>
 8006914:	2302      	movs	r3, #2
 8006916:	e03c      	b.n	8006992 <HAL_DAC_ConfigChannel+0x92>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2202      	movs	r2, #2
 8006922:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	43db      	mvns	r3, r3
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4013      	ands	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6819      	ldr	r1, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	22c0      	movs	r2, #192	@ 0xc0
 8006976:	fa02 f303 	lsl.w	r3, r2, r3
 800697a:	43da      	mvns	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	400a      	ands	r2, r1
 8006982:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80069c0:	f7ff fa0c 	bl	8005ddc <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e099      	b.n	8006b04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0201 	bic.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069f0:	e00f      	b.n	8006a12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069f2:	f7ff f9f3 	bl	8005ddc <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	2b05      	cmp	r3, #5
 80069fe:	d908      	bls.n	8006a12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2203      	movs	r2, #3
 8006a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e078      	b.n	8006b04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e8      	bne.n	80069f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4b38      	ldr	r3, [pc, #224]	@ (8006b0c <HAL_DMA_Init+0x158>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d107      	bne.n	8006a7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a74:	4313      	orrs	r3, r2
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0307 	bic.w	r3, r3, #7
 8006a92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d117      	bne.n	8006ad6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f8bd 	bl	8006c38 <DMA_CheckFifoParam>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2240      	movs	r2, #64	@ 0x40
 8006ac8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e016      	b.n	8006b04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f874 	bl	8006bcc <DMA_CalcBaseAndBitshift>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aec:	223f      	movs	r2, #63	@ 0x3f
 8006aee:	409a      	lsls	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	f010803f 	.word	0xf010803f

08006b10 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e050      	b.n	8006bc4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d101      	bne.n	8006b32 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e048      	b.n	8006bc4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0201 	bic.w	r2, r2, #1
 8006b40:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2221      	movs	r2, #33	@ 0x21
 8006b70:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f82a 	bl	8006bcc <DMA_CalcBaseAndBitshift>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b80:	223f      	movs	r2, #63	@ 0x3f
 8006b82:	409a      	lsls	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	3b10      	subs	r3, #16
 8006bdc:	4a13      	ldr	r2, [pc, #76]	@ (8006c2c <DMA_CalcBaseAndBitshift+0x60>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	091b      	lsrs	r3, r3, #4
 8006be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006be6:	4a12      	ldr	r2, [pc, #72]	@ (8006c30 <DMA_CalcBaseAndBitshift+0x64>)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d908      	bls.n	8006c0c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4b0c      	ldr	r3, [pc, #48]	@ (8006c34 <DMA_CalcBaseAndBitshift+0x68>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	1d1a      	adds	r2, r3, #4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c0a:	e006      	b.n	8006c1a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	4b08      	ldr	r3, [pc, #32]	@ (8006c34 <DMA_CalcBaseAndBitshift+0x68>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	aaaaaaab 	.word	0xaaaaaaab
 8006c30:	0801dc80 	.word	0x0801dc80
 8006c34:	fffffc00 	.word	0xfffffc00

08006c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d11f      	bne.n	8006c92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d856      	bhi.n	8006d06 <DMA_CheckFifoParam+0xce>
 8006c58:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <DMA_CheckFifoParam+0x28>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c83 	.word	0x08006c83
 8006c68:	08006c71 	.word	0x08006c71
 8006c6c:	08006d07 	.word	0x08006d07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d046      	beq.n	8006d0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c80:	e043      	b.n	8006d0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c8a:	d140      	bne.n	8006d0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c90:	e03d      	b.n	8006d0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c9a:	d121      	bne.n	8006ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d837      	bhi.n	8006d12 <DMA_CheckFifoParam+0xda>
 8006ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca8 <DMA_CheckFifoParam+0x70>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006cbf 	.word	0x08006cbf
 8006cb0:	08006cb9 	.word	0x08006cb9
 8006cb4:	08006cd1 	.word	0x08006cd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
      break;
 8006cbc:	e030      	b.n	8006d20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d025      	beq.n	8006d16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cce:	e022      	b.n	8006d16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006cd8:	d11f      	bne.n	8006d1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006cde:	e01c      	b.n	8006d1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d903      	bls.n	8006cee <DMA_CheckFifoParam+0xb6>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d003      	beq.n	8006cf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006cec:	e018      	b.n	8006d20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf2:	e015      	b.n	8006d20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00e      	beq.n	8006d1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	73fb      	strb	r3, [r7, #15]
      break;
 8006d04:	e00b      	b.n	8006d1e <DMA_CheckFifoParam+0xe6>
      break;
 8006d06:	bf00      	nop
 8006d08:	e00a      	b.n	8006d20 <DMA_CheckFifoParam+0xe8>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e008      	b.n	8006d20 <DMA_CheckFifoParam+0xe8>
      break;
 8006d0e:	bf00      	nop
 8006d10:	e006      	b.n	8006d20 <DMA_CheckFifoParam+0xe8>
      break;
 8006d12:	bf00      	nop
 8006d14:	e004      	b.n	8006d20 <DMA_CheckFifoParam+0xe8>
      break;
 8006d16:	bf00      	nop
 8006d18:	e002      	b.n	8006d20 <DMA_CheckFifoParam+0xe8>
      break;   
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <DMA_CheckFifoParam+0xe8>
      break;
 8006d1e:	bf00      	nop
    }
  } 
  
  return status; 
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop

08006d30 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e039      	b.n	8006db6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fa f9c6 	bl	80010e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d80:	f023 0107 	bic.w	r1, r3, #7
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d96:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc0 <HAL_DMA2D_Init+0x90>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	68d1      	ldr	r1, [r2, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	430b      	orrs	r3, r1
 8006da4:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	ffffc000 	.word	0xffffc000

08006dc4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_DMA2D_Start+0x1c>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e018      	b.n	8006e12 <HAL_DMA2D_Start+0x4e>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fa98 	bl	8007330 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b086      	sub	sp, #24
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d056      	beq.n	8006ee4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e36:	f7fe ffd1 	bl	8005ddc <HAL_GetTick>
 8006e3a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006e3c:	e04b      	b.n	8006ed6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d023      	beq.n	8006e98 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5e:	f043 0202 	orr.w	r2, r3, #2
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e74:	f043 0201 	orr.w	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2221      	movs	r2, #33	@ 0x21
 8006e82:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2204      	movs	r2, #4
 8006e88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0a5      	b.n	8006fe4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d01a      	beq.n	8006ed6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ea0:	f7fe ff9c 	bl	8005ddc <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d302      	bcc.n	8006eb6 <HAL_DMA2D_PollForTransfer+0x9c>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10f      	bne.n	8006ed6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eba:	f043 0220 	orr.w	r2, r3, #32
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2203      	movs	r2, #3
 8006ec6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e086      	b.n	8006fe4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0ac      	beq.n	8006e3e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d061      	beq.n	8006fca <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f06:	f7fe ff69 	bl	8005ddc <HAL_GetTick>
 8006f0a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006f0c:	e056      	b.n	8006fbc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d02e      	beq.n	8006f7e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2e:	f043 0204 	orr.w	r2, r3, #4
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f44:	f043 0202 	orr.w	r2, r3, #2
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5a:	f043 0201 	orr.w	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2229      	movs	r2, #41	@ 0x29
 8006f68:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e032      	b.n	8006fe4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f84:	d01a      	beq.n	8006fbc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f86:	f7fe ff29 	bl	8005ddc <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d302      	bcc.n	8006f9c <HAL_DMA2D_PollForTransfer+0x182>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10f      	bne.n	8006fbc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa0:	f043 0220 	orr.w	r2, r3, #32
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2203      	movs	r2, #3
 8006fac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e013      	b.n	8006fe4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0a1      	beq.n	8006f0e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2212      	movs	r2, #18
 8006fd0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d026      	beq.n	800705c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007014:	2b00      	cmp	r3, #0
 8007016:	d021      	beq.n	800705c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007026:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702c:	f043 0201 	orr.w	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2201      	movs	r2, #1
 800703a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2204      	movs	r2, #4
 8007040:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d026      	beq.n	80070b4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d021      	beq.n	80070b4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800707e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2220      	movs	r2, #32
 8007086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708c:	f043 0202 	orr.w	r2, r3, #2
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2204      	movs	r2, #4
 8007098:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d026      	beq.n	800710c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d021      	beq.n	800710c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2208      	movs	r2, #8
 80070de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	f043 0204 	orr.w	r2, r3, #4
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2204      	movs	r2, #4
 80070f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d013      	beq.n	800713e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00e      	beq.n	800713e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800712e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2204      	movs	r2, #4
 8007136:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f853 	bl	80071e4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d024      	beq.n	8007192 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01f      	beq.n	8007192 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007160:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2202      	movs	r2, #2
 8007168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01f      	beq.n	80071dc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d01a      	beq.n	80071dc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80071b4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2210      	movs	r2, #16
 80071bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f80e 	bl	80071f8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_DMA2D_ConfigLayer+0x20>
 8007228:	2302      	movs	r3, #2
 800722a:	e079      	b.n	8007320 <HAL_DMA2D_ConfigLayer+0x114>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	3318      	adds	r3, #24
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4413      	add	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	041b      	lsls	r3, r3, #16
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007256:	4b35      	ldr	r3, [pc, #212]	@ (800732c <HAL_DMA2D_ConfigLayer+0x120>)
 8007258:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b0a      	cmp	r3, #10
 8007260:	d003      	beq.n	800726a <HAL_DMA2D_ConfigLayer+0x5e>
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2b09      	cmp	r3, #9
 8007268:	d107      	bne.n	800727a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4313      	orrs	r3, r2
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e005      	b.n	8007286 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	061b      	lsls	r3, r3, #24
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d120      	bne.n	80072ce <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	43db      	mvns	r3, r3
 8007296:	ea02 0103 	and.w	r1, r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b0a      	cmp	r3, #10
 80072b4:	d003      	beq.n	80072be <HAL_DMA2D_ConfigLayer+0xb2>
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b09      	cmp	r3, #9
 80072bc:	d127      	bne.n	800730e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80072ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80072cc:	e01f      	b.n	800730e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	43db      	mvns	r3, r3
 80072d8:	ea02 0103 	and.w	r1, r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	6812      	ldr	r2, [r2, #0]
 80072ee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	2b0a      	cmp	r3, #10
 80072f6:	d003      	beq.n	8007300 <HAL_DMA2D_ConfigLayer+0xf4>
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b09      	cmp	r3, #9
 80072fe:	d106      	bne.n	800730e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800730c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	ff03000f 	.word	0xff03000f

08007330 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007330:	b480      	push	{r7}
 8007332:	b08b      	sub	sp, #44	@ 0x2c
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007344:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	041a      	lsls	r2, r3, #16
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	431a      	orrs	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007368:	d174      	bne.n	8007454 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007370:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007378:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007380:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d108      	bne.n	80073a2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	431a      	orrs	r2, r3
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	4313      	orrs	r3, r2
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a0:	e053      	b.n	800744a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d106      	bne.n	80073b8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073b6:	e048      	b.n	800744a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d111      	bne.n	80073e4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	0cdb      	lsrs	r3, r3, #19
 80073c4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	0a9b      	lsrs	r3, r3, #10
 80073ca:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	08db      	lsrs	r3, r3, #3
 80073d0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	02db      	lsls	r3, r3, #11
 80073da:	4313      	orrs	r3, r2
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073e2:	e032      	b.n	800744a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d117      	bne.n	800741c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	0fdb      	lsrs	r3, r3, #31
 80073f0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	0cdb      	lsrs	r3, r3, #19
 80073f6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	0adb      	lsrs	r3, r3, #11
 80073fc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	029b      	lsls	r3, r3, #10
 800740c:	431a      	orrs	r2, r3
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	03db      	lsls	r3, r3, #15
 8007412:	4313      	orrs	r3, r2
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24
 800741a:	e016      	b.n	800744a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	0f1b      	lsrs	r3, r3, #28
 8007420:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	0d1b      	lsrs	r3, r3, #20
 8007426:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	0b1b      	lsrs	r3, r3, #12
 800742c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	091b      	lsrs	r3, r3, #4
 8007432:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	011a      	lsls	r2, r3, #4
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	431a      	orrs	r2, r3
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	031b      	lsls	r3, r3, #12
 8007442:	4313      	orrs	r3, r2
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007450:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007452:	e003      	b.n	800745c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	60da      	str	r2, [r3, #12]
}
 800745c:	bf00      	nop
 800745e:	372c      	adds	r7, #44	@ 0x2c
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007468:	b480      	push	{r7}
 800746a:	b089      	sub	sp, #36	@ 0x24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007472:	2300      	movs	r3, #0
 8007474:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007476:	2300      	movs	r3, #0
 8007478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800747e:	2300      	movs	r3, #0
 8007480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007482:	2300      	movs	r3, #0
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	e175      	b.n	8007774 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007488:	2201      	movs	r2, #1
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4013      	ands	r3, r2
 800749a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	f040 8164 	bne.w	800776e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d005      	beq.n	80074be <HAL_GPIO_Init+0x56>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d130      	bne.n	8007520 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	2203      	movs	r2, #3
 80074ca:	fa02 f303 	lsl.w	r3, r2, r3
 80074ce:	43db      	mvns	r3, r3
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	4013      	ands	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	fa02 f303 	lsl.w	r3, r2, r3
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80074f4:	2201      	movs	r2, #1
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	43db      	mvns	r3, r3
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	4013      	ands	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	091b      	lsrs	r3, r3, #4
 800750a:	f003 0201 	and.w	r2, r3, #1
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	4313      	orrs	r3, r2
 8007518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	2b03      	cmp	r3, #3
 800752a:	d017      	beq.n	800755c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	2203      	movs	r2, #3
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	43db      	mvns	r3, r3
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	4013      	ands	r3, r2
 8007542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	4313      	orrs	r3, r2
 8007554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	2b02      	cmp	r3, #2
 8007566:	d123      	bne.n	80075b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	08da      	lsrs	r2, r3, #3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3208      	adds	r2, #8
 8007570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	220f      	movs	r2, #15
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	43db      	mvns	r3, r3
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	4013      	ands	r3, r2
 800758a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	4313      	orrs	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	08da      	lsrs	r2, r3, #3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3208      	adds	r2, #8
 80075aa:	69b9      	ldr	r1, [r7, #24]
 80075ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	2203      	movs	r2, #3
 80075bc:	fa02 f303 	lsl.w	r3, r2, r3
 80075c0:	43db      	mvns	r3, r3
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	4013      	ands	r3, r2
 80075c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f003 0203 	and.w	r2, r3, #3
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	fa02 f303 	lsl.w	r3, r2, r3
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	4313      	orrs	r3, r2
 80075dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80be 	beq.w	800776e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075f2:	4b66      	ldr	r3, [pc, #408]	@ (800778c <HAL_GPIO_Init+0x324>)
 80075f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f6:	4a65      	ldr	r2, [pc, #404]	@ (800778c <HAL_GPIO_Init+0x324>)
 80075f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80075fe:	4b63      	ldr	r3, [pc, #396]	@ (800778c <HAL_GPIO_Init+0x324>)
 8007600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800760a:	4a61      	ldr	r2, [pc, #388]	@ (8007790 <HAL_GPIO_Init+0x328>)
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	089b      	lsrs	r3, r3, #2
 8007610:	3302      	adds	r3, #2
 8007612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007616:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	220f      	movs	r2, #15
 8007622:	fa02 f303 	lsl.w	r3, r2, r3
 8007626:	43db      	mvns	r3, r3
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	4013      	ands	r3, r2
 800762c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a58      	ldr	r2, [pc, #352]	@ (8007794 <HAL_GPIO_Init+0x32c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d037      	beq.n	80076a6 <HAL_GPIO_Init+0x23e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a57      	ldr	r2, [pc, #348]	@ (8007798 <HAL_GPIO_Init+0x330>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d031      	beq.n	80076a2 <HAL_GPIO_Init+0x23a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a56      	ldr	r2, [pc, #344]	@ (800779c <HAL_GPIO_Init+0x334>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d02b      	beq.n	800769e <HAL_GPIO_Init+0x236>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a55      	ldr	r2, [pc, #340]	@ (80077a0 <HAL_GPIO_Init+0x338>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d025      	beq.n	800769a <HAL_GPIO_Init+0x232>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a54      	ldr	r2, [pc, #336]	@ (80077a4 <HAL_GPIO_Init+0x33c>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d01f      	beq.n	8007696 <HAL_GPIO_Init+0x22e>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a53      	ldr	r2, [pc, #332]	@ (80077a8 <HAL_GPIO_Init+0x340>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d019      	beq.n	8007692 <HAL_GPIO_Init+0x22a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a52      	ldr	r2, [pc, #328]	@ (80077ac <HAL_GPIO_Init+0x344>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d013      	beq.n	800768e <HAL_GPIO_Init+0x226>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a51      	ldr	r2, [pc, #324]	@ (80077b0 <HAL_GPIO_Init+0x348>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00d      	beq.n	800768a <HAL_GPIO_Init+0x222>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a50      	ldr	r2, [pc, #320]	@ (80077b4 <HAL_GPIO_Init+0x34c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d007      	beq.n	8007686 <HAL_GPIO_Init+0x21e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a4f      	ldr	r2, [pc, #316]	@ (80077b8 <HAL_GPIO_Init+0x350>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d101      	bne.n	8007682 <HAL_GPIO_Init+0x21a>
 800767e:	2309      	movs	r3, #9
 8007680:	e012      	b.n	80076a8 <HAL_GPIO_Init+0x240>
 8007682:	230a      	movs	r3, #10
 8007684:	e010      	b.n	80076a8 <HAL_GPIO_Init+0x240>
 8007686:	2308      	movs	r3, #8
 8007688:	e00e      	b.n	80076a8 <HAL_GPIO_Init+0x240>
 800768a:	2307      	movs	r3, #7
 800768c:	e00c      	b.n	80076a8 <HAL_GPIO_Init+0x240>
 800768e:	2306      	movs	r3, #6
 8007690:	e00a      	b.n	80076a8 <HAL_GPIO_Init+0x240>
 8007692:	2305      	movs	r3, #5
 8007694:	e008      	b.n	80076a8 <HAL_GPIO_Init+0x240>
 8007696:	2304      	movs	r3, #4
 8007698:	e006      	b.n	80076a8 <HAL_GPIO_Init+0x240>
 800769a:	2303      	movs	r3, #3
 800769c:	e004      	b.n	80076a8 <HAL_GPIO_Init+0x240>
 800769e:	2302      	movs	r3, #2
 80076a0:	e002      	b.n	80076a8 <HAL_GPIO_Init+0x240>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e000      	b.n	80076a8 <HAL_GPIO_Init+0x240>
 80076a6:	2300      	movs	r3, #0
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	f002 0203 	and.w	r2, r2, #3
 80076ae:	0092      	lsls	r2, r2, #2
 80076b0:	4093      	lsls	r3, r2
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80076b8:	4935      	ldr	r1, [pc, #212]	@ (8007790 <HAL_GPIO_Init+0x328>)
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	089b      	lsrs	r3, r3, #2
 80076be:	3302      	adds	r3, #2
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80076c6:	4b3d      	ldr	r3, [pc, #244]	@ (80077bc <HAL_GPIO_Init+0x354>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	43db      	mvns	r3, r3
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	4013      	ands	r3, r2
 80076d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076ea:	4a34      	ldr	r2, [pc, #208]	@ (80077bc <HAL_GPIO_Init+0x354>)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076f0:	4b32      	ldr	r3, [pc, #200]	@ (80077bc <HAL_GPIO_Init+0x354>)
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	43db      	mvns	r3, r3
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	4013      	ands	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007714:	4a29      	ldr	r2, [pc, #164]	@ (80077bc <HAL_GPIO_Init+0x354>)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800771a:	4b28      	ldr	r3, [pc, #160]	@ (80077bc <HAL_GPIO_Init+0x354>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	43db      	mvns	r3, r3
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	4013      	ands	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800773e:	4a1f      	ldr	r2, [pc, #124]	@ (80077bc <HAL_GPIO_Init+0x354>)
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007744:	4b1d      	ldr	r3, [pc, #116]	@ (80077bc <HAL_GPIO_Init+0x354>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	43db      	mvns	r3, r3
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	4013      	ands	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007768:	4a14      	ldr	r2, [pc, #80]	@ (80077bc <HAL_GPIO_Init+0x354>)
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	3301      	adds	r3, #1
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	2b0f      	cmp	r3, #15
 8007778:	f67f ae86 	bls.w	8007488 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	3724      	adds	r7, #36	@ 0x24
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40023800 	.word	0x40023800
 8007790:	40013800 	.word	0x40013800
 8007794:	40020000 	.word	0x40020000
 8007798:	40020400 	.word	0x40020400
 800779c:	40020800 	.word	0x40020800
 80077a0:	40020c00 	.word	0x40020c00
 80077a4:	40021000 	.word	0x40021000
 80077a8:	40021400 	.word	0x40021400
 80077ac:	40021800 	.word	0x40021800
 80077b0:	40021c00 	.word	0x40021c00
 80077b4:	40022000 	.word	0x40022000
 80077b8:	40022400 	.word	0x40022400
 80077bc:	40013c00 	.word	0x40013c00

080077c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	e0d9      	b.n	8007990 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80077dc:	2201      	movs	r2, #1
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	4013      	ands	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	f040 80c9 	bne.w	800798a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80077f8:	4a6b      	ldr	r2, [pc, #428]	@ (80079a8 <HAL_GPIO_DeInit+0x1e8>)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	089b      	lsrs	r3, r3, #2
 80077fe:	3302      	adds	r3, #2
 8007800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007804:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	220f      	movs	r2, #15
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	4013      	ands	r3, r2
 8007818:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a63      	ldr	r2, [pc, #396]	@ (80079ac <HAL_GPIO_DeInit+0x1ec>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d037      	beq.n	8007892 <HAL_GPIO_DeInit+0xd2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a62      	ldr	r2, [pc, #392]	@ (80079b0 <HAL_GPIO_DeInit+0x1f0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d031      	beq.n	800788e <HAL_GPIO_DeInit+0xce>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a61      	ldr	r2, [pc, #388]	@ (80079b4 <HAL_GPIO_DeInit+0x1f4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d02b      	beq.n	800788a <HAL_GPIO_DeInit+0xca>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a60      	ldr	r2, [pc, #384]	@ (80079b8 <HAL_GPIO_DeInit+0x1f8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d025      	beq.n	8007886 <HAL_GPIO_DeInit+0xc6>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a5f      	ldr	r2, [pc, #380]	@ (80079bc <HAL_GPIO_DeInit+0x1fc>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01f      	beq.n	8007882 <HAL_GPIO_DeInit+0xc2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a5e      	ldr	r2, [pc, #376]	@ (80079c0 <HAL_GPIO_DeInit+0x200>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d019      	beq.n	800787e <HAL_GPIO_DeInit+0xbe>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a5d      	ldr	r2, [pc, #372]	@ (80079c4 <HAL_GPIO_DeInit+0x204>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <HAL_GPIO_DeInit+0xba>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a5c      	ldr	r2, [pc, #368]	@ (80079c8 <HAL_GPIO_DeInit+0x208>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00d      	beq.n	8007876 <HAL_GPIO_DeInit+0xb6>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a5b      	ldr	r2, [pc, #364]	@ (80079cc <HAL_GPIO_DeInit+0x20c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d007      	beq.n	8007872 <HAL_GPIO_DeInit+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a5a      	ldr	r2, [pc, #360]	@ (80079d0 <HAL_GPIO_DeInit+0x210>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d101      	bne.n	800786e <HAL_GPIO_DeInit+0xae>
 800786a:	2309      	movs	r3, #9
 800786c:	e012      	b.n	8007894 <HAL_GPIO_DeInit+0xd4>
 800786e:	230a      	movs	r3, #10
 8007870:	e010      	b.n	8007894 <HAL_GPIO_DeInit+0xd4>
 8007872:	2308      	movs	r3, #8
 8007874:	e00e      	b.n	8007894 <HAL_GPIO_DeInit+0xd4>
 8007876:	2307      	movs	r3, #7
 8007878:	e00c      	b.n	8007894 <HAL_GPIO_DeInit+0xd4>
 800787a:	2306      	movs	r3, #6
 800787c:	e00a      	b.n	8007894 <HAL_GPIO_DeInit+0xd4>
 800787e:	2305      	movs	r3, #5
 8007880:	e008      	b.n	8007894 <HAL_GPIO_DeInit+0xd4>
 8007882:	2304      	movs	r3, #4
 8007884:	e006      	b.n	8007894 <HAL_GPIO_DeInit+0xd4>
 8007886:	2303      	movs	r3, #3
 8007888:	e004      	b.n	8007894 <HAL_GPIO_DeInit+0xd4>
 800788a:	2302      	movs	r3, #2
 800788c:	e002      	b.n	8007894 <HAL_GPIO_DeInit+0xd4>
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <HAL_GPIO_DeInit+0xd4>
 8007892:	2300      	movs	r3, #0
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	f002 0203 	and.w	r2, r2, #3
 800789a:	0092      	lsls	r2, r2, #2
 800789c:	4093      	lsls	r3, r2
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d132      	bne.n	800790a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80078a4:	4b4b      	ldr	r3, [pc, #300]	@ (80079d4 <HAL_GPIO_DeInit+0x214>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	43db      	mvns	r3, r3
 80078ac:	4949      	ldr	r1, [pc, #292]	@ (80079d4 <HAL_GPIO_DeInit+0x214>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80078b2:	4b48      	ldr	r3, [pc, #288]	@ (80079d4 <HAL_GPIO_DeInit+0x214>)
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	43db      	mvns	r3, r3
 80078ba:	4946      	ldr	r1, [pc, #280]	@ (80079d4 <HAL_GPIO_DeInit+0x214>)
 80078bc:	4013      	ands	r3, r2
 80078be:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80078c0:	4b44      	ldr	r3, [pc, #272]	@ (80079d4 <HAL_GPIO_DeInit+0x214>)
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	43db      	mvns	r3, r3
 80078c8:	4942      	ldr	r1, [pc, #264]	@ (80079d4 <HAL_GPIO_DeInit+0x214>)
 80078ca:	4013      	ands	r3, r2
 80078cc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80078ce:	4b41      	ldr	r3, [pc, #260]	@ (80079d4 <HAL_GPIO_DeInit+0x214>)
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	43db      	mvns	r3, r3
 80078d6:	493f      	ldr	r1, [pc, #252]	@ (80079d4 <HAL_GPIO_DeInit+0x214>)
 80078d8:	4013      	ands	r3, r2
 80078da:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	220f      	movs	r2, #15
 80078e6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80078ec:	4a2e      	ldr	r2, [pc, #184]	@ (80079a8 <HAL_GPIO_DeInit+0x1e8>)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	089b      	lsrs	r3, r3, #2
 80078f2:	3302      	adds	r3, #2
 80078f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	43da      	mvns	r2, r3
 80078fc:	482a      	ldr	r0, [pc, #168]	@ (80079a8 <HAL_GPIO_DeInit+0x1e8>)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	089b      	lsrs	r3, r3, #2
 8007902:	400a      	ands	r2, r1
 8007904:	3302      	adds	r3, #2
 8007906:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	2103      	movs	r1, #3
 8007914:	fa01 f303 	lsl.w	r3, r1, r3
 8007918:	43db      	mvns	r3, r3
 800791a:	401a      	ands	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	08da      	lsrs	r2, r3, #3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3208      	adds	r2, #8
 8007928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	220f      	movs	r2, #15
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	43db      	mvns	r3, r3
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	08d2      	lsrs	r2, r2, #3
 8007940:	4019      	ands	r1, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3208      	adds	r2, #8
 8007946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	2103      	movs	r1, #3
 8007954:	fa01 f303 	lsl.w	r3, r1, r3
 8007958:	43db      	mvns	r3, r3
 800795a:	401a      	ands	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	2101      	movs	r1, #1
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	fa01 f303 	lsl.w	r3, r1, r3
 800796c:	43db      	mvns	r3, r3
 800796e:	401a      	ands	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	2103      	movs	r1, #3
 800797e:	fa01 f303 	lsl.w	r3, r1, r3
 8007982:	43db      	mvns	r3, r3
 8007984:	401a      	ands	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	3301      	adds	r3, #1
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2b0f      	cmp	r3, #15
 8007994:	f67f af22 	bls.w	80077dc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40013800 	.word	0x40013800
 80079ac:	40020000 	.word	0x40020000
 80079b0:	40020400 	.word	0x40020400
 80079b4:	40020800 	.word	0x40020800
 80079b8:	40020c00 	.word	0x40020c00
 80079bc:	40021000 	.word	0x40021000
 80079c0:	40021400 	.word	0x40021400
 80079c4:	40021800 	.word	0x40021800
 80079c8:	40021c00 	.word	0x40021c00
 80079cc:	40022000 	.word	0x40022000
 80079d0:	40022400 	.word	0x40022400
 80079d4:	40013c00 	.word	0x40013c00

080079d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	807b      	strh	r3, [r7, #2]
 80079e4:	4613      	mov	r3, r2
 80079e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079e8:	787b      	ldrb	r3, [r7, #1]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079ee:	887a      	ldrh	r2, [r7, #2]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80079f4:	e003      	b.n	80079fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80079f6:	887b      	ldrh	r3, [r7, #2]
 80079f8:	041a      	lsls	r2, r3, #16
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	619a      	str	r2, [r3, #24]
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
	...

08007a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e07f      	b.n	8007b1e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7fb fa9a 	bl	8002f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2224      	movs	r2, #36	@ 0x24
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0201 	bic.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007a5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d107      	bne.n	8007a86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a82:	609a      	str	r2, [r3, #8]
 8007a84:	e006      	b.n	8007a94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007a92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d104      	bne.n	8007aa6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007aa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6859      	ldr	r1, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b28 <HAL_I2C_Init+0x11c>)
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ac4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69d9      	ldr	r1, [r3, #28]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a1a      	ldr	r2, [r3, #32]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0201 	orr.w	r2, r2, #1
 8007afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	02008000 	.word	0x02008000

08007b2c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e021      	b.n	8007b82 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2224      	movs	r2, #36	@ 0x24
 8007b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0201 	bic.w	r2, r2, #1
 8007b54:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7fb fab0 	bl	80030bc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	4608      	mov	r0, r1
 8007b96:	4611      	mov	r1, r2
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	817b      	strh	r3, [r7, #10]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	813b      	strh	r3, [r7, #8]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	f040 80f9 	bne.w	8007da6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <HAL_I2C_Mem_Write+0x34>
 8007bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d105      	bne.n	8007bcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bc6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e0ed      	b.n	8007da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d101      	bne.n	8007bda <HAL_I2C_Mem_Write+0x4e>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e0e6      	b.n	8007da8 <HAL_I2C_Mem_Write+0x21c>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007be2:	f7fe f8fb 	bl	8005ddc <HAL_GetTick>
 8007be6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	2319      	movs	r3, #25
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 fad1 	bl	800819c <I2C_WaitOnFlagUntilTimeout>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e0d1      	b.n	8007da8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2221      	movs	r2, #33	@ 0x21
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2240      	movs	r2, #64	@ 0x40
 8007c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a3a      	ldr	r2, [r7, #32]
 8007c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c2c:	88f8      	ldrh	r0, [r7, #6]
 8007c2e:	893a      	ldrh	r2, [r7, #8]
 8007c30:	8979      	ldrh	r1, [r7, #10]
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f9e1 	bl	8008004 <I2C_RequestMemoryWrite>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0a9      	b.n	8007da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2bff      	cmp	r3, #255	@ 0xff
 8007c5c:	d90e      	bls.n	8007c7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	22ff      	movs	r2, #255	@ 0xff
 8007c62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	8979      	ldrh	r1, [r7, #10]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 fc2d 	bl	80084d4 <I2C_TransferConfig>
 8007c7a:	e00f      	b.n	8007c9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	8979      	ldrh	r1, [r7, #10]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 fc1c 	bl	80084d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fabb 	bl	800821c <I2C_WaitOnTXISFlagUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e07b      	b.n	8007da8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	781a      	ldrb	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d034      	beq.n	8007d54 <HAL_I2C_Mem_Write+0x1c8>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d130      	bne.n	8007d54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2180      	movs	r1, #128	@ 0x80
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fa4d 	bl	800819c <I2C_WaitOnFlagUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e04d      	b.n	8007da8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	2bff      	cmp	r3, #255	@ 0xff
 8007d14:	d90e      	bls.n	8007d34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	22ff      	movs	r2, #255	@ 0xff
 8007d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	8979      	ldrh	r1, [r7, #10]
 8007d24:	2300      	movs	r3, #0
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 fbd1 	bl	80084d4 <I2C_TransferConfig>
 8007d32:	e00f      	b.n	8007d54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	8979      	ldrh	r1, [r7, #10]
 8007d46:	2300      	movs	r3, #0
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fbc0 	bl	80084d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d19e      	bne.n	8007c9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 fa9a 	bl	800829c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e01a      	b.n	8007da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2220      	movs	r2, #32
 8007d78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6859      	ldr	r1, [r3, #4]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	4b0a      	ldr	r3, [pc, #40]	@ (8007db0 <HAL_I2C_Mem_Write+0x224>)
 8007d86:	400b      	ands	r3, r1
 8007d88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	e000      	b.n	8007da8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007da6:	2302      	movs	r3, #2
  }
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	fe00e800 	.word	0xfe00e800

08007db4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	817b      	strh	r3, [r7, #10]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	813b      	strh	r3, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b20      	cmp	r3, #32
 8007dd8:	f040 80fd 	bne.w	8007fd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <HAL_I2C_Mem_Read+0x34>
 8007de2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d105      	bne.n	8007df4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e0f1      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d101      	bne.n	8007e02 <HAL_I2C_Mem_Read+0x4e>
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e0ea      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x224>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e0a:	f7fd ffe7 	bl	8005ddc <HAL_GetTick>
 8007e0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	2319      	movs	r3, #25
 8007e16:	2201      	movs	r2, #1
 8007e18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f9bd 	bl	800819c <I2C_WaitOnFlagUntilTimeout>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0d5      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2222      	movs	r2, #34	@ 0x22
 8007e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2240      	movs	r2, #64	@ 0x40
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a3a      	ldr	r2, [r7, #32]
 8007e46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e54:	88f8      	ldrh	r0, [r7, #6]
 8007e56:	893a      	ldrh	r2, [r7, #8]
 8007e58:	8979      	ldrh	r1, [r7, #10]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	4603      	mov	r3, r0
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f921 	bl	80080ac <I2C_RequestMemoryRead>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e0ad      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2bff      	cmp	r3, #255	@ 0xff
 8007e84:	d90e      	bls.n	8007ea4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	22ff      	movs	r2, #255	@ 0xff
 8007e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	8979      	ldrh	r1, [r7, #10]
 8007e94:	4b52      	ldr	r3, [pc, #328]	@ (8007fe0 <HAL_I2C_Mem_Read+0x22c>)
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 fb19 	bl	80084d4 <I2C_TransferConfig>
 8007ea2:	e00f      	b.n	8007ec4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	8979      	ldrh	r1, [r7, #10]
 8007eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8007fe0 <HAL_I2C_Mem_Read+0x22c>)
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 fb08 	bl	80084d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2104      	movs	r1, #4
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f964 	bl	800819c <I2C_WaitOnFlagUntilTimeout>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e07c      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d034      	beq.n	8007f84 <HAL_I2C_Mem_Read+0x1d0>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d130      	bne.n	8007f84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2180      	movs	r1, #128	@ 0x80
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f935 	bl	800819c <I2C_WaitOnFlagUntilTimeout>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e04d      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2bff      	cmp	r3, #255	@ 0xff
 8007f44:	d90e      	bls.n	8007f64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	22ff      	movs	r2, #255	@ 0xff
 8007f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	8979      	ldrh	r1, [r7, #10]
 8007f54:	2300      	movs	r3, #0
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 fab9 	bl	80084d4 <I2C_TransferConfig>
 8007f62:	e00f      	b.n	8007f84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	8979      	ldrh	r1, [r7, #10]
 8007f76:	2300      	movs	r3, #0
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 faa8 	bl	80084d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d19a      	bne.n	8007ec4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f982 	bl	800829c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e01a      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6859      	ldr	r1, [r3, #4]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe4 <HAL_I2C_Mem_Read+0x230>)
 8007fb6:	400b      	ands	r3, r1
 8007fb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e000      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007fd6:	2302      	movs	r3, #2
  }
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	80002400 	.word	0x80002400
 8007fe4:	fe00e800 	.word	0xfe00e800

08007fe8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ff6:	b2db      	uxtb	r3, r3
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af02      	add	r7, sp, #8
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	4608      	mov	r0, r1
 800800e:	4611      	mov	r1, r2
 8008010:	461a      	mov	r2, r3
 8008012:	4603      	mov	r3, r0
 8008014:	817b      	strh	r3, [r7, #10]
 8008016:	460b      	mov	r3, r1
 8008018:	813b      	strh	r3, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	b2da      	uxtb	r2, r3
 8008022:	8979      	ldrh	r1, [r7, #10]
 8008024:	4b20      	ldr	r3, [pc, #128]	@ (80080a8 <I2C_RequestMemoryWrite+0xa4>)
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 fa51 	bl	80084d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	69b9      	ldr	r1, [r7, #24]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f8f0 	bl	800821c <I2C_WaitOnTXISFlagUntilTimeout>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e02c      	b.n	80080a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008046:	88fb      	ldrh	r3, [r7, #6]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d105      	bne.n	8008058 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800804c:	893b      	ldrh	r3, [r7, #8]
 800804e:	b2da      	uxtb	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	629a      	str	r2, [r3, #40]	@ 0x28
 8008056:	e015      	b.n	8008084 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008058:	893b      	ldrh	r3, [r7, #8]
 800805a:	0a1b      	lsrs	r3, r3, #8
 800805c:	b29b      	uxth	r3, r3
 800805e:	b2da      	uxtb	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	69b9      	ldr	r1, [r7, #24]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 f8d6 	bl	800821c <I2C_WaitOnTXISFlagUntilTimeout>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e012      	b.n	80080a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800807a:	893b      	ldrh	r3, [r7, #8]
 800807c:	b2da      	uxtb	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	2200      	movs	r2, #0
 800808c:	2180      	movs	r1, #128	@ 0x80
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f000 f884 	bl	800819c <I2C_WaitOnFlagUntilTimeout>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	80002000 	.word	0x80002000

080080ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	4608      	mov	r0, r1
 80080b6:	4611      	mov	r1, r2
 80080b8:	461a      	mov	r2, r3
 80080ba:	4603      	mov	r3, r0
 80080bc:	817b      	strh	r3, [r7, #10]
 80080be:	460b      	mov	r3, r1
 80080c0:	813b      	strh	r3, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	8979      	ldrh	r1, [r7, #10]
 80080cc:	4b20      	ldr	r3, [pc, #128]	@ (8008150 <I2C_RequestMemoryRead+0xa4>)
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	2300      	movs	r3, #0
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 f9fe 	bl	80084d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080d8:	69fa      	ldr	r2, [r7, #28]
 80080da:	69b9      	ldr	r1, [r7, #24]
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 f89d 	bl	800821c <I2C_WaitOnTXISFlagUntilTimeout>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e02c      	b.n	8008146 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d105      	bne.n	80080fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080f2:	893b      	ldrh	r3, [r7, #8]
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80080fc:	e015      	b.n	800812a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80080fe:	893b      	ldrh	r3, [r7, #8]
 8008100:	0a1b      	lsrs	r3, r3, #8
 8008102:	b29b      	uxth	r3, r3
 8008104:	b2da      	uxtb	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	69b9      	ldr	r1, [r7, #24]
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f883 	bl	800821c <I2C_WaitOnTXISFlagUntilTimeout>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e012      	b.n	8008146 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008120:	893b      	ldrh	r3, [r7, #8]
 8008122:	b2da      	uxtb	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	2200      	movs	r2, #0
 8008132:	2140      	movs	r1, #64	@ 0x40
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f831 	bl	800819c <I2C_WaitOnFlagUntilTimeout>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e000      	b.n	8008146 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	80002000 	.word	0x80002000

08008154 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b02      	cmp	r3, #2
 8008168:	d103      	bne.n	8008172 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2200      	movs	r2, #0
 8008170:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b01      	cmp	r3, #1
 800817e:	d007      	beq.n	8008190 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	699a      	ldr	r2, [r3, #24]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0201 	orr.w	r2, r2, #1
 800818e:	619a      	str	r2, [r3, #24]
  }
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	4613      	mov	r3, r2
 80081aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081ac:	e022      	b.n	80081f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b4:	d01e      	beq.n	80081f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b6:	f7fd fe11 	bl	8005ddc <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d302      	bcc.n	80081cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d113      	bne.n	80081f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d0:	f043 0220 	orr.w	r2, r3, #32
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e00f      	b.n	8008214 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4013      	ands	r3, r2
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	429a      	cmp	r2, r3
 8008202:	bf0c      	ite	eq
 8008204:	2301      	moveq	r3, #1
 8008206:	2300      	movne	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	461a      	mov	r2, r3
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	429a      	cmp	r2, r3
 8008210:	d0cd      	beq.n	80081ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008228:	e02c      	b.n	8008284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 f870 	bl	8008314 <I2C_IsErrorOccurred>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e02a      	b.n	8008294 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008244:	d01e      	beq.n	8008284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008246:	f7fd fdc9 	bl	8005ddc <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	429a      	cmp	r2, r3
 8008254:	d302      	bcc.n	800825c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d113      	bne.n	8008284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008260:	f043 0220 	orr.w	r2, r3, #32
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2220      	movs	r2, #32
 800826c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e007      	b.n	8008294 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b02      	cmp	r3, #2
 8008290:	d1cb      	bne.n	800822a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082a8:	e028      	b.n	80082fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	68b9      	ldr	r1, [r7, #8]
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 f830 	bl	8008314 <I2C_IsErrorOccurred>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e026      	b.n	800830c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082be:	f7fd fd8d 	bl	8005ddc <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d302      	bcc.n	80082d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d113      	bne.n	80082fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d8:	f043 0220 	orr.w	r2, r3, #32
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e007      	b.n	800830c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b20      	cmp	r3, #32
 8008308:	d1cf      	bne.n	80082aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08a      	sub	sp, #40	@ 0x28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	f003 0310 	and.w	r3, r3, #16
 800833c:	2b00      	cmp	r3, #0
 800833e:	d068      	beq.n	8008412 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2210      	movs	r2, #16
 8008346:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008348:	e049      	b.n	80083de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008350:	d045      	beq.n	80083de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008352:	f7fd fd43 	bl	8005ddc <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	429a      	cmp	r2, r3
 8008360:	d302      	bcc.n	8008368 <I2C_IsErrorOccurred+0x54>
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d13a      	bne.n	80083de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008372:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800837a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800838a:	d121      	bne.n	80083d0 <I2C_IsErrorOccurred+0xbc>
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008392:	d01d      	beq.n	80083d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008394:	7cfb      	ldrb	r3, [r7, #19]
 8008396:	2b20      	cmp	r3, #32
 8008398:	d01a      	beq.n	80083d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80083aa:	f7fd fd17 	bl	8005ddc <HAL_GetTick>
 80083ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083b0:	e00e      	b.n	80083d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80083b2:	f7fd fd13 	bl	8005ddc <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	2b19      	cmp	r3, #25
 80083be:	d907      	bls.n	80083d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	f043 0320 	orr.w	r3, r3, #32
 80083c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80083ce:	e006      	b.n	80083de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d1e9      	bne.n	80083b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	f003 0320 	and.w	r3, r3, #32
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d003      	beq.n	80083f4 <I2C_IsErrorOccurred+0xe0>
 80083ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0aa      	beq.n	800834a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2220      	movs	r2, #32
 8008402:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	f043 0304 	orr.w	r3, r3, #4
 800840a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008434:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	f043 0308 	orr.w	r3, r3, #8
 800844c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008456:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00b      	beq.n	8008480 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	f043 0302 	orr.w	r3, r3, #2
 800846e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01c      	beq.n	80084c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f7ff fe63 	bl	8008154 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6859      	ldr	r1, [r3, #4]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	4b0d      	ldr	r3, [pc, #52]	@ (80084d0 <I2C_IsErrorOccurred+0x1bc>)
 800849a:	400b      	ands	r3, r1
 800849c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2220      	movs	r2, #32
 80084ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80084c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3728      	adds	r7, #40	@ 0x28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	fe00e800 	.word	0xfe00e800

080084d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	607b      	str	r3, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	817b      	strh	r3, [r7, #10]
 80084e2:	4613      	mov	r3, r2
 80084e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084e6:	897b      	ldrh	r3, [r7, #10]
 80084e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084ec:	7a7b      	ldrb	r3, [r7, #9]
 80084ee:	041b      	lsls	r3, r3, #16
 80084f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008502:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	0d5b      	lsrs	r3, r3, #21
 800850e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008512:	4b08      	ldr	r3, [pc, #32]	@ (8008534 <I2C_TransferConfig+0x60>)
 8008514:	430b      	orrs	r3, r1
 8008516:	43db      	mvns	r3, r3
 8008518:	ea02 0103 	and.w	r1, r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	430a      	orrs	r2, r1
 8008524:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008526:	bf00      	nop
 8008528:	371c      	adds	r7, #28
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	03ff63ff 	.word	0x03ff63ff

08008538 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b20      	cmp	r3, #32
 800854c:	d138      	bne.n	80085c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008554:	2b01      	cmp	r3, #1
 8008556:	d101      	bne.n	800855c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008558:	2302      	movs	r3, #2
 800855a:	e032      	b.n	80085c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2224      	movs	r2, #36	@ 0x24
 8008568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0201 	bic.w	r2, r2, #1
 800857a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800858a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6819      	ldr	r1, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f042 0201 	orr.w	r2, r2, #1
 80085aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	e000      	b.n	80085c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085c0:	2302      	movs	r3, #2
  }
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b085      	sub	sp, #20
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b20      	cmp	r3, #32
 80085e2:	d139      	bne.n	8008658 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d101      	bne.n	80085f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085ee:	2302      	movs	r3, #2
 80085f0:	e033      	b.n	800865a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2224      	movs	r2, #36	@ 0x24
 80085fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0201 	bic.w	r2, r2, #1
 8008610:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008620:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	021b      	lsls	r3, r3, #8
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0201 	orr.w	r2, r2, #1
 8008642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	e000      	b.n	800865a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008658:	2302      	movs	r3, #2
  }
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
	...

08008668 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e0bf      	b.n	80087fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d106      	bne.n	8008694 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fa fdd2 	bl	8003238 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	699a      	ldr	r2, [r3, #24]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80086aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6999      	ldr	r1, [r3, #24]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80086c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6899      	ldr	r1, [r3, #8]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	4b4a      	ldr	r3, [pc, #296]	@ (8008804 <HAL_LTDC_Init+0x19c>)
 80086dc:	400b      	ands	r3, r1
 80086de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	041b      	lsls	r3, r3, #16
 80086e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6899      	ldr	r1, [r3, #8]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	699a      	ldr	r2, [r3, #24]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68d9      	ldr	r1, [r3, #12]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	4b3e      	ldr	r3, [pc, #248]	@ (8008804 <HAL_LTDC_Init+0x19c>)
 800870a:	400b      	ands	r3, r1
 800870c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	041b      	lsls	r3, r3, #16
 8008714:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68d9      	ldr	r1, [r3, #12]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a1a      	ldr	r2, [r3, #32]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6919      	ldr	r1, [r3, #16]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4b33      	ldr	r3, [pc, #204]	@ (8008804 <HAL_LTDC_Init+0x19c>)
 8008738:	400b      	ands	r3, r1
 800873a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008740:	041b      	lsls	r3, r3, #16
 8008742:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6919      	ldr	r1, [r3, #16]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	431a      	orrs	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6959      	ldr	r1, [r3, #20]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	4b27      	ldr	r3, [pc, #156]	@ (8008804 <HAL_LTDC_Init+0x19c>)
 8008766:	400b      	ands	r3, r1
 8008768:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876e:	041b      	lsls	r3, r3, #16
 8008770:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6959      	ldr	r1, [r3, #20]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80087aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0206 	orr.w	r2, r2, #6
 80087d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0201 	orr.w	r2, r2, #1
 80087e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	f000f800 	.word	0xf000f800

08008808 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008816:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800881e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f003 0304 	and.w	r3, r3, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	d023      	beq.n	8008872 <HAL_LTDC_IRQHandler+0x6a>
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01e      	beq.n	8008872 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0204 	bic.w	r2, r2, #4
 8008842:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2204      	movs	r2, #4
 800884a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008852:	f043 0201 	orr.w	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2204      	movs	r2, #4
 8008860:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f86f 	bl	8008950 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d023      	beq.n	80088c4 <HAL_LTDC_IRQHandler+0xbc>
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01e      	beq.n	80088c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 0202 	bic.w	r2, r2, #2
 8008894:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2202      	movs	r2, #2
 800889c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088a4:	f043 0202 	orr.w	r2, r3, #2
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2204      	movs	r2, #4
 80088b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f846 	bl	8008950 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d01b      	beq.n	8008906 <HAL_LTDC_IRQHandler+0xfe>
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d016      	beq.n	8008906 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2201      	movs	r2, #1
 80088ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f82f 	bl	8008964 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f003 0308 	and.w	r3, r3, #8
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01b      	beq.n	8008948 <HAL_LTDC_IRQHandler+0x140>
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d016      	beq.n	8008948 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0208 	bic.w	r2, r2, #8
 8008928:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2208      	movs	r2, #8
 8008930:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f818 	bl	8008978 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800898c:	b5b0      	push	{r4, r5, r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d101      	bne.n	80089a6 <HAL_LTDC_ConfigLayer+0x1a>
 80089a2:	2302      	movs	r3, #2
 80089a4:	e02c      	b.n	8008a00 <HAL_LTDC_ConfigLayer+0x74>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2202      	movs	r2, #2
 80089b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2134      	movs	r1, #52	@ 0x34
 80089bc:	fb01 f303 	mul.w	r3, r1, r3
 80089c0:	4413      	add	r3, r2
 80089c2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	4614      	mov	r4, r2
 80089ca:	461d      	mov	r5, r3
 80089cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 f81f 	bl	8008a24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2201      	movs	r2, #1
 80089ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bdb0      	pop	{r4, r5, r7, pc}

08008a08 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008a16:	b2db      	uxtb	r3, r3
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b089      	sub	sp, #36	@ 0x24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	0c1b      	lsrs	r3, r3, #16
 8008a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a40:	4413      	add	r3, r2
 8008a42:	041b      	lsls	r3, r3, #16
 8008a44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	01db      	lsls	r3, r3, #7
 8008a50:	4413      	add	r3, r2
 8008a52:	3384      	adds	r3, #132	@ 0x84
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	6812      	ldr	r2, [r2, #0]
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	01d2      	lsls	r2, r2, #7
 8008a60:	440a      	add	r2, r1
 8008a62:	3284      	adds	r2, #132	@ 0x84
 8008a64:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008a68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	0c1b      	lsrs	r3, r3, #16
 8008a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008a7a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008a7c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4619      	mov	r1, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	01db      	lsls	r3, r3, #7
 8008a88:	440b      	add	r3, r1
 8008a8a:	3384      	adds	r3, #132	@ 0x84
 8008a8c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008a92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008aa2:	4413      	add	r3, r2
 8008aa4:	041b      	lsls	r3, r3, #16
 8008aa6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	461a      	mov	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	01db      	lsls	r3, r3, #7
 8008ab2:	4413      	add	r3, r2
 8008ab4:	3384      	adds	r3, #132	@ 0x84
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	6812      	ldr	r2, [r2, #0]
 8008abc:	4611      	mov	r1, r2
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	01d2      	lsls	r2, r2, #7
 8008ac2:	440a      	add	r2, r1
 8008ac4:	3284      	adds	r2, #132	@ 0x84
 8008ac6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008aca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ada:	4413      	add	r3, r2
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	01db      	lsls	r3, r3, #7
 8008ae8:	440b      	add	r3, r1
 8008aea:	3384      	adds	r3, #132	@ 0x84
 8008aec:	4619      	mov	r1, r3
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	01db      	lsls	r3, r3, #7
 8008afe:	4413      	add	r3, r2
 8008b00:	3384      	adds	r3, #132	@ 0x84
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	6812      	ldr	r2, [r2, #0]
 8008b08:	4611      	mov	r1, r2
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	01d2      	lsls	r2, r2, #7
 8008b0e:	440a      	add	r2, r1
 8008b10:	3284      	adds	r2, #132	@ 0x84
 8008b12:	f023 0307 	bic.w	r3, r3, #7
 8008b16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	01db      	lsls	r3, r3, #7
 8008b22:	4413      	add	r3, r2
 8008b24:	3384      	adds	r3, #132	@ 0x84
 8008b26:	461a      	mov	r2, r3
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008b3e:	041b      	lsls	r3, r3, #16
 8008b40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	061b      	lsls	r3, r3, #24
 8008b48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	01db      	lsls	r3, r3, #7
 8008b54:	4413      	add	r3, r2
 8008b56:	3384      	adds	r3, #132	@ 0x84
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	01db      	lsls	r3, r3, #7
 8008b64:	4413      	add	r3, r2
 8008b66:	3384      	adds	r3, #132	@ 0x84
 8008b68:	461a      	mov	r2, r3
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b74:	461a      	mov	r2, r3
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4619      	mov	r1, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	01db      	lsls	r3, r3, #7
 8008b88:	440b      	add	r3, r1
 8008b8a:	3384      	adds	r3, #132	@ 0x84
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	01db      	lsls	r3, r3, #7
 8008b9e:	4413      	add	r3, r2
 8008ba0:	3384      	adds	r3, #132	@ 0x84
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	6812      	ldr	r2, [r2, #0]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	01d2      	lsls	r2, r2, #7
 8008bae:	440a      	add	r2, r1
 8008bb0:	3284      	adds	r2, #132	@ 0x84
 8008bb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008bb6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	01db      	lsls	r3, r3, #7
 8008bc2:	4413      	add	r3, r2
 8008bc4:	3384      	adds	r3, #132	@ 0x84
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	01db      	lsls	r3, r3, #7
 8008bd8:	4413      	add	r3, r2
 8008bda:	3384      	adds	r3, #132	@ 0x84
 8008bdc:	69da      	ldr	r2, [r3, #28]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4619      	mov	r1, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	01db      	lsls	r3, r3, #7
 8008be8:	440b      	add	r3, r1
 8008bea:	3384      	adds	r3, #132	@ 0x84
 8008bec:	4619      	mov	r1, r3
 8008bee:	4b58      	ldr	r3, [pc, #352]	@ (8008d50 <LTDC_SetConfig+0x32c>)
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	68f9      	ldr	r1, [r7, #12]
 8008bfe:	6809      	ldr	r1, [r1, #0]
 8008c00:	4608      	mov	r0, r1
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	01c9      	lsls	r1, r1, #7
 8008c06:	4401      	add	r1, r0
 8008c08:	3184      	adds	r1, #132	@ 0x84
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	01db      	lsls	r3, r3, #7
 8008c18:	4413      	add	r3, r2
 8008c1a:	3384      	adds	r3, #132	@ 0x84
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	01db      	lsls	r3, r3, #7
 8008c28:	4413      	add	r3, r2
 8008c2a:	3384      	adds	r3, #132	@ 0x84
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	2300      	movs	r3, #0
 8008c30:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	01db      	lsls	r3, r3, #7
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3384      	adds	r3, #132	@ 0x84
 8008c40:	461a      	mov	r2, r3
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c46:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008c50:	2304      	movs	r3, #4
 8008c52:	61fb      	str	r3, [r7, #28]
 8008c54:	e01b      	b.n	8008c8e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d102      	bne.n	8008c64 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	61fb      	str	r3, [r7, #28]
 8008c62:	e014      	b.n	8008c8e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d00b      	beq.n	8008c84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d007      	beq.n	8008c84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d003      	beq.n	8008c84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008c80:	2b07      	cmp	r3, #7
 8008c82:	d102      	bne.n	8008c8a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008c84:	2302      	movs	r3, #2
 8008c86:	61fb      	str	r3, [r7, #28]
 8008c88:	e001      	b.n	8008c8e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	01db      	lsls	r3, r3, #7
 8008c98:	4413      	add	r3, r2
 8008c9a:	3384      	adds	r3, #132	@ 0x84
 8008c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	6812      	ldr	r2, [r2, #0]
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	01d2      	lsls	r2, r2, #7
 8008ca8:	440a      	add	r2, r1
 8008caa:	3284      	adds	r2, #132	@ 0x84
 8008cac:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	fb02 f303 	mul.w	r3, r2, r3
 8008cbc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6859      	ldr	r1, [r3, #4]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	1acb      	subs	r3, r1, r3
 8008cc8:	69f9      	ldr	r1, [r7, #28]
 8008cca:	fb01 f303 	mul.w	r3, r1, r3
 8008cce:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008cd0:	68f9      	ldr	r1, [r7, #12]
 8008cd2:	6809      	ldr	r1, [r1, #0]
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	01c9      	lsls	r1, r1, #7
 8008cda:	4401      	add	r1, r0
 8008cdc:	3184      	adds	r1, #132	@ 0x84
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	01db      	lsls	r3, r3, #7
 8008cec:	4413      	add	r3, r2
 8008cee:	3384      	adds	r3, #132	@ 0x84
 8008cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	01db      	lsls	r3, r3, #7
 8008cfc:	440b      	add	r3, r1
 8008cfe:	3384      	adds	r3, #132	@ 0x84
 8008d00:	4619      	mov	r1, r3
 8008d02:	4b14      	ldr	r3, [pc, #80]	@ (8008d54 <LTDC_SetConfig+0x330>)
 8008d04:	4013      	ands	r3, r2
 8008d06:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	01db      	lsls	r3, r3, #7
 8008d12:	4413      	add	r3, r2
 8008d14:	3384      	adds	r3, #132	@ 0x84
 8008d16:	461a      	mov	r2, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	01db      	lsls	r3, r3, #7
 8008d28:	4413      	add	r3, r2
 8008d2a:	3384      	adds	r3, #132	@ 0x84
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	6812      	ldr	r2, [r2, #0]
 8008d32:	4611      	mov	r1, r2
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	01d2      	lsls	r2, r2, #7
 8008d38:	440a      	add	r2, r1
 8008d3a:	3284      	adds	r2, #132	@ 0x84
 8008d3c:	f043 0301 	orr.w	r3, r3, #1
 8008d40:	6013      	str	r3, [r2, #0]
}
 8008d42:	bf00      	nop
 8008d44:	3724      	adds	r7, #36	@ 0x24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	fffff8f8 	.word	0xfffff8f8
 8008d54:	fffff800 	.word	0xfffff800

08008d58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d5c:	4b05      	ldr	r3, [pc, #20]	@ (8008d74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a04      	ldr	r2, [pc, #16]	@ (8008d74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d66:	6013      	str	r3, [r2, #0]
}
 8008d68:	bf00      	nop
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	40007000 	.word	0x40007000

08008d78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008d82:	4b23      	ldr	r3, [pc, #140]	@ (8008e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d86:	4a22      	ldr	r2, [pc, #136]	@ (8008e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d8e:	4b20      	ldr	r3, [pc, #128]	@ (8008e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8008e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008da4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008da6:	f7fd f819 	bl	8005ddc <HAL_GetTick>
 8008daa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008dac:	e009      	b.n	8008dc2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008dae:	f7fd f815 	bl	8005ddc <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008dbc:	d901      	bls.n	8008dc2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e022      	b.n	8008e08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008dc2:	4b14      	ldr	r3, [pc, #80]	@ (8008e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dce:	d1ee      	bne.n	8008dae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008dd0:	4b10      	ldr	r3, [pc, #64]	@ (8008e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8008e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ddc:	f7fc fffe 	bl	8005ddc <HAL_GetTick>
 8008de0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008de2:	e009      	b.n	8008df8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008de4:	f7fc fffa 	bl	8005ddc <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008df2:	d901      	bls.n	8008df8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e007      	b.n	8008e08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008df8:	4b06      	ldr	r3, [pc, #24]	@ (8008e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e04:	d1ee      	bne.n	8008de4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	40023800 	.word	0x40023800
 8008e14:	40007000 	.word	0x40007000

08008e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008e20:	2300      	movs	r3, #0
 8008e22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e291      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 8087 	beq.w	8008f4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e3c:	4b96      	ldr	r3, [pc, #600]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f003 030c 	and.w	r3, r3, #12
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d00c      	beq.n	8008e62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e48:	4b93      	ldr	r3, [pc, #588]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 030c 	and.w	r3, r3, #12
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	d112      	bne.n	8008e7a <HAL_RCC_OscConfig+0x62>
 8008e54:	4b90      	ldr	r3, [pc, #576]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e60:	d10b      	bne.n	8008e7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e62:	4b8d      	ldr	r3, [pc, #564]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d06c      	beq.n	8008f48 <HAL_RCC_OscConfig+0x130>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d168      	bne.n	8008f48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e26b      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e82:	d106      	bne.n	8008e92 <HAL_RCC_OscConfig+0x7a>
 8008e84:	4b84      	ldr	r3, [pc, #528]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a83      	ldr	r2, [pc, #524]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	e02e      	b.n	8008ef0 <HAL_RCC_OscConfig+0xd8>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10c      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x9c>
 8008e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a7b      	ldr	r2, [pc, #492]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008eac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	e01d      	b.n	8008ef0 <HAL_RCC_OscConfig+0xd8>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ebc:	d10c      	bne.n	8008ed8 <HAL_RCC_OscConfig+0xc0>
 8008ebe:	4b76      	ldr	r3, [pc, #472]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a75      	ldr	r2, [pc, #468]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	4b73      	ldr	r3, [pc, #460]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a72      	ldr	r2, [pc, #456]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	e00b      	b.n	8008ef0 <HAL_RCC_OscConfig+0xd8>
 8008ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a6e      	ldr	r2, [pc, #440]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	4b6c      	ldr	r3, [pc, #432]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d013      	beq.n	8008f20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef8:	f7fc ff70 	bl	8005ddc <HAL_GetTick>
 8008efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008efe:	e008      	b.n	8008f12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f00:	f7fc ff6c 	bl	8005ddc <HAL_GetTick>
 8008f04:	4602      	mov	r2, r0
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	2b64      	cmp	r3, #100	@ 0x64
 8008f0c:	d901      	bls.n	8008f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e21f      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f12:	4b61      	ldr	r3, [pc, #388]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0f0      	beq.n	8008f00 <HAL_RCC_OscConfig+0xe8>
 8008f1e:	e014      	b.n	8008f4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f20:	f7fc ff5c 	bl	8005ddc <HAL_GetTick>
 8008f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f26:	e008      	b.n	8008f3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f28:	f7fc ff58 	bl	8005ddc <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	2b64      	cmp	r3, #100	@ 0x64
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e20b      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f3a:	4b57      	ldr	r3, [pc, #348]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f0      	bne.n	8008f28 <HAL_RCC_OscConfig+0x110>
 8008f46:	e000      	b.n	8008f4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d069      	beq.n	800902a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f56:	4b50      	ldr	r3, [pc, #320]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 030c 	and.w	r3, r3, #12
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00b      	beq.n	8008f7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f62:	4b4d      	ldr	r3, [pc, #308]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 030c 	and.w	r3, r3, #12
 8008f6a:	2b08      	cmp	r3, #8
 8008f6c:	d11c      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x190>
 8008f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d116      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f7a:	4b47      	ldr	r3, [pc, #284]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d005      	beq.n	8008f92 <HAL_RCC_OscConfig+0x17a>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d001      	beq.n	8008f92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e1df      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f92:	4b41      	ldr	r3, [pc, #260]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	493d      	ldr	r1, [pc, #244]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fa6:	e040      	b.n	800902a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d023      	beq.n	8008ff8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fb0:	4b39      	ldr	r3, [pc, #228]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a38      	ldr	r2, [pc, #224]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008fb6:	f043 0301 	orr.w	r3, r3, #1
 8008fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fbc:	f7fc ff0e 	bl	8005ddc <HAL_GetTick>
 8008fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fc2:	e008      	b.n	8008fd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fc4:	f7fc ff0a 	bl	8005ddc <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d901      	bls.n	8008fd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e1bd      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fd6:	4b30      	ldr	r3, [pc, #192]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0f0      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4929      	ldr	r1, [pc, #164]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	600b      	str	r3, [r1, #0]
 8008ff6:	e018      	b.n	800902a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ff8:	4b27      	ldr	r3, [pc, #156]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a26      	ldr	r2, [pc, #152]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8008ffe:	f023 0301 	bic.w	r3, r3, #1
 8009002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009004:	f7fc feea 	bl	8005ddc <HAL_GetTick>
 8009008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800900c:	f7fc fee6 	bl	8005ddc <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e199      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800901e:	4b1e      	ldr	r3, [pc, #120]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1f0      	bne.n	800900c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0308 	and.w	r3, r3, #8
 8009032:	2b00      	cmp	r3, #0
 8009034:	d038      	beq.n	80090a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d019      	beq.n	8009072 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800903e:	4b16      	ldr	r3, [pc, #88]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8009040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009042:	4a15      	ldr	r2, [pc, #84]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8009044:	f043 0301 	orr.w	r3, r3, #1
 8009048:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800904a:	f7fc fec7 	bl	8005ddc <HAL_GetTick>
 800904e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009050:	e008      	b.n	8009064 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009052:	f7fc fec3 	bl	8005ddc <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	2b02      	cmp	r3, #2
 800905e:	d901      	bls.n	8009064 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e176      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009064:	4b0c      	ldr	r3, [pc, #48]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8009066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0f0      	beq.n	8009052 <HAL_RCC_OscConfig+0x23a>
 8009070:	e01a      	b.n	80090a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009072:	4b09      	ldr	r3, [pc, #36]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8009074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009076:	4a08      	ldr	r2, [pc, #32]	@ (8009098 <HAL_RCC_OscConfig+0x280>)
 8009078:	f023 0301 	bic.w	r3, r3, #1
 800907c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800907e:	f7fc fead 	bl	8005ddc <HAL_GetTick>
 8009082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009084:	e00a      	b.n	800909c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009086:	f7fc fea9 	bl	8005ddc <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	2b02      	cmp	r3, #2
 8009092:	d903      	bls.n	800909c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e15c      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
 8009098:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800909c:	4b91      	ldr	r3, [pc, #580]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800909e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a0:	f003 0302 	and.w	r3, r3, #2
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1ee      	bne.n	8009086 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80a4 	beq.w	80091fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090b6:	4b8b      	ldr	r3, [pc, #556]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80090b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10d      	bne.n	80090de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80090c2:	4b88      	ldr	r3, [pc, #544]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80090c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c6:	4a87      	ldr	r2, [pc, #540]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80090c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80090ce:	4b85      	ldr	r3, [pc, #532]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80090d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090d6:	60bb      	str	r3, [r7, #8]
 80090d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090da:	2301      	movs	r3, #1
 80090dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090de:	4b82      	ldr	r3, [pc, #520]	@ (80092e8 <HAL_RCC_OscConfig+0x4d0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d118      	bne.n	800911c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80090ea:	4b7f      	ldr	r3, [pc, #508]	@ (80092e8 <HAL_RCC_OscConfig+0x4d0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a7e      	ldr	r2, [pc, #504]	@ (80092e8 <HAL_RCC_OscConfig+0x4d0>)
 80090f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090f6:	f7fc fe71 	bl	8005ddc <HAL_GetTick>
 80090fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090fc:	e008      	b.n	8009110 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090fe:	f7fc fe6d 	bl	8005ddc <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b64      	cmp	r3, #100	@ 0x64
 800910a:	d901      	bls.n	8009110 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e120      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009110:	4b75      	ldr	r3, [pc, #468]	@ (80092e8 <HAL_RCC_OscConfig+0x4d0>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009118:	2b00      	cmp	r3, #0
 800911a:	d0f0      	beq.n	80090fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d106      	bne.n	8009132 <HAL_RCC_OscConfig+0x31a>
 8009124:	4b6f      	ldr	r3, [pc, #444]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009128:	4a6e      	ldr	r2, [pc, #440]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800912a:	f043 0301 	orr.w	r3, r3, #1
 800912e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009130:	e02d      	b.n	800918e <HAL_RCC_OscConfig+0x376>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10c      	bne.n	8009154 <HAL_RCC_OscConfig+0x33c>
 800913a:	4b6a      	ldr	r3, [pc, #424]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800913c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800913e:	4a69      	ldr	r2, [pc, #420]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	6713      	str	r3, [r2, #112]	@ 0x70
 8009146:	4b67      	ldr	r3, [pc, #412]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800914a:	4a66      	ldr	r2, [pc, #408]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800914c:	f023 0304 	bic.w	r3, r3, #4
 8009150:	6713      	str	r3, [r2, #112]	@ 0x70
 8009152:	e01c      	b.n	800918e <HAL_RCC_OscConfig+0x376>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	2b05      	cmp	r3, #5
 800915a:	d10c      	bne.n	8009176 <HAL_RCC_OscConfig+0x35e>
 800915c:	4b61      	ldr	r3, [pc, #388]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800915e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009160:	4a60      	ldr	r2, [pc, #384]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009162:	f043 0304 	orr.w	r3, r3, #4
 8009166:	6713      	str	r3, [r2, #112]	@ 0x70
 8009168:	4b5e      	ldr	r3, [pc, #376]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800916a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800916c:	4a5d      	ldr	r2, [pc, #372]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800916e:	f043 0301 	orr.w	r3, r3, #1
 8009172:	6713      	str	r3, [r2, #112]	@ 0x70
 8009174:	e00b      	b.n	800918e <HAL_RCC_OscConfig+0x376>
 8009176:	4b5b      	ldr	r3, [pc, #364]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800917a:	4a5a      	ldr	r2, [pc, #360]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800917c:	f023 0301 	bic.w	r3, r3, #1
 8009180:	6713      	str	r3, [r2, #112]	@ 0x70
 8009182:	4b58      	ldr	r3, [pc, #352]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009186:	4a57      	ldr	r2, [pc, #348]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009188:	f023 0304 	bic.w	r3, r3, #4
 800918c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d015      	beq.n	80091c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009196:	f7fc fe21 	bl	8005ddc <HAL_GetTick>
 800919a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800919c:	e00a      	b.n	80091b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800919e:	f7fc fe1d 	bl	8005ddc <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d901      	bls.n	80091b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e0ce      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091b4:	4b4b      	ldr	r3, [pc, #300]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80091b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0ee      	beq.n	800919e <HAL_RCC_OscConfig+0x386>
 80091c0:	e014      	b.n	80091ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091c2:	f7fc fe0b 	bl	8005ddc <HAL_GetTick>
 80091c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091c8:	e00a      	b.n	80091e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091ca:	f7fc fe07 	bl	8005ddc <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091d8:	4293      	cmp	r3, r2
 80091da:	d901      	bls.n	80091e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e0b8      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091e0:	4b40      	ldr	r3, [pc, #256]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80091e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1ee      	bne.n	80091ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d105      	bne.n	80091fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091f2:	4b3c      	ldr	r3, [pc, #240]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80091f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f6:	4a3b      	ldr	r2, [pc, #236]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80091f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 80a4 	beq.w	8009350 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009208:	4b36      	ldr	r3, [pc, #216]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f003 030c 	and.w	r3, r3, #12
 8009210:	2b08      	cmp	r3, #8
 8009212:	d06b      	beq.n	80092ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d149      	bne.n	80092b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800921c:	4b31      	ldr	r3, [pc, #196]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a30      	ldr	r2, [pc, #192]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009228:	f7fc fdd8 	bl	8005ddc <HAL_GetTick>
 800922c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800922e:	e008      	b.n	8009242 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009230:	f7fc fdd4 	bl	8005ddc <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e087      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009242:	4b28      	ldr	r3, [pc, #160]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1f0      	bne.n	8009230 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	69da      	ldr	r2, [r3, #28]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	431a      	orrs	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925c:	019b      	lsls	r3, r3, #6
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009264:	085b      	lsrs	r3, r3, #1
 8009266:	3b01      	subs	r3, #1
 8009268:	041b      	lsls	r3, r3, #16
 800926a:	431a      	orrs	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009270:	061b      	lsls	r3, r3, #24
 8009272:	4313      	orrs	r3, r2
 8009274:	4a1b      	ldr	r2, [pc, #108]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009276:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800927a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800927c:	4b19      	ldr	r3, [pc, #100]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a18      	ldr	r2, [pc, #96]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009288:	f7fc fda8 	bl	8005ddc <HAL_GetTick>
 800928c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800928e:	e008      	b.n	80092a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009290:	f7fc fda4 	bl	8005ddc <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	2b02      	cmp	r3, #2
 800929c:	d901      	bls.n	80092a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e057      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092a2:	4b10      	ldr	r3, [pc, #64]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0f0      	beq.n	8009290 <HAL_RCC_OscConfig+0x478>
 80092ae:	e04f      	b.n	8009350 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092b0:	4b0c      	ldr	r3, [pc, #48]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a0b      	ldr	r2, [pc, #44]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80092b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092bc:	f7fc fd8e 	bl	8005ddc <HAL_GetTick>
 80092c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092c2:	e008      	b.n	80092d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092c4:	f7fc fd8a 	bl	8005ddc <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d901      	bls.n	80092d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e03d      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092d6:	4b03      	ldr	r3, [pc, #12]	@ (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1f0      	bne.n	80092c4 <HAL_RCC_OscConfig+0x4ac>
 80092e2:	e035      	b.n	8009350 <HAL_RCC_OscConfig+0x538>
 80092e4:	40023800 	.word	0x40023800
 80092e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80092ec:	4b1b      	ldr	r3, [pc, #108]	@ (800935c <HAL_RCC_OscConfig+0x544>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d028      	beq.n	800934c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009304:	429a      	cmp	r2, r3
 8009306:	d121      	bne.n	800934c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009312:	429a      	cmp	r2, r3
 8009314:	d11a      	bne.n	800934c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800931c:	4013      	ands	r3, r2
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009322:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009324:	4293      	cmp	r3, r2
 8009326:	d111      	bne.n	800934c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	3b01      	subs	r3, #1
 8009336:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009338:	429a      	cmp	r2, r3
 800933a:	d107      	bne.n	800934c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009346:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009348:	429a      	cmp	r2, r3
 800934a:	d001      	beq.n	8009350 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e000      	b.n	8009352 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	40023800 	.word	0x40023800

08009360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e0d0      	b.n	800951a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009378:	4b6a      	ldr	r3, [pc, #424]	@ (8009524 <HAL_RCC_ClockConfig+0x1c4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d910      	bls.n	80093a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009386:	4b67      	ldr	r3, [pc, #412]	@ (8009524 <HAL_RCC_ClockConfig+0x1c4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f023 020f 	bic.w	r2, r3, #15
 800938e:	4965      	ldr	r1, [pc, #404]	@ (8009524 <HAL_RCC_ClockConfig+0x1c4>)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	4313      	orrs	r3, r2
 8009394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009396:	4b63      	ldr	r3, [pc, #396]	@ (8009524 <HAL_RCC_ClockConfig+0x1c4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d001      	beq.n	80093a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e0b8      	b.n	800951a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d020      	beq.n	80093f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0304 	and.w	r3, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80093c0:	4b59      	ldr	r3, [pc, #356]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	4a58      	ldr	r2, [pc, #352]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80093c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80093ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0308 	and.w	r3, r3, #8
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80093d8:	4b53      	ldr	r3, [pc, #332]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	4a52      	ldr	r2, [pc, #328]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80093de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80093e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093e4:	4b50      	ldr	r3, [pc, #320]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	494d      	ldr	r1, [pc, #308]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d040      	beq.n	8009484 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d107      	bne.n	800941a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800940a:	4b47      	ldr	r3, [pc, #284]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d115      	bne.n	8009442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e07f      	b.n	800951a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	2b02      	cmp	r3, #2
 8009420:	d107      	bne.n	8009432 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009422:	4b41      	ldr	r3, [pc, #260]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d109      	bne.n	8009442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e073      	b.n	800951a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009432:	4b3d      	ldr	r3, [pc, #244]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d101      	bne.n	8009442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e06b      	b.n	800951a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009442:	4b39      	ldr	r3, [pc, #228]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f023 0203 	bic.w	r2, r3, #3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	4936      	ldr	r1, [pc, #216]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 8009450:	4313      	orrs	r3, r2
 8009452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009454:	f7fc fcc2 	bl	8005ddc <HAL_GetTick>
 8009458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800945a:	e00a      	b.n	8009472 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800945c:	f7fc fcbe 	bl	8005ddc <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800946a:	4293      	cmp	r3, r2
 800946c:	d901      	bls.n	8009472 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e053      	b.n	800951a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009472:	4b2d      	ldr	r3, [pc, #180]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f003 020c 	and.w	r2, r3, #12
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	429a      	cmp	r2, r3
 8009482:	d1eb      	bne.n	800945c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009484:	4b27      	ldr	r3, [pc, #156]	@ (8009524 <HAL_RCC_ClockConfig+0x1c4>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 030f 	and.w	r3, r3, #15
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d210      	bcs.n	80094b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009492:	4b24      	ldr	r3, [pc, #144]	@ (8009524 <HAL_RCC_ClockConfig+0x1c4>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f023 020f 	bic.w	r2, r3, #15
 800949a:	4922      	ldr	r1, [pc, #136]	@ (8009524 <HAL_RCC_ClockConfig+0x1c4>)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	4313      	orrs	r3, r2
 80094a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094a2:	4b20      	ldr	r3, [pc, #128]	@ (8009524 <HAL_RCC_ClockConfig+0x1c4>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 030f 	and.w	r3, r3, #15
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d001      	beq.n	80094b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e032      	b.n	800951a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0304 	and.w	r3, r3, #4
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d008      	beq.n	80094d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094c0:	4b19      	ldr	r3, [pc, #100]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	4916      	ldr	r1, [pc, #88]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0308 	and.w	r3, r3, #8
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d009      	beq.n	80094f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80094de:	4b12      	ldr	r3, [pc, #72]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	490e      	ldr	r1, [pc, #56]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80094f2:	f000 f821 	bl	8009538 <HAL_RCC_GetSysClockFreq>
 80094f6:	4602      	mov	r2, r0
 80094f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	091b      	lsrs	r3, r3, #4
 80094fe:	f003 030f 	and.w	r3, r3, #15
 8009502:	490a      	ldr	r1, [pc, #40]	@ (800952c <HAL_RCC_ClockConfig+0x1cc>)
 8009504:	5ccb      	ldrb	r3, [r1, r3]
 8009506:	fa22 f303 	lsr.w	r3, r2, r3
 800950a:	4a09      	ldr	r2, [pc, #36]	@ (8009530 <HAL_RCC_ClockConfig+0x1d0>)
 800950c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800950e:	4b09      	ldr	r3, [pc, #36]	@ (8009534 <HAL_RCC_ClockConfig+0x1d4>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4618      	mov	r0, r3
 8009514:	f7fb febe 	bl	8005294 <HAL_InitTick>

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	40023c00 	.word	0x40023c00
 8009528:	40023800 	.word	0x40023800
 800952c:	0801dc68 	.word	0x0801dc68
 8009530:	20000048 	.word	0x20000048
 8009534:	2000004c 	.word	0x2000004c

08009538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800953c:	b090      	sub	sp, #64	@ 0x40
 800953e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	637b      	str	r3, [r7, #52]	@ 0x34
 8009544:	2300      	movs	r3, #0
 8009546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009548:	2300      	movs	r3, #0
 800954a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009550:	4b59      	ldr	r3, [pc, #356]	@ (80096b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f003 030c 	and.w	r3, r3, #12
 8009558:	2b08      	cmp	r3, #8
 800955a:	d00d      	beq.n	8009578 <HAL_RCC_GetSysClockFreq+0x40>
 800955c:	2b08      	cmp	r3, #8
 800955e:	f200 80a1 	bhi.w	80096a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <HAL_RCC_GetSysClockFreq+0x34>
 8009566:	2b04      	cmp	r3, #4
 8009568:	d003      	beq.n	8009572 <HAL_RCC_GetSysClockFreq+0x3a>
 800956a:	e09b      	b.n	80096a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800956c:	4b53      	ldr	r3, [pc, #332]	@ (80096bc <HAL_RCC_GetSysClockFreq+0x184>)
 800956e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009570:	e09b      	b.n	80096aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009572:	4b53      	ldr	r3, [pc, #332]	@ (80096c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009574:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009576:	e098      	b.n	80096aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009578:	4b4f      	ldr	r3, [pc, #316]	@ (80096b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009580:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009582:	4b4d      	ldr	r3, [pc, #308]	@ (80096b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d028      	beq.n	80095e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800958e:	4b4a      	ldr	r3, [pc, #296]	@ (80096b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	099b      	lsrs	r3, r3, #6
 8009594:	2200      	movs	r2, #0
 8009596:	623b      	str	r3, [r7, #32]
 8009598:	627a      	str	r2, [r7, #36]	@ 0x24
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80095a0:	2100      	movs	r1, #0
 80095a2:	4b47      	ldr	r3, [pc, #284]	@ (80096c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80095a4:	fb03 f201 	mul.w	r2, r3, r1
 80095a8:	2300      	movs	r3, #0
 80095aa:	fb00 f303 	mul.w	r3, r0, r3
 80095ae:	4413      	add	r3, r2
 80095b0:	4a43      	ldr	r2, [pc, #268]	@ (80096c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80095b2:	fba0 1202 	umull	r1, r2, r0, r2
 80095b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095b8:	460a      	mov	r2, r1
 80095ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80095bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095be:	4413      	add	r3, r2
 80095c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c4:	2200      	movs	r2, #0
 80095c6:	61bb      	str	r3, [r7, #24]
 80095c8:	61fa      	str	r2, [r7, #28]
 80095ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80095d2:	f7f7 fa5b 	bl	8000a8c <__aeabi_uldivmod>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4613      	mov	r3, r2
 80095dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095de:	e053      	b.n	8009688 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095e0:	4b35      	ldr	r3, [pc, #212]	@ (80096b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	099b      	lsrs	r3, r3, #6
 80095e6:	2200      	movs	r2, #0
 80095e8:	613b      	str	r3, [r7, #16]
 80095ea:	617a      	str	r2, [r7, #20]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80095f2:	f04f 0b00 	mov.w	fp, #0
 80095f6:	4652      	mov	r2, sl
 80095f8:	465b      	mov	r3, fp
 80095fa:	f04f 0000 	mov.w	r0, #0
 80095fe:	f04f 0100 	mov.w	r1, #0
 8009602:	0159      	lsls	r1, r3, #5
 8009604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009608:	0150      	lsls	r0, r2, #5
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	ebb2 080a 	subs.w	r8, r2, sl
 8009612:	eb63 090b 	sbc.w	r9, r3, fp
 8009616:	f04f 0200 	mov.w	r2, #0
 800961a:	f04f 0300 	mov.w	r3, #0
 800961e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009622:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009626:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800962a:	ebb2 0408 	subs.w	r4, r2, r8
 800962e:	eb63 0509 	sbc.w	r5, r3, r9
 8009632:	f04f 0200 	mov.w	r2, #0
 8009636:	f04f 0300 	mov.w	r3, #0
 800963a:	00eb      	lsls	r3, r5, #3
 800963c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009640:	00e2      	lsls	r2, r4, #3
 8009642:	4614      	mov	r4, r2
 8009644:	461d      	mov	r5, r3
 8009646:	eb14 030a 	adds.w	r3, r4, sl
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	eb45 030b 	adc.w	r3, r5, fp
 8009650:	607b      	str	r3, [r7, #4]
 8009652:	f04f 0200 	mov.w	r2, #0
 8009656:	f04f 0300 	mov.w	r3, #0
 800965a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800965e:	4629      	mov	r1, r5
 8009660:	028b      	lsls	r3, r1, #10
 8009662:	4621      	mov	r1, r4
 8009664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009668:	4621      	mov	r1, r4
 800966a:	028a      	lsls	r2, r1, #10
 800966c:	4610      	mov	r0, r2
 800966e:	4619      	mov	r1, r3
 8009670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009672:	2200      	movs	r2, #0
 8009674:	60bb      	str	r3, [r7, #8]
 8009676:	60fa      	str	r2, [r7, #12]
 8009678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800967c:	f7f7 fa06 	bl	8000a8c <__aeabi_uldivmod>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	4613      	mov	r3, r2
 8009686:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009688:	4b0b      	ldr	r3, [pc, #44]	@ (80096b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	0c1b      	lsrs	r3, r3, #16
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	3301      	adds	r3, #1
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009698:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800969a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969c:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80096a2:	e002      	b.n	80096aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80096a4:	4b05      	ldr	r3, [pc, #20]	@ (80096bc <HAL_RCC_GetSysClockFreq+0x184>)
 80096a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80096a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80096aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3740      	adds	r7, #64	@ 0x40
 80096b0:	46bd      	mov	sp, r7
 80096b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096b6:	bf00      	nop
 80096b8:	40023800 	.word	0x40023800
 80096bc:	00f42400 	.word	0x00f42400
 80096c0:	017d7840 	.word	0x017d7840

080096c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096c4:	b480      	push	{r7}
 80096c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096c8:	4b03      	ldr	r3, [pc, #12]	@ (80096d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80096ca:	681b      	ldr	r3, [r3, #0]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20000048 	.word	0x20000048

080096dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80096e0:	f7ff fff0 	bl	80096c4 <HAL_RCC_GetHCLKFreq>
 80096e4:	4602      	mov	r2, r0
 80096e6:	4b05      	ldr	r3, [pc, #20]	@ (80096fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	0a9b      	lsrs	r3, r3, #10
 80096ec:	f003 0307 	and.w	r3, r3, #7
 80096f0:	4903      	ldr	r1, [pc, #12]	@ (8009700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096f2:	5ccb      	ldrb	r3, [r1, r3]
 80096f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	40023800 	.word	0x40023800
 8009700:	0801dc78 	.word	0x0801dc78

08009704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009708:	f7ff ffdc 	bl	80096c4 <HAL_RCC_GetHCLKFreq>
 800970c:	4602      	mov	r2, r0
 800970e:	4b05      	ldr	r3, [pc, #20]	@ (8009724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	0b5b      	lsrs	r3, r3, #13
 8009714:	f003 0307 	and.w	r3, r3, #7
 8009718:	4903      	ldr	r1, [pc, #12]	@ (8009728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800971a:	5ccb      	ldrb	r3, [r1, r3]
 800971c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009720:	4618      	mov	r0, r3
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40023800 	.word	0x40023800
 8009728:	0801dc78 	.word	0x0801dc78

0800972c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	220f      	movs	r2, #15
 800973a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800973c:	4b12      	ldr	r3, [pc, #72]	@ (8009788 <HAL_RCC_GetClockConfig+0x5c>)
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f003 0203 	and.w	r2, r3, #3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009748:	4b0f      	ldr	r3, [pc, #60]	@ (8009788 <HAL_RCC_GetClockConfig+0x5c>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009754:	4b0c      	ldr	r3, [pc, #48]	@ (8009788 <HAL_RCC_GetClockConfig+0x5c>)
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009760:	4b09      	ldr	r3, [pc, #36]	@ (8009788 <HAL_RCC_GetClockConfig+0x5c>)
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	08db      	lsrs	r3, r3, #3
 8009766:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800976e:	4b07      	ldr	r3, [pc, #28]	@ (800978c <HAL_RCC_GetClockConfig+0x60>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 020f 	and.w	r2, r3, #15
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	601a      	str	r2, [r3, #0]
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40023800 	.word	0x40023800
 800978c:	40023c00 	.word	0x40023c00

08009790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d012      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80097b8:	4b69      	ldr	r3, [pc, #420]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	4a68      	ldr	r2, [pc, #416]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80097c2:	6093      	str	r3, [r2, #8]
 80097c4:	4b66      	ldr	r3, [pc, #408]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097c6:	689a      	ldr	r2, [r3, #8]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097cc:	4964      	ldr	r1, [pc, #400]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80097da:	2301      	movs	r3, #1
 80097dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d017      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097ea:	4b5d      	ldr	r3, [pc, #372]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f8:	4959      	ldr	r1, [pc, #356]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009808:	d101      	bne.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800980a:	2301      	movs	r3, #1
 800980c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009816:	2301      	movs	r3, #1
 8009818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d017      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009826:	4b4e      	ldr	r3, [pc, #312]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800982c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009834:	494a      	ldr	r1, [pc, #296]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009836:	4313      	orrs	r3, r2
 8009838:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009844:	d101      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009846:	2301      	movs	r3, #1
 8009848:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009852:	2301      	movs	r3, #1
 8009854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009862:	2301      	movs	r3, #1
 8009864:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 808b 	beq.w	800998a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009874:	4b3a      	ldr	r3, [pc, #232]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009878:	4a39      	ldr	r2, [pc, #228]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800987a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800987e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009880:	4b37      	ldr	r3, [pc, #220]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009888:	60bb      	str	r3, [r7, #8]
 800988a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800988c:	4b35      	ldr	r3, [pc, #212]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a34      	ldr	r2, [pc, #208]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009898:	f7fc faa0 	bl	8005ddc <HAL_GetTick>
 800989c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800989e:	e008      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098a0:	f7fc fa9c 	bl	8005ddc <HAL_GetTick>
 80098a4:	4602      	mov	r2, r0
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	2b64      	cmp	r3, #100	@ 0x64
 80098ac:	d901      	bls.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e357      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80098b2:	4b2c      	ldr	r3, [pc, #176]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0f0      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80098be:	4b28      	ldr	r3, [pc, #160]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d035      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d02e      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098dc:	4b20      	ldr	r3, [pc, #128]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80098e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ea:	4a1d      	ldr	r2, [pc, #116]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098f0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80098f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098f6:	4a1a      	ldr	r2, [pc, #104]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80098fe:	4a18      	ldr	r2, [pc, #96]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009904:	4b16      	ldr	r3, [pc, #88]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b01      	cmp	r3, #1
 800990e:	d114      	bne.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009910:	f7fc fa64 	bl	8005ddc <HAL_GetTick>
 8009914:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009916:	e00a      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009918:	f7fc fa60 	bl	8005ddc <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009926:	4293      	cmp	r3, r2
 8009928:	d901      	bls.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e319      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800992e:	4b0c      	ldr	r3, [pc, #48]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009932:	f003 0302 	and.w	r3, r3, #2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0ee      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800993e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009946:	d111      	bne.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009948:	4b05      	ldr	r3, [pc, #20]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009954:	4b04      	ldr	r3, [pc, #16]	@ (8009968 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009956:	400b      	ands	r3, r1
 8009958:	4901      	ldr	r1, [pc, #4]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800995a:	4313      	orrs	r3, r2
 800995c:	608b      	str	r3, [r1, #8]
 800995e:	e00b      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009960:	40023800 	.word	0x40023800
 8009964:	40007000 	.word	0x40007000
 8009968:	0ffffcff 	.word	0x0ffffcff
 800996c:	4baa      	ldr	r3, [pc, #680]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	4aa9      	ldr	r2, [pc, #676]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009972:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009976:	6093      	str	r3, [r2, #8]
 8009978:	4ba7      	ldr	r3, [pc, #668]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800997a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009984:	49a4      	ldr	r1, [pc, #656]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009986:	4313      	orrs	r3, r2
 8009988:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0310 	and.w	r3, r3, #16
 8009992:	2b00      	cmp	r3, #0
 8009994:	d010      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009996:	4ba0      	ldr	r3, [pc, #640]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800999c:	4a9e      	ldr	r2, [pc, #632]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800999e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80099a6:	4b9c      	ldr	r3, [pc, #624]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b0:	4999      	ldr	r1, [pc, #612]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00a      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80099c4:	4b94      	ldr	r3, [pc, #592]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099d2:	4991      	ldr	r1, [pc, #580]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00a      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80099e6:	4b8c      	ldr	r3, [pc, #560]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099f4:	4988      	ldr	r1, [pc, #544]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00a      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a08:	4b83      	ldr	r3, [pc, #524]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a16:	4980      	ldr	r1, [pc, #512]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a30:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a38:	4977      	ldr	r1, [pc, #476]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a4c:	4b72      	ldr	r3, [pc, #456]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a52:	f023 0203 	bic.w	r2, r3, #3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a5a:	496f      	ldr	r1, [pc, #444]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00a      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a74:	f023 020c 	bic.w	r2, r3, #12
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a7c:	4966      	ldr	r1, [pc, #408]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00a      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009a90:	4b61      	ldr	r3, [pc, #388]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a96:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a9e:	495e      	ldr	r1, [pc, #376]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00a      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ab2:	4b59      	ldr	r3, [pc, #356]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ab8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac0:	4955      	ldr	r1, [pc, #340]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00a      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009ad4:	4b50      	ldr	r3, [pc, #320]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ada:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae2:	494d      	ldr	r1, [pc, #308]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009af6:	4b48      	ldr	r3, [pc, #288]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009afc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b04:	4944      	ldr	r1, [pc, #272]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00a      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009b18:	4b3f      	ldr	r3, [pc, #252]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b1e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b26:	493c      	ldr	r1, [pc, #240]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00a      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009b3a:	4b37      	ldr	r3, [pc, #220]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b48:	4933      	ldr	r1, [pc, #204]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00a      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b62:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b6a:	492b      	ldr	r1, [pc, #172]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d011      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009b7e:	4b26      	ldr	r3, [pc, #152]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b84:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b8c:	4922      	ldr	r1, [pc, #136]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b9c:	d101      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0308 	and.w	r3, r3, #8
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bbe:	4b16      	ldr	r3, [pc, #88]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bcc:	4912      	ldr	r1, [pc, #72]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00b      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009be0:	4b0d      	ldr	r3, [pc, #52]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bf0:	4909      	ldr	r1, [pc, #36]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d006      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 80d9 	beq.w	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009c0c:	4b02      	ldr	r3, [pc, #8]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a01      	ldr	r2, [pc, #4]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c16:	e001      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009c18:	40023800 	.word	0x40023800
 8009c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c1e:	f7fc f8dd 	bl	8005ddc <HAL_GetTick>
 8009c22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c24:	e008      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009c26:	f7fc f8d9 	bl	8005ddc <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b64      	cmp	r3, #100	@ 0x64
 8009c32:	d901      	bls.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e194      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c38:	4b6c      	ldr	r3, [pc, #432]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1f0      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d021      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11d      	bne.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009c58:	4b64      	ldr	r3, [pc, #400]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c5e:	0c1b      	lsrs	r3, r3, #16
 8009c60:	f003 0303 	and.w	r3, r3, #3
 8009c64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009c66:	4b61      	ldr	r3, [pc, #388]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c6c:	0e1b      	lsrs	r3, r3, #24
 8009c6e:	f003 030f 	and.w	r3, r3, #15
 8009c72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	019a      	lsls	r2, r3, #6
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	041b      	lsls	r3, r3, #16
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	061b      	lsls	r3, r3, #24
 8009c84:	431a      	orrs	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	071b      	lsls	r3, r3, #28
 8009c8c:	4957      	ldr	r1, [pc, #348]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d004      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ca8:	d00a      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d02e      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009cbe:	d129      	bne.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cc6:	0c1b      	lsrs	r3, r3, #16
 8009cc8:	f003 0303 	and.w	r3, r3, #3
 8009ccc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009cce:	4b47      	ldr	r3, [pc, #284]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cd4:	0f1b      	lsrs	r3, r3, #28
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	019a      	lsls	r2, r3, #6
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	041b      	lsls	r3, r3, #16
 8009ce6:	431a      	orrs	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	061b      	lsls	r3, r3, #24
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	071b      	lsls	r3, r3, #28
 8009cf4:	493d      	ldr	r1, [pc, #244]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d02:	f023 021f 	bic.w	r2, r3, #31
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	4937      	ldr	r1, [pc, #220]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01d      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009d20:	4b32      	ldr	r3, [pc, #200]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d26:	0e1b      	lsrs	r3, r3, #24
 8009d28:	f003 030f 	and.w	r3, r3, #15
 8009d2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d34:	0f1b      	lsrs	r3, r3, #28
 8009d36:	f003 0307 	and.w	r3, r3, #7
 8009d3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	019a      	lsls	r2, r3, #6
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	041b      	lsls	r3, r3, #16
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	061b      	lsls	r3, r3, #24
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	071b      	lsls	r3, r3, #28
 8009d54:	4925      	ldr	r1, [pc, #148]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d011      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	019a      	lsls	r2, r3, #6
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	041b      	lsls	r3, r3, #16
 8009d74:	431a      	orrs	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	061b      	lsls	r3, r3, #24
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	071b      	lsls	r3, r3, #28
 8009d84:	4919      	ldr	r1, [pc, #100]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009d8c:	4b17      	ldr	r3, [pc, #92]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a16      	ldr	r2, [pc, #88]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d98:	f7fc f820 	bl	8005ddc <HAL_GetTick>
 8009d9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d9e:	e008      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009da0:	f7fc f81c 	bl	8005ddc <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	2b64      	cmp	r3, #100	@ 0x64
 8009dac:	d901      	bls.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e0d7      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009db2:	4b0e      	ldr	r3, [pc, #56]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0f0      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	f040 80cd 	bne.w	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009dc6:	4b09      	ldr	r3, [pc, #36]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a08      	ldr	r2, [pc, #32]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dd2:	f7fc f803 	bl	8005ddc <HAL_GetTick>
 8009dd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009dd8:	e00a      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009dda:	f7fb ffff 	bl	8005ddc <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	2b64      	cmp	r3, #100	@ 0x64
 8009de6:	d903      	bls.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e0ba      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009dec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009df0:	4b5e      	ldr	r3, [pc, #376]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dfc:	d0ed      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d009      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d02e      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d12a      	bne.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009e26:	4b51      	ldr	r3, [pc, #324]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e2c:	0c1b      	lsrs	r3, r3, #16
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009e34:	4b4d      	ldr	r3, [pc, #308]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e3a:	0f1b      	lsrs	r3, r3, #28
 8009e3c:	f003 0307 	and.w	r3, r3, #7
 8009e40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	019a      	lsls	r2, r3, #6
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	041b      	lsls	r3, r3, #16
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	061b      	lsls	r3, r3, #24
 8009e54:	431a      	orrs	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	071b      	lsls	r3, r3, #28
 8009e5a:	4944      	ldr	r1, [pc, #272]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009e62:	4b42      	ldr	r3, [pc, #264]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e68:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e70:	3b01      	subs	r3, #1
 8009e72:	021b      	lsls	r3, r3, #8
 8009e74:	493d      	ldr	r1, [pc, #244]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d022      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e90:	d11d      	bne.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009e92:	4b36      	ldr	r3, [pc, #216]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e98:	0e1b      	lsrs	r3, r3, #24
 8009e9a:	f003 030f 	and.w	r3, r3, #15
 8009e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009ea0:	4b32      	ldr	r3, [pc, #200]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ea6:	0f1b      	lsrs	r3, r3, #28
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	019a      	lsls	r2, r3, #6
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	041b      	lsls	r3, r3, #16
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	061b      	lsls	r3, r3, #24
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	071b      	lsls	r3, r3, #28
 8009ec6:	4929      	ldr	r1, [pc, #164]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0308 	and.w	r3, r3, #8
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d028      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009eda:	4b24      	ldr	r3, [pc, #144]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ee0:	0e1b      	lsrs	r3, r3, #24
 8009ee2:	f003 030f 	and.w	r3, r3, #15
 8009ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009ee8:	4b20      	ldr	r3, [pc, #128]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eee:	0c1b      	lsrs	r3, r3, #16
 8009ef0:	f003 0303 	and.w	r3, r3, #3
 8009ef4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	019a      	lsls	r2, r3, #6
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	041b      	lsls	r3, r3, #16
 8009f00:	431a      	orrs	r2, r3
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	061b      	lsls	r3, r3, #24
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	071b      	lsls	r3, r3, #28
 8009f0e:	4917      	ldr	r1, [pc, #92]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009f16:	4b15      	ldr	r3, [pc, #84]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f24:	4911      	ldr	r1, [pc, #68]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a0e      	ldr	r2, [pc, #56]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f38:	f7fb ff50 	bl	8005ddc <HAL_GetTick>
 8009f3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f3e:	e008      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009f40:	f7fb ff4c 	bl	8005ddc <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	2b64      	cmp	r3, #100	@ 0x64
 8009f4c:	d901      	bls.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e007      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f52:	4b06      	ldr	r3, [pc, #24]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f5e:	d1ef      	bne.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3720      	adds	r7, #32
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	40023800 	.word	0x40023800

08009f70 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e071      	b.n	800a06a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	7f5b      	ldrb	r3, [r3, #29]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d105      	bne.n	8009f9c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7f9 fbf8 	bl	800378c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f003 0310 	and.w	r3, r3, #16
 8009fac:	2b10      	cmp	r3, #16
 8009fae:	d053      	beq.n	800a058 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	22ca      	movs	r2, #202	@ 0xca
 8009fb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2253      	movs	r2, #83	@ 0x53
 8009fbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fac9 	bl	800a558 <RTC_EnterInitMode>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d12a      	bne.n	800a026 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6899      	ldr	r1, [r3, #8]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	4b26      	ldr	r3, [pc, #152]	@ (800a074 <HAL_RTC_Init+0x104>)
 8009fdc:	400b      	ands	r3, r1
 8009fde:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6899      	ldr	r1, [r3, #8]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	431a      	orrs	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68d2      	ldr	r2, [r2, #12]
 800a006:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6919      	ldr	r1, [r3, #16]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	041a      	lsls	r2, r3, #16
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fad2 	bl	800a5c6 <RTC_ExitInitMode>
 800a022:	4603      	mov	r3, r0
 800a024:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a026:	7bfb      	ldrb	r3, [r7, #15]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d110      	bne.n	800a04e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f022 0208 	bic.w	r2, r2, #8
 800a03a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	699a      	ldr	r2, [r3, #24]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	22ff      	movs	r2, #255	@ 0xff
 800a054:	625a      	str	r2, [r3, #36]	@ 0x24
 800a056:	e001      	b.n	800a05c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	ff8fffbf 	.word	0xff8fffbf

0800a078 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a078:	b590      	push	{r4, r7, lr}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a084:	2300      	movs	r3, #0
 800a086:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	7f1b      	ldrb	r3, [r3, #28]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d101      	bne.n	800a094 <HAL_RTC_SetTime+0x1c>
 800a090:	2302      	movs	r3, #2
 800a092:	e085      	b.n	800a1a0 <HAL_RTC_SetTime+0x128>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2201      	movs	r2, #1
 800a098:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2202      	movs	r2, #2
 800a09e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d126      	bne.n	800a0f4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d102      	bne.n	800a0ba <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 faa6 	bl	800a610 <RTC_ByteToBcd2>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	785b      	ldrb	r3, [r3, #1]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 fa9f 	bl	800a610 <RTC_ByteToBcd2>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a0d6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	789b      	ldrb	r3, [r3, #2]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 fa97 	bl	800a610 <RTC_ByteToBcd2>
 800a0e2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a0e4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	78db      	ldrb	r3, [r3, #3]
 800a0ec:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	617b      	str	r3, [r7, #20]
 800a0f2:	e018      	b.n	800a126 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d102      	bne.n	800a108 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	2200      	movs	r2, #0
 800a106:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	785b      	ldrb	r3, [r3, #1]
 800a112:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a114:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a11a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	78db      	ldrb	r3, [r3, #3]
 800a120:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a122:	4313      	orrs	r3, r2
 800a124:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	22ca      	movs	r2, #202	@ 0xca
 800a12c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2253      	movs	r2, #83	@ 0x53
 800a134:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 fa0e 	bl	800a558 <RTC_EnterInitMode>
 800a13c:	4603      	mov	r3, r0
 800a13e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a140:	7cfb      	ldrb	r3, [r7, #19]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d11e      	bne.n	800a184 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	6979      	ldr	r1, [r7, #20]
 800a14c:	4b16      	ldr	r3, [pc, #88]	@ (800a1a8 <HAL_RTC_SetTime+0x130>)
 800a14e:	400b      	ands	r3, r1
 800a150:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a160:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6899      	ldr	r1, [r3, #8]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	68da      	ldr	r2, [r3, #12]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	431a      	orrs	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	430a      	orrs	r2, r1
 800a178:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fa23 	bl	800a5c6 <RTC_ExitInitMode>
 800a180:	4603      	mov	r3, r0
 800a182:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a184:	7cfb      	ldrb	r3, [r7, #19]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d102      	bne.n	800a190 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	22ff      	movs	r2, #255	@ 0xff
 800a196:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	771a      	strb	r2, [r3, #28]

  return status;
 800a19e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	371c      	adds	r7, #28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd90      	pop	{r4, r7, pc}
 800a1a8:	007f7f7f 	.word	0x007f7f7f

0800a1ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a1ac:	b590      	push	{r4, r7, lr}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	7f1b      	ldrb	r3, [r3, #28]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d101      	bne.n	800a1c8 <HAL_RTC_SetDate+0x1c>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e06f      	b.n	800a2a8 <HAL_RTC_SetDate+0xfc>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10e      	bne.n	800a1f8 <HAL_RTC_SetDate+0x4c>
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	785b      	ldrb	r3, [r3, #1]
 800a1de:	f003 0310 	and.w	r3, r3, #16
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d008      	beq.n	800a1f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	f023 0310 	bic.w	r3, r3, #16
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	330a      	adds	r3, #10
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d11c      	bne.n	800a238 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	78db      	ldrb	r3, [r3, #3]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fa04 	bl	800a610 <RTC_ByteToBcd2>
 800a208:	4603      	mov	r3, r0
 800a20a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	785b      	ldrb	r3, [r3, #1]
 800a210:	4618      	mov	r0, r3
 800a212:	f000 f9fd 	bl	800a610 <RTC_ByteToBcd2>
 800a216:	4603      	mov	r3, r0
 800a218:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a21a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	789b      	ldrb	r3, [r3, #2]
 800a220:	4618      	mov	r0, r3
 800a222:	f000 f9f5 	bl	800a610 <RTC_ByteToBcd2>
 800a226:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a228:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a232:	4313      	orrs	r3, r2
 800a234:	617b      	str	r3, [r7, #20]
 800a236:	e00e      	b.n	800a256 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	78db      	ldrb	r3, [r3, #3]
 800a23c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	785b      	ldrb	r3, [r3, #1]
 800a242:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a244:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a24a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a252:	4313      	orrs	r3, r2
 800a254:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	22ca      	movs	r2, #202	@ 0xca
 800a25c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2253      	movs	r2, #83	@ 0x53
 800a264:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 f976 	bl	800a558 <RTC_EnterInitMode>
 800a26c:	4603      	mov	r3, r0
 800a26e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a270:	7cfb      	ldrb	r3, [r7, #19]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10a      	bne.n	800a28c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	6979      	ldr	r1, [r7, #20]
 800a27c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b0 <HAL_RTC_SetDate+0x104>)
 800a27e:	400b      	ands	r3, r1
 800a280:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 f99f 	bl	800a5c6 <RTC_ExitInitMode>
 800a288:	4603      	mov	r3, r0
 800a28a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a28c:	7cfb      	ldrb	r3, [r7, #19]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d102      	bne.n	800a298 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2201      	movs	r2, #1
 800a296:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	22ff      	movs	r2, #255	@ 0xff
 800a29e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	771a      	strb	r2, [r3, #28]

  return status;
 800a2a6:	7cfb      	ldrb	r3, [r7, #19]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	371c      	adds	r7, #28
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd90      	pop	{r4, r7, pc}
 800a2b0:	00ffff3f 	.word	0x00ffff3f

0800a2b4 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a2b4:	b590      	push	{r4, r7, lr}
 800a2b6:	b089      	sub	sp, #36	@ 0x24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	7f1b      	ldrb	r3, [r3, #28]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d101      	bne.n	800a2d8 <HAL_RTC_SetAlarm+0x24>
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	e113      	b.n	800a500 <HAL_RTC_SetAlarm+0x24c>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d137      	bne.n	800a35a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f000 f984 	bl	800a610 <RTC_ByteToBcd2>
 800a308:	4603      	mov	r3, r0
 800a30a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	785b      	ldrb	r3, [r3, #1]
 800a310:	4618      	mov	r0, r3
 800a312:	f000 f97d 	bl	800a610 <RTC_ByteToBcd2>
 800a316:	4603      	mov	r3, r0
 800a318:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a31a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	789b      	ldrb	r3, [r3, #2]
 800a320:	4618      	mov	r0, r3
 800a322:	f000 f975 	bl	800a610 <RTC_ByteToBcd2>
 800a326:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a328:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	78db      	ldrb	r3, [r3, #3]
 800a330:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a332:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 f967 	bl	800a610 <RTC_ByteToBcd2>
 800a342:	4603      	mov	r3, r0
 800a344:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a346:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a34e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a354:	4313      	orrs	r3, r2
 800a356:	61fb      	str	r3, [r7, #28]
 800a358:	e023      	b.n	800a3a2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	d102      	bne.n	800a36e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	2200      	movs	r2, #0
 800a36c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	785b      	ldrb	r3, [r3, #1]
 800a378:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a37a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a380:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	78db      	ldrb	r3, [r3, #3]
 800a386:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a388:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a390:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a392:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a398:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	22ca      	movs	r2, #202	@ 0xca
 800a3b4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2253      	movs	r2, #83	@ 0x53
 800a3bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3c6:	d148      	bne.n	800a45a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a3d6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689a      	ldr	r2, [r3, #8]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a3e6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800a3f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a3fa:	f7fb fcef 	bl	8005ddc <HAL_GetTick>
 800a3fe:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a400:	e013      	b.n	800a42a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a402:	f7fb fceb 	bl	8005ddc <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a410:	d90b      	bls.n	800a42a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	22ff      	movs	r2, #255	@ 0xff
 800a418:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2203      	movs	r2, #3
 800a41e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e06a      	b.n	800a500 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d0e4      	beq.n	800a402 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	69fa      	ldr	r2, [r7, #28]
 800a43e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a456:	609a      	str	r2, [r3, #8]
 800a458:	e047      	b.n	800a4ea <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a468:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689a      	ldr	r2, [r3, #8]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a478:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	b2da      	uxtb	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800a48a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a48c:	f7fb fca6 	bl	8005ddc <HAL_GetTick>
 800a490:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a492:	e013      	b.n	800a4bc <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a494:	f7fb fca2 	bl	8005ddc <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a4a2:	d90b      	bls.n	800a4bc <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	22ff      	movs	r2, #255	@ 0xff
 800a4aa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2203      	movs	r2, #3
 800a4b0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e021      	b.n	800a500 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	f003 0302 	and.w	r3, r3, #2
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0e4      	beq.n	800a494 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69fa      	ldr	r2, [r7, #28]
 800a4d0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	689a      	ldr	r2, [r3, #8]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	22ff      	movs	r2, #255	@ 0xff
 800a4f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3724      	adds	r7, #36	@ 0x24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd90      	pop	{r4, r7, pc}

0800a508 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68da      	ldr	r2, [r3, #12]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800a522:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a524:	f7fb fc5a 	bl	8005ddc <HAL_GetTick>
 800a528:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a52a:	e009      	b.n	800a540 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a52c:	f7fb fc56 	bl	8005ddc <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a53a:	d901      	bls.n	800a540 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e007      	b.n	800a550 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	f003 0320 	and.w	r3, r3, #32
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0ee      	beq.n	800a52c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a560:	2300      	movs	r3, #0
 800a562:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a572:	2b00      	cmp	r3, #0
 800a574:	d122      	bne.n	800a5bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a584:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a586:	f7fb fc29 	bl	8005ddc <HAL_GetTick>
 800a58a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a58c:	e00c      	b.n	800a5a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a58e:	f7fb fc25 	bl	8005ddc <HAL_GetTick>
 800a592:	4602      	mov	r2, r0
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a59c:	d904      	bls.n	800a5a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2204      	movs	r2, #4
 800a5a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d102      	bne.n	800a5bc <RTC_EnterInitMode+0x64>
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d1e8      	bne.n	800a58e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f003 0320 	and.w	r3, r3, #32
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10a      	bne.n	800a606 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7ff ff89 	bl	800a508 <HAL_RTC_WaitForSynchro>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d004      	beq.n	800a606 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2204      	movs	r2, #4
 800a600:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a61e:	e005      	b.n	800a62c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3301      	adds	r3, #1
 800a624:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a626:	79fb      	ldrb	r3, [r7, #7]
 800a628:	3b0a      	subs	r3, #10
 800a62a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	2b09      	cmp	r3, #9
 800a630:	d8f6      	bhi.n	800a620 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	b2db      	uxtb	r3, r3
 800a636:	011b      	lsls	r3, r3, #4
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	79fb      	ldrb	r3, [r7, #7]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	b2db      	uxtb	r3, r3
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	7f1b      	ldrb	r3, [r3, #28]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a664:	2302      	movs	r3, #2
 800a666:	e050      	b.n	800a70a <HAL_RTCEx_SetTimeStamp+0xbe>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2201      	movs	r2, #1
 800a66c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2202      	movs	r2, #2
 800a672:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f022 0206 	bic.w	r2, r2, #6
 800a682:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	430a      	orrs	r2, r1
 800a692:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	689a      	ldr	r2, [r3, #8]
 800a69a:	4b1f      	ldr	r3, [pc, #124]	@ (800a718 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a69c:	4013      	ands	r3, r2
 800a69e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	22ca      	movs	r2, #202	@ 0xca
 800a6ae:	625a      	str	r2, [r3, #36]	@ 0x24
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2253      	movs	r2, #83	@ 0x53
 800a6b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800a6d0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800a6e2:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689a      	ldr	r2, [r3, #8]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	22ff      	movs	r2, #255	@ 0xff
 800a6fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2201      	movs	r2, #1
 800a700:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	371c      	adds	r7, #28
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	fffff7f7 	.word	0xfffff7f7

0800a71c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e025      	b.n	800a77c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d106      	bne.n	800a74a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7f6 fdd5 	bl	80012f4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2202      	movs	r2, #2
 800a74e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	3304      	adds	r3, #4
 800a75a:	4619      	mov	r1, r3
 800a75c:	4610      	mov	r0, r2
 800a75e:	f001 fa33 	bl	800bbc8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	461a      	mov	r2, r3
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	f001 fa87 	bl	800bc80 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a796:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a798:	7dfb      	ldrb	r3, [r7, #23]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d101      	bne.n	800a7a2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a79e:	2302      	movs	r3, #2
 800a7a0:	e021      	b.n	800a7e6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d002      	beq.n	800a7ae <HAL_SDRAM_SendCommand+0x2a>
 800a7a8:	7dfb      	ldrb	r3, [r7, #23]
 800a7aa:	2b05      	cmp	r3, #5
 800a7ac:	d118      	bne.n	800a7e0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	68b9      	ldr	r1, [r7, #8]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f001 fac8 	bl	800bd54 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d104      	bne.n	800a7d6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2205      	movs	r2, #5
 800a7d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a7d4:	e006      	b.n	800a7e4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a7de:	e001      	b.n	800a7e4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e000      	b.n	800a7e6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	2b02      	cmp	r3, #2
 800a802:	d101      	bne.n	800a808 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a804:	2302      	movs	r3, #2
 800a806:	e016      	b.n	800a836 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	2b01      	cmp	r3, #1
 800a812:	d10f      	bne.n	800a834 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	4618      	mov	r0, r3
 800a824:	f001 faba 	bl	800bd9c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	e000      	b.n	800a836 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b084      	sub	sp, #16
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e09d      	b.n	800a98c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a854:	2b00      	cmp	r3, #0
 800a856:	d108      	bne.n	800a86a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a860:	d009      	beq.n	800a876 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	61da      	str	r2, [r3, #28]
 800a868:	e005      	b.n	800a876 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d106      	bne.n	800a896 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7f8 ffe7 	bl	8003864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2202      	movs	r2, #2
 800a89a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a8b6:	d902      	bls.n	800a8be <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	e002      	b.n	800a8c4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a8be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a8cc:	d007      	beq.n	800a8de <HAL_SPI_Init+0xa0>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a8d6:	d002      	beq.n	800a8de <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	431a      	orrs	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a90c:	431a      	orrs	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a916:	431a      	orrs	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a1b      	ldr	r3, [r3, #32]
 800a91c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a920:	ea42 0103 	orr.w	r1, r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a928:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	0c1b      	lsrs	r3, r3, #16
 800a93a:	f003 0204 	and.w	r2, r3, #4
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	f003 0310 	and.w	r3, r3, #16
 800a946:	431a      	orrs	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a94c:	f003 0308 	and.w	r3, r3, #8
 800a950:	431a      	orrs	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a95a:	ea42 0103 	orr.w	r1, r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	430a      	orrs	r2, r1
 800a96a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	69da      	ldr	r2, [r3, #28]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a97a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e049      	b.n	800aa3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7fa ff92 	bl	80058e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	f000 fac0 	bl	800af58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
	...

0800aa44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d001      	beq.n	800aa5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e054      	b.n	800ab06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68da      	ldr	r2, [r3, #12]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a26      	ldr	r2, [pc, #152]	@ (800ab14 <HAL_TIM_Base_Start_IT+0xd0>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d022      	beq.n	800aac4 <HAL_TIM_Base_Start_IT+0x80>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa86:	d01d      	beq.n	800aac4 <HAL_TIM_Base_Start_IT+0x80>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a22      	ldr	r2, [pc, #136]	@ (800ab18 <HAL_TIM_Base_Start_IT+0xd4>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d018      	beq.n	800aac4 <HAL_TIM_Base_Start_IT+0x80>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a21      	ldr	r2, [pc, #132]	@ (800ab1c <HAL_TIM_Base_Start_IT+0xd8>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d013      	beq.n	800aac4 <HAL_TIM_Base_Start_IT+0x80>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a1f      	ldr	r2, [pc, #124]	@ (800ab20 <HAL_TIM_Base_Start_IT+0xdc>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d00e      	beq.n	800aac4 <HAL_TIM_Base_Start_IT+0x80>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a1e      	ldr	r2, [pc, #120]	@ (800ab24 <HAL_TIM_Base_Start_IT+0xe0>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d009      	beq.n	800aac4 <HAL_TIM_Base_Start_IT+0x80>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a1c      	ldr	r2, [pc, #112]	@ (800ab28 <HAL_TIM_Base_Start_IT+0xe4>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d004      	beq.n	800aac4 <HAL_TIM_Base_Start_IT+0x80>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a1b      	ldr	r2, [pc, #108]	@ (800ab2c <HAL_TIM_Base_Start_IT+0xe8>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d115      	bne.n	800aaf0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689a      	ldr	r2, [r3, #8]
 800aaca:	4b19      	ldr	r3, [pc, #100]	@ (800ab30 <HAL_TIM_Base_Start_IT+0xec>)
 800aacc:	4013      	ands	r3, r2
 800aace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2b06      	cmp	r3, #6
 800aad4:	d015      	beq.n	800ab02 <HAL_TIM_Base_Start_IT+0xbe>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aadc:	d011      	beq.n	800ab02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f042 0201 	orr.w	r2, r2, #1
 800aaec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaee:	e008      	b.n	800ab02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f042 0201 	orr.w	r2, r2, #1
 800aafe:	601a      	str	r2, [r3, #0]
 800ab00:	e000      	b.n	800ab04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	40010000 	.word	0x40010000
 800ab18:	40000400 	.word	0x40000400
 800ab1c:	40000800 	.word	0x40000800
 800ab20:	40000c00 	.word	0x40000c00
 800ab24:	40010400 	.word	0x40010400
 800ab28:	40014000 	.word	0x40014000
 800ab2c:	40001800 	.word	0x40001800
 800ab30:	00010007 	.word	0x00010007

0800ab34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	f003 0302 	and.w	r3, r3, #2
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d122      	bne.n	800ab90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	f003 0302 	and.w	r3, r3, #2
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d11b      	bne.n	800ab90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f06f 0202 	mvn.w	r2, #2
 800ab60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	f003 0303 	and.w	r3, r3, #3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d003      	beq.n	800ab7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f9d0 	bl	800af1c <HAL_TIM_IC_CaptureCallback>
 800ab7c:	e005      	b.n	800ab8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f9c2 	bl	800af08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f9d3 	bl	800af30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	f003 0304 	and.w	r3, r3, #4
 800ab9a:	2b04      	cmp	r3, #4
 800ab9c:	d122      	bne.n	800abe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	f003 0304 	and.w	r3, r3, #4
 800aba8:	2b04      	cmp	r3, #4
 800abaa:	d11b      	bne.n	800abe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f06f 0204 	mvn.w	r2, #4
 800abb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2202      	movs	r2, #2
 800abba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	699b      	ldr	r3, [r3, #24]
 800abc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f9a6 	bl	800af1c <HAL_TIM_IC_CaptureCallback>
 800abd0:	e005      	b.n	800abde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f998 	bl	800af08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f9a9 	bl	800af30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	f003 0308 	and.w	r3, r3, #8
 800abee:	2b08      	cmp	r3, #8
 800abf0:	d122      	bne.n	800ac38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	f003 0308 	and.w	r3, r3, #8
 800abfc:	2b08      	cmp	r3, #8
 800abfe:	d11b      	bne.n	800ac38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f06f 0208 	mvn.w	r2, #8
 800ac08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2204      	movs	r2, #4
 800ac0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	f003 0303 	and.w	r3, r3, #3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f97c 	bl	800af1c <HAL_TIM_IC_CaptureCallback>
 800ac24:	e005      	b.n	800ac32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f96e 	bl	800af08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f97f 	bl	800af30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	f003 0310 	and.w	r3, r3, #16
 800ac42:	2b10      	cmp	r3, #16
 800ac44:	d122      	bne.n	800ac8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	f003 0310 	and.w	r3, r3, #16
 800ac50:	2b10      	cmp	r3, #16
 800ac52:	d11b      	bne.n	800ac8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f06f 0210 	mvn.w	r2, #16
 800ac5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2208      	movs	r2, #8
 800ac62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	69db      	ldr	r3, [r3, #28]
 800ac6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f952 	bl	800af1c <HAL_TIM_IC_CaptureCallback>
 800ac78:	e005      	b.n	800ac86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f944 	bl	800af08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f955 	bl	800af30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d10e      	bne.n	800acb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d107      	bne.n	800acb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f06f 0201 	mvn.w	r2, #1
 800acb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7f8 fcae 	bl	8003614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acc2:	2b80      	cmp	r3, #128	@ 0x80
 800acc4:	d10e      	bne.n	800ace4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acd0:	2b80      	cmp	r3, #128	@ 0x80
 800acd2:	d107      	bne.n	800ace4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800acdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fb0c 	bl	800b2fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acf2:	d10e      	bne.n	800ad12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acfe:	2b80      	cmp	r3, #128	@ 0x80
 800ad00:	d107      	bne.n	800ad12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ad0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 faff 	bl	800b310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad1c:	2b40      	cmp	r3, #64	@ 0x40
 800ad1e:	d10e      	bne.n	800ad3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad2a:	2b40      	cmp	r3, #64	@ 0x40
 800ad2c:	d107      	bne.n	800ad3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ad36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 f903 	bl	800af44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	f003 0320 	and.w	r3, r3, #32
 800ad48:	2b20      	cmp	r3, #32
 800ad4a:	d10e      	bne.n	800ad6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	f003 0320 	and.w	r3, r3, #32
 800ad56:	2b20      	cmp	r3, #32
 800ad58:	d107      	bne.n	800ad6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f06f 0220 	mvn.w	r2, #32
 800ad62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fabf 	bl	800b2e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad6a:	bf00      	nop
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d101      	bne.n	800ad90 <HAL_TIM_ConfigClockSource+0x1c>
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	e0b4      	b.n	800aefa <HAL_TIM_ConfigClockSource+0x186>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	4b56      	ldr	r3, [pc, #344]	@ (800af04 <HAL_TIM_ConfigClockSource+0x190>)
 800adac:	4013      	ands	r3, r2
 800adae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adc8:	d03e      	beq.n	800ae48 <HAL_TIM_ConfigClockSource+0xd4>
 800adca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adce:	f200 8087 	bhi.w	800aee0 <HAL_TIM_ConfigClockSource+0x16c>
 800add2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800add6:	f000 8086 	beq.w	800aee6 <HAL_TIM_ConfigClockSource+0x172>
 800adda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adde:	d87f      	bhi.n	800aee0 <HAL_TIM_ConfigClockSource+0x16c>
 800ade0:	2b70      	cmp	r3, #112	@ 0x70
 800ade2:	d01a      	beq.n	800ae1a <HAL_TIM_ConfigClockSource+0xa6>
 800ade4:	2b70      	cmp	r3, #112	@ 0x70
 800ade6:	d87b      	bhi.n	800aee0 <HAL_TIM_ConfigClockSource+0x16c>
 800ade8:	2b60      	cmp	r3, #96	@ 0x60
 800adea:	d050      	beq.n	800ae8e <HAL_TIM_ConfigClockSource+0x11a>
 800adec:	2b60      	cmp	r3, #96	@ 0x60
 800adee:	d877      	bhi.n	800aee0 <HAL_TIM_ConfigClockSource+0x16c>
 800adf0:	2b50      	cmp	r3, #80	@ 0x50
 800adf2:	d03c      	beq.n	800ae6e <HAL_TIM_ConfigClockSource+0xfa>
 800adf4:	2b50      	cmp	r3, #80	@ 0x50
 800adf6:	d873      	bhi.n	800aee0 <HAL_TIM_ConfigClockSource+0x16c>
 800adf8:	2b40      	cmp	r3, #64	@ 0x40
 800adfa:	d058      	beq.n	800aeae <HAL_TIM_ConfigClockSource+0x13a>
 800adfc:	2b40      	cmp	r3, #64	@ 0x40
 800adfe:	d86f      	bhi.n	800aee0 <HAL_TIM_ConfigClockSource+0x16c>
 800ae00:	2b30      	cmp	r3, #48	@ 0x30
 800ae02:	d064      	beq.n	800aece <HAL_TIM_ConfigClockSource+0x15a>
 800ae04:	2b30      	cmp	r3, #48	@ 0x30
 800ae06:	d86b      	bhi.n	800aee0 <HAL_TIM_ConfigClockSource+0x16c>
 800ae08:	2b20      	cmp	r3, #32
 800ae0a:	d060      	beq.n	800aece <HAL_TIM_ConfigClockSource+0x15a>
 800ae0c:	2b20      	cmp	r3, #32
 800ae0e:	d867      	bhi.n	800aee0 <HAL_TIM_ConfigClockSource+0x16c>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d05c      	beq.n	800aece <HAL_TIM_ConfigClockSource+0x15a>
 800ae14:	2b10      	cmp	r3, #16
 800ae16:	d05a      	beq.n	800aece <HAL_TIM_ConfigClockSource+0x15a>
 800ae18:	e062      	b.n	800aee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae2a:	f000 f9af 	bl	800b18c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ae3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	609a      	str	r2, [r3, #8]
      break;
 800ae46:	e04f      	b.n	800aee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae58:	f000 f998 	bl	800b18c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae6a:	609a      	str	r2, [r3, #8]
      break;
 800ae6c:	e03c      	b.n	800aee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f000 f90c 	bl	800b098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2150      	movs	r1, #80	@ 0x50
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 f965 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800ae8c:	e02c      	b.n	800aee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	f000 f92b 	bl	800b0f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2160      	movs	r1, #96	@ 0x60
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 f955 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800aeac:	e01c      	b.n	800aee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeba:	461a      	mov	r2, r3
 800aebc:	f000 f8ec 	bl	800b098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2140      	movs	r1, #64	@ 0x40
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 f945 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800aecc:	e00c      	b.n	800aee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4619      	mov	r1, r3
 800aed8:	4610      	mov	r0, r2
 800aeda:	f000 f93c 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800aede:	e003      	b.n	800aee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	73fb      	strb	r3, [r7, #15]
      break;
 800aee4:	e000      	b.n	800aee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	fffeff88 	.word	0xfffeff88

0800af08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a40      	ldr	r2, [pc, #256]	@ (800b06c <TIM_Base_SetConfig+0x114>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d013      	beq.n	800af98 <TIM_Base_SetConfig+0x40>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af76:	d00f      	beq.n	800af98 <TIM_Base_SetConfig+0x40>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a3d      	ldr	r2, [pc, #244]	@ (800b070 <TIM_Base_SetConfig+0x118>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d00b      	beq.n	800af98 <TIM_Base_SetConfig+0x40>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a3c      	ldr	r2, [pc, #240]	@ (800b074 <TIM_Base_SetConfig+0x11c>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d007      	beq.n	800af98 <TIM_Base_SetConfig+0x40>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a3b      	ldr	r2, [pc, #236]	@ (800b078 <TIM_Base_SetConfig+0x120>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d003      	beq.n	800af98 <TIM_Base_SetConfig+0x40>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a3a      	ldr	r2, [pc, #232]	@ (800b07c <TIM_Base_SetConfig+0x124>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d108      	bne.n	800afaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a2f      	ldr	r2, [pc, #188]	@ (800b06c <TIM_Base_SetConfig+0x114>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d02b      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afb8:	d027      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a2c      	ldr	r2, [pc, #176]	@ (800b070 <TIM_Base_SetConfig+0x118>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d023      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a2b      	ldr	r2, [pc, #172]	@ (800b074 <TIM_Base_SetConfig+0x11c>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d01f      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a2a      	ldr	r2, [pc, #168]	@ (800b078 <TIM_Base_SetConfig+0x120>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d01b      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a29      	ldr	r2, [pc, #164]	@ (800b07c <TIM_Base_SetConfig+0x124>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d017      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a28      	ldr	r2, [pc, #160]	@ (800b080 <TIM_Base_SetConfig+0x128>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d013      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a27      	ldr	r2, [pc, #156]	@ (800b084 <TIM_Base_SetConfig+0x12c>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d00f      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a26      	ldr	r2, [pc, #152]	@ (800b088 <TIM_Base_SetConfig+0x130>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d00b      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a25      	ldr	r2, [pc, #148]	@ (800b08c <TIM_Base_SetConfig+0x134>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d007      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a24      	ldr	r2, [pc, #144]	@ (800b090 <TIM_Base_SetConfig+0x138>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d003      	beq.n	800b00a <TIM_Base_SetConfig+0xb2>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a23      	ldr	r2, [pc, #140]	@ (800b094 <TIM_Base_SetConfig+0x13c>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d108      	bne.n	800b01c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	4313      	orrs	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	695b      	ldr	r3, [r3, #20]
 800b026:	4313      	orrs	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	689a      	ldr	r2, [r3, #8]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a0a      	ldr	r2, [pc, #40]	@ (800b06c <TIM_Base_SetConfig+0x114>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d003      	beq.n	800b050 <TIM_Base_SetConfig+0xf8>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a0c      	ldr	r2, [pc, #48]	@ (800b07c <TIM_Base_SetConfig+0x124>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d103      	bne.n	800b058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	615a      	str	r2, [r3, #20]
}
 800b05e:	bf00      	nop
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	40010000 	.word	0x40010000
 800b070:	40000400 	.word	0x40000400
 800b074:	40000800 	.word	0x40000800
 800b078:	40000c00 	.word	0x40000c00
 800b07c:	40010400 	.word	0x40010400
 800b080:	40014000 	.word	0x40014000
 800b084:	40014400 	.word	0x40014400
 800b088:	40014800 	.word	0x40014800
 800b08c:	40001800 	.word	0x40001800
 800b090:	40001c00 	.word	0x40001c00
 800b094:	40002000 	.word	0x40002000

0800b098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b098:	b480      	push	{r7}
 800b09a:	b087      	sub	sp, #28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	f023 0201 	bic.w	r2, r3, #1
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f023 030a 	bic.w	r3, r3, #10
 800b0d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	621a      	str	r2, [r3, #32]
}
 800b0ea:	bf00      	nop
 800b0ec:	371c      	adds	r7, #28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b087      	sub	sp, #28
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	60b9      	str	r1, [r7, #8]
 800b100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	f023 0210 	bic.w	r2, r3, #16
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	699b      	ldr	r3, [r3, #24]
 800b112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6a1b      	ldr	r3, [r3, #32]
 800b118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	031b      	lsls	r3, r3, #12
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	4313      	orrs	r3, r2
 800b12a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	011b      	lsls	r3, r3, #4
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	621a      	str	r2, [r3, #32]
}
 800b14a:	bf00      	nop
 800b14c:	371c      	adds	r7, #28
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b156:	b480      	push	{r7}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b16c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4313      	orrs	r3, r2
 800b174:	f043 0307 	orr.w	r3, r3, #7
 800b178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	609a      	str	r2, [r3, #8]
}
 800b180:	bf00      	nop
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	021a      	lsls	r2, r3, #8
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	609a      	str	r2, [r3, #8]
}
 800b1c0:	bf00      	nop
 800b1c2:	371c      	adds	r7, #28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d101      	bne.n	800b1e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	e06d      	b.n	800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a30      	ldr	r2, [pc, #192]	@ (800b2cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d004      	beq.n	800b218 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a2f      	ldr	r2, [pc, #188]	@ (800b2d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d108      	bne.n	800b22a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b21e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4313      	orrs	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b230:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	4313      	orrs	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a20      	ldr	r2, [pc, #128]	@ (800b2cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d022      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b256:	d01d      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a1d      	ldr	r2, [pc, #116]	@ (800b2d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d018      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a1c      	ldr	r2, [pc, #112]	@ (800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d013      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a1a      	ldr	r2, [pc, #104]	@ (800b2dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00e      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a15      	ldr	r2, [pc, #84]	@ (800b2d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d009      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a16      	ldr	r2, [pc, #88]	@ (800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d004      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a15      	ldr	r2, [pc, #84]	@ (800b2e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d10c      	bne.n	800b2ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b29a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	40010000 	.word	0x40010000
 800b2d0:	40010400 	.word	0x40010400
 800b2d4:	40000400 	.word	0x40000400
 800b2d8:	40000800 	.word	0x40000800
 800b2dc:	40000c00 	.word	0x40000c00
 800b2e0:	40014000 	.word	0x40014000
 800b2e4:	40001800 	.word	0x40001800

0800b2e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b304:	bf00      	nop
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b318:	bf00      	nop
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e040      	b.n	800b3b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d106      	bne.n	800b34c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7fa fbee 	bl	8005b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2224      	movs	r2, #36	@ 0x24
 800b350:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f022 0201 	bic.w	r2, r2, #1
 800b360:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f82c 	bl	800b3c0 <UART_SetConfig>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d101      	bne.n	800b372 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	e022      	b.n	800b3b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b376:	2b00      	cmp	r3, #0
 800b378:	d002      	beq.n	800b380 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fa84 	bl	800b888 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b38e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689a      	ldr	r2, [r3, #8]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b39e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f042 0201 	orr.w	r2, r2, #1
 800b3ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fb0b 	bl	800b9cc <UART_CheckIdleState>
 800b3b6:	4603      	mov	r3, r0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b088      	sub	sp, #32
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	689a      	ldr	r2, [r3, #8]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	431a      	orrs	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	69db      	ldr	r3, [r3, #28]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	4ba6      	ldr	r3, [pc, #664]	@ (800b684 <UART_SetConfig+0x2c4>)
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	6812      	ldr	r2, [r2, #0]
 800b3f2:	6979      	ldr	r1, [r7, #20]
 800b3f4:	430b      	orrs	r3, r1
 800b3f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	68da      	ldr	r2, [r3, #12]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	430a      	orrs	r2, r1
 800b40c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	430a      	orrs	r2, r1
 800b430:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a94      	ldr	r2, [pc, #592]	@ (800b688 <UART_SetConfig+0x2c8>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d120      	bne.n	800b47e <UART_SetConfig+0xbe>
 800b43c:	4b93      	ldr	r3, [pc, #588]	@ (800b68c <UART_SetConfig+0x2cc>)
 800b43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b442:	f003 0303 	and.w	r3, r3, #3
 800b446:	2b03      	cmp	r3, #3
 800b448:	d816      	bhi.n	800b478 <UART_SetConfig+0xb8>
 800b44a:	a201      	add	r2, pc, #4	@ (adr r2, 800b450 <UART_SetConfig+0x90>)
 800b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b450:	0800b461 	.word	0x0800b461
 800b454:	0800b46d 	.word	0x0800b46d
 800b458:	0800b467 	.word	0x0800b467
 800b45c:	0800b473 	.word	0x0800b473
 800b460:	2301      	movs	r3, #1
 800b462:	77fb      	strb	r3, [r7, #31]
 800b464:	e150      	b.n	800b708 <UART_SetConfig+0x348>
 800b466:	2302      	movs	r3, #2
 800b468:	77fb      	strb	r3, [r7, #31]
 800b46a:	e14d      	b.n	800b708 <UART_SetConfig+0x348>
 800b46c:	2304      	movs	r3, #4
 800b46e:	77fb      	strb	r3, [r7, #31]
 800b470:	e14a      	b.n	800b708 <UART_SetConfig+0x348>
 800b472:	2308      	movs	r3, #8
 800b474:	77fb      	strb	r3, [r7, #31]
 800b476:	e147      	b.n	800b708 <UART_SetConfig+0x348>
 800b478:	2310      	movs	r3, #16
 800b47a:	77fb      	strb	r3, [r7, #31]
 800b47c:	e144      	b.n	800b708 <UART_SetConfig+0x348>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a83      	ldr	r2, [pc, #524]	@ (800b690 <UART_SetConfig+0x2d0>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d132      	bne.n	800b4ee <UART_SetConfig+0x12e>
 800b488:	4b80      	ldr	r3, [pc, #512]	@ (800b68c <UART_SetConfig+0x2cc>)
 800b48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b48e:	f003 030c 	and.w	r3, r3, #12
 800b492:	2b0c      	cmp	r3, #12
 800b494:	d828      	bhi.n	800b4e8 <UART_SetConfig+0x128>
 800b496:	a201      	add	r2, pc, #4	@ (adr r2, 800b49c <UART_SetConfig+0xdc>)
 800b498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49c:	0800b4d1 	.word	0x0800b4d1
 800b4a0:	0800b4e9 	.word	0x0800b4e9
 800b4a4:	0800b4e9 	.word	0x0800b4e9
 800b4a8:	0800b4e9 	.word	0x0800b4e9
 800b4ac:	0800b4dd 	.word	0x0800b4dd
 800b4b0:	0800b4e9 	.word	0x0800b4e9
 800b4b4:	0800b4e9 	.word	0x0800b4e9
 800b4b8:	0800b4e9 	.word	0x0800b4e9
 800b4bc:	0800b4d7 	.word	0x0800b4d7
 800b4c0:	0800b4e9 	.word	0x0800b4e9
 800b4c4:	0800b4e9 	.word	0x0800b4e9
 800b4c8:	0800b4e9 	.word	0x0800b4e9
 800b4cc:	0800b4e3 	.word	0x0800b4e3
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	77fb      	strb	r3, [r7, #31]
 800b4d4:	e118      	b.n	800b708 <UART_SetConfig+0x348>
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	77fb      	strb	r3, [r7, #31]
 800b4da:	e115      	b.n	800b708 <UART_SetConfig+0x348>
 800b4dc:	2304      	movs	r3, #4
 800b4de:	77fb      	strb	r3, [r7, #31]
 800b4e0:	e112      	b.n	800b708 <UART_SetConfig+0x348>
 800b4e2:	2308      	movs	r3, #8
 800b4e4:	77fb      	strb	r3, [r7, #31]
 800b4e6:	e10f      	b.n	800b708 <UART_SetConfig+0x348>
 800b4e8:	2310      	movs	r3, #16
 800b4ea:	77fb      	strb	r3, [r7, #31]
 800b4ec:	e10c      	b.n	800b708 <UART_SetConfig+0x348>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a68      	ldr	r2, [pc, #416]	@ (800b694 <UART_SetConfig+0x2d4>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d120      	bne.n	800b53a <UART_SetConfig+0x17a>
 800b4f8:	4b64      	ldr	r3, [pc, #400]	@ (800b68c <UART_SetConfig+0x2cc>)
 800b4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b502:	2b30      	cmp	r3, #48	@ 0x30
 800b504:	d013      	beq.n	800b52e <UART_SetConfig+0x16e>
 800b506:	2b30      	cmp	r3, #48	@ 0x30
 800b508:	d814      	bhi.n	800b534 <UART_SetConfig+0x174>
 800b50a:	2b20      	cmp	r3, #32
 800b50c:	d009      	beq.n	800b522 <UART_SetConfig+0x162>
 800b50e:	2b20      	cmp	r3, #32
 800b510:	d810      	bhi.n	800b534 <UART_SetConfig+0x174>
 800b512:	2b00      	cmp	r3, #0
 800b514:	d002      	beq.n	800b51c <UART_SetConfig+0x15c>
 800b516:	2b10      	cmp	r3, #16
 800b518:	d006      	beq.n	800b528 <UART_SetConfig+0x168>
 800b51a:	e00b      	b.n	800b534 <UART_SetConfig+0x174>
 800b51c:	2300      	movs	r3, #0
 800b51e:	77fb      	strb	r3, [r7, #31]
 800b520:	e0f2      	b.n	800b708 <UART_SetConfig+0x348>
 800b522:	2302      	movs	r3, #2
 800b524:	77fb      	strb	r3, [r7, #31]
 800b526:	e0ef      	b.n	800b708 <UART_SetConfig+0x348>
 800b528:	2304      	movs	r3, #4
 800b52a:	77fb      	strb	r3, [r7, #31]
 800b52c:	e0ec      	b.n	800b708 <UART_SetConfig+0x348>
 800b52e:	2308      	movs	r3, #8
 800b530:	77fb      	strb	r3, [r7, #31]
 800b532:	e0e9      	b.n	800b708 <UART_SetConfig+0x348>
 800b534:	2310      	movs	r3, #16
 800b536:	77fb      	strb	r3, [r7, #31]
 800b538:	e0e6      	b.n	800b708 <UART_SetConfig+0x348>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a56      	ldr	r2, [pc, #344]	@ (800b698 <UART_SetConfig+0x2d8>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d120      	bne.n	800b586 <UART_SetConfig+0x1c6>
 800b544:	4b51      	ldr	r3, [pc, #324]	@ (800b68c <UART_SetConfig+0x2cc>)
 800b546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b54a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b54e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b550:	d013      	beq.n	800b57a <UART_SetConfig+0x1ba>
 800b552:	2bc0      	cmp	r3, #192	@ 0xc0
 800b554:	d814      	bhi.n	800b580 <UART_SetConfig+0x1c0>
 800b556:	2b80      	cmp	r3, #128	@ 0x80
 800b558:	d009      	beq.n	800b56e <UART_SetConfig+0x1ae>
 800b55a:	2b80      	cmp	r3, #128	@ 0x80
 800b55c:	d810      	bhi.n	800b580 <UART_SetConfig+0x1c0>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d002      	beq.n	800b568 <UART_SetConfig+0x1a8>
 800b562:	2b40      	cmp	r3, #64	@ 0x40
 800b564:	d006      	beq.n	800b574 <UART_SetConfig+0x1b4>
 800b566:	e00b      	b.n	800b580 <UART_SetConfig+0x1c0>
 800b568:	2300      	movs	r3, #0
 800b56a:	77fb      	strb	r3, [r7, #31]
 800b56c:	e0cc      	b.n	800b708 <UART_SetConfig+0x348>
 800b56e:	2302      	movs	r3, #2
 800b570:	77fb      	strb	r3, [r7, #31]
 800b572:	e0c9      	b.n	800b708 <UART_SetConfig+0x348>
 800b574:	2304      	movs	r3, #4
 800b576:	77fb      	strb	r3, [r7, #31]
 800b578:	e0c6      	b.n	800b708 <UART_SetConfig+0x348>
 800b57a:	2308      	movs	r3, #8
 800b57c:	77fb      	strb	r3, [r7, #31]
 800b57e:	e0c3      	b.n	800b708 <UART_SetConfig+0x348>
 800b580:	2310      	movs	r3, #16
 800b582:	77fb      	strb	r3, [r7, #31]
 800b584:	e0c0      	b.n	800b708 <UART_SetConfig+0x348>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a44      	ldr	r2, [pc, #272]	@ (800b69c <UART_SetConfig+0x2dc>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d125      	bne.n	800b5dc <UART_SetConfig+0x21c>
 800b590:	4b3e      	ldr	r3, [pc, #248]	@ (800b68c <UART_SetConfig+0x2cc>)
 800b592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b59a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b59e:	d017      	beq.n	800b5d0 <UART_SetConfig+0x210>
 800b5a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5a4:	d817      	bhi.n	800b5d6 <UART_SetConfig+0x216>
 800b5a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5aa:	d00b      	beq.n	800b5c4 <UART_SetConfig+0x204>
 800b5ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5b0:	d811      	bhi.n	800b5d6 <UART_SetConfig+0x216>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <UART_SetConfig+0x1fe>
 800b5b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5ba:	d006      	beq.n	800b5ca <UART_SetConfig+0x20a>
 800b5bc:	e00b      	b.n	800b5d6 <UART_SetConfig+0x216>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	77fb      	strb	r3, [r7, #31]
 800b5c2:	e0a1      	b.n	800b708 <UART_SetConfig+0x348>
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	77fb      	strb	r3, [r7, #31]
 800b5c8:	e09e      	b.n	800b708 <UART_SetConfig+0x348>
 800b5ca:	2304      	movs	r3, #4
 800b5cc:	77fb      	strb	r3, [r7, #31]
 800b5ce:	e09b      	b.n	800b708 <UART_SetConfig+0x348>
 800b5d0:	2308      	movs	r3, #8
 800b5d2:	77fb      	strb	r3, [r7, #31]
 800b5d4:	e098      	b.n	800b708 <UART_SetConfig+0x348>
 800b5d6:	2310      	movs	r3, #16
 800b5d8:	77fb      	strb	r3, [r7, #31]
 800b5da:	e095      	b.n	800b708 <UART_SetConfig+0x348>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a2f      	ldr	r2, [pc, #188]	@ (800b6a0 <UART_SetConfig+0x2e0>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d125      	bne.n	800b632 <UART_SetConfig+0x272>
 800b5e6:	4b29      	ldr	r3, [pc, #164]	@ (800b68c <UART_SetConfig+0x2cc>)
 800b5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b5f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b5f4:	d017      	beq.n	800b626 <UART_SetConfig+0x266>
 800b5f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b5fa:	d817      	bhi.n	800b62c <UART_SetConfig+0x26c>
 800b5fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b600:	d00b      	beq.n	800b61a <UART_SetConfig+0x25a>
 800b602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b606:	d811      	bhi.n	800b62c <UART_SetConfig+0x26c>
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d003      	beq.n	800b614 <UART_SetConfig+0x254>
 800b60c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b610:	d006      	beq.n	800b620 <UART_SetConfig+0x260>
 800b612:	e00b      	b.n	800b62c <UART_SetConfig+0x26c>
 800b614:	2301      	movs	r3, #1
 800b616:	77fb      	strb	r3, [r7, #31]
 800b618:	e076      	b.n	800b708 <UART_SetConfig+0x348>
 800b61a:	2302      	movs	r3, #2
 800b61c:	77fb      	strb	r3, [r7, #31]
 800b61e:	e073      	b.n	800b708 <UART_SetConfig+0x348>
 800b620:	2304      	movs	r3, #4
 800b622:	77fb      	strb	r3, [r7, #31]
 800b624:	e070      	b.n	800b708 <UART_SetConfig+0x348>
 800b626:	2308      	movs	r3, #8
 800b628:	77fb      	strb	r3, [r7, #31]
 800b62a:	e06d      	b.n	800b708 <UART_SetConfig+0x348>
 800b62c:	2310      	movs	r3, #16
 800b62e:	77fb      	strb	r3, [r7, #31]
 800b630:	e06a      	b.n	800b708 <UART_SetConfig+0x348>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a1b      	ldr	r2, [pc, #108]	@ (800b6a4 <UART_SetConfig+0x2e4>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d138      	bne.n	800b6ae <UART_SetConfig+0x2ee>
 800b63c:	4b13      	ldr	r3, [pc, #76]	@ (800b68c <UART_SetConfig+0x2cc>)
 800b63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b642:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b646:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b64a:	d017      	beq.n	800b67c <UART_SetConfig+0x2bc>
 800b64c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b650:	d82a      	bhi.n	800b6a8 <UART_SetConfig+0x2e8>
 800b652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b656:	d00b      	beq.n	800b670 <UART_SetConfig+0x2b0>
 800b658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b65c:	d824      	bhi.n	800b6a8 <UART_SetConfig+0x2e8>
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d003      	beq.n	800b66a <UART_SetConfig+0x2aa>
 800b662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b666:	d006      	beq.n	800b676 <UART_SetConfig+0x2b6>
 800b668:	e01e      	b.n	800b6a8 <UART_SetConfig+0x2e8>
 800b66a:	2300      	movs	r3, #0
 800b66c:	77fb      	strb	r3, [r7, #31]
 800b66e:	e04b      	b.n	800b708 <UART_SetConfig+0x348>
 800b670:	2302      	movs	r3, #2
 800b672:	77fb      	strb	r3, [r7, #31]
 800b674:	e048      	b.n	800b708 <UART_SetConfig+0x348>
 800b676:	2304      	movs	r3, #4
 800b678:	77fb      	strb	r3, [r7, #31]
 800b67a:	e045      	b.n	800b708 <UART_SetConfig+0x348>
 800b67c:	2308      	movs	r3, #8
 800b67e:	77fb      	strb	r3, [r7, #31]
 800b680:	e042      	b.n	800b708 <UART_SetConfig+0x348>
 800b682:	bf00      	nop
 800b684:	efff69f3 	.word	0xefff69f3
 800b688:	40011000 	.word	0x40011000
 800b68c:	40023800 	.word	0x40023800
 800b690:	40004400 	.word	0x40004400
 800b694:	40004800 	.word	0x40004800
 800b698:	40004c00 	.word	0x40004c00
 800b69c:	40005000 	.word	0x40005000
 800b6a0:	40011400 	.word	0x40011400
 800b6a4:	40007800 	.word	0x40007800
 800b6a8:	2310      	movs	r3, #16
 800b6aa:	77fb      	strb	r3, [r7, #31]
 800b6ac:	e02c      	b.n	800b708 <UART_SetConfig+0x348>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a72      	ldr	r2, [pc, #456]	@ (800b87c <UART_SetConfig+0x4bc>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d125      	bne.n	800b704 <UART_SetConfig+0x344>
 800b6b8:	4b71      	ldr	r3, [pc, #452]	@ (800b880 <UART_SetConfig+0x4c0>)
 800b6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b6c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b6c6:	d017      	beq.n	800b6f8 <UART_SetConfig+0x338>
 800b6c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b6cc:	d817      	bhi.n	800b6fe <UART_SetConfig+0x33e>
 800b6ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6d2:	d00b      	beq.n	800b6ec <UART_SetConfig+0x32c>
 800b6d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6d8:	d811      	bhi.n	800b6fe <UART_SetConfig+0x33e>
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d003      	beq.n	800b6e6 <UART_SetConfig+0x326>
 800b6de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6e2:	d006      	beq.n	800b6f2 <UART_SetConfig+0x332>
 800b6e4:	e00b      	b.n	800b6fe <UART_SetConfig+0x33e>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	77fb      	strb	r3, [r7, #31]
 800b6ea:	e00d      	b.n	800b708 <UART_SetConfig+0x348>
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	77fb      	strb	r3, [r7, #31]
 800b6f0:	e00a      	b.n	800b708 <UART_SetConfig+0x348>
 800b6f2:	2304      	movs	r3, #4
 800b6f4:	77fb      	strb	r3, [r7, #31]
 800b6f6:	e007      	b.n	800b708 <UART_SetConfig+0x348>
 800b6f8:	2308      	movs	r3, #8
 800b6fa:	77fb      	strb	r3, [r7, #31]
 800b6fc:	e004      	b.n	800b708 <UART_SetConfig+0x348>
 800b6fe:	2310      	movs	r3, #16
 800b700:	77fb      	strb	r3, [r7, #31]
 800b702:	e001      	b.n	800b708 <UART_SetConfig+0x348>
 800b704:	2310      	movs	r3, #16
 800b706:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	69db      	ldr	r3, [r3, #28]
 800b70c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b710:	d15b      	bne.n	800b7ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b712:	7ffb      	ldrb	r3, [r7, #31]
 800b714:	2b08      	cmp	r3, #8
 800b716:	d828      	bhi.n	800b76a <UART_SetConfig+0x3aa>
 800b718:	a201      	add	r2, pc, #4	@ (adr r2, 800b720 <UART_SetConfig+0x360>)
 800b71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71e:	bf00      	nop
 800b720:	0800b745 	.word	0x0800b745
 800b724:	0800b74d 	.word	0x0800b74d
 800b728:	0800b755 	.word	0x0800b755
 800b72c:	0800b76b 	.word	0x0800b76b
 800b730:	0800b75b 	.word	0x0800b75b
 800b734:	0800b76b 	.word	0x0800b76b
 800b738:	0800b76b 	.word	0x0800b76b
 800b73c:	0800b76b 	.word	0x0800b76b
 800b740:	0800b763 	.word	0x0800b763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b744:	f7fd ffca 	bl	80096dc <HAL_RCC_GetPCLK1Freq>
 800b748:	61b8      	str	r0, [r7, #24]
        break;
 800b74a:	e013      	b.n	800b774 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b74c:	f7fd ffda 	bl	8009704 <HAL_RCC_GetPCLK2Freq>
 800b750:	61b8      	str	r0, [r7, #24]
        break;
 800b752:	e00f      	b.n	800b774 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b754:	4b4b      	ldr	r3, [pc, #300]	@ (800b884 <UART_SetConfig+0x4c4>)
 800b756:	61bb      	str	r3, [r7, #24]
        break;
 800b758:	e00c      	b.n	800b774 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b75a:	f7fd feed 	bl	8009538 <HAL_RCC_GetSysClockFreq>
 800b75e:	61b8      	str	r0, [r7, #24]
        break;
 800b760:	e008      	b.n	800b774 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b766:	61bb      	str	r3, [r7, #24]
        break;
 800b768:	e004      	b.n	800b774 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b76a:	2300      	movs	r3, #0
 800b76c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	77bb      	strb	r3, [r7, #30]
        break;
 800b772:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d074      	beq.n	800b864 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	005a      	lsls	r2, r3, #1
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	085b      	lsrs	r3, r3, #1
 800b784:	441a      	add	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b78e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	2b0f      	cmp	r3, #15
 800b794:	d916      	bls.n	800b7c4 <UART_SetConfig+0x404>
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b79c:	d212      	bcs.n	800b7c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	f023 030f 	bic.w	r3, r3, #15
 800b7a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	085b      	lsrs	r3, r3, #1
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	89fb      	ldrh	r3, [r7, #14]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	89fa      	ldrh	r2, [r7, #14]
 800b7c0:	60da      	str	r2, [r3, #12]
 800b7c2:	e04f      	b.n	800b864 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	77bb      	strb	r3, [r7, #30]
 800b7c8:	e04c      	b.n	800b864 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7ca:	7ffb      	ldrb	r3, [r7, #31]
 800b7cc:	2b08      	cmp	r3, #8
 800b7ce:	d828      	bhi.n	800b822 <UART_SetConfig+0x462>
 800b7d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b7d8 <UART_SetConfig+0x418>)
 800b7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d6:	bf00      	nop
 800b7d8:	0800b7fd 	.word	0x0800b7fd
 800b7dc:	0800b805 	.word	0x0800b805
 800b7e0:	0800b80d 	.word	0x0800b80d
 800b7e4:	0800b823 	.word	0x0800b823
 800b7e8:	0800b813 	.word	0x0800b813
 800b7ec:	0800b823 	.word	0x0800b823
 800b7f0:	0800b823 	.word	0x0800b823
 800b7f4:	0800b823 	.word	0x0800b823
 800b7f8:	0800b81b 	.word	0x0800b81b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7fc:	f7fd ff6e 	bl	80096dc <HAL_RCC_GetPCLK1Freq>
 800b800:	61b8      	str	r0, [r7, #24]
        break;
 800b802:	e013      	b.n	800b82c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b804:	f7fd ff7e 	bl	8009704 <HAL_RCC_GetPCLK2Freq>
 800b808:	61b8      	str	r0, [r7, #24]
        break;
 800b80a:	e00f      	b.n	800b82c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b80c:	4b1d      	ldr	r3, [pc, #116]	@ (800b884 <UART_SetConfig+0x4c4>)
 800b80e:	61bb      	str	r3, [r7, #24]
        break;
 800b810:	e00c      	b.n	800b82c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b812:	f7fd fe91 	bl	8009538 <HAL_RCC_GetSysClockFreq>
 800b816:	61b8      	str	r0, [r7, #24]
        break;
 800b818:	e008      	b.n	800b82c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b81a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b81e:	61bb      	str	r3, [r7, #24]
        break;
 800b820:	e004      	b.n	800b82c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	77bb      	strb	r3, [r7, #30]
        break;
 800b82a:	bf00      	nop
    }

    if (pclk != 0U)
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d018      	beq.n	800b864 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	085a      	lsrs	r2, r3, #1
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	441a      	add	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	fbb2 f3f3 	udiv	r3, r2, r3
 800b844:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	2b0f      	cmp	r3, #15
 800b84a:	d909      	bls.n	800b860 <UART_SetConfig+0x4a0>
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b852:	d205      	bcs.n	800b860 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	b29a      	uxth	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60da      	str	r2, [r3, #12]
 800b85e:	e001      	b.n	800b864 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b870:	7fbb      	ldrb	r3, [r7, #30]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3720      	adds	r7, #32
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	40007c00 	.word	0x40007c00
 800b880:	40023800 	.word	0x40023800
 800b884:	00f42400 	.word	0x00f42400

0800b888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00a      	beq.n	800b8b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	430a      	orrs	r2, r1
 800b8b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8b6:	f003 0302 	and.w	r3, r3, #2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	430a      	orrs	r2, r1
 800b8d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8d8:	f003 0304 	and.w	r3, r3, #4
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00a      	beq.n	800b8f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8fa:	f003 0308 	and.w	r3, r3, #8
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00a      	beq.n	800b918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	430a      	orrs	r2, r1
 800b916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91c:	f003 0310 	and.w	r3, r3, #16
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00a      	beq.n	800b93a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	430a      	orrs	r2, r1
 800b938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b93e:	f003 0320 	and.w	r3, r3, #32
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	430a      	orrs	r2, r1
 800b95a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d01a      	beq.n	800b99e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	430a      	orrs	r2, r1
 800b97c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b986:	d10a      	bne.n	800b99e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	430a      	orrs	r2, r1
 800b99c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00a      	beq.n	800b9c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	430a      	orrs	r2, r1
 800b9be:	605a      	str	r2, [r3, #4]
  }
}
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af02      	add	r7, sp, #8
 800b9d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9dc:	f7fa f9fe 	bl	8005ddc <HAL_GetTick>
 800b9e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0308 	and.w	r3, r3, #8
 800b9ec:	2b08      	cmp	r3, #8
 800b9ee:	d10e      	bne.n	800ba0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f81b 	bl	800ba3a <UART_WaitOnFlagUntilTimeout>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e011      	b.n	800ba32 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2220      	movs	r2, #32
 800ba12:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2220      	movs	r2, #32
 800ba18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b09c      	sub	sp, #112	@ 0x70
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	60f8      	str	r0, [r7, #12]
 800ba42:	60b9      	str	r1, [r7, #8]
 800ba44:	603b      	str	r3, [r7, #0]
 800ba46:	4613      	mov	r3, r2
 800ba48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba4a:	e0a7      	b.n	800bb9c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba52:	f000 80a3 	beq.w	800bb9c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba56:	f7fa f9c1 	bl	8005ddc <HAL_GetTick>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d302      	bcc.n	800ba6c <UART_WaitOnFlagUntilTimeout+0x32>
 800ba66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d13f      	bne.n	800baec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba74:	e853 3f00 	ldrex	r3, [r3]
 800ba78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba7c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800ba80:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	461a      	mov	r2, r3
 800ba88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ba90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba92:	e841 2300 	strex	r3, r2, [r1]
 800ba96:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ba98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1e6      	bne.n	800ba6c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3308      	adds	r3, #8
 800baa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa8:	e853 3f00 	ldrex	r3, [r3]
 800baac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800baae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab0:	f023 0301 	bic.w	r3, r3, #1
 800bab4:	663b      	str	r3, [r7, #96]	@ 0x60
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3308      	adds	r3, #8
 800babc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800babe:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bac0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bac6:	e841 2300 	strex	r3, r2, [r1]
 800baca:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bacc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1e5      	bne.n	800ba9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2220      	movs	r2, #32
 800bad6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2220      	movs	r2, #32
 800badc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	e068      	b.n	800bbbe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f003 0304 	and.w	r3, r3, #4
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d050      	beq.n	800bb9c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	69db      	ldr	r3, [r3, #28]
 800bb00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb08:	d148      	bne.n	800bb9c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb24:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bb28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb32:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb34:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e6      	bne.n	800bb14 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	3308      	adds	r3, #8
 800bb4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	e853 3f00 	ldrex	r3, [r3]
 800bb54:	613b      	str	r3, [r7, #16]
   return(result);
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	f023 0301 	bic.w	r3, r3, #1
 800bb5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	3308      	adds	r3, #8
 800bb64:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bb66:	623a      	str	r2, [r7, #32]
 800bb68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6a:	69f9      	ldr	r1, [r7, #28]
 800bb6c:	6a3a      	ldr	r2, [r7, #32]
 800bb6e:	e841 2300 	strex	r3, r2, [r1]
 800bb72:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1e5      	bne.n	800bb46 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2220      	movs	r2, #32
 800bb7e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2220      	movs	r2, #32
 800bb84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2220      	movs	r2, #32
 800bb8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	e010      	b.n	800bbbe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	69da      	ldr	r2, [r3, #28]
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	4013      	ands	r3, r2
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	bf0c      	ite	eq
 800bbac:	2301      	moveq	r3, #1
 800bbae:	2300      	movne	r3, #0
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	79fb      	ldrb	r3, [r7, #7]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	f43f af48 	beq.w	800ba4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3770      	adds	r7, #112	@ 0x70
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
	...

0800bbc8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d121      	bne.n	800bc1e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	4b27      	ldr	r3, [pc, #156]	@ (800bc7c <FMC_SDRAM_Init+0xb4>)
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	6851      	ldr	r1, [r2, #4]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	6892      	ldr	r2, [r2, #8]
 800bbea:	4311      	orrs	r1, r2
 800bbec:	683a      	ldr	r2, [r7, #0]
 800bbee:	68d2      	ldr	r2, [r2, #12]
 800bbf0:	4311      	orrs	r1, r2
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	6912      	ldr	r2, [r2, #16]
 800bbf6:	4311      	orrs	r1, r2
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	6952      	ldr	r2, [r2, #20]
 800bbfc:	4311      	orrs	r1, r2
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	6992      	ldr	r2, [r2, #24]
 800bc02:	4311      	orrs	r1, r2
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	69d2      	ldr	r2, [r2, #28]
 800bc08:	4311      	orrs	r1, r2
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	6a12      	ldr	r2, [r2, #32]
 800bc0e:	4311      	orrs	r1, r2
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bc14:	430a      	orrs	r2, r1
 800bc16:	431a      	orrs	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	601a      	str	r2, [r3, #0]
 800bc1c:	e026      	b.n	800bc6c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	69d9      	ldr	r1, [r3, #28]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	4319      	orrs	r1, r3
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc34:	430b      	orrs	r3, r1
 800bc36:	431a      	orrs	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685a      	ldr	r2, [r3, #4]
 800bc40:	4b0e      	ldr	r3, [pc, #56]	@ (800bc7c <FMC_SDRAM_Init+0xb4>)
 800bc42:	4013      	ands	r3, r2
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	6851      	ldr	r1, [r2, #4]
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	6892      	ldr	r2, [r2, #8]
 800bc4c:	4311      	orrs	r1, r2
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	68d2      	ldr	r2, [r2, #12]
 800bc52:	4311      	orrs	r1, r2
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	6912      	ldr	r2, [r2, #16]
 800bc58:	4311      	orrs	r1, r2
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	6952      	ldr	r2, [r2, #20]
 800bc5e:	4311      	orrs	r1, r2
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	6992      	ldr	r2, [r2, #24]
 800bc64:	430a      	orrs	r2, r1
 800bc66:	431a      	orrs	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	ffff8000 	.word	0xffff8000

0800bc80 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d128      	bne.n	800bce4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	1e59      	subs	r1, r3, #1
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	3b01      	subs	r3, #1
 800bca6:	011b      	lsls	r3, r3, #4
 800bca8:	4319      	orrs	r1, r3
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	021b      	lsls	r3, r3, #8
 800bcb2:	4319      	orrs	r1, r3
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	031b      	lsls	r3, r3, #12
 800bcbc:	4319      	orrs	r1, r3
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	041b      	lsls	r3, r3, #16
 800bcc6:	4319      	orrs	r1, r3
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	051b      	lsls	r3, r3, #20
 800bcd0:	4319      	orrs	r1, r3
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	699b      	ldr	r3, [r3, #24]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	061b      	lsls	r3, r3, #24
 800bcda:	430b      	orrs	r3, r1
 800bcdc:	431a      	orrs	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	609a      	str	r2, [r3, #8]
 800bce2:	e02d      	b.n	800bd40 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	689a      	ldr	r2, [r3, #8]
 800bce8:	4b19      	ldr	r3, [pc, #100]	@ (800bd50 <FMC_SDRAM_Timing_Init+0xd0>)
 800bcea:	4013      	ands	r3, r2
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	68d2      	ldr	r2, [r2, #12]
 800bcf0:	3a01      	subs	r2, #1
 800bcf2:	0311      	lsls	r1, r2, #12
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	6952      	ldr	r2, [r2, #20]
 800bcf8:	3a01      	subs	r2, #1
 800bcfa:	0512      	lsls	r2, r2, #20
 800bcfc:	430a      	orrs	r2, r1
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	1e59      	subs	r1, r3, #1
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	3b01      	subs	r3, #1
 800bd18:	011b      	lsls	r3, r3, #4
 800bd1a:	4319      	orrs	r1, r3
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	021b      	lsls	r3, r3, #8
 800bd24:	4319      	orrs	r1, r3
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	041b      	lsls	r3, r3, #16
 800bd2e:	4319      	orrs	r1, r3
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	3b01      	subs	r3, #1
 800bd36:	061b      	lsls	r3, r3, #24
 800bd38:	430b      	orrs	r3, r1
 800bd3a:	431a      	orrs	r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3714      	adds	r7, #20
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr
 800bd4e:	bf00      	nop
 800bd50:	ff0f0fff 	.word	0xff0f0fff

0800bd54 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	691a      	ldr	r2, [r3, #16]
 800bd64:	4b0c      	ldr	r3, [pc, #48]	@ (800bd98 <FMC_SDRAM_SendCommand+0x44>)
 800bd66:	4013      	ands	r3, r2
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	6811      	ldr	r1, [r2, #0]
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	6852      	ldr	r2, [r2, #4]
 800bd70:	4311      	orrs	r1, r2
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	6892      	ldr	r2, [r2, #8]
 800bd76:	3a01      	subs	r2, #1
 800bd78:	0152      	lsls	r2, r2, #5
 800bd7a:	4311      	orrs	r1, r2
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	68d2      	ldr	r2, [r2, #12]
 800bd80:	0252      	lsls	r2, r2, #9
 800bd82:	430a      	orrs	r2, r1
 800bd84:	431a      	orrs	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr
 800bd98:	ffc00000 	.word	0xffc00000

0800bd9c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	695a      	ldr	r2, [r3, #20]
 800bdaa:	4b07      	ldr	r3, [pc, #28]	@ (800bdc8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800bdac:	4013      	ands	r3, r2
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	0052      	lsls	r2, r2, #1
 800bdb2:	431a      	orrs	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	370c      	adds	r7, #12
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	ffffc001 	.word	0xffffc001

0800bdcc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bdda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdde:	2b84      	cmp	r3, #132	@ 0x84
 800bde0:	d005      	beq.n	800bdee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bde2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	4413      	add	r3, r2
 800bdea:	3303      	adds	r3, #3
 800bdec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bdee:	68fb      	ldr	r3, [r7, #12]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800be00:	f001 f86c 	bl	800cedc <vTaskStartScheduler>
  
  return osOK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	bd80      	pop	{r7, pc}

0800be0a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800be0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be0c:	b089      	sub	sp, #36	@ 0x24
 800be0e:	af04      	add	r7, sp, #16
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d020      	beq.n	800be5e <osThreadCreate+0x54>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d01c      	beq.n	800be5e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685c      	ldr	r4, [r3, #4]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	691e      	ldr	r6, [r3, #16]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff ffc8 	bl	800bdcc <makeFreeRtosPriority>
 800be3c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	695b      	ldr	r3, [r3, #20]
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be46:	9202      	str	r2, [sp, #8]
 800be48:	9301      	str	r3, [sp, #4]
 800be4a:	9100      	str	r1, [sp, #0]
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	4632      	mov	r2, r6
 800be50:	4629      	mov	r1, r5
 800be52:	4620      	mov	r0, r4
 800be54:	f000 fdcc 	bl	800c9f0 <xTaskCreateStatic>
 800be58:	4603      	mov	r3, r0
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	e01c      	b.n	800be98 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	685c      	ldr	r4, [r3, #4]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be6a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff ffaa 	bl	800bdcc <makeFreeRtosPriority>
 800be78:	4602      	mov	r2, r0
 800be7a:	f107 030c 	add.w	r3, r7, #12
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	9200      	str	r2, [sp, #0]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	4632      	mov	r2, r6
 800be86:	4629      	mov	r1, r5
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 fe17 	bl	800cabc <xTaskCreate>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b01      	cmp	r3, #1
 800be92:	d001      	beq.n	800be98 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800be94:	2300      	movs	r3, #0
 800be96:	e000      	b.n	800be9a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800be98:	68fb      	ldr	r3, [r7, #12]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bea2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b084      	sub	sp, #16
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d001      	beq.n	800beb8 <osDelay+0x16>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	e000      	b.n	800beba <osDelay+0x18>
 800beb8:	2301      	movs	r3, #1
 800beba:	4618      	mov	r0, r3
 800bebc:	f000 ffd6 	bl	800ce6c <vTaskDelay>
  
  return osOK;
 800bec0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b082      	sub	sp, #8
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d007      	beq.n	800beea <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	4619      	mov	r1, r3
 800bee0:	2001      	movs	r0, #1
 800bee2:	f000 fa46 	bl	800c372 <xQueueCreateMutexStatic>
 800bee6:	4603      	mov	r3, r0
 800bee8:	e003      	b.n	800bef2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800beea:	2001      	movs	r0, #1
 800beec:	f000 fa29 	bl	800c342 <xQueueCreateMutex>
 800bef0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800befa:	b480      	push	{r7}
 800befc:	b083      	sub	sp, #12
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f103 0208 	add.w	r2, r3, #8
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf12:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f103 0208 	add.w	r2, r3, #8
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f103 0208 	add.w	r2, r3, #8
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b083      	sub	sp, #12
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689a      	ldr	r2, [r3, #8]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	683a      	ldr	r2, [r7, #0]
 800bf7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	1c5a      	adds	r2, r3, #1
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	601a      	str	r2, [r3, #0]
}
 800bf90:	bf00      	nop
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb2:	d103      	bne.n	800bfbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	60fb      	str	r3, [r7, #12]
 800bfba:	e00c      	b.n	800bfd6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	60fb      	str	r3, [r7, #12]
 800bfc2:	e002      	b.n	800bfca <vListInsert+0x2e>
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	60fb      	str	r3, [r7, #12]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d2f6      	bcs.n	800bfc4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	685a      	ldr	r2, [r3, #4]
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	601a      	str	r2, [r3, #0]
}
 800c002:	bf00      	nop
 800c004:	3714      	adds	r7, #20
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr

0800c00e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c00e:	b480      	push	{r7}
 800c010:	b085      	sub	sp, #20
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	6892      	ldr	r2, [r2, #8]
 800c024:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	6852      	ldr	r2, [r2, #4]
 800c02e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	429a      	cmp	r2, r3
 800c038:	d103      	bne.n	800c042 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	689a      	ldr	r2, [r3, #8]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	1e5a      	subs	r2, r3, #1
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
	...

0800c064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10d      	bne.n	800c094 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07c:	b672      	cpsid	i
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	b662      	cpsie	i
 800c08c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c08e:	bf00      	nop
 800c090:	bf00      	nop
 800c092:	e7fd      	b.n	800c090 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c094:	f001 feba 	bl	800de0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0a0:	68f9      	ldr	r1, [r7, #12]
 800c0a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c0a4:	fb01 f303 	mul.w	r3, r1, r3
 800c0a8:	441a      	add	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	68f9      	ldr	r1, [r7, #12]
 800c0c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c0ca:	fb01 f303 	mul.w	r3, r1, r3
 800c0ce:	441a      	add	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	22ff      	movs	r2, #255	@ 0xff
 800c0d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	22ff      	movs	r2, #255	@ 0xff
 800c0e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d114      	bne.n	800c114 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d01a      	beq.n	800c128 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	3310      	adds	r3, #16
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f001 f966 	bl	800d3c8 <xTaskRemoveFromEventList>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d012      	beq.n	800c128 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c102:	4b0d      	ldr	r3, [pc, #52]	@ (800c138 <xQueueGenericReset+0xd4>)
 800c104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	e009      	b.n	800c128 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3310      	adds	r3, #16
 800c118:	4618      	mov	r0, r3
 800c11a:	f7ff feee 	bl	800befa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	3324      	adds	r3, #36	@ 0x24
 800c122:	4618      	mov	r0, r3
 800c124:	f7ff fee9 	bl	800befa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c128:	f001 fea6 	bl	800de78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c12c:	2301      	movs	r3, #1
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b08e      	sub	sp, #56	@ 0x38
 800c140:	af02      	add	r7, sp, #8
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10d      	bne.n	800c16c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c154:	b672      	cpsid	i
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	b662      	cpsie	i
 800c164:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c166:	bf00      	nop
 800c168:	bf00      	nop
 800c16a:	e7fd      	b.n	800c168 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10d      	bne.n	800c18e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c176:	b672      	cpsid	i
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	b662      	cpsie	i
 800c186:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c188:	bf00      	nop
 800c18a:	bf00      	nop
 800c18c:	e7fd      	b.n	800c18a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d002      	beq.n	800c19a <xQueueGenericCreateStatic+0x5e>
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d001      	beq.n	800c19e <xQueueGenericCreateStatic+0x62>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e000      	b.n	800c1a0 <xQueueGenericCreateStatic+0x64>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10d      	bne.n	800c1c0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a8:	b672      	cpsid	i
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	b662      	cpsie	i
 800c1b8:	623b      	str	r3, [r7, #32]
}
 800c1ba:	bf00      	nop
 800c1bc:	bf00      	nop
 800c1be:	e7fd      	b.n	800c1bc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d102      	bne.n	800c1cc <xQueueGenericCreateStatic+0x90>
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <xQueueGenericCreateStatic+0x94>
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e000      	b.n	800c1d2 <xQueueGenericCreateStatic+0x96>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10d      	bne.n	800c1f2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1da:	b672      	cpsid	i
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	b662      	cpsie	i
 800c1ea:	61fb      	str	r3, [r7, #28]
}
 800c1ec:	bf00      	nop
 800c1ee:	bf00      	nop
 800c1f0:	e7fd      	b.n	800c1ee <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c1f2:	2348      	movs	r3, #72	@ 0x48
 800c1f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	2b48      	cmp	r3, #72	@ 0x48
 800c1fa:	d00d      	beq.n	800c218 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c200:	b672      	cpsid	i
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	b662      	cpsie	i
 800c210:	61bb      	str	r3, [r7, #24]
}
 800c212:	bf00      	nop
 800c214:	bf00      	nop
 800c216:	e7fd      	b.n	800c214 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c218:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00d      	beq.n	800c240 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c22c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4613      	mov	r3, r2
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	68b9      	ldr	r1, [r7, #8]
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f000 f848 	bl	800c2d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c242:	4618      	mov	r0, r3
 800c244:	3730      	adds	r7, #48	@ 0x30
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b08a      	sub	sp, #40	@ 0x28
 800c24e:	af02      	add	r7, sp, #8
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	4613      	mov	r3, r2
 800c256:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10d      	bne.n	800c27a <xQueueGenericCreate+0x30>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c262:	b672      	cpsid	i
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	b662      	cpsie	i
 800c272:	613b      	str	r3, [r7, #16]
}
 800c274:	bf00      	nop
 800c276:	bf00      	nop
 800c278:	e7fd      	b.n	800c276 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d102      	bne.n	800c286 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c280:	2300      	movs	r3, #0
 800c282:	61fb      	str	r3, [r7, #28]
 800c284:	e004      	b.n	800c290 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	fb02 f303 	mul.w	r3, r2, r3
 800c28e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	3348      	adds	r3, #72	@ 0x48
 800c294:	4618      	mov	r0, r3
 800c296:	f001 fea1 	bl	800dfdc <pvPortMalloc>
 800c29a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d011      	beq.n	800c2c6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	3348      	adds	r3, #72	@ 0x48
 800c2aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2b4:	79fa      	ldrb	r2, [r7, #7]
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	68b9      	ldr	r1, [r7, #8]
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f000 f805 	bl	800c2d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2c6:	69bb      	ldr	r3, [r7, #24]
	}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3720      	adds	r7, #32
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
 800c2dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d103      	bne.n	800c2ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	69ba      	ldr	r2, [r7, #24]
 800c2e8:	601a      	str	r2, [r3, #0]
 800c2ea:	e002      	b.n	800c2f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2fe:	2101      	movs	r1, #1
 800c300:	69b8      	ldr	r0, [r7, #24]
 800c302:	f7ff feaf 	bl	800c064 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c306:	bf00      	nop
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b082      	sub	sp, #8
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00e      	beq.n	800c33a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c32e:	2300      	movs	r3, #0
 800c330:	2200      	movs	r2, #0
 800c332:	2100      	movs	r1, #0
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f837 	bl	800c3a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c33a:	bf00      	nop
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c342:	b580      	push	{r7, lr}
 800c344:	b086      	sub	sp, #24
 800c346:	af00      	add	r7, sp, #0
 800c348:	4603      	mov	r3, r0
 800c34a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c34c:	2301      	movs	r3, #1
 800c34e:	617b      	str	r3, [r7, #20]
 800c350:	2300      	movs	r3, #0
 800c352:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	461a      	mov	r2, r3
 800c358:	6939      	ldr	r1, [r7, #16]
 800c35a:	6978      	ldr	r0, [r7, #20]
 800c35c:	f7ff ff75 	bl	800c24a <xQueueGenericCreate>
 800c360:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f7ff ffd3 	bl	800c30e <prvInitialiseMutex>

		return xNewQueue;
 800c368:	68fb      	ldr	r3, [r7, #12]
	}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c372:	b580      	push	{r7, lr}
 800c374:	b088      	sub	sp, #32
 800c376:	af02      	add	r7, sp, #8
 800c378:	4603      	mov	r3, r0
 800c37a:	6039      	str	r1, [r7, #0]
 800c37c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c37e:	2301      	movs	r3, #1
 800c380:	617b      	str	r3, [r7, #20]
 800c382:	2300      	movs	r3, #0
 800c384:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c386:	79fb      	ldrb	r3, [r7, #7]
 800c388:	9300      	str	r3, [sp, #0]
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	2200      	movs	r2, #0
 800c38e:	6939      	ldr	r1, [r7, #16]
 800c390:	6978      	ldr	r0, [r7, #20]
 800c392:	f7ff fed3 	bl	800c13c <xQueueGenericCreateStatic>
 800c396:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f7ff ffb8 	bl	800c30e <prvInitialiseMutex>

		return xNewQueue;
 800c39e:	68fb      	ldr	r3, [r7, #12]
	}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3718      	adds	r7, #24
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b08e      	sub	sp, #56	@ 0x38
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10d      	bne.n	800c3e0 <xQueueGenericSend+0x38>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c8:	b672      	cpsid	i
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	b662      	cpsie	i
 800c3d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c3da:	bf00      	nop
 800c3dc:	bf00      	nop
 800c3de:	e7fd      	b.n	800c3dc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d103      	bne.n	800c3ee <xQueueGenericSend+0x46>
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d101      	bne.n	800c3f2 <xQueueGenericSend+0x4a>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e000      	b.n	800c3f4 <xQueueGenericSend+0x4c>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10d      	bne.n	800c414 <xQueueGenericSend+0x6c>
	__asm volatile
 800c3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3fc:	b672      	cpsid	i
 800c3fe:	f383 8811 	msr	BASEPRI, r3
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	f3bf 8f4f 	dsb	sy
 800c40a:	b662      	cpsie	i
 800c40c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c40e:	bf00      	nop
 800c410:	bf00      	nop
 800c412:	e7fd      	b.n	800c410 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	2b02      	cmp	r3, #2
 800c418:	d103      	bne.n	800c422 <xQueueGenericSend+0x7a>
 800c41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c41c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d101      	bne.n	800c426 <xQueueGenericSend+0x7e>
 800c422:	2301      	movs	r3, #1
 800c424:	e000      	b.n	800c428 <xQueueGenericSend+0x80>
 800c426:	2300      	movs	r3, #0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10d      	bne.n	800c448 <xQueueGenericSend+0xa0>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c430:	b672      	cpsid	i
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	b662      	cpsie	i
 800c440:	623b      	str	r3, [r7, #32]
}
 800c442:	bf00      	nop
 800c444:	bf00      	nop
 800c446:	e7fd      	b.n	800c444 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c448:	f001 f98c 	bl	800d764 <xTaskGetSchedulerState>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d102      	bne.n	800c458 <xQueueGenericSend+0xb0>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <xQueueGenericSend+0xb4>
 800c458:	2301      	movs	r3, #1
 800c45a:	e000      	b.n	800c45e <xQueueGenericSend+0xb6>
 800c45c:	2300      	movs	r3, #0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10d      	bne.n	800c47e <xQueueGenericSend+0xd6>
	__asm volatile
 800c462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c466:	b672      	cpsid	i
 800c468:	f383 8811 	msr	BASEPRI, r3
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	b662      	cpsie	i
 800c476:	61fb      	str	r3, [r7, #28]
}
 800c478:	bf00      	nop
 800c47a:	bf00      	nop
 800c47c:	e7fd      	b.n	800c47a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c47e:	f001 fcc5 	bl	800de0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d302      	bcc.n	800c494 <xQueueGenericSend+0xec>
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	2b02      	cmp	r3, #2
 800c492:	d129      	bne.n	800c4e8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c494:	683a      	ldr	r2, [r7, #0]
 800c496:	68b9      	ldr	r1, [r7, #8]
 800c498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c49a:	f000 f9bf 	bl	800c81c <prvCopyDataToQueue>
 800c49e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d010      	beq.n	800c4ca <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4aa:	3324      	adds	r3, #36	@ 0x24
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 ff8b 	bl	800d3c8 <xTaskRemoveFromEventList>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d013      	beq.n	800c4e0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c4b8:	4b3f      	ldr	r3, [pc, #252]	@ (800c5b8 <xQueueGenericSend+0x210>)
 800c4ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4be:	601a      	str	r2, [r3, #0]
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	e00a      	b.n	800c4e0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d007      	beq.n	800c4e0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c4d0:	4b39      	ldr	r3, [pc, #228]	@ (800c5b8 <xQueueGenericSend+0x210>)
 800c4d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4d6:	601a      	str	r2, [r3, #0]
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c4e0:	f001 fcca 	bl	800de78 <vPortExitCritical>
				return pdPASS;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e063      	b.n	800c5b0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d103      	bne.n	800c4f6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4ee:	f001 fcc3 	bl	800de78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	e05c      	b.n	800c5b0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d106      	bne.n	800c50a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4fc:	f107 0314 	add.w	r3, r7, #20
 800c500:	4618      	mov	r0, r3
 800c502:	f000 ffc7 	bl	800d494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c506:	2301      	movs	r3, #1
 800c508:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c50a:	f001 fcb5 	bl	800de78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c50e:	f000 fd53 	bl	800cfb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c512:	f001 fc7b 	bl	800de0c <vPortEnterCritical>
 800c516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c51c:	b25b      	sxtb	r3, r3
 800c51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c522:	d103      	bne.n	800c52c <xQueueGenericSend+0x184>
 800c524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c526:	2200      	movs	r2, #0
 800c528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c532:	b25b      	sxtb	r3, r3
 800c534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c538:	d103      	bne.n	800c542 <xQueueGenericSend+0x19a>
 800c53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53c:	2200      	movs	r2, #0
 800c53e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c542:	f001 fc99 	bl	800de78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c546:	1d3a      	adds	r2, r7, #4
 800c548:	f107 0314 	add.w	r3, r7, #20
 800c54c:	4611      	mov	r1, r2
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 ffb6 	bl	800d4c0 <xTaskCheckForTimeOut>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d124      	bne.n	800c5a4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c55a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c55c:	f000 fa30 	bl	800c9c0 <prvIsQueueFull>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d018      	beq.n	800c598 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c568:	3310      	adds	r3, #16
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	4611      	mov	r1, r2
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 ff02 	bl	800d378 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c576:	f000 f9bb 	bl	800c8f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c57a:	f000 fd2b 	bl	800cfd4 <xTaskResumeAll>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	f47f af7c 	bne.w	800c47e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800c586:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b8 <xQueueGenericSend+0x210>)
 800c588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c58c:	601a      	str	r2, [r3, #0]
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	e772      	b.n	800c47e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c59a:	f000 f9a9 	bl	800c8f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c59e:	f000 fd19 	bl	800cfd4 <xTaskResumeAll>
 800c5a2:	e76c      	b.n	800c47e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c5a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5a6:	f000 f9a3 	bl	800c8f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5aa:	f000 fd13 	bl	800cfd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c5ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3738      	adds	r7, #56	@ 0x38
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	e000ed04 	.word	0xe000ed04

0800c5bc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b08e      	sub	sp, #56	@ 0x38
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d10d      	bne.n	800c5f4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800c5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5dc:	b672      	cpsid	i
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	b662      	cpsie	i
 800c5ec:	623b      	str	r3, [r7, #32]
}
 800c5ee:	bf00      	nop
 800c5f0:	bf00      	nop
 800c5f2:	e7fd      	b.n	800c5f0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00d      	beq.n	800c618 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c600:	b672      	cpsid	i
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	b662      	cpsie	i
 800c610:	61fb      	str	r3, [r7, #28]
}
 800c612:	bf00      	nop
 800c614:	bf00      	nop
 800c616:	e7fd      	b.n	800c614 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c618:	f001 f8a4 	bl	800d764 <xTaskGetSchedulerState>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d102      	bne.n	800c628 <xQueueSemaphoreTake+0x6c>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d101      	bne.n	800c62c <xQueueSemaphoreTake+0x70>
 800c628:	2301      	movs	r3, #1
 800c62a:	e000      	b.n	800c62e <xQueueSemaphoreTake+0x72>
 800c62c:	2300      	movs	r3, #0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10d      	bne.n	800c64e <xQueueSemaphoreTake+0x92>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c636:	b672      	cpsid	i
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	b662      	cpsie	i
 800c646:	61bb      	str	r3, [r7, #24]
}
 800c648:	bf00      	nop
 800c64a:	bf00      	nop
 800c64c:	e7fd      	b.n	800c64a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c64e:	f001 fbdd 	bl	800de0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c656:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d024      	beq.n	800c6a8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c660:	1e5a      	subs	r2, r3, #1
 800c662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c664:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d104      	bne.n	800c678 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c66e:	f001 fa43 	bl	800daf8 <pvTaskIncrementMutexHeldCount>
 800c672:	4602      	mov	r2, r0
 800c674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c676:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00f      	beq.n	800c6a0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c682:	3310      	adds	r3, #16
 800c684:	4618      	mov	r0, r3
 800c686:	f000 fe9f 	bl	800d3c8 <xTaskRemoveFromEventList>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d007      	beq.n	800c6a0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c690:	4b55      	ldr	r3, [pc, #340]	@ (800c7e8 <xQueueSemaphoreTake+0x22c>)
 800c692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6a0:	f001 fbea 	bl	800de78 <vPortExitCritical>
				return pdPASS;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e09a      	b.n	800c7de <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d114      	bne.n	800c6d8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00d      	beq.n	800c6d0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b8:	b672      	cpsid	i
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	b662      	cpsie	i
 800c6c8:	617b      	str	r3, [r7, #20]
}
 800c6ca:	bf00      	nop
 800c6cc:	bf00      	nop
 800c6ce:	e7fd      	b.n	800c6cc <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c6d0:	f001 fbd2 	bl	800de78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	e082      	b.n	800c7de <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d106      	bne.n	800c6ec <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6de:	f107 030c 	add.w	r3, r7, #12
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f000 fed6 	bl	800d494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6ec:	f001 fbc4 	bl	800de78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6f0:	f000 fc62 	bl	800cfb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6f4:	f001 fb8a 	bl	800de0c <vPortEnterCritical>
 800c6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6fe:	b25b      	sxtb	r3, r3
 800c700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c704:	d103      	bne.n	800c70e <xQueueSemaphoreTake+0x152>
 800c706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c710:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c714:	b25b      	sxtb	r3, r3
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71a:	d103      	bne.n	800c724 <xQueueSemaphoreTake+0x168>
 800c71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c724:	f001 fba8 	bl	800de78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c728:	463a      	mov	r2, r7
 800c72a:	f107 030c 	add.w	r3, r7, #12
 800c72e:	4611      	mov	r1, r2
 800c730:	4618      	mov	r0, r3
 800c732:	f000 fec5 	bl	800d4c0 <xTaskCheckForTimeOut>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d132      	bne.n	800c7a2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c73c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c73e:	f000 f929 	bl	800c994 <prvIsQueueEmpty>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d026      	beq.n	800c796 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d109      	bne.n	800c764 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800c750:	f001 fb5c 	bl	800de0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	4618      	mov	r0, r3
 800c75a:	f001 f821 	bl	800d7a0 <xTaskPriorityInherit>
 800c75e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c760:	f001 fb8a 	bl	800de78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c766:	3324      	adds	r3, #36	@ 0x24
 800c768:	683a      	ldr	r2, [r7, #0]
 800c76a:	4611      	mov	r1, r2
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 fe03 	bl	800d378 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c772:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c774:	f000 f8bc 	bl	800c8f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c778:	f000 fc2c 	bl	800cfd4 <xTaskResumeAll>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f47f af65 	bne.w	800c64e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800c784:	4b18      	ldr	r3, [pc, #96]	@ (800c7e8 <xQueueSemaphoreTake+0x22c>)
 800c786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	e75b      	b.n	800c64e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c796:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c798:	f000 f8aa 	bl	800c8f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c79c:	f000 fc1a 	bl	800cfd4 <xTaskResumeAll>
 800c7a0:	e755      	b.n	800c64e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c7a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7a4:	f000 f8a4 	bl	800c8f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7a8:	f000 fc14 	bl	800cfd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7ae:	f000 f8f1 	bl	800c994 <prvIsQueueEmpty>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f43f af4a 	beq.w	800c64e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00d      	beq.n	800c7dc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800c7c0:	f001 fb24 	bl	800de0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c7c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7c6:	f000 f811 	bl	800c7ec <prvGetDisinheritPriorityAfterTimeout>
 800c7ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f001 f8f0 	bl	800d9b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c7d8:	f001 fb4e 	bl	800de78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3738      	adds	r7, #56	@ 0x38
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	e000ed04 	.word	0xe000ed04

0800c7ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d006      	beq.n	800c80a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f1c3 0307 	rsb	r3, r3, #7
 800c806:	60fb      	str	r3, [r7, #12]
 800c808:	e001      	b.n	800c80e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c80a:	2300      	movs	r3, #0
 800c80c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c80e:	68fb      	ldr	r3, [r7, #12]
	}
 800c810:	4618      	mov	r0, r3
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c828:	2300      	movs	r3, #0
 800c82a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c830:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10d      	bne.n	800c856 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d14d      	bne.n	800c8de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	4618      	mov	r0, r3
 800c848:	f001 f82a 	bl	800d8a0 <xTaskPriorityDisinherit>
 800c84c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	609a      	str	r2, [r3, #8]
 800c854:	e043      	b.n	800c8de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d119      	bne.n	800c890 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6858      	ldr	r0, [r3, #4]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c864:	461a      	mov	r2, r3
 800c866:	68b9      	ldr	r1, [r7, #8]
 800c868:	f001 ffd7 	bl	800e81a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	685a      	ldr	r2, [r3, #4]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c874:	441a      	add	r2, r3
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	685a      	ldr	r2, [r3, #4]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	429a      	cmp	r2, r3
 800c884:	d32b      	bcc.n	800c8de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	605a      	str	r2, [r3, #4]
 800c88e:	e026      	b.n	800c8de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	68d8      	ldr	r0, [r3, #12]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c898:	461a      	mov	r2, r3
 800c89a:	68b9      	ldr	r1, [r7, #8]
 800c89c:	f001 ffbd 	bl	800e81a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	68da      	ldr	r2, [r3, #12]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8a8:	425b      	negs	r3, r3
 800c8aa:	441a      	add	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	68da      	ldr	r2, [r3, #12]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d207      	bcs.n	800c8cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	689a      	ldr	r2, [r3, #8]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8c4:	425b      	negs	r3, r3
 800c8c6:	441a      	add	r2, r3
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d105      	bne.n	800c8de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d002      	beq.n	800c8de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	1c5a      	adds	r2, r3, #1
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c8e6:	697b      	ldr	r3, [r7, #20]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3718      	adds	r7, #24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c8f8:	f001 fa88 	bl	800de0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c902:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c904:	e011      	b.n	800c92a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d012      	beq.n	800c934 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	3324      	adds	r3, #36	@ 0x24
 800c912:	4618      	mov	r0, r3
 800c914:	f000 fd58 	bl	800d3c8 <xTaskRemoveFromEventList>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c91e:	f000 fe37 	bl	800d590 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c922:	7bfb      	ldrb	r3, [r7, #15]
 800c924:	3b01      	subs	r3, #1
 800c926:	b2db      	uxtb	r3, r3
 800c928:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	dce9      	bgt.n	800c906 <prvUnlockQueue+0x16>
 800c932:	e000      	b.n	800c936 <prvUnlockQueue+0x46>
					break;
 800c934:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	22ff      	movs	r2, #255	@ 0xff
 800c93a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c93e:	f001 fa9b 	bl	800de78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c942:	f001 fa63 	bl	800de0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c94c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c94e:	e011      	b.n	800c974 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d012      	beq.n	800c97e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3310      	adds	r3, #16
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 fd33 	bl	800d3c8 <xTaskRemoveFromEventList>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c968:	f000 fe12 	bl	800d590 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c96c:	7bbb      	ldrb	r3, [r7, #14]
 800c96e:	3b01      	subs	r3, #1
 800c970:	b2db      	uxtb	r3, r3
 800c972:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	dce9      	bgt.n	800c950 <prvUnlockQueue+0x60>
 800c97c:	e000      	b.n	800c980 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c97e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	22ff      	movs	r2, #255	@ 0xff
 800c984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c988:	f001 fa76 	bl	800de78 <vPortExitCritical>
}
 800c98c:	bf00      	nop
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c99c:	f001 fa36 	bl	800de0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d102      	bne.n	800c9ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]
 800c9ac:	e001      	b.n	800c9b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9b2:	f001 fa61 	bl	800de78 <vPortExitCritical>

	return xReturn;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9c8:	f001 fa20 	bl	800de0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d102      	bne.n	800c9de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	e001      	b.n	800c9e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9e2:	f001 fa49 	bl	800de78 <vPortExitCritical>

	return xReturn;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b08e      	sub	sp, #56	@ 0x38
 800c9f4:	af04      	add	r7, sp, #16
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
 800c9fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10d      	bne.n	800ca20 <xTaskCreateStatic+0x30>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca08:	b672      	cpsid	i
 800ca0a:	f383 8811 	msr	BASEPRI, r3
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	b662      	cpsie	i
 800ca18:	623b      	str	r3, [r7, #32]
}
 800ca1a:	bf00      	nop
 800ca1c:	bf00      	nop
 800ca1e:	e7fd      	b.n	800ca1c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ca20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10d      	bne.n	800ca42 <xTaskCreateStatic+0x52>
	__asm volatile
 800ca26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca2a:	b672      	cpsid	i
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	b662      	cpsie	i
 800ca3a:	61fb      	str	r3, [r7, #28]
}
 800ca3c:	bf00      	nop
 800ca3e:	bf00      	nop
 800ca40:	e7fd      	b.n	800ca3e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca42:	23a0      	movs	r3, #160	@ 0xa0
 800ca44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	2ba0      	cmp	r3, #160	@ 0xa0
 800ca4a:	d00d      	beq.n	800ca68 <xTaskCreateStatic+0x78>
	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca50:	b672      	cpsid	i
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	b662      	cpsie	i
 800ca60:	61bb      	str	r3, [r7, #24]
}
 800ca62:	bf00      	nop
 800ca64:	bf00      	nop
 800ca66:	e7fd      	b.n	800ca64 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01e      	beq.n	800caae <xTaskCreateStatic+0xbe>
 800ca70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d01b      	beq.n	800caae <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca82:	2202      	movs	r2, #2
 800ca84:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca88:	2300      	movs	r3, #0
 800ca8a:	9303      	str	r3, [sp, #12]
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8e:	9302      	str	r3, [sp, #8]
 800ca90:	f107 0314 	add.w	r3, r7, #20
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f000 f851 	bl	800cb48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800caa8:	f000 f8f0 	bl	800cc8c <prvAddNewTaskToReadyList>
 800caac:	e001      	b.n	800cab2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800caae:	2300      	movs	r3, #0
 800cab0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cab2:	697b      	ldr	r3, [r7, #20]
	}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3728      	adds	r7, #40	@ 0x28
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08c      	sub	sp, #48	@ 0x30
 800cac0:	af04      	add	r7, sp, #16
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	603b      	str	r3, [r7, #0]
 800cac8:	4613      	mov	r3, r2
 800caca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cacc:	88fb      	ldrh	r3, [r7, #6]
 800cace:	009b      	lsls	r3, r3, #2
 800cad0:	4618      	mov	r0, r3
 800cad2:	f001 fa83 	bl	800dfdc <pvPortMalloc>
 800cad6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00e      	beq.n	800cafc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cade:	20a0      	movs	r0, #160	@ 0xa0
 800cae0:	f001 fa7c 	bl	800dfdc <pvPortMalloc>
 800cae4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d003      	beq.n	800caf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	631a      	str	r2, [r3, #48]	@ 0x30
 800caf2:	e005      	b.n	800cb00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800caf4:	6978      	ldr	r0, [r7, #20]
 800caf6:	f001 fb3f 	bl	800e178 <vPortFree>
 800cafa:	e001      	b.n	800cb00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cafc:	2300      	movs	r3, #0
 800cafe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d017      	beq.n	800cb36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb0e:	88fa      	ldrh	r2, [r7, #6]
 800cb10:	2300      	movs	r3, #0
 800cb12:	9303      	str	r3, [sp, #12]
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	9302      	str	r3, [sp, #8]
 800cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1a:	9301      	str	r3, [sp, #4]
 800cb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	68b9      	ldr	r1, [r7, #8]
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f000 f80f 	bl	800cb48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb2a:	69f8      	ldr	r0, [r7, #28]
 800cb2c:	f000 f8ae 	bl	800cc8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb30:	2301      	movs	r3, #1
 800cb32:	61bb      	str	r3, [r7, #24]
 800cb34:	e002      	b.n	800cb3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb36:	f04f 33ff 	mov.w	r3, #4294967295
 800cb3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb3c:	69bb      	ldr	r3, [r7, #24]
	}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3720      	adds	r7, #32
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb5a:	6879      	ldr	r1, [r7, #4]
 800cb5c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cb60:	440b      	add	r3, r1
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	f023 0307 	bic.w	r3, r3, #7
 800cb6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	f003 0307 	and.w	r3, r3, #7
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00d      	beq.n	800cb96 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7e:	b672      	cpsid	i
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	b662      	cpsie	i
 800cb8e:	617b      	str	r3, [r7, #20]
}
 800cb90:	bf00      	nop
 800cb92:	bf00      	nop
 800cb94:	e7fd      	b.n	800cb92 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d01f      	beq.n	800cbdc <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	61fb      	str	r3, [r7, #28]
 800cba0:	e012      	b.n	800cbc8 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	4413      	add	r3, r2
 800cba8:	7819      	ldrb	r1, [r3, #0]
 800cbaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	4413      	add	r3, r2
 800cbb0:	3334      	adds	r3, #52	@ 0x34
 800cbb2:	460a      	mov	r2, r1
 800cbb4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	4413      	add	r3, r2
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d006      	beq.n	800cbd0 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	61fb      	str	r3, [r7, #28]
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	2b0f      	cmp	r3, #15
 800cbcc:	d9e9      	bls.n	800cba2 <prvInitialiseNewTask+0x5a>
 800cbce:	e000      	b.n	800cbd2 <prvInitialiseNewTask+0x8a>
			{
				break;
 800cbd0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cbda:	e003      	b.n	800cbe4 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe6:	2b06      	cmp	r3, #6
 800cbe8:	d901      	bls.n	800cbee <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbea:	2306      	movs	r3, #6
 800cbec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbf2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbf8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc02:	3304      	adds	r3, #4
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff f998 	bl	800bf3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0c:	3318      	adds	r3, #24
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7ff f993 	bl	800bf3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1c:	f1c3 0207 	rsb	r2, r3, #7
 800cc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc28:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc34:	2200      	movs	r2, #0
 800cc36:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3c:	334c      	adds	r3, #76	@ 0x4c
 800cc3e:	224c      	movs	r2, #76	@ 0x4c
 800cc40:	2100      	movs	r1, #0
 800cc42:	4618      	mov	r0, r3
 800cc44:	f001 fd17 	bl	800e676 <memset>
 800cc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4a:	4a0d      	ldr	r2, [pc, #52]	@ (800cc80 <prvInitialiseNewTask+0x138>)
 800cc4c:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc50:	4a0c      	ldr	r2, [pc, #48]	@ (800cc84 <prvInitialiseNewTask+0x13c>)
 800cc52:	655a      	str	r2, [r3, #84]	@ 0x54
 800cc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc56:	4a0c      	ldr	r2, [pc, #48]	@ (800cc88 <prvInitialiseNewTask+0x140>)
 800cc58:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	68f9      	ldr	r1, [r7, #12]
 800cc5e:	69b8      	ldr	r0, [r7, #24]
 800cc60:	f000 ffc4 	bl	800dbec <pxPortInitialiseStack>
 800cc64:	4602      	mov	r2, r0
 800cc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc76:	bf00      	nop
 800cc78:	3720      	adds	r7, #32
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20004bd8 	.word	0x20004bd8
 800cc84:	20004c40 	.word	0x20004c40
 800cc88:	20004ca8 	.word	0x20004ca8

0800cc8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc94:	f001 f8ba 	bl	800de0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc98:	4b2a      	ldr	r3, [pc, #168]	@ (800cd44 <prvAddNewTaskToReadyList+0xb8>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	4a29      	ldr	r2, [pc, #164]	@ (800cd44 <prvAddNewTaskToReadyList+0xb8>)
 800cca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cca2:	4b29      	ldr	r3, [pc, #164]	@ (800cd48 <prvAddNewTaskToReadyList+0xbc>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d109      	bne.n	800ccbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ccaa:	4a27      	ldr	r2, [pc, #156]	@ (800cd48 <prvAddNewTaskToReadyList+0xbc>)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ccb0:	4b24      	ldr	r3, [pc, #144]	@ (800cd44 <prvAddNewTaskToReadyList+0xb8>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d110      	bne.n	800ccda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ccb8:	f000 fc8e 	bl	800d5d8 <prvInitialiseTaskLists>
 800ccbc:	e00d      	b.n	800ccda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ccbe:	4b23      	ldr	r3, [pc, #140]	@ (800cd4c <prvAddNewTaskToReadyList+0xc0>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d109      	bne.n	800ccda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ccc6:	4b20      	ldr	r3, [pc, #128]	@ (800cd48 <prvAddNewTaskToReadyList+0xbc>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d802      	bhi.n	800ccda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ccd4:	4a1c      	ldr	r2, [pc, #112]	@ (800cd48 <prvAddNewTaskToReadyList+0xbc>)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ccda:	4b1d      	ldr	r3, [pc, #116]	@ (800cd50 <prvAddNewTaskToReadyList+0xc4>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3301      	adds	r3, #1
 800cce0:	4a1b      	ldr	r2, [pc, #108]	@ (800cd50 <prvAddNewTaskToReadyList+0xc4>)
 800cce2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce8:	2201      	movs	r2, #1
 800ccea:	409a      	lsls	r2, r3
 800ccec:	4b19      	ldr	r3, [pc, #100]	@ (800cd54 <prvAddNewTaskToReadyList+0xc8>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	4a18      	ldr	r2, [pc, #96]	@ (800cd54 <prvAddNewTaskToReadyList+0xc8>)
 800ccf4:	6013      	str	r3, [r2, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4413      	add	r3, r2
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4a15      	ldr	r2, [pc, #84]	@ (800cd58 <prvAddNewTaskToReadyList+0xcc>)
 800cd04:	441a      	add	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	f7ff f921 	bl	800bf54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cd12:	f001 f8b1 	bl	800de78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cd16:	4b0d      	ldr	r3, [pc, #52]	@ (800cd4c <prvAddNewTaskToReadyList+0xc0>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00e      	beq.n	800cd3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd1e:	4b0a      	ldr	r3, [pc, #40]	@ (800cd48 <prvAddNewTaskToReadyList+0xbc>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d207      	bcs.n	800cd3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd2c:	4b0b      	ldr	r3, [pc, #44]	@ (800cd5c <prvAddNewTaskToReadyList+0xd0>)
 800cd2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd3c:	bf00      	nop
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	20000f8c 	.word	0x20000f8c
 800cd48:	20000e8c 	.word	0x20000e8c
 800cd4c:	20000f98 	.word	0x20000f98
 800cd50:	20000fa8 	.word	0x20000fa8
 800cd54:	20000f94 	.word	0x20000f94
 800cd58:	20000e90 	.word	0x20000e90
 800cd5c:	e000ed04 	.word	0xe000ed04

0800cd60 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b08a      	sub	sp, #40	@ 0x28
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10d      	bne.n	800cd90 <vTaskDelayUntil+0x30>
	__asm volatile
 800cd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd78:	b672      	cpsid	i
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	b662      	cpsie	i
 800cd88:	617b      	str	r3, [r7, #20]
}
 800cd8a:	bf00      	nop
 800cd8c:	bf00      	nop
 800cd8e:	e7fd      	b.n	800cd8c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d10d      	bne.n	800cdb2 <vTaskDelayUntil+0x52>
	__asm volatile
 800cd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd9a:	b672      	cpsid	i
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	b662      	cpsie	i
 800cdaa:	613b      	str	r3, [r7, #16]
}
 800cdac:	bf00      	nop
 800cdae:	bf00      	nop
 800cdb0:	e7fd      	b.n	800cdae <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 800cdb2:	4b2b      	ldr	r3, [pc, #172]	@ (800ce60 <vTaskDelayUntil+0x100>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00d      	beq.n	800cdd6 <vTaskDelayUntil+0x76>
	__asm volatile
 800cdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdbe:	b672      	cpsid	i
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	b662      	cpsie	i
 800cdce:	60fb      	str	r3, [r7, #12]
}
 800cdd0:	bf00      	nop
 800cdd2:	bf00      	nop
 800cdd4:	e7fd      	b.n	800cdd2 <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 800cdd6:	f000 f8ef 	bl	800cfb8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800cdda:	4b22      	ldr	r3, [pc, #136]	@ (800ce64 <vTaskDelayUntil+0x104>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	4413      	add	r3, r2
 800cde8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	6a3a      	ldr	r2, [r7, #32]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d20b      	bcs.n	800ce0c <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	69fa      	ldr	r2, [r7, #28]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d211      	bcs.n	800ce22 <vTaskDelayUntil+0xc2>
 800cdfe:	69fa      	ldr	r2, [r7, #28]
 800ce00:	6a3b      	ldr	r3, [r7, #32]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d90d      	bls.n	800ce22 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800ce06:	2301      	movs	r3, #1
 800ce08:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce0a:	e00a      	b.n	800ce22 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	69fa      	ldr	r2, [r7, #28]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d303      	bcc.n	800ce1e <vTaskDelayUntil+0xbe>
 800ce16:	69fa      	ldr	r2, [r7, #28]
 800ce18:	6a3b      	ldr	r3, [r7, #32]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d901      	bls.n	800ce22 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	69fa      	ldr	r2, [r7, #28]
 800ce26:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ce28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d006      	beq.n	800ce3c <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ce2e:	69fa      	ldr	r2, [r7, #28]
 800ce30:	6a3b      	ldr	r3, [r7, #32]
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	2100      	movs	r1, #0
 800ce36:	4618      	mov	r0, r3
 800ce38:	f000 fe72 	bl	800db20 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ce3c:	f000 f8ca 	bl	800cfd4 <xTaskResumeAll>
 800ce40:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d107      	bne.n	800ce58 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 800ce48:	4b07      	ldr	r3, [pc, #28]	@ (800ce68 <vTaskDelayUntil+0x108>)
 800ce4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce4e:	601a      	str	r2, [r3, #0]
 800ce50:	f3bf 8f4f 	dsb	sy
 800ce54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce58:	bf00      	nop
 800ce5a:	3728      	adds	r7, #40	@ 0x28
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	20000fb4 	.word	0x20000fb4
 800ce64:	20000f90 	.word	0x20000f90
 800ce68:	e000ed04 	.word	0xe000ed04

0800ce6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce74:	2300      	movs	r3, #0
 800ce76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d01a      	beq.n	800ceb4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce7e:	4b15      	ldr	r3, [pc, #84]	@ (800ced4 <vTaskDelay+0x68>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00d      	beq.n	800cea2 <vTaskDelay+0x36>
	__asm volatile
 800ce86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8a:	b672      	cpsid	i
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	b662      	cpsie	i
 800ce9a:	60bb      	str	r3, [r7, #8]
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	e7fd      	b.n	800ce9e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cea2:	f000 f889 	bl	800cfb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cea6:	2100      	movs	r1, #0
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 fe39 	bl	800db20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ceae:	f000 f891 	bl	800cfd4 <xTaskResumeAll>
 800ceb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d107      	bne.n	800ceca <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800ceba:	4b07      	ldr	r3, [pc, #28]	@ (800ced8 <vTaskDelay+0x6c>)
 800cebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cec0:	601a      	str	r2, [r3, #0]
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ceca:	bf00      	nop
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	20000fb4 	.word	0x20000fb4
 800ced8:	e000ed04 	.word	0xe000ed04

0800cedc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08a      	sub	sp, #40	@ 0x28
 800cee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cee2:	2300      	movs	r3, #0
 800cee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cee6:	2300      	movs	r3, #0
 800cee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ceea:	463a      	mov	r2, r7
 800ceec:	1d39      	adds	r1, r7, #4
 800ceee:	f107 0308 	add.w	r3, r7, #8
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7f4 fa08 	bl	8001308 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	9202      	str	r2, [sp, #8]
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	2300      	movs	r3, #0
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	2300      	movs	r3, #0
 800cf08:	460a      	mov	r2, r1
 800cf0a:	4923      	ldr	r1, [pc, #140]	@ (800cf98 <vTaskStartScheduler+0xbc>)
 800cf0c:	4823      	ldr	r0, [pc, #140]	@ (800cf9c <vTaskStartScheduler+0xc0>)
 800cf0e:	f7ff fd6f 	bl	800c9f0 <xTaskCreateStatic>
 800cf12:	4603      	mov	r3, r0
 800cf14:	4a22      	ldr	r2, [pc, #136]	@ (800cfa0 <vTaskStartScheduler+0xc4>)
 800cf16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf18:	4b21      	ldr	r3, [pc, #132]	@ (800cfa0 <vTaskStartScheduler+0xc4>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf20:	2301      	movs	r3, #1
 800cf22:	617b      	str	r3, [r7, #20]
 800cf24:	e001      	b.n	800cf2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf26:	2300      	movs	r3, #0
 800cf28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d11d      	bne.n	800cf6c <vTaskStartScheduler+0x90>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf34:	b672      	cpsid	i
 800cf36:	f383 8811 	msr	BASEPRI, r3
 800cf3a:	f3bf 8f6f 	isb	sy
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	b662      	cpsie	i
 800cf44:	613b      	str	r3, [r7, #16]
}
 800cf46:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf48:	4b16      	ldr	r3, [pc, #88]	@ (800cfa4 <vTaskStartScheduler+0xc8>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	334c      	adds	r3, #76	@ 0x4c
 800cf4e:	4a16      	ldr	r2, [pc, #88]	@ (800cfa8 <vTaskStartScheduler+0xcc>)
 800cf50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf52:	4b16      	ldr	r3, [pc, #88]	@ (800cfac <vTaskStartScheduler+0xd0>)
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295
 800cf58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf5a:	4b15      	ldr	r3, [pc, #84]	@ (800cfb0 <vTaskStartScheduler+0xd4>)
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf60:	4b14      	ldr	r3, [pc, #80]	@ (800cfb4 <vTaskStartScheduler+0xd8>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf66:	f000 fed3 	bl	800dd10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf6a:	e011      	b.n	800cf90 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf72:	d10d      	bne.n	800cf90 <vTaskStartScheduler+0xb4>
	__asm volatile
 800cf74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf78:	b672      	cpsid	i
 800cf7a:	f383 8811 	msr	BASEPRI, r3
 800cf7e:	f3bf 8f6f 	isb	sy
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	b662      	cpsie	i
 800cf88:	60fb      	str	r3, [r7, #12]
}
 800cf8a:	bf00      	nop
 800cf8c:	bf00      	nop
 800cf8e:	e7fd      	b.n	800cf8c <vTaskStartScheduler+0xb0>
}
 800cf90:	bf00      	nop
 800cf92:	3718      	adds	r7, #24
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	0800f994 	.word	0x0800f994
 800cf9c:	0800d5a9 	.word	0x0800d5a9
 800cfa0:	20000fb0 	.word	0x20000fb0
 800cfa4:	20000e8c 	.word	0x20000e8c
 800cfa8:	20000064 	.word	0x20000064
 800cfac:	20000fac 	.word	0x20000fac
 800cfb0:	20000f98 	.word	0x20000f98
 800cfb4:	20000f90 	.word	0x20000f90

0800cfb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cfbc:	4b04      	ldr	r3, [pc, #16]	@ (800cfd0 <vTaskSuspendAll+0x18>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	4a03      	ldr	r2, [pc, #12]	@ (800cfd0 <vTaskSuspendAll+0x18>)
 800cfc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cfc6:	bf00      	nop
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr
 800cfd0:	20000fb4 	.word	0x20000fb4

0800cfd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfe2:	4b43      	ldr	r3, [pc, #268]	@ (800d0f0 <xTaskResumeAll+0x11c>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10d      	bne.n	800d006 <xTaskResumeAll+0x32>
	__asm volatile
 800cfea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfee:	b672      	cpsid	i
 800cff0:	f383 8811 	msr	BASEPRI, r3
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	b662      	cpsie	i
 800cffe:	603b      	str	r3, [r7, #0]
}
 800d000:	bf00      	nop
 800d002:	bf00      	nop
 800d004:	e7fd      	b.n	800d002 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d006:	f000 ff01 	bl	800de0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d00a:	4b39      	ldr	r3, [pc, #228]	@ (800d0f0 <xTaskResumeAll+0x11c>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	3b01      	subs	r3, #1
 800d010:	4a37      	ldr	r2, [pc, #220]	@ (800d0f0 <xTaskResumeAll+0x11c>)
 800d012:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d014:	4b36      	ldr	r3, [pc, #216]	@ (800d0f0 <xTaskResumeAll+0x11c>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d161      	bne.n	800d0e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d01c:	4b35      	ldr	r3, [pc, #212]	@ (800d0f4 <xTaskResumeAll+0x120>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d05d      	beq.n	800d0e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d024:	e02e      	b.n	800d084 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d026:	4b34      	ldr	r3, [pc, #208]	@ (800d0f8 <xTaskResumeAll+0x124>)
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	3318      	adds	r3, #24
 800d032:	4618      	mov	r0, r3
 800d034:	f7fe ffeb 	bl	800c00e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	3304      	adds	r3, #4
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fe ffe6 	bl	800c00e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d046:	2201      	movs	r2, #1
 800d048:	409a      	lsls	r2, r3
 800d04a:	4b2c      	ldr	r3, [pc, #176]	@ (800d0fc <xTaskResumeAll+0x128>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4313      	orrs	r3, r2
 800d050:	4a2a      	ldr	r2, [pc, #168]	@ (800d0fc <xTaskResumeAll+0x128>)
 800d052:	6013      	str	r3, [r2, #0]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d058:	4613      	mov	r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4413      	add	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	4a27      	ldr	r2, [pc, #156]	@ (800d100 <xTaskResumeAll+0x12c>)
 800d062:	441a      	add	r2, r3
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	3304      	adds	r3, #4
 800d068:	4619      	mov	r1, r3
 800d06a:	4610      	mov	r0, r2
 800d06c:	f7fe ff72 	bl	800bf54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d074:	4b23      	ldr	r3, [pc, #140]	@ (800d104 <xTaskResumeAll+0x130>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d302      	bcc.n	800d084 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800d07e:	4b22      	ldr	r3, [pc, #136]	@ (800d108 <xTaskResumeAll+0x134>)
 800d080:	2201      	movs	r2, #1
 800d082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d084:	4b1c      	ldr	r3, [pc, #112]	@ (800d0f8 <xTaskResumeAll+0x124>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1cc      	bne.n	800d026 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d092:	f000 fb47 	bl	800d724 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d096:	4b1d      	ldr	r3, [pc, #116]	@ (800d10c <xTaskResumeAll+0x138>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d010      	beq.n	800d0c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0a2:	f000 f847 	bl	800d134 <xTaskIncrementTick>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800d0ac:	4b16      	ldr	r3, [pc, #88]	@ (800d108 <xTaskResumeAll+0x134>)
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1f1      	bne.n	800d0a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800d0be:	4b13      	ldr	r3, [pc, #76]	@ (800d10c <xTaskResumeAll+0x138>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0c4:	4b10      	ldr	r3, [pc, #64]	@ (800d108 <xTaskResumeAll+0x134>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d009      	beq.n	800d0e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0d0:	4b0f      	ldr	r3, [pc, #60]	@ (800d110 <xTaskResumeAll+0x13c>)
 800d0d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0d6:	601a      	str	r2, [r3, #0]
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0e0:	f000 feca 	bl	800de78 <vPortExitCritical>

	return xAlreadyYielded;
 800d0e4:	68bb      	ldr	r3, [r7, #8]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	20000fb4 	.word	0x20000fb4
 800d0f4:	20000f8c 	.word	0x20000f8c
 800d0f8:	20000f4c 	.word	0x20000f4c
 800d0fc:	20000f94 	.word	0x20000f94
 800d100:	20000e90 	.word	0x20000e90
 800d104:	20000e8c 	.word	0x20000e8c
 800d108:	20000fa0 	.word	0x20000fa0
 800d10c:	20000f9c 	.word	0x20000f9c
 800d110:	e000ed04 	.word	0xe000ed04

0800d114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d11a:	4b05      	ldr	r3, [pc, #20]	@ (800d130 <xTaskGetTickCount+0x1c>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d120:	687b      	ldr	r3, [r7, #4]
}
 800d122:	4618      	mov	r0, r3
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	20000f90 	.word	0x20000f90

0800d134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d13a:	2300      	movs	r3, #0
 800d13c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d13e:	4b50      	ldr	r3, [pc, #320]	@ (800d280 <xTaskIncrementTick+0x14c>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	f040 808b 	bne.w	800d25e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d148:	4b4e      	ldr	r3, [pc, #312]	@ (800d284 <xTaskIncrementTick+0x150>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3301      	adds	r3, #1
 800d14e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d150:	4a4c      	ldr	r2, [pc, #304]	@ (800d284 <xTaskIncrementTick+0x150>)
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d123      	bne.n	800d1a4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800d15c:	4b4a      	ldr	r3, [pc, #296]	@ (800d288 <xTaskIncrementTick+0x154>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00d      	beq.n	800d182 <xTaskIncrementTick+0x4e>
	__asm volatile
 800d166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d16a:	b672      	cpsid	i
 800d16c:	f383 8811 	msr	BASEPRI, r3
 800d170:	f3bf 8f6f 	isb	sy
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	b662      	cpsie	i
 800d17a:	603b      	str	r3, [r7, #0]
}
 800d17c:	bf00      	nop
 800d17e:	bf00      	nop
 800d180:	e7fd      	b.n	800d17e <xTaskIncrementTick+0x4a>
 800d182:	4b41      	ldr	r3, [pc, #260]	@ (800d288 <xTaskIncrementTick+0x154>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	60fb      	str	r3, [r7, #12]
 800d188:	4b40      	ldr	r3, [pc, #256]	@ (800d28c <xTaskIncrementTick+0x158>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a3e      	ldr	r2, [pc, #248]	@ (800d288 <xTaskIncrementTick+0x154>)
 800d18e:	6013      	str	r3, [r2, #0]
 800d190:	4a3e      	ldr	r2, [pc, #248]	@ (800d28c <xTaskIncrementTick+0x158>)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6013      	str	r3, [r2, #0]
 800d196:	4b3e      	ldr	r3, [pc, #248]	@ (800d290 <xTaskIncrementTick+0x15c>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	3301      	adds	r3, #1
 800d19c:	4a3c      	ldr	r2, [pc, #240]	@ (800d290 <xTaskIncrementTick+0x15c>)
 800d19e:	6013      	str	r3, [r2, #0]
 800d1a0:	f000 fac0 	bl	800d724 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1a4:	4b3b      	ldr	r3, [pc, #236]	@ (800d294 <xTaskIncrementTick+0x160>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	693a      	ldr	r2, [r7, #16]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d348      	bcc.n	800d240 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ae:	4b36      	ldr	r3, [pc, #216]	@ (800d288 <xTaskIncrementTick+0x154>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d104      	bne.n	800d1c2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1b8:	4b36      	ldr	r3, [pc, #216]	@ (800d294 <xTaskIncrementTick+0x160>)
 800d1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d1be:	601a      	str	r2, [r3, #0]
					break;
 800d1c0:	e03e      	b.n	800d240 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1c2:	4b31      	ldr	r3, [pc, #196]	@ (800d288 <xTaskIncrementTick+0x154>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1d2:	693a      	ldr	r2, [r7, #16]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d203      	bcs.n	800d1e2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1da:	4a2e      	ldr	r2, [pc, #184]	@ (800d294 <xTaskIncrementTick+0x160>)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d1e0:	e02e      	b.n	800d240 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fe ff11 	bl	800c00e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d004      	beq.n	800d1fe <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	3318      	adds	r3, #24
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe ff08 	bl	800c00e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d202:	2201      	movs	r2, #1
 800d204:	409a      	lsls	r2, r3
 800d206:	4b24      	ldr	r3, [pc, #144]	@ (800d298 <xTaskIncrementTick+0x164>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4313      	orrs	r3, r2
 800d20c:	4a22      	ldr	r2, [pc, #136]	@ (800d298 <xTaskIncrementTick+0x164>)
 800d20e:	6013      	str	r3, [r2, #0]
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d214:	4613      	mov	r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	4413      	add	r3, r2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4a1f      	ldr	r2, [pc, #124]	@ (800d29c <xTaskIncrementTick+0x168>)
 800d21e:	441a      	add	r2, r3
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	3304      	adds	r3, #4
 800d224:	4619      	mov	r1, r3
 800d226:	4610      	mov	r0, r2
 800d228:	f7fe fe94 	bl	800bf54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d230:	4b1b      	ldr	r3, [pc, #108]	@ (800d2a0 <xTaskIncrementTick+0x16c>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d236:	429a      	cmp	r2, r3
 800d238:	d3b9      	bcc.n	800d1ae <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800d23a:	2301      	movs	r3, #1
 800d23c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d23e:	e7b6      	b.n	800d1ae <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d240:	4b17      	ldr	r3, [pc, #92]	@ (800d2a0 <xTaskIncrementTick+0x16c>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d246:	4915      	ldr	r1, [pc, #84]	@ (800d29c <xTaskIncrementTick+0x168>)
 800d248:	4613      	mov	r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	4413      	add	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	440b      	add	r3, r1
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d907      	bls.n	800d268 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800d258:	2301      	movs	r3, #1
 800d25a:	617b      	str	r3, [r7, #20]
 800d25c:	e004      	b.n	800d268 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d25e:	4b11      	ldr	r3, [pc, #68]	@ (800d2a4 <xTaskIncrementTick+0x170>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	3301      	adds	r3, #1
 800d264:	4a0f      	ldr	r2, [pc, #60]	@ (800d2a4 <xTaskIncrementTick+0x170>)
 800d266:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d268:	4b0f      	ldr	r3, [pc, #60]	@ (800d2a8 <xTaskIncrementTick+0x174>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d001      	beq.n	800d274 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800d270:	2301      	movs	r3, #1
 800d272:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d274:	697b      	ldr	r3, [r7, #20]
}
 800d276:	4618      	mov	r0, r3
 800d278:	3718      	adds	r7, #24
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	20000fb4 	.word	0x20000fb4
 800d284:	20000f90 	.word	0x20000f90
 800d288:	20000f44 	.word	0x20000f44
 800d28c:	20000f48 	.word	0x20000f48
 800d290:	20000fa4 	.word	0x20000fa4
 800d294:	20000fac 	.word	0x20000fac
 800d298:	20000f94 	.word	0x20000f94
 800d29c:	20000e90 	.word	0x20000e90
 800d2a0:	20000e8c 	.word	0x20000e8c
 800d2a4:	20000f9c 	.word	0x20000f9c
 800d2a8:	20000fa0 	.word	0x20000fa0

0800d2ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b087      	sub	sp, #28
 800d2b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2b2:	4b2b      	ldr	r3, [pc, #172]	@ (800d360 <vTaskSwitchContext+0xb4>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d003      	beq.n	800d2c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2ba:	4b2a      	ldr	r3, [pc, #168]	@ (800d364 <vTaskSwitchContext+0xb8>)
 800d2bc:	2201      	movs	r2, #1
 800d2be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2c0:	e047      	b.n	800d352 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d2c2:	4b28      	ldr	r3, [pc, #160]	@ (800d364 <vTaskSwitchContext+0xb8>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2c8:	4b27      	ldr	r3, [pc, #156]	@ (800d368 <vTaskSwitchContext+0xbc>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	fab3 f383 	clz	r3, r3
 800d2d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d2d6:	7afb      	ldrb	r3, [r7, #11]
 800d2d8:	f1c3 031f 	rsb	r3, r3, #31
 800d2dc:	617b      	str	r3, [r7, #20]
 800d2de:	4923      	ldr	r1, [pc, #140]	@ (800d36c <vTaskSwitchContext+0xc0>)
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	440b      	add	r3, r1
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10d      	bne.n	800d30e <vTaskSwitchContext+0x62>
	__asm volatile
 800d2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f6:	b672      	cpsid	i
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	b662      	cpsie	i
 800d306:	607b      	str	r3, [r7, #4]
}
 800d308:	bf00      	nop
 800d30a:	bf00      	nop
 800d30c:	e7fd      	b.n	800d30a <vTaskSwitchContext+0x5e>
 800d30e:	697a      	ldr	r2, [r7, #20]
 800d310:	4613      	mov	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	4a14      	ldr	r2, [pc, #80]	@ (800d36c <vTaskSwitchContext+0xc0>)
 800d31a:	4413      	add	r3, r2
 800d31c:	613b      	str	r3, [r7, #16]
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	685a      	ldr	r2, [r3, #4]
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	605a      	str	r2, [r3, #4]
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	685a      	ldr	r2, [r3, #4]
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	3308      	adds	r3, #8
 800d330:	429a      	cmp	r2, r3
 800d332:	d104      	bne.n	800d33e <vTaskSwitchContext+0x92>
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	685a      	ldr	r2, [r3, #4]
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	605a      	str	r2, [r3, #4]
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	4a0a      	ldr	r2, [pc, #40]	@ (800d370 <vTaskSwitchContext+0xc4>)
 800d346:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d348:	4b09      	ldr	r3, [pc, #36]	@ (800d370 <vTaskSwitchContext+0xc4>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	334c      	adds	r3, #76	@ 0x4c
 800d34e:	4a09      	ldr	r2, [pc, #36]	@ (800d374 <vTaskSwitchContext+0xc8>)
 800d350:	6013      	str	r3, [r2, #0]
}
 800d352:	bf00      	nop
 800d354:	371c      	adds	r7, #28
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	20000fb4 	.word	0x20000fb4
 800d364:	20000fa0 	.word	0x20000fa0
 800d368:	20000f94 	.word	0x20000f94
 800d36c:	20000e90 	.word	0x20000e90
 800d370:	20000e8c 	.word	0x20000e8c
 800d374:	20000064 	.word	0x20000064

0800d378 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10d      	bne.n	800d3a4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38c:	b672      	cpsid	i
 800d38e:	f383 8811 	msr	BASEPRI, r3
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	b662      	cpsie	i
 800d39c:	60fb      	str	r3, [r7, #12]
}
 800d39e:	bf00      	nop
 800d3a0:	bf00      	nop
 800d3a2:	e7fd      	b.n	800d3a0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3a4:	4b07      	ldr	r3, [pc, #28]	@ (800d3c4 <vTaskPlaceOnEventList+0x4c>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3318      	adds	r3, #24
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7fe fdf5 	bl	800bf9c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3b2:	2101      	movs	r1, #1
 800d3b4:	6838      	ldr	r0, [r7, #0]
 800d3b6:	f000 fbb3 	bl	800db20 <prvAddCurrentTaskToDelayedList>
}
 800d3ba:	bf00      	nop
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20000e8c 	.word	0x20000e8c

0800d3c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10d      	bne.n	800d3fa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e2:	b672      	cpsid	i
 800d3e4:	f383 8811 	msr	BASEPRI, r3
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	b662      	cpsie	i
 800d3f2:	60fb      	str	r3, [r7, #12]
}
 800d3f4:	bf00      	nop
 800d3f6:	bf00      	nop
 800d3f8:	e7fd      	b.n	800d3f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	3318      	adds	r3, #24
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fe fe05 	bl	800c00e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d404:	4b1d      	ldr	r3, [pc, #116]	@ (800d47c <xTaskRemoveFromEventList+0xb4>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d11c      	bne.n	800d446 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	3304      	adds	r3, #4
 800d410:	4618      	mov	r0, r3
 800d412:	f7fe fdfc 	bl	800c00e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d41a:	2201      	movs	r2, #1
 800d41c:	409a      	lsls	r2, r3
 800d41e:	4b18      	ldr	r3, [pc, #96]	@ (800d480 <xTaskRemoveFromEventList+0xb8>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4313      	orrs	r3, r2
 800d424:	4a16      	ldr	r2, [pc, #88]	@ (800d480 <xTaskRemoveFromEventList+0xb8>)
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d42c:	4613      	mov	r3, r2
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	4413      	add	r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4a13      	ldr	r2, [pc, #76]	@ (800d484 <xTaskRemoveFromEventList+0xbc>)
 800d436:	441a      	add	r2, r3
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	3304      	adds	r3, #4
 800d43c:	4619      	mov	r1, r3
 800d43e:	4610      	mov	r0, r2
 800d440:	f7fe fd88 	bl	800bf54 <vListInsertEnd>
 800d444:	e005      	b.n	800d452 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	3318      	adds	r3, #24
 800d44a:	4619      	mov	r1, r3
 800d44c:	480e      	ldr	r0, [pc, #56]	@ (800d488 <xTaskRemoveFromEventList+0xc0>)
 800d44e:	f7fe fd81 	bl	800bf54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d456:	4b0d      	ldr	r3, [pc, #52]	@ (800d48c <xTaskRemoveFromEventList+0xc4>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d905      	bls.n	800d46c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d460:	2301      	movs	r3, #1
 800d462:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d464:	4b0a      	ldr	r3, [pc, #40]	@ (800d490 <xTaskRemoveFromEventList+0xc8>)
 800d466:	2201      	movs	r2, #1
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	e001      	b.n	800d470 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d46c:	2300      	movs	r3, #0
 800d46e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d470:	697b      	ldr	r3, [r7, #20]
}
 800d472:	4618      	mov	r0, r3
 800d474:	3718      	adds	r7, #24
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20000fb4 	.word	0x20000fb4
 800d480:	20000f94 	.word	0x20000f94
 800d484:	20000e90 	.word	0x20000e90
 800d488:	20000f4c 	.word	0x20000f4c
 800d48c:	20000e8c 	.word	0x20000e8c
 800d490:	20000fa0 	.word	0x20000fa0

0800d494 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d49c:	4b06      	ldr	r3, [pc, #24]	@ (800d4b8 <vTaskInternalSetTimeOutState+0x24>)
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d4a4:	4b05      	ldr	r3, [pc, #20]	@ (800d4bc <vTaskInternalSetTimeOutState+0x28>)
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	605a      	str	r2, [r3, #4]
}
 800d4ac:	bf00      	nop
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr
 800d4b8:	20000fa4 	.word	0x20000fa4
 800d4bc:	20000f90 	.word	0x20000f90

0800d4c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10d      	bne.n	800d4ec <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800d4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d4:	b672      	cpsid	i
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	b662      	cpsie	i
 800d4e4:	613b      	str	r3, [r7, #16]
}
 800d4e6:	bf00      	nop
 800d4e8:	bf00      	nop
 800d4ea:	e7fd      	b.n	800d4e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10d      	bne.n	800d50e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f6:	b672      	cpsid	i
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	b662      	cpsie	i
 800d506:	60fb      	str	r3, [r7, #12]
}
 800d508:	bf00      	nop
 800d50a:	bf00      	nop
 800d50c:	e7fd      	b.n	800d50a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800d50e:	f000 fc7d 	bl	800de0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d512:	4b1d      	ldr	r3, [pc, #116]	@ (800d588 <xTaskCheckForTimeOut+0xc8>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	69ba      	ldr	r2, [r7, #24]
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d52a:	d102      	bne.n	800d532 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d52c:	2300      	movs	r3, #0
 800d52e:	61fb      	str	r3, [r7, #28]
 800d530:	e023      	b.n	800d57a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	4b15      	ldr	r3, [pc, #84]	@ (800d58c <xTaskCheckForTimeOut+0xcc>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d007      	beq.n	800d54e <xTaskCheckForTimeOut+0x8e>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	69ba      	ldr	r2, [r7, #24]
 800d544:	429a      	cmp	r2, r3
 800d546:	d302      	bcc.n	800d54e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d548:	2301      	movs	r3, #1
 800d54a:	61fb      	str	r3, [r7, #28]
 800d54c:	e015      	b.n	800d57a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	429a      	cmp	r2, r3
 800d556:	d20b      	bcs.n	800d570 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	1ad2      	subs	r2, r2, r3
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff ff95 	bl	800d494 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d56a:	2300      	movs	r3, #0
 800d56c:	61fb      	str	r3, [r7, #28]
 800d56e:	e004      	b.n	800d57a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	2200      	movs	r2, #0
 800d574:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d576:	2301      	movs	r3, #1
 800d578:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d57a:	f000 fc7d 	bl	800de78 <vPortExitCritical>

	return xReturn;
 800d57e:	69fb      	ldr	r3, [r7, #28]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3720      	adds	r7, #32
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	20000f90 	.word	0x20000f90
 800d58c:	20000fa4 	.word	0x20000fa4

0800d590 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d590:	b480      	push	{r7}
 800d592:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d594:	4b03      	ldr	r3, [pc, #12]	@ (800d5a4 <vTaskMissedYield+0x14>)
 800d596:	2201      	movs	r2, #1
 800d598:	601a      	str	r2, [r3, #0]
}
 800d59a:	bf00      	nop
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr
 800d5a4:	20000fa0 	.word	0x20000fa0

0800d5a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d5b0:	f000 f852 	bl	800d658 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d5b4:	4b06      	ldr	r3, [pc, #24]	@ (800d5d0 <prvIdleTask+0x28>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d9f9      	bls.n	800d5b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d5bc:	4b05      	ldr	r3, [pc, #20]	@ (800d5d4 <prvIdleTask+0x2c>)
 800d5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d5cc:	e7f0      	b.n	800d5b0 <prvIdleTask+0x8>
 800d5ce:	bf00      	nop
 800d5d0:	20000e90 	.word	0x20000e90
 800d5d4:	e000ed04 	.word	0xe000ed04

0800d5d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5de:	2300      	movs	r3, #0
 800d5e0:	607b      	str	r3, [r7, #4]
 800d5e2:	e00c      	b.n	800d5fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	4413      	add	r3, r2
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	4a12      	ldr	r2, [pc, #72]	@ (800d638 <prvInitialiseTaskLists+0x60>)
 800d5f0:	4413      	add	r3, r2
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7fe fc81 	bl	800befa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	607b      	str	r3, [r7, #4]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b06      	cmp	r3, #6
 800d602:	d9ef      	bls.n	800d5e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d604:	480d      	ldr	r0, [pc, #52]	@ (800d63c <prvInitialiseTaskLists+0x64>)
 800d606:	f7fe fc78 	bl	800befa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d60a:	480d      	ldr	r0, [pc, #52]	@ (800d640 <prvInitialiseTaskLists+0x68>)
 800d60c:	f7fe fc75 	bl	800befa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d610:	480c      	ldr	r0, [pc, #48]	@ (800d644 <prvInitialiseTaskLists+0x6c>)
 800d612:	f7fe fc72 	bl	800befa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d616:	480c      	ldr	r0, [pc, #48]	@ (800d648 <prvInitialiseTaskLists+0x70>)
 800d618:	f7fe fc6f 	bl	800befa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d61c:	480b      	ldr	r0, [pc, #44]	@ (800d64c <prvInitialiseTaskLists+0x74>)
 800d61e:	f7fe fc6c 	bl	800befa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d622:	4b0b      	ldr	r3, [pc, #44]	@ (800d650 <prvInitialiseTaskLists+0x78>)
 800d624:	4a05      	ldr	r2, [pc, #20]	@ (800d63c <prvInitialiseTaskLists+0x64>)
 800d626:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d628:	4b0a      	ldr	r3, [pc, #40]	@ (800d654 <prvInitialiseTaskLists+0x7c>)
 800d62a:	4a05      	ldr	r2, [pc, #20]	@ (800d640 <prvInitialiseTaskLists+0x68>)
 800d62c:	601a      	str	r2, [r3, #0]
}
 800d62e:	bf00      	nop
 800d630:	3708      	adds	r7, #8
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	20000e90 	.word	0x20000e90
 800d63c:	20000f1c 	.word	0x20000f1c
 800d640:	20000f30 	.word	0x20000f30
 800d644:	20000f4c 	.word	0x20000f4c
 800d648:	20000f60 	.word	0x20000f60
 800d64c:	20000f78 	.word	0x20000f78
 800d650:	20000f44 	.word	0x20000f44
 800d654:	20000f48 	.word	0x20000f48

0800d658 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d65e:	e019      	b.n	800d694 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d660:	f000 fbd4 	bl	800de0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d664:	4b10      	ldr	r3, [pc, #64]	@ (800d6a8 <prvCheckTasksWaitingTermination+0x50>)
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	3304      	adds	r3, #4
 800d670:	4618      	mov	r0, r3
 800d672:	f7fe fccc 	bl	800c00e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d676:	4b0d      	ldr	r3, [pc, #52]	@ (800d6ac <prvCheckTasksWaitingTermination+0x54>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	3b01      	subs	r3, #1
 800d67c:	4a0b      	ldr	r2, [pc, #44]	@ (800d6ac <prvCheckTasksWaitingTermination+0x54>)
 800d67e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d680:	4b0b      	ldr	r3, [pc, #44]	@ (800d6b0 <prvCheckTasksWaitingTermination+0x58>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3b01      	subs	r3, #1
 800d686:	4a0a      	ldr	r2, [pc, #40]	@ (800d6b0 <prvCheckTasksWaitingTermination+0x58>)
 800d688:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d68a:	f000 fbf5 	bl	800de78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 f810 	bl	800d6b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d694:	4b06      	ldr	r3, [pc, #24]	@ (800d6b0 <prvCheckTasksWaitingTermination+0x58>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d1e1      	bne.n	800d660 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d69c:	bf00      	nop
 800d69e:	bf00      	nop
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20000f60 	.word	0x20000f60
 800d6ac:	20000f8c 	.word	0x20000f8c
 800d6b0:	20000f74 	.word	0x20000f74

0800d6b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	334c      	adds	r3, #76	@ 0x4c
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f000 fff1 	bl	800e6a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d108      	bne.n	800d6e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f000 fd4f 	bl	800e178 <vPortFree>
				vPortFree( pxTCB );
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fd4c 	bl	800e178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d6e0:	e01b      	b.n	800d71a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d103      	bne.n	800d6f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 fd43 	bl	800e178 <vPortFree>
	}
 800d6f2:	e012      	b.n	800d71a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d00d      	beq.n	800d71a <prvDeleteTCB+0x66>
	__asm volatile
 800d6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d702:	b672      	cpsid	i
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	b662      	cpsie	i
 800d712:	60fb      	str	r3, [r7, #12]
}
 800d714:	bf00      	nop
 800d716:	bf00      	nop
 800d718:	e7fd      	b.n	800d716 <prvDeleteTCB+0x62>
	}
 800d71a:	bf00      	nop
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
	...

0800d724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d72a:	4b0c      	ldr	r3, [pc, #48]	@ (800d75c <prvResetNextTaskUnblockTime+0x38>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d104      	bne.n	800d73e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d734:	4b0a      	ldr	r3, [pc, #40]	@ (800d760 <prvResetNextTaskUnblockTime+0x3c>)
 800d736:	f04f 32ff 	mov.w	r2, #4294967295
 800d73a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d73c:	e008      	b.n	800d750 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d73e:	4b07      	ldr	r3, [pc, #28]	@ (800d75c <prvResetNextTaskUnblockTime+0x38>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	4a04      	ldr	r2, [pc, #16]	@ (800d760 <prvResetNextTaskUnblockTime+0x3c>)
 800d74e:	6013      	str	r3, [r2, #0]
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr
 800d75c:	20000f44 	.word	0x20000f44
 800d760:	20000fac 	.word	0x20000fac

0800d764 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d76a:	4b0b      	ldr	r3, [pc, #44]	@ (800d798 <xTaskGetSchedulerState+0x34>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d102      	bne.n	800d778 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d772:	2301      	movs	r3, #1
 800d774:	607b      	str	r3, [r7, #4]
 800d776:	e008      	b.n	800d78a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d778:	4b08      	ldr	r3, [pc, #32]	@ (800d79c <xTaskGetSchedulerState+0x38>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d102      	bne.n	800d786 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d780:	2302      	movs	r3, #2
 800d782:	607b      	str	r3, [r7, #4]
 800d784:	e001      	b.n	800d78a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d786:	2300      	movs	r3, #0
 800d788:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d78a:	687b      	ldr	r3, [r7, #4]
	}
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr
 800d798:	20000f98 	.word	0x20000f98
 800d79c:	20000fb4 	.word	0x20000fb4

0800d7a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d069      	beq.n	800d88a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ba:	4b36      	ldr	r3, [pc, #216]	@ (800d894 <xTaskPriorityInherit+0xf4>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d259      	bcs.n	800d878 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	699b      	ldr	r3, [r3, #24]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	db06      	blt.n	800d7da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7cc:	4b31      	ldr	r3, [pc, #196]	@ (800d894 <xTaskPriorityInherit+0xf4>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7d2:	f1c3 0207 	rsb	r2, r3, #7
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	6959      	ldr	r1, [r3, #20]
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	4413      	add	r3, r2
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	4a2b      	ldr	r2, [pc, #172]	@ (800d898 <xTaskPriorityInherit+0xf8>)
 800d7ec:	4413      	add	r3, r2
 800d7ee:	4299      	cmp	r1, r3
 800d7f0:	d13a      	bne.n	800d868 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	3304      	adds	r3, #4
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fe fc09 	bl	800c00e <uxListRemove>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d115      	bne.n	800d82e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d806:	4924      	ldr	r1, [pc, #144]	@ (800d898 <xTaskPriorityInherit+0xf8>)
 800d808:	4613      	mov	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	4413      	add	r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	440b      	add	r3, r1
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10a      	bne.n	800d82e <xTaskPriorityInherit+0x8e>
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d81c:	2201      	movs	r2, #1
 800d81e:	fa02 f303 	lsl.w	r3, r2, r3
 800d822:	43da      	mvns	r2, r3
 800d824:	4b1d      	ldr	r3, [pc, #116]	@ (800d89c <xTaskPriorityInherit+0xfc>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4013      	ands	r3, r2
 800d82a:	4a1c      	ldr	r2, [pc, #112]	@ (800d89c <xTaskPriorityInherit+0xfc>)
 800d82c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d82e:	4b19      	ldr	r3, [pc, #100]	@ (800d894 <xTaskPriorityInherit+0xf4>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d83c:	2201      	movs	r2, #1
 800d83e:	409a      	lsls	r2, r3
 800d840:	4b16      	ldr	r3, [pc, #88]	@ (800d89c <xTaskPriorityInherit+0xfc>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4313      	orrs	r3, r2
 800d846:	4a15      	ldr	r2, [pc, #84]	@ (800d89c <xTaskPriorityInherit+0xfc>)
 800d848:	6013      	str	r3, [r2, #0]
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d84e:	4613      	mov	r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	4413      	add	r3, r2
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4a10      	ldr	r2, [pc, #64]	@ (800d898 <xTaskPriorityInherit+0xf8>)
 800d858:	441a      	add	r2, r3
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	3304      	adds	r3, #4
 800d85e:	4619      	mov	r1, r3
 800d860:	4610      	mov	r0, r2
 800d862:	f7fe fb77 	bl	800bf54 <vListInsertEnd>
 800d866:	e004      	b.n	800d872 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d868:	4b0a      	ldr	r3, [pc, #40]	@ (800d894 <xTaskPriorityInherit+0xf4>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d872:	2301      	movs	r3, #1
 800d874:	60fb      	str	r3, [r7, #12]
 800d876:	e008      	b.n	800d88a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d87c:	4b05      	ldr	r3, [pc, #20]	@ (800d894 <xTaskPriorityInherit+0xf4>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d882:	429a      	cmp	r2, r3
 800d884:	d201      	bcs.n	800d88a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d886:	2301      	movs	r3, #1
 800d888:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d88a:	68fb      	ldr	r3, [r7, #12]
	}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	20000e8c 	.word	0x20000e8c
 800d898:	20000e90 	.word	0x20000e90
 800d89c:	20000f94 	.word	0x20000f94

0800d8a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d074      	beq.n	800d9a0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8b6:	4b3d      	ldr	r3, [pc, #244]	@ (800d9ac <xTaskPriorityDisinherit+0x10c>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d00d      	beq.n	800d8dc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c4:	b672      	cpsid	i
 800d8c6:	f383 8811 	msr	BASEPRI, r3
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	b662      	cpsie	i
 800d8d4:	60fb      	str	r3, [r7, #12]
}
 800d8d6:	bf00      	nop
 800d8d8:	bf00      	nop
 800d8da:	e7fd      	b.n	800d8d8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10d      	bne.n	800d900 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e8:	b672      	cpsid	i
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	b662      	cpsie	i
 800d8f8:	60bb      	str	r3, [r7, #8]
}
 800d8fa:	bf00      	nop
 800d8fc:	bf00      	nop
 800d8fe:	e7fd      	b.n	800d8fc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d904:	1e5a      	subs	r2, r3, #1
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d912:	429a      	cmp	r2, r3
 800d914:	d044      	beq.n	800d9a0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d140      	bne.n	800d9a0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	3304      	adds	r3, #4
 800d922:	4618      	mov	r0, r3
 800d924:	f7fe fb73 	bl	800c00e <uxListRemove>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d115      	bne.n	800d95a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d932:	491f      	ldr	r1, [pc, #124]	@ (800d9b0 <xTaskPriorityDisinherit+0x110>)
 800d934:	4613      	mov	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4413      	add	r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	440b      	add	r3, r1
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d10a      	bne.n	800d95a <xTaskPriorityDisinherit+0xba>
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d948:	2201      	movs	r2, #1
 800d94a:	fa02 f303 	lsl.w	r3, r2, r3
 800d94e:	43da      	mvns	r2, r3
 800d950:	4b18      	ldr	r3, [pc, #96]	@ (800d9b4 <xTaskPriorityDisinherit+0x114>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4013      	ands	r3, r2
 800d956:	4a17      	ldr	r2, [pc, #92]	@ (800d9b4 <xTaskPriorityDisinherit+0x114>)
 800d958:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d966:	f1c3 0207 	rsb	r2, r3, #7
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d972:	2201      	movs	r2, #1
 800d974:	409a      	lsls	r2, r3
 800d976:	4b0f      	ldr	r3, [pc, #60]	@ (800d9b4 <xTaskPriorityDisinherit+0x114>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	4a0d      	ldr	r2, [pc, #52]	@ (800d9b4 <xTaskPriorityDisinherit+0x114>)
 800d97e:	6013      	str	r3, [r2, #0]
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d984:	4613      	mov	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4413      	add	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4a08      	ldr	r2, [pc, #32]	@ (800d9b0 <xTaskPriorityDisinherit+0x110>)
 800d98e:	441a      	add	r2, r3
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	3304      	adds	r3, #4
 800d994:	4619      	mov	r1, r3
 800d996:	4610      	mov	r0, r2
 800d998:	f7fe fadc 	bl	800bf54 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d99c:	2301      	movs	r3, #1
 800d99e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9a0:	697b      	ldr	r3, [r7, #20]
	}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3718      	adds	r7, #24
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	20000e8c 	.word	0x20000e8c
 800d9b0:	20000e90 	.word	0x20000e90
 800d9b4:	20000f94 	.word	0x20000f94

0800d9b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b088      	sub	sp, #32
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f000 8089 	beq.w	800dae4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d10d      	bne.n	800d9f6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800d9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9de:	b672      	cpsid	i
 800d9e0:	f383 8811 	msr	BASEPRI, r3
 800d9e4:	f3bf 8f6f 	isb	sy
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	b662      	cpsie	i
 800d9ee:	60fb      	str	r3, [r7, #12]
}
 800d9f0:	bf00      	nop
 800d9f2:	bf00      	nop
 800d9f4:	e7fd      	b.n	800d9f2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9fa:	683a      	ldr	r2, [r7, #0]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d902      	bls.n	800da06 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	61fb      	str	r3, [r7, #28]
 800da04:	e002      	b.n	800da0c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da10:	69fa      	ldr	r2, [r7, #28]
 800da12:	429a      	cmp	r2, r3
 800da14:	d066      	beq.n	800dae4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d161      	bne.n	800dae4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da20:	4b32      	ldr	r3, [pc, #200]	@ (800daec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	69ba      	ldr	r2, [r7, #24]
 800da26:	429a      	cmp	r2, r3
 800da28:	d10d      	bne.n	800da46 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800da2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2e:	b672      	cpsid	i
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	b662      	cpsie	i
 800da3e:	60bb      	str	r3, [r7, #8]
}
 800da40:	bf00      	nop
 800da42:	bf00      	nop
 800da44:	e7fd      	b.n	800da42 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da4a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	69fa      	ldr	r2, [r7, #28]
 800da50:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	699b      	ldr	r3, [r3, #24]
 800da56:	2b00      	cmp	r3, #0
 800da58:	db04      	blt.n	800da64 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	f1c3 0207 	rsb	r2, r3, #7
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	6959      	ldr	r1, [r3, #20]
 800da68:	693a      	ldr	r2, [r7, #16]
 800da6a:	4613      	mov	r3, r2
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	4413      	add	r3, r2
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	4a1f      	ldr	r2, [pc, #124]	@ (800daf0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800da74:	4413      	add	r3, r2
 800da76:	4299      	cmp	r1, r3
 800da78:	d134      	bne.n	800dae4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	3304      	adds	r3, #4
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fe fac5 	bl	800c00e <uxListRemove>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d115      	bne.n	800dab6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da8e:	4918      	ldr	r1, [pc, #96]	@ (800daf0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800da90:	4613      	mov	r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4413      	add	r3, r2
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	440b      	add	r3, r1
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10a      	bne.n	800dab6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daa4:	2201      	movs	r2, #1
 800daa6:	fa02 f303 	lsl.w	r3, r2, r3
 800daaa:	43da      	mvns	r2, r3
 800daac:	4b11      	ldr	r3, [pc, #68]	@ (800daf4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4013      	ands	r3, r2
 800dab2:	4a10      	ldr	r2, [pc, #64]	@ (800daf4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800dab4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daba:	2201      	movs	r2, #1
 800dabc:	409a      	lsls	r2, r3
 800dabe:	4b0d      	ldr	r3, [pc, #52]	@ (800daf4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4313      	orrs	r3, r2
 800dac4:	4a0b      	ldr	r2, [pc, #44]	@ (800daf4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800dac6:	6013      	str	r3, [r2, #0]
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dacc:	4613      	mov	r3, r2
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	4413      	add	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	4a06      	ldr	r2, [pc, #24]	@ (800daf0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800dad6:	441a      	add	r2, r3
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	3304      	adds	r3, #4
 800dadc:	4619      	mov	r1, r3
 800dade:	4610      	mov	r0, r2
 800dae0:	f7fe fa38 	bl	800bf54 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dae4:	bf00      	nop
 800dae6:	3720      	adds	r7, #32
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	20000e8c 	.word	0x20000e8c
 800daf0:	20000e90 	.word	0x20000e90
 800daf4:	20000f94 	.word	0x20000f94

0800daf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800daf8:	b480      	push	{r7}
 800dafa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dafc:	4b07      	ldr	r3, [pc, #28]	@ (800db1c <pvTaskIncrementMutexHeldCount+0x24>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d004      	beq.n	800db0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db04:	4b05      	ldr	r3, [pc, #20]	@ (800db1c <pvTaskIncrementMutexHeldCount+0x24>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800db0a:	3201      	adds	r2, #1
 800db0c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800db0e:	4b03      	ldr	r3, [pc, #12]	@ (800db1c <pvTaskIncrementMutexHeldCount+0x24>)
 800db10:	681b      	ldr	r3, [r3, #0]
	}
 800db12:	4618      	mov	r0, r3
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	20000e8c 	.word	0x20000e8c

0800db20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db2a:	4b29      	ldr	r3, [pc, #164]	@ (800dbd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db30:	4b28      	ldr	r3, [pc, #160]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	3304      	adds	r3, #4
 800db36:	4618      	mov	r0, r3
 800db38:	f7fe fa69 	bl	800c00e <uxListRemove>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d10b      	bne.n	800db5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800db42:	4b24      	ldr	r3, [pc, #144]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db48:	2201      	movs	r2, #1
 800db4a:	fa02 f303 	lsl.w	r3, r2, r3
 800db4e:	43da      	mvns	r2, r3
 800db50:	4b21      	ldr	r3, [pc, #132]	@ (800dbd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4013      	ands	r3, r2
 800db56:	4a20      	ldr	r2, [pc, #128]	@ (800dbd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db60:	d10a      	bne.n	800db78 <prvAddCurrentTaskToDelayedList+0x58>
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d007      	beq.n	800db78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db68:	4b1a      	ldr	r3, [pc, #104]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	3304      	adds	r3, #4
 800db6e:	4619      	mov	r1, r3
 800db70:	481a      	ldr	r0, [pc, #104]	@ (800dbdc <prvAddCurrentTaskToDelayedList+0xbc>)
 800db72:	f7fe f9ef 	bl	800bf54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db76:	e026      	b.n	800dbc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4413      	add	r3, r2
 800db7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db80:	4b14      	ldr	r3, [pc, #80]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db88:	68ba      	ldr	r2, [r7, #8]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d209      	bcs.n	800dba4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db90:	4b13      	ldr	r3, [pc, #76]	@ (800dbe0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	4b0f      	ldr	r3, [pc, #60]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	3304      	adds	r3, #4
 800db9a:	4619      	mov	r1, r3
 800db9c:	4610      	mov	r0, r2
 800db9e:	f7fe f9fd 	bl	800bf9c <vListInsert>
}
 800dba2:	e010      	b.n	800dbc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dba4:	4b0f      	ldr	r3, [pc, #60]	@ (800dbe4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	4b0a      	ldr	r3, [pc, #40]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	3304      	adds	r3, #4
 800dbae:	4619      	mov	r1, r3
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	f7fe f9f3 	bl	800bf9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbb6:	4b0c      	ldr	r3, [pc, #48]	@ (800dbe8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d202      	bcs.n	800dbc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dbc0:	4a09      	ldr	r2, [pc, #36]	@ (800dbe8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	6013      	str	r3, [r2, #0]
}
 800dbc6:	bf00      	nop
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	20000f90 	.word	0x20000f90
 800dbd4:	20000e8c 	.word	0x20000e8c
 800dbd8:	20000f94 	.word	0x20000f94
 800dbdc:	20000f78 	.word	0x20000f78
 800dbe0:	20000f48 	.word	0x20000f48
 800dbe4:	20000f44 	.word	0x20000f44
 800dbe8:	20000fac 	.word	0x20000fac

0800dbec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	3b04      	subs	r3, #4
 800dbfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dc04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	3b04      	subs	r3, #4
 800dc0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	f023 0201 	bic.w	r2, r3, #1
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	3b04      	subs	r3, #4
 800dc1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc1c:	4a0c      	ldr	r2, [pc, #48]	@ (800dc50 <pxPortInitialiseStack+0x64>)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	3b14      	subs	r3, #20
 800dc26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3b04      	subs	r3, #4
 800dc32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f06f 0202 	mvn.w	r2, #2
 800dc3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	3b20      	subs	r3, #32
 800dc40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc42:	68fb      	ldr	r3, [r7, #12]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3714      	adds	r7, #20
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	0800dc55 	.word	0x0800dc55

0800dc54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc5e:	4b15      	ldr	r3, [pc, #84]	@ (800dcb4 <prvTaskExitError+0x60>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc66:	d00d      	beq.n	800dc84 <prvTaskExitError+0x30>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc6c:	b672      	cpsid	i
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	b662      	cpsie	i
 800dc7c:	60fb      	str	r3, [r7, #12]
}
 800dc7e:	bf00      	nop
 800dc80:	bf00      	nop
 800dc82:	e7fd      	b.n	800dc80 <prvTaskExitError+0x2c>
	__asm volatile
 800dc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc88:	b672      	cpsid	i
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	b662      	cpsie	i
 800dc98:	60bb      	str	r3, [r7, #8]
}
 800dc9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc9c:	bf00      	nop
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d0fc      	beq.n	800dc9e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dca4:	bf00      	nop
 800dca6:	bf00      	nop
 800dca8:	3714      	adds	r7, #20
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	20000054 	.word	0x20000054
	...

0800dcc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dcc0:	4b07      	ldr	r3, [pc, #28]	@ (800dce0 <pxCurrentTCBConst2>)
 800dcc2:	6819      	ldr	r1, [r3, #0]
 800dcc4:	6808      	ldr	r0, [r1, #0]
 800dcc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcca:	f380 8809 	msr	PSP, r0
 800dcce:	f3bf 8f6f 	isb	sy
 800dcd2:	f04f 0000 	mov.w	r0, #0
 800dcd6:	f380 8811 	msr	BASEPRI, r0
 800dcda:	4770      	bx	lr
 800dcdc:	f3af 8000 	nop.w

0800dce0 <pxCurrentTCBConst2>:
 800dce0:	20000e8c 	.word	0x20000e8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop

0800dce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dce8:	4808      	ldr	r0, [pc, #32]	@ (800dd0c <prvPortStartFirstTask+0x24>)
 800dcea:	6800      	ldr	r0, [r0, #0]
 800dcec:	6800      	ldr	r0, [r0, #0]
 800dcee:	f380 8808 	msr	MSP, r0
 800dcf2:	f04f 0000 	mov.w	r0, #0
 800dcf6:	f380 8814 	msr	CONTROL, r0
 800dcfa:	b662      	cpsie	i
 800dcfc:	b661      	cpsie	f
 800dcfe:	f3bf 8f4f 	dsb	sy
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	df00      	svc	0
 800dd08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd0a:	bf00      	nop
 800dd0c:	e000ed08 	.word	0xe000ed08

0800dd10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd16:	4b37      	ldr	r3, [pc, #220]	@ (800ddf4 <xPortStartScheduler+0xe4>)
 800dd18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	22ff      	movs	r2, #255	@ 0xff
 800dd26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd30:	78fb      	ldrb	r3, [r7, #3]
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	4b2f      	ldr	r3, [pc, #188]	@ (800ddf8 <xPortStartScheduler+0xe8>)
 800dd3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd3e:	4b2f      	ldr	r3, [pc, #188]	@ (800ddfc <xPortStartScheduler+0xec>)
 800dd40:	2207      	movs	r2, #7
 800dd42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd44:	e009      	b.n	800dd5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dd46:	4b2d      	ldr	r3, [pc, #180]	@ (800ddfc <xPortStartScheduler+0xec>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	4a2b      	ldr	r2, [pc, #172]	@ (800ddfc <xPortStartScheduler+0xec>)
 800dd4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd50:	78fb      	ldrb	r3, [r7, #3]
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	005b      	lsls	r3, r3, #1
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd5a:	78fb      	ldrb	r3, [r7, #3]
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd62:	2b80      	cmp	r3, #128	@ 0x80
 800dd64:	d0ef      	beq.n	800dd46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd66:	4b25      	ldr	r3, [pc, #148]	@ (800ddfc <xPortStartScheduler+0xec>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f1c3 0307 	rsb	r3, r3, #7
 800dd6e:	2b04      	cmp	r3, #4
 800dd70:	d00d      	beq.n	800dd8e <xPortStartScheduler+0x7e>
	__asm volatile
 800dd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd76:	b672      	cpsid	i
 800dd78:	f383 8811 	msr	BASEPRI, r3
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	b662      	cpsie	i
 800dd86:	60bb      	str	r3, [r7, #8]
}
 800dd88:	bf00      	nop
 800dd8a:	bf00      	nop
 800dd8c:	e7fd      	b.n	800dd8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd8e:	4b1b      	ldr	r3, [pc, #108]	@ (800ddfc <xPortStartScheduler+0xec>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	021b      	lsls	r3, r3, #8
 800dd94:	4a19      	ldr	r2, [pc, #100]	@ (800ddfc <xPortStartScheduler+0xec>)
 800dd96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd98:	4b18      	ldr	r3, [pc, #96]	@ (800ddfc <xPortStartScheduler+0xec>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dda0:	4a16      	ldr	r2, [pc, #88]	@ (800ddfc <xPortStartScheduler+0xec>)
 800dda2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	b2da      	uxtb	r2, r3
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ddac:	4b14      	ldr	r3, [pc, #80]	@ (800de00 <xPortStartScheduler+0xf0>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a13      	ldr	r2, [pc, #76]	@ (800de00 <xPortStartScheduler+0xf0>)
 800ddb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ddb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ddb8:	4b11      	ldr	r3, [pc, #68]	@ (800de00 <xPortStartScheduler+0xf0>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a10      	ldr	r2, [pc, #64]	@ (800de00 <xPortStartScheduler+0xf0>)
 800ddbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ddc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ddc4:	f000 f8dc 	bl	800df80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ddc8:	4b0e      	ldr	r3, [pc, #56]	@ (800de04 <xPortStartScheduler+0xf4>)
 800ddca:	2200      	movs	r2, #0
 800ddcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ddce:	f000 f8fb 	bl	800dfc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ddd2:	4b0d      	ldr	r3, [pc, #52]	@ (800de08 <xPortStartScheduler+0xf8>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a0c      	ldr	r2, [pc, #48]	@ (800de08 <xPortStartScheduler+0xf8>)
 800ddd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dddc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ddde:	f7ff ff83 	bl	800dce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dde2:	f7ff fa63 	bl	800d2ac <vTaskSwitchContext>
	prvTaskExitError();
 800dde6:	f7ff ff35 	bl	800dc54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	e000e400 	.word	0xe000e400
 800ddf8:	20000fb8 	.word	0x20000fb8
 800ddfc:	20000fbc 	.word	0x20000fbc
 800de00:	e000ed20 	.word	0xe000ed20
 800de04:	20000054 	.word	0x20000054
 800de08:	e000ef34 	.word	0xe000ef34

0800de0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
	__asm volatile
 800de12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de16:	b672      	cpsid	i
 800de18:	f383 8811 	msr	BASEPRI, r3
 800de1c:	f3bf 8f6f 	isb	sy
 800de20:	f3bf 8f4f 	dsb	sy
 800de24:	b662      	cpsie	i
 800de26:	607b      	str	r3, [r7, #4]
}
 800de28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de2a:	4b11      	ldr	r3, [pc, #68]	@ (800de70 <vPortEnterCritical+0x64>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	3301      	adds	r3, #1
 800de30:	4a0f      	ldr	r2, [pc, #60]	@ (800de70 <vPortEnterCritical+0x64>)
 800de32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de34:	4b0e      	ldr	r3, [pc, #56]	@ (800de70 <vPortEnterCritical+0x64>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d112      	bne.n	800de62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de3c:	4b0d      	ldr	r3, [pc, #52]	@ (800de74 <vPortEnterCritical+0x68>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00d      	beq.n	800de62 <vPortEnterCritical+0x56>
	__asm volatile
 800de46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4a:	b672      	cpsid	i
 800de4c:	f383 8811 	msr	BASEPRI, r3
 800de50:	f3bf 8f6f 	isb	sy
 800de54:	f3bf 8f4f 	dsb	sy
 800de58:	b662      	cpsie	i
 800de5a:	603b      	str	r3, [r7, #0]
}
 800de5c:	bf00      	nop
 800de5e:	bf00      	nop
 800de60:	e7fd      	b.n	800de5e <vPortEnterCritical+0x52>
	}
}
 800de62:	bf00      	nop
 800de64:	370c      	adds	r7, #12
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	20000054 	.word	0x20000054
 800de74:	e000ed04 	.word	0xe000ed04

0800de78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de7e:	4b13      	ldr	r3, [pc, #76]	@ (800decc <vPortExitCritical+0x54>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d10d      	bne.n	800dea2 <vPortExitCritical+0x2a>
	__asm volatile
 800de86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8a:	b672      	cpsid	i
 800de8c:	f383 8811 	msr	BASEPRI, r3
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	b662      	cpsie	i
 800de9a:	607b      	str	r3, [r7, #4]
}
 800de9c:	bf00      	nop
 800de9e:	bf00      	nop
 800dea0:	e7fd      	b.n	800de9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800dea2:	4b0a      	ldr	r3, [pc, #40]	@ (800decc <vPortExitCritical+0x54>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	3b01      	subs	r3, #1
 800dea8:	4a08      	ldr	r2, [pc, #32]	@ (800decc <vPortExitCritical+0x54>)
 800deaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800deac:	4b07      	ldr	r3, [pc, #28]	@ (800decc <vPortExitCritical+0x54>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d105      	bne.n	800dec0 <vPortExitCritical+0x48>
 800deb4:	2300      	movs	r3, #0
 800deb6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800debe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dec0:	bf00      	nop
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	20000054 	.word	0x20000054

0800ded0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ded0:	f3ef 8009 	mrs	r0, PSP
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	4b15      	ldr	r3, [pc, #84]	@ (800df30 <pxCurrentTCBConst>)
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	f01e 0f10 	tst.w	lr, #16
 800dee0:	bf08      	it	eq
 800dee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deea:	6010      	str	r0, [r2, #0]
 800deec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800def0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800def4:	b672      	cpsid	i
 800def6:	f380 8811 	msr	BASEPRI, r0
 800defa:	f3bf 8f4f 	dsb	sy
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	b662      	cpsie	i
 800df04:	f7ff f9d2 	bl	800d2ac <vTaskSwitchContext>
 800df08:	f04f 0000 	mov.w	r0, #0
 800df0c:	f380 8811 	msr	BASEPRI, r0
 800df10:	bc09      	pop	{r0, r3}
 800df12:	6819      	ldr	r1, [r3, #0]
 800df14:	6808      	ldr	r0, [r1, #0]
 800df16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1a:	f01e 0f10 	tst.w	lr, #16
 800df1e:	bf08      	it	eq
 800df20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df24:	f380 8809 	msr	PSP, r0
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop

0800df30 <pxCurrentTCBConst>:
 800df30:	20000e8c 	.word	0x20000e8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop

0800df38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
	__asm volatile
 800df3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df42:	b672      	cpsid	i
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	b662      	cpsie	i
 800df52:	607b      	str	r3, [r7, #4]
}
 800df54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df56:	f7ff f8ed 	bl	800d134 <xTaskIncrementTick>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d003      	beq.n	800df68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df60:	4b06      	ldr	r3, [pc, #24]	@ (800df7c <SysTick_Handler+0x44>)
 800df62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	2300      	movs	r3, #0
 800df6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	f383 8811 	msr	BASEPRI, r3
}
 800df72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df74:	bf00      	nop
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	e000ed04 	.word	0xe000ed04

0800df80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df80:	b480      	push	{r7}
 800df82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df84:	4b0b      	ldr	r3, [pc, #44]	@ (800dfb4 <vPortSetupTimerInterrupt+0x34>)
 800df86:	2200      	movs	r2, #0
 800df88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df8a:	4b0b      	ldr	r3, [pc, #44]	@ (800dfb8 <vPortSetupTimerInterrupt+0x38>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df90:	4b0a      	ldr	r3, [pc, #40]	@ (800dfbc <vPortSetupTimerInterrupt+0x3c>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a0a      	ldr	r2, [pc, #40]	@ (800dfc0 <vPortSetupTimerInterrupt+0x40>)
 800df96:	fba2 2303 	umull	r2, r3, r2, r3
 800df9a:	099b      	lsrs	r3, r3, #6
 800df9c:	4a09      	ldr	r2, [pc, #36]	@ (800dfc4 <vPortSetupTimerInterrupt+0x44>)
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dfa2:	4b04      	ldr	r3, [pc, #16]	@ (800dfb4 <vPortSetupTimerInterrupt+0x34>)
 800dfa4:	2207      	movs	r2, #7
 800dfa6:	601a      	str	r2, [r3, #0]
}
 800dfa8:	bf00      	nop
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	e000e010 	.word	0xe000e010
 800dfb8:	e000e018 	.word	0xe000e018
 800dfbc:	20000048 	.word	0x20000048
 800dfc0:	10624dd3 	.word	0x10624dd3
 800dfc4:	e000e014 	.word	0xe000e014

0800dfc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dfc8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dfd8 <vPortEnableVFP+0x10>
 800dfcc:	6801      	ldr	r1, [r0, #0]
 800dfce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dfd2:	6001      	str	r1, [r0, #0]
 800dfd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dfd6:	bf00      	nop
 800dfd8:	e000ed88 	.word	0xe000ed88

0800dfdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b08a      	sub	sp, #40	@ 0x28
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dfe8:	f7fe ffe6 	bl	800cfb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dfec:	4b5d      	ldr	r3, [pc, #372]	@ (800e164 <pvPortMalloc+0x188>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d101      	bne.n	800dff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dff4:	f000 f920 	bl	800e238 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dff8:	4b5b      	ldr	r3, [pc, #364]	@ (800e168 <pvPortMalloc+0x18c>)
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4013      	ands	r3, r2
 800e000:	2b00      	cmp	r3, #0
 800e002:	f040 8094 	bne.w	800e12e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d020      	beq.n	800e04e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800e00c:	2208      	movs	r2, #8
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4413      	add	r3, r2
 800e012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f003 0307 	and.w	r3, r3, #7
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d017      	beq.n	800e04e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f023 0307 	bic.w	r3, r3, #7
 800e024:	3308      	adds	r3, #8
 800e026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f003 0307 	and.w	r3, r3, #7
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00d      	beq.n	800e04e <pvPortMalloc+0x72>
	__asm volatile
 800e032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e036:	b672      	cpsid	i
 800e038:	f383 8811 	msr	BASEPRI, r3
 800e03c:	f3bf 8f6f 	isb	sy
 800e040:	f3bf 8f4f 	dsb	sy
 800e044:	b662      	cpsie	i
 800e046:	617b      	str	r3, [r7, #20]
}
 800e048:	bf00      	nop
 800e04a:	bf00      	nop
 800e04c:	e7fd      	b.n	800e04a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d06c      	beq.n	800e12e <pvPortMalloc+0x152>
 800e054:	4b45      	ldr	r3, [pc, #276]	@ (800e16c <pvPortMalloc+0x190>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d867      	bhi.n	800e12e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e05e:	4b44      	ldr	r3, [pc, #272]	@ (800e170 <pvPortMalloc+0x194>)
 800e060:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e062:	4b43      	ldr	r3, [pc, #268]	@ (800e170 <pvPortMalloc+0x194>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e068:	e004      	b.n	800e074 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800e06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d903      	bls.n	800e086 <pvPortMalloc+0xaa>
 800e07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d1f1      	bne.n	800e06a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e086:	4b37      	ldr	r3, [pc, #220]	@ (800e164 <pvPortMalloc+0x188>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d04e      	beq.n	800e12e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e090:	6a3b      	ldr	r3, [r7, #32]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2208      	movs	r2, #8
 800e096:	4413      	add	r3, r2
 800e098:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	6a3b      	ldr	r3, [r7, #32]
 800e0a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a4:	685a      	ldr	r2, [r3, #4]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	1ad2      	subs	r2, r2, r3
 800e0aa:	2308      	movs	r3, #8
 800e0ac:	005b      	lsls	r3, r3, #1
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d922      	bls.n	800e0f8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	f003 0307 	and.w	r3, r3, #7
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00d      	beq.n	800e0e0 <pvPortMalloc+0x104>
	__asm volatile
 800e0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c8:	b672      	cpsid	i
 800e0ca:	f383 8811 	msr	BASEPRI, r3
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	b662      	cpsie	i
 800e0d8:	613b      	str	r3, [r7, #16]
}
 800e0da:	bf00      	nop
 800e0dc:	bf00      	nop
 800e0de:	e7fd      	b.n	800e0dc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e2:	685a      	ldr	r2, [r3, #4]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	1ad2      	subs	r2, r2, r3
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e0f2:	69b8      	ldr	r0, [r7, #24]
 800e0f4:	f000 f902 	bl	800e2fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e0f8:	4b1c      	ldr	r3, [pc, #112]	@ (800e16c <pvPortMalloc+0x190>)
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	1ad3      	subs	r3, r2, r3
 800e102:	4a1a      	ldr	r2, [pc, #104]	@ (800e16c <pvPortMalloc+0x190>)
 800e104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e106:	4b19      	ldr	r3, [pc, #100]	@ (800e16c <pvPortMalloc+0x190>)
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	4b1a      	ldr	r3, [pc, #104]	@ (800e174 <pvPortMalloc+0x198>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d203      	bcs.n	800e11a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e112:	4b16      	ldr	r3, [pc, #88]	@ (800e16c <pvPortMalloc+0x190>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a17      	ldr	r2, [pc, #92]	@ (800e174 <pvPortMalloc+0x198>)
 800e118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e11c:	685a      	ldr	r2, [r3, #4]
 800e11e:	4b12      	ldr	r3, [pc, #72]	@ (800e168 <pvPortMalloc+0x18c>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	431a      	orrs	r2, r3
 800e124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12a:	2200      	movs	r2, #0
 800e12c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e12e:	f7fe ff51 	bl	800cfd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	f003 0307 	and.w	r3, r3, #7
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00d      	beq.n	800e158 <pvPortMalloc+0x17c>
	__asm volatile
 800e13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e140:	b672      	cpsid	i
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	b662      	cpsie	i
 800e150:	60fb      	str	r3, [r7, #12]
}
 800e152:	bf00      	nop
 800e154:	bf00      	nop
 800e156:	e7fd      	b.n	800e154 <pvPortMalloc+0x178>
	return pvReturn;
 800e158:	69fb      	ldr	r3, [r7, #28]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3728      	adds	r7, #40	@ 0x28
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	20004bc8 	.word	0x20004bc8
 800e168:	20004bd4 	.word	0x20004bd4
 800e16c:	20004bcc 	.word	0x20004bcc
 800e170:	20004bc0 	.word	0x20004bc0
 800e174:	20004bd0 	.word	0x20004bd0

0800e178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b086      	sub	sp, #24
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d04e      	beq.n	800e228 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e18a:	2308      	movs	r3, #8
 800e18c:	425b      	negs	r3, r3
 800e18e:	697a      	ldr	r2, [r7, #20]
 800e190:	4413      	add	r3, r2
 800e192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	685a      	ldr	r2, [r3, #4]
 800e19c:	4b24      	ldr	r3, [pc, #144]	@ (800e230 <vPortFree+0xb8>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4013      	ands	r3, r2
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10d      	bne.n	800e1c2 <vPortFree+0x4a>
	__asm volatile
 800e1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1aa:	b672      	cpsid	i
 800e1ac:	f383 8811 	msr	BASEPRI, r3
 800e1b0:	f3bf 8f6f 	isb	sy
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	b662      	cpsie	i
 800e1ba:	60fb      	str	r3, [r7, #12]
}
 800e1bc:	bf00      	nop
 800e1be:	bf00      	nop
 800e1c0:	e7fd      	b.n	800e1be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00d      	beq.n	800e1e6 <vPortFree+0x6e>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ce:	b672      	cpsid	i
 800e1d0:	f383 8811 	msr	BASEPRI, r3
 800e1d4:	f3bf 8f6f 	isb	sy
 800e1d8:	f3bf 8f4f 	dsb	sy
 800e1dc:	b662      	cpsie	i
 800e1de:	60bb      	str	r3, [r7, #8]
}
 800e1e0:	bf00      	nop
 800e1e2:	bf00      	nop
 800e1e4:	e7fd      	b.n	800e1e2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	685a      	ldr	r2, [r3, #4]
 800e1ea:	4b11      	ldr	r3, [pc, #68]	@ (800e230 <vPortFree+0xb8>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4013      	ands	r3, r2
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d019      	beq.n	800e228 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d115      	bne.n	800e228 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	685a      	ldr	r2, [r3, #4]
 800e200:	4b0b      	ldr	r3, [pc, #44]	@ (800e230 <vPortFree+0xb8>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	43db      	mvns	r3, r3
 800e206:	401a      	ands	r2, r3
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e20c:	f7fe fed4 	bl	800cfb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	685a      	ldr	r2, [r3, #4]
 800e214:	4b07      	ldr	r3, [pc, #28]	@ (800e234 <vPortFree+0xbc>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4413      	add	r3, r2
 800e21a:	4a06      	ldr	r2, [pc, #24]	@ (800e234 <vPortFree+0xbc>)
 800e21c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e21e:	6938      	ldr	r0, [r7, #16]
 800e220:	f000 f86c 	bl	800e2fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e224:	f7fe fed6 	bl	800cfd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e228:	bf00      	nop
 800e22a:	3718      	adds	r7, #24
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	20004bd4 	.word	0x20004bd4
 800e234:	20004bcc 	.word	0x20004bcc

0800e238 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e23e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e242:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e244:	4b27      	ldr	r3, [pc, #156]	@ (800e2e4 <prvHeapInit+0xac>)
 800e246:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f003 0307 	and.w	r3, r3, #7
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00c      	beq.n	800e26c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	3307      	adds	r3, #7
 800e256:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f023 0307 	bic.w	r3, r3, #7
 800e25e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	4a1f      	ldr	r2, [pc, #124]	@ (800e2e4 <prvHeapInit+0xac>)
 800e268:	4413      	add	r3, r2
 800e26a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e270:	4a1d      	ldr	r2, [pc, #116]	@ (800e2e8 <prvHeapInit+0xb0>)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e276:	4b1c      	ldr	r3, [pc, #112]	@ (800e2e8 <prvHeapInit+0xb0>)
 800e278:	2200      	movs	r2, #0
 800e27a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	4413      	add	r3, r2
 800e282:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e284:	2208      	movs	r2, #8
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	1a9b      	subs	r3, r3, r2
 800e28a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f023 0307 	bic.w	r3, r3, #7
 800e292:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	4a15      	ldr	r2, [pc, #84]	@ (800e2ec <prvHeapInit+0xb4>)
 800e298:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e29a:	4b14      	ldr	r3, [pc, #80]	@ (800e2ec <prvHeapInit+0xb4>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2a2:	4b12      	ldr	r3, [pc, #72]	@ (800e2ec <prvHeapInit+0xb4>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	1ad2      	subs	r2, r2, r3
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e2b8:	4b0c      	ldr	r3, [pc, #48]	@ (800e2ec <prvHeapInit+0xb4>)
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	4a0a      	ldr	r2, [pc, #40]	@ (800e2f0 <prvHeapInit+0xb8>)
 800e2c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	4a09      	ldr	r2, [pc, #36]	@ (800e2f4 <prvHeapInit+0xbc>)
 800e2ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e2d0:	4b09      	ldr	r3, [pc, #36]	@ (800e2f8 <prvHeapInit+0xc0>)
 800e2d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e2d6:	601a      	str	r2, [r3, #0]
}
 800e2d8:	bf00      	nop
 800e2da:	3714      	adds	r7, #20
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	20000fc0 	.word	0x20000fc0
 800e2e8:	20004bc0 	.word	0x20004bc0
 800e2ec:	20004bc8 	.word	0x20004bc8
 800e2f0:	20004bd0 	.word	0x20004bd0
 800e2f4:	20004bcc 	.word	0x20004bcc
 800e2f8:	20004bd4 	.word	0x20004bd4

0800e2fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b085      	sub	sp, #20
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e304:	4b28      	ldr	r3, [pc, #160]	@ (800e3a8 <prvInsertBlockIntoFreeList+0xac>)
 800e306:	60fb      	str	r3, [r7, #12]
 800e308:	e002      	b.n	800e310 <prvInsertBlockIntoFreeList+0x14>
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	60fb      	str	r3, [r7, #12]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	429a      	cmp	r2, r3
 800e318:	d8f7      	bhi.n	800e30a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	4413      	add	r3, r2
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d108      	bne.n	800e33e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	685a      	ldr	r2, [r3, #4]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	441a      	add	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	68ba      	ldr	r2, [r7, #8]
 800e348:	441a      	add	r2, r3
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d118      	bne.n	800e384 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	4b15      	ldr	r3, [pc, #84]	@ (800e3ac <prvInsertBlockIntoFreeList+0xb0>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d00d      	beq.n	800e37a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	441a      	add	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	681a      	ldr	r2, [r3, #0]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	601a      	str	r2, [r3, #0]
 800e378:	e008      	b.n	800e38c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e37a:	4b0c      	ldr	r3, [pc, #48]	@ (800e3ac <prvInsertBlockIntoFreeList+0xb0>)
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	e003      	b.n	800e38c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	429a      	cmp	r2, r3
 800e392:	d002      	beq.n	800e39a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e39a:	bf00      	nop
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	20004bc0 	.word	0x20004bc0
 800e3ac:	20004bc8 	.word	0x20004bc8

0800e3b0 <rand>:
 800e3b0:	4b16      	ldr	r3, [pc, #88]	@ (800e40c <rand+0x5c>)
 800e3b2:	b510      	push	{r4, lr}
 800e3b4:	681c      	ldr	r4, [r3, #0]
 800e3b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e3b8:	b9b3      	cbnz	r3, 800e3e8 <rand+0x38>
 800e3ba:	2018      	movs	r0, #24
 800e3bc:	f000 faa4 	bl	800e908 <malloc>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	6320      	str	r0, [r4, #48]	@ 0x30
 800e3c4:	b920      	cbnz	r0, 800e3d0 <rand+0x20>
 800e3c6:	4b12      	ldr	r3, [pc, #72]	@ (800e410 <rand+0x60>)
 800e3c8:	4812      	ldr	r0, [pc, #72]	@ (800e414 <rand+0x64>)
 800e3ca:	2152      	movs	r1, #82	@ 0x52
 800e3cc:	f000 fa34 	bl	800e838 <__assert_func>
 800e3d0:	4911      	ldr	r1, [pc, #68]	@ (800e418 <rand+0x68>)
 800e3d2:	4b12      	ldr	r3, [pc, #72]	@ (800e41c <rand+0x6c>)
 800e3d4:	e9c0 1300 	strd	r1, r3, [r0]
 800e3d8:	4b11      	ldr	r3, [pc, #68]	@ (800e420 <rand+0x70>)
 800e3da:	6083      	str	r3, [r0, #8]
 800e3dc:	230b      	movs	r3, #11
 800e3de:	8183      	strh	r3, [r0, #12]
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	2001      	movs	r0, #1
 800e3e4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e3e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e3ea:	480e      	ldr	r0, [pc, #56]	@ (800e424 <rand+0x74>)
 800e3ec:	690b      	ldr	r3, [r1, #16]
 800e3ee:	694c      	ldr	r4, [r1, #20]
 800e3f0:	4a0d      	ldr	r2, [pc, #52]	@ (800e428 <rand+0x78>)
 800e3f2:	4358      	muls	r0, r3
 800e3f4:	fb02 0004 	mla	r0, r2, r4, r0
 800e3f8:	fba3 3202 	umull	r3, r2, r3, r2
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	eb40 0002 	adc.w	r0, r0, r2
 800e402:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e406:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e40a:	bd10      	pop	{r4, pc}
 800e40c:	20000064 	.word	0x20000064
 800e410:	0801dc88 	.word	0x0801dc88
 800e414:	0801dc9f 	.word	0x0801dc9f
 800e418:	abcd330e 	.word	0xabcd330e
 800e41c:	e66d1234 	.word	0xe66d1234
 800e420:	0005deec 	.word	0x0005deec
 800e424:	5851f42d 	.word	0x5851f42d
 800e428:	4c957f2d 	.word	0x4c957f2d

0800e42c <std>:
 800e42c:	2300      	movs	r3, #0
 800e42e:	b510      	push	{r4, lr}
 800e430:	4604      	mov	r4, r0
 800e432:	e9c0 3300 	strd	r3, r3, [r0]
 800e436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e43a:	6083      	str	r3, [r0, #8]
 800e43c:	8181      	strh	r1, [r0, #12]
 800e43e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e440:	81c2      	strh	r2, [r0, #14]
 800e442:	6183      	str	r3, [r0, #24]
 800e444:	4619      	mov	r1, r3
 800e446:	2208      	movs	r2, #8
 800e448:	305c      	adds	r0, #92	@ 0x5c
 800e44a:	f000 f914 	bl	800e676 <memset>
 800e44e:	4b0d      	ldr	r3, [pc, #52]	@ (800e484 <std+0x58>)
 800e450:	6263      	str	r3, [r4, #36]	@ 0x24
 800e452:	4b0d      	ldr	r3, [pc, #52]	@ (800e488 <std+0x5c>)
 800e454:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e456:	4b0d      	ldr	r3, [pc, #52]	@ (800e48c <std+0x60>)
 800e458:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e45a:	4b0d      	ldr	r3, [pc, #52]	@ (800e490 <std+0x64>)
 800e45c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e45e:	4b0d      	ldr	r3, [pc, #52]	@ (800e494 <std+0x68>)
 800e460:	6224      	str	r4, [r4, #32]
 800e462:	429c      	cmp	r4, r3
 800e464:	d006      	beq.n	800e474 <std+0x48>
 800e466:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e46a:	4294      	cmp	r4, r2
 800e46c:	d002      	beq.n	800e474 <std+0x48>
 800e46e:	33d0      	adds	r3, #208	@ 0xd0
 800e470:	429c      	cmp	r4, r3
 800e472:	d105      	bne.n	800e480 <std+0x54>
 800e474:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e47c:	f000 b9ca 	b.w	800e814 <__retarget_lock_init_recursive>
 800e480:	bd10      	pop	{r4, pc}
 800e482:	bf00      	nop
 800e484:	0800e5f1 	.word	0x0800e5f1
 800e488:	0800e613 	.word	0x0800e613
 800e48c:	0800e64b 	.word	0x0800e64b
 800e490:	0800e66f 	.word	0x0800e66f
 800e494:	20004bd8 	.word	0x20004bd8

0800e498 <stdio_exit_handler>:
 800e498:	4a02      	ldr	r2, [pc, #8]	@ (800e4a4 <stdio_exit_handler+0xc>)
 800e49a:	4903      	ldr	r1, [pc, #12]	@ (800e4a8 <stdio_exit_handler+0x10>)
 800e49c:	4803      	ldr	r0, [pc, #12]	@ (800e4ac <stdio_exit_handler+0x14>)
 800e49e:	f000 b869 	b.w	800e574 <_fwalk_sglue>
 800e4a2:	bf00      	nop
 800e4a4:	20000058 	.word	0x20000058
 800e4a8:	0800f149 	.word	0x0800f149
 800e4ac:	20000068 	.word	0x20000068

0800e4b0 <cleanup_stdio>:
 800e4b0:	6841      	ldr	r1, [r0, #4]
 800e4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e4e4 <cleanup_stdio+0x34>)
 800e4b4:	4299      	cmp	r1, r3
 800e4b6:	b510      	push	{r4, lr}
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	d001      	beq.n	800e4c0 <cleanup_stdio+0x10>
 800e4bc:	f000 fe44 	bl	800f148 <_fflush_r>
 800e4c0:	68a1      	ldr	r1, [r4, #8]
 800e4c2:	4b09      	ldr	r3, [pc, #36]	@ (800e4e8 <cleanup_stdio+0x38>)
 800e4c4:	4299      	cmp	r1, r3
 800e4c6:	d002      	beq.n	800e4ce <cleanup_stdio+0x1e>
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f000 fe3d 	bl	800f148 <_fflush_r>
 800e4ce:	68e1      	ldr	r1, [r4, #12]
 800e4d0:	4b06      	ldr	r3, [pc, #24]	@ (800e4ec <cleanup_stdio+0x3c>)
 800e4d2:	4299      	cmp	r1, r3
 800e4d4:	d004      	beq.n	800e4e0 <cleanup_stdio+0x30>
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4dc:	f000 be34 	b.w	800f148 <_fflush_r>
 800e4e0:	bd10      	pop	{r4, pc}
 800e4e2:	bf00      	nop
 800e4e4:	20004bd8 	.word	0x20004bd8
 800e4e8:	20004c40 	.word	0x20004c40
 800e4ec:	20004ca8 	.word	0x20004ca8

0800e4f0 <global_stdio_init.part.0>:
 800e4f0:	b510      	push	{r4, lr}
 800e4f2:	4b0b      	ldr	r3, [pc, #44]	@ (800e520 <global_stdio_init.part.0+0x30>)
 800e4f4:	4c0b      	ldr	r4, [pc, #44]	@ (800e524 <global_stdio_init.part.0+0x34>)
 800e4f6:	4a0c      	ldr	r2, [pc, #48]	@ (800e528 <global_stdio_init.part.0+0x38>)
 800e4f8:	601a      	str	r2, [r3, #0]
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	2104      	movs	r1, #4
 800e500:	f7ff ff94 	bl	800e42c <std>
 800e504:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e508:	2201      	movs	r2, #1
 800e50a:	2109      	movs	r1, #9
 800e50c:	f7ff ff8e 	bl	800e42c <std>
 800e510:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e514:	2202      	movs	r2, #2
 800e516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e51a:	2112      	movs	r1, #18
 800e51c:	f7ff bf86 	b.w	800e42c <std>
 800e520:	20004d10 	.word	0x20004d10
 800e524:	20004bd8 	.word	0x20004bd8
 800e528:	0800e499 	.word	0x0800e499

0800e52c <__sfp_lock_acquire>:
 800e52c:	4801      	ldr	r0, [pc, #4]	@ (800e534 <__sfp_lock_acquire+0x8>)
 800e52e:	f000 b972 	b.w	800e816 <__retarget_lock_acquire_recursive>
 800e532:	bf00      	nop
 800e534:	20004d19 	.word	0x20004d19

0800e538 <__sfp_lock_release>:
 800e538:	4801      	ldr	r0, [pc, #4]	@ (800e540 <__sfp_lock_release+0x8>)
 800e53a:	f000 b96d 	b.w	800e818 <__retarget_lock_release_recursive>
 800e53e:	bf00      	nop
 800e540:	20004d19 	.word	0x20004d19

0800e544 <__sinit>:
 800e544:	b510      	push	{r4, lr}
 800e546:	4604      	mov	r4, r0
 800e548:	f7ff fff0 	bl	800e52c <__sfp_lock_acquire>
 800e54c:	6a23      	ldr	r3, [r4, #32]
 800e54e:	b11b      	cbz	r3, 800e558 <__sinit+0x14>
 800e550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e554:	f7ff bff0 	b.w	800e538 <__sfp_lock_release>
 800e558:	4b04      	ldr	r3, [pc, #16]	@ (800e56c <__sinit+0x28>)
 800e55a:	6223      	str	r3, [r4, #32]
 800e55c:	4b04      	ldr	r3, [pc, #16]	@ (800e570 <__sinit+0x2c>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d1f5      	bne.n	800e550 <__sinit+0xc>
 800e564:	f7ff ffc4 	bl	800e4f0 <global_stdio_init.part.0>
 800e568:	e7f2      	b.n	800e550 <__sinit+0xc>
 800e56a:	bf00      	nop
 800e56c:	0800e4b1 	.word	0x0800e4b1
 800e570:	20004d10 	.word	0x20004d10

0800e574 <_fwalk_sglue>:
 800e574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e578:	4607      	mov	r7, r0
 800e57a:	4688      	mov	r8, r1
 800e57c:	4614      	mov	r4, r2
 800e57e:	2600      	movs	r6, #0
 800e580:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e584:	f1b9 0901 	subs.w	r9, r9, #1
 800e588:	d505      	bpl.n	800e596 <_fwalk_sglue+0x22>
 800e58a:	6824      	ldr	r4, [r4, #0]
 800e58c:	2c00      	cmp	r4, #0
 800e58e:	d1f7      	bne.n	800e580 <_fwalk_sglue+0xc>
 800e590:	4630      	mov	r0, r6
 800e592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e596:	89ab      	ldrh	r3, [r5, #12]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d907      	bls.n	800e5ac <_fwalk_sglue+0x38>
 800e59c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	d003      	beq.n	800e5ac <_fwalk_sglue+0x38>
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	4638      	mov	r0, r7
 800e5a8:	47c0      	blx	r8
 800e5aa:	4306      	orrs	r6, r0
 800e5ac:	3568      	adds	r5, #104	@ 0x68
 800e5ae:	e7e9      	b.n	800e584 <_fwalk_sglue+0x10>

0800e5b0 <siprintf>:
 800e5b0:	b40e      	push	{r1, r2, r3}
 800e5b2:	b500      	push	{lr}
 800e5b4:	b09c      	sub	sp, #112	@ 0x70
 800e5b6:	ab1d      	add	r3, sp, #116	@ 0x74
 800e5b8:	9002      	str	r0, [sp, #8]
 800e5ba:	9006      	str	r0, [sp, #24]
 800e5bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e5c0:	4809      	ldr	r0, [pc, #36]	@ (800e5e8 <siprintf+0x38>)
 800e5c2:	9107      	str	r1, [sp, #28]
 800e5c4:	9104      	str	r1, [sp, #16]
 800e5c6:	4909      	ldr	r1, [pc, #36]	@ (800e5ec <siprintf+0x3c>)
 800e5c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5cc:	9105      	str	r1, [sp, #20]
 800e5ce:	6800      	ldr	r0, [r0, #0]
 800e5d0:	9301      	str	r3, [sp, #4]
 800e5d2:	a902      	add	r1, sp, #8
 800e5d4:	f000 faaa 	bl	800eb2c <_svfiprintf_r>
 800e5d8:	9b02      	ldr	r3, [sp, #8]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	701a      	strb	r2, [r3, #0]
 800e5de:	b01c      	add	sp, #112	@ 0x70
 800e5e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5e4:	b003      	add	sp, #12
 800e5e6:	4770      	bx	lr
 800e5e8:	20000064 	.word	0x20000064
 800e5ec:	ffff0208 	.word	0xffff0208

0800e5f0 <__sread>:
 800e5f0:	b510      	push	{r4, lr}
 800e5f2:	460c      	mov	r4, r1
 800e5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5f8:	f000 f8be 	bl	800e778 <_read_r>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	bfab      	itete	ge
 800e600:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e602:	89a3      	ldrhlt	r3, [r4, #12]
 800e604:	181b      	addge	r3, r3, r0
 800e606:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e60a:	bfac      	ite	ge
 800e60c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e60e:	81a3      	strhlt	r3, [r4, #12]
 800e610:	bd10      	pop	{r4, pc}

0800e612 <__swrite>:
 800e612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e616:	461f      	mov	r7, r3
 800e618:	898b      	ldrh	r3, [r1, #12]
 800e61a:	05db      	lsls	r3, r3, #23
 800e61c:	4605      	mov	r5, r0
 800e61e:	460c      	mov	r4, r1
 800e620:	4616      	mov	r6, r2
 800e622:	d505      	bpl.n	800e630 <__swrite+0x1e>
 800e624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e628:	2302      	movs	r3, #2
 800e62a:	2200      	movs	r2, #0
 800e62c:	f000 f892 	bl	800e754 <_lseek_r>
 800e630:	89a3      	ldrh	r3, [r4, #12]
 800e632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e636:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e63a:	81a3      	strh	r3, [r4, #12]
 800e63c:	4632      	mov	r2, r6
 800e63e:	463b      	mov	r3, r7
 800e640:	4628      	mov	r0, r5
 800e642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e646:	f000 b8a9 	b.w	800e79c <_write_r>

0800e64a <__sseek>:
 800e64a:	b510      	push	{r4, lr}
 800e64c:	460c      	mov	r4, r1
 800e64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e652:	f000 f87f 	bl	800e754 <_lseek_r>
 800e656:	1c43      	adds	r3, r0, #1
 800e658:	89a3      	ldrh	r3, [r4, #12]
 800e65a:	bf15      	itete	ne
 800e65c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e65e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e662:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e666:	81a3      	strheq	r3, [r4, #12]
 800e668:	bf18      	it	ne
 800e66a:	81a3      	strhne	r3, [r4, #12]
 800e66c:	bd10      	pop	{r4, pc}

0800e66e <__sclose>:
 800e66e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e672:	f000 b809 	b.w	800e688 <_close_r>

0800e676 <memset>:
 800e676:	4402      	add	r2, r0
 800e678:	4603      	mov	r3, r0
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d100      	bne.n	800e680 <memset+0xa>
 800e67e:	4770      	bx	lr
 800e680:	f803 1b01 	strb.w	r1, [r3], #1
 800e684:	e7f9      	b.n	800e67a <memset+0x4>
	...

0800e688 <_close_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4d06      	ldr	r5, [pc, #24]	@ (800e6a4 <_close_r+0x1c>)
 800e68c:	2300      	movs	r3, #0
 800e68e:	4604      	mov	r4, r0
 800e690:	4608      	mov	r0, r1
 800e692:	602b      	str	r3, [r5, #0]
 800e694:	f7f6 ff18 	bl	80054c8 <_close>
 800e698:	1c43      	adds	r3, r0, #1
 800e69a:	d102      	bne.n	800e6a2 <_close_r+0x1a>
 800e69c:	682b      	ldr	r3, [r5, #0]
 800e69e:	b103      	cbz	r3, 800e6a2 <_close_r+0x1a>
 800e6a0:	6023      	str	r3, [r4, #0]
 800e6a2:	bd38      	pop	{r3, r4, r5, pc}
 800e6a4:	20004d14 	.word	0x20004d14

0800e6a8 <_reclaim_reent>:
 800e6a8:	4b29      	ldr	r3, [pc, #164]	@ (800e750 <_reclaim_reent+0xa8>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4283      	cmp	r3, r0
 800e6ae:	b570      	push	{r4, r5, r6, lr}
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	d04b      	beq.n	800e74c <_reclaim_reent+0xa4>
 800e6b4:	69c3      	ldr	r3, [r0, #28]
 800e6b6:	b1ab      	cbz	r3, 800e6e4 <_reclaim_reent+0x3c>
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	b16b      	cbz	r3, 800e6d8 <_reclaim_reent+0x30>
 800e6bc:	2500      	movs	r5, #0
 800e6be:	69e3      	ldr	r3, [r4, #28]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	5959      	ldr	r1, [r3, r5]
 800e6c4:	2900      	cmp	r1, #0
 800e6c6:	d13b      	bne.n	800e740 <_reclaim_reent+0x98>
 800e6c8:	3504      	adds	r5, #4
 800e6ca:	2d80      	cmp	r5, #128	@ 0x80
 800e6cc:	d1f7      	bne.n	800e6be <_reclaim_reent+0x16>
 800e6ce:	69e3      	ldr	r3, [r4, #28]
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	68d9      	ldr	r1, [r3, #12]
 800e6d4:	f000 f8ce 	bl	800e874 <_free_r>
 800e6d8:	69e3      	ldr	r3, [r4, #28]
 800e6da:	6819      	ldr	r1, [r3, #0]
 800e6dc:	b111      	cbz	r1, 800e6e4 <_reclaim_reent+0x3c>
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f000 f8c8 	bl	800e874 <_free_r>
 800e6e4:	6961      	ldr	r1, [r4, #20]
 800e6e6:	b111      	cbz	r1, 800e6ee <_reclaim_reent+0x46>
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	f000 f8c3 	bl	800e874 <_free_r>
 800e6ee:	69e1      	ldr	r1, [r4, #28]
 800e6f0:	b111      	cbz	r1, 800e6f8 <_reclaim_reent+0x50>
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f000 f8be 	bl	800e874 <_free_r>
 800e6f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e6fa:	b111      	cbz	r1, 800e702 <_reclaim_reent+0x5a>
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f000 f8b9 	bl	800e874 <_free_r>
 800e702:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e704:	b111      	cbz	r1, 800e70c <_reclaim_reent+0x64>
 800e706:	4620      	mov	r0, r4
 800e708:	f000 f8b4 	bl	800e874 <_free_r>
 800e70c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e70e:	b111      	cbz	r1, 800e716 <_reclaim_reent+0x6e>
 800e710:	4620      	mov	r0, r4
 800e712:	f000 f8af 	bl	800e874 <_free_r>
 800e716:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e718:	b111      	cbz	r1, 800e720 <_reclaim_reent+0x78>
 800e71a:	4620      	mov	r0, r4
 800e71c:	f000 f8aa 	bl	800e874 <_free_r>
 800e720:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e722:	b111      	cbz	r1, 800e72a <_reclaim_reent+0x82>
 800e724:	4620      	mov	r0, r4
 800e726:	f000 f8a5 	bl	800e874 <_free_r>
 800e72a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e72c:	b111      	cbz	r1, 800e734 <_reclaim_reent+0x8c>
 800e72e:	4620      	mov	r0, r4
 800e730:	f000 f8a0 	bl	800e874 <_free_r>
 800e734:	6a23      	ldr	r3, [r4, #32]
 800e736:	b14b      	cbz	r3, 800e74c <_reclaim_reent+0xa4>
 800e738:	4620      	mov	r0, r4
 800e73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e73e:	4718      	bx	r3
 800e740:	680e      	ldr	r6, [r1, #0]
 800e742:	4620      	mov	r0, r4
 800e744:	f000 f896 	bl	800e874 <_free_r>
 800e748:	4631      	mov	r1, r6
 800e74a:	e7bb      	b.n	800e6c4 <_reclaim_reent+0x1c>
 800e74c:	bd70      	pop	{r4, r5, r6, pc}
 800e74e:	bf00      	nop
 800e750:	20000064 	.word	0x20000064

0800e754 <_lseek_r>:
 800e754:	b538      	push	{r3, r4, r5, lr}
 800e756:	4d07      	ldr	r5, [pc, #28]	@ (800e774 <_lseek_r+0x20>)
 800e758:	4604      	mov	r4, r0
 800e75a:	4608      	mov	r0, r1
 800e75c:	4611      	mov	r1, r2
 800e75e:	2200      	movs	r2, #0
 800e760:	602a      	str	r2, [r5, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	f7f6 fed7 	bl	8005516 <_lseek>
 800e768:	1c43      	adds	r3, r0, #1
 800e76a:	d102      	bne.n	800e772 <_lseek_r+0x1e>
 800e76c:	682b      	ldr	r3, [r5, #0]
 800e76e:	b103      	cbz	r3, 800e772 <_lseek_r+0x1e>
 800e770:	6023      	str	r3, [r4, #0]
 800e772:	bd38      	pop	{r3, r4, r5, pc}
 800e774:	20004d14 	.word	0x20004d14

0800e778 <_read_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	4d07      	ldr	r5, [pc, #28]	@ (800e798 <_read_r+0x20>)
 800e77c:	4604      	mov	r4, r0
 800e77e:	4608      	mov	r0, r1
 800e780:	4611      	mov	r1, r2
 800e782:	2200      	movs	r2, #0
 800e784:	602a      	str	r2, [r5, #0]
 800e786:	461a      	mov	r2, r3
 800e788:	f7f6 fe65 	bl	8005456 <_read>
 800e78c:	1c43      	adds	r3, r0, #1
 800e78e:	d102      	bne.n	800e796 <_read_r+0x1e>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	b103      	cbz	r3, 800e796 <_read_r+0x1e>
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	bd38      	pop	{r3, r4, r5, pc}
 800e798:	20004d14 	.word	0x20004d14

0800e79c <_write_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	4d07      	ldr	r5, [pc, #28]	@ (800e7bc <_write_r+0x20>)
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	4608      	mov	r0, r1
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	602a      	str	r2, [r5, #0]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	f7f6 fe70 	bl	8005490 <_write>
 800e7b0:	1c43      	adds	r3, r0, #1
 800e7b2:	d102      	bne.n	800e7ba <_write_r+0x1e>
 800e7b4:	682b      	ldr	r3, [r5, #0]
 800e7b6:	b103      	cbz	r3, 800e7ba <_write_r+0x1e>
 800e7b8:	6023      	str	r3, [r4, #0]
 800e7ba:	bd38      	pop	{r3, r4, r5, pc}
 800e7bc:	20004d14 	.word	0x20004d14

0800e7c0 <__errno>:
 800e7c0:	4b01      	ldr	r3, [pc, #4]	@ (800e7c8 <__errno+0x8>)
 800e7c2:	6818      	ldr	r0, [r3, #0]
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	20000064 	.word	0x20000064

0800e7cc <__libc_init_array>:
 800e7cc:	b570      	push	{r4, r5, r6, lr}
 800e7ce:	4d0d      	ldr	r5, [pc, #52]	@ (800e804 <__libc_init_array+0x38>)
 800e7d0:	4c0d      	ldr	r4, [pc, #52]	@ (800e808 <__libc_init_array+0x3c>)
 800e7d2:	1b64      	subs	r4, r4, r5
 800e7d4:	10a4      	asrs	r4, r4, #2
 800e7d6:	2600      	movs	r6, #0
 800e7d8:	42a6      	cmp	r6, r4
 800e7da:	d109      	bne.n	800e7f0 <__libc_init_array+0x24>
 800e7dc:	4d0b      	ldr	r5, [pc, #44]	@ (800e80c <__libc_init_array+0x40>)
 800e7de:	4c0c      	ldr	r4, [pc, #48]	@ (800e810 <__libc_init_array+0x44>)
 800e7e0:	f000 fff0 	bl	800f7c4 <_init>
 800e7e4:	1b64      	subs	r4, r4, r5
 800e7e6:	10a4      	asrs	r4, r4, #2
 800e7e8:	2600      	movs	r6, #0
 800e7ea:	42a6      	cmp	r6, r4
 800e7ec:	d105      	bne.n	800e7fa <__libc_init_array+0x2e>
 800e7ee:	bd70      	pop	{r4, r5, r6, pc}
 800e7f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7f4:	4798      	blx	r3
 800e7f6:	3601      	adds	r6, #1
 800e7f8:	e7ee      	b.n	800e7d8 <__libc_init_array+0xc>
 800e7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7fe:	4798      	blx	r3
 800e800:	3601      	adds	r6, #1
 800e802:	e7f2      	b.n	800e7ea <__libc_init_array+0x1e>
 800e804:	0801dd70 	.word	0x0801dd70
 800e808:	0801dd70 	.word	0x0801dd70
 800e80c:	0801dd70 	.word	0x0801dd70
 800e810:	0801dd74 	.word	0x0801dd74

0800e814 <__retarget_lock_init_recursive>:
 800e814:	4770      	bx	lr

0800e816 <__retarget_lock_acquire_recursive>:
 800e816:	4770      	bx	lr

0800e818 <__retarget_lock_release_recursive>:
 800e818:	4770      	bx	lr

0800e81a <memcpy>:
 800e81a:	440a      	add	r2, r1
 800e81c:	4291      	cmp	r1, r2
 800e81e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e822:	d100      	bne.n	800e826 <memcpy+0xc>
 800e824:	4770      	bx	lr
 800e826:	b510      	push	{r4, lr}
 800e828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e82c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e830:	4291      	cmp	r1, r2
 800e832:	d1f9      	bne.n	800e828 <memcpy+0xe>
 800e834:	bd10      	pop	{r4, pc}
	...

0800e838 <__assert_func>:
 800e838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e83a:	4614      	mov	r4, r2
 800e83c:	461a      	mov	r2, r3
 800e83e:	4b09      	ldr	r3, [pc, #36]	@ (800e864 <__assert_func+0x2c>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4605      	mov	r5, r0
 800e844:	68d8      	ldr	r0, [r3, #12]
 800e846:	b954      	cbnz	r4, 800e85e <__assert_func+0x26>
 800e848:	4b07      	ldr	r3, [pc, #28]	@ (800e868 <__assert_func+0x30>)
 800e84a:	461c      	mov	r4, r3
 800e84c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e850:	9100      	str	r1, [sp, #0]
 800e852:	462b      	mov	r3, r5
 800e854:	4905      	ldr	r1, [pc, #20]	@ (800e86c <__assert_func+0x34>)
 800e856:	f000 fc9f 	bl	800f198 <fiprintf>
 800e85a:	f000 fcd9 	bl	800f210 <abort>
 800e85e:	4b04      	ldr	r3, [pc, #16]	@ (800e870 <__assert_func+0x38>)
 800e860:	e7f4      	b.n	800e84c <__assert_func+0x14>
 800e862:	bf00      	nop
 800e864:	20000064 	.word	0x20000064
 800e868:	0801dd32 	.word	0x0801dd32
 800e86c:	0801dd04 	.word	0x0801dd04
 800e870:	0801dcf7 	.word	0x0801dcf7

0800e874 <_free_r>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	4605      	mov	r5, r0
 800e878:	2900      	cmp	r1, #0
 800e87a:	d041      	beq.n	800e900 <_free_r+0x8c>
 800e87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e880:	1f0c      	subs	r4, r1, #4
 800e882:	2b00      	cmp	r3, #0
 800e884:	bfb8      	it	lt
 800e886:	18e4      	addlt	r4, r4, r3
 800e888:	f000 f8e8 	bl	800ea5c <__malloc_lock>
 800e88c:	4a1d      	ldr	r2, [pc, #116]	@ (800e904 <_free_r+0x90>)
 800e88e:	6813      	ldr	r3, [r2, #0]
 800e890:	b933      	cbnz	r3, 800e8a0 <_free_r+0x2c>
 800e892:	6063      	str	r3, [r4, #4]
 800e894:	6014      	str	r4, [r2, #0]
 800e896:	4628      	mov	r0, r5
 800e898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e89c:	f000 b8e4 	b.w	800ea68 <__malloc_unlock>
 800e8a0:	42a3      	cmp	r3, r4
 800e8a2:	d908      	bls.n	800e8b6 <_free_r+0x42>
 800e8a4:	6820      	ldr	r0, [r4, #0]
 800e8a6:	1821      	adds	r1, r4, r0
 800e8a8:	428b      	cmp	r3, r1
 800e8aa:	bf01      	itttt	eq
 800e8ac:	6819      	ldreq	r1, [r3, #0]
 800e8ae:	685b      	ldreq	r3, [r3, #4]
 800e8b0:	1809      	addeq	r1, r1, r0
 800e8b2:	6021      	streq	r1, [r4, #0]
 800e8b4:	e7ed      	b.n	800e892 <_free_r+0x1e>
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	b10b      	cbz	r3, 800e8c0 <_free_r+0x4c>
 800e8bc:	42a3      	cmp	r3, r4
 800e8be:	d9fa      	bls.n	800e8b6 <_free_r+0x42>
 800e8c0:	6811      	ldr	r1, [r2, #0]
 800e8c2:	1850      	adds	r0, r2, r1
 800e8c4:	42a0      	cmp	r0, r4
 800e8c6:	d10b      	bne.n	800e8e0 <_free_r+0x6c>
 800e8c8:	6820      	ldr	r0, [r4, #0]
 800e8ca:	4401      	add	r1, r0
 800e8cc:	1850      	adds	r0, r2, r1
 800e8ce:	4283      	cmp	r3, r0
 800e8d0:	6011      	str	r1, [r2, #0]
 800e8d2:	d1e0      	bne.n	800e896 <_free_r+0x22>
 800e8d4:	6818      	ldr	r0, [r3, #0]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	6053      	str	r3, [r2, #4]
 800e8da:	4408      	add	r0, r1
 800e8dc:	6010      	str	r0, [r2, #0]
 800e8de:	e7da      	b.n	800e896 <_free_r+0x22>
 800e8e0:	d902      	bls.n	800e8e8 <_free_r+0x74>
 800e8e2:	230c      	movs	r3, #12
 800e8e4:	602b      	str	r3, [r5, #0]
 800e8e6:	e7d6      	b.n	800e896 <_free_r+0x22>
 800e8e8:	6820      	ldr	r0, [r4, #0]
 800e8ea:	1821      	adds	r1, r4, r0
 800e8ec:	428b      	cmp	r3, r1
 800e8ee:	bf04      	itt	eq
 800e8f0:	6819      	ldreq	r1, [r3, #0]
 800e8f2:	685b      	ldreq	r3, [r3, #4]
 800e8f4:	6063      	str	r3, [r4, #4]
 800e8f6:	bf04      	itt	eq
 800e8f8:	1809      	addeq	r1, r1, r0
 800e8fa:	6021      	streq	r1, [r4, #0]
 800e8fc:	6054      	str	r4, [r2, #4]
 800e8fe:	e7ca      	b.n	800e896 <_free_r+0x22>
 800e900:	bd38      	pop	{r3, r4, r5, pc}
 800e902:	bf00      	nop
 800e904:	20004d20 	.word	0x20004d20

0800e908 <malloc>:
 800e908:	4b02      	ldr	r3, [pc, #8]	@ (800e914 <malloc+0xc>)
 800e90a:	4601      	mov	r1, r0
 800e90c:	6818      	ldr	r0, [r3, #0]
 800e90e:	f000 b825 	b.w	800e95c <_malloc_r>
 800e912:	bf00      	nop
 800e914:	20000064 	.word	0x20000064

0800e918 <sbrk_aligned>:
 800e918:	b570      	push	{r4, r5, r6, lr}
 800e91a:	4e0f      	ldr	r6, [pc, #60]	@ (800e958 <sbrk_aligned+0x40>)
 800e91c:	460c      	mov	r4, r1
 800e91e:	6831      	ldr	r1, [r6, #0]
 800e920:	4605      	mov	r5, r0
 800e922:	b911      	cbnz	r1, 800e92a <sbrk_aligned+0x12>
 800e924:	f000 fc64 	bl	800f1f0 <_sbrk_r>
 800e928:	6030      	str	r0, [r6, #0]
 800e92a:	4621      	mov	r1, r4
 800e92c:	4628      	mov	r0, r5
 800e92e:	f000 fc5f 	bl	800f1f0 <_sbrk_r>
 800e932:	1c43      	adds	r3, r0, #1
 800e934:	d103      	bne.n	800e93e <sbrk_aligned+0x26>
 800e936:	f04f 34ff 	mov.w	r4, #4294967295
 800e93a:	4620      	mov	r0, r4
 800e93c:	bd70      	pop	{r4, r5, r6, pc}
 800e93e:	1cc4      	adds	r4, r0, #3
 800e940:	f024 0403 	bic.w	r4, r4, #3
 800e944:	42a0      	cmp	r0, r4
 800e946:	d0f8      	beq.n	800e93a <sbrk_aligned+0x22>
 800e948:	1a21      	subs	r1, r4, r0
 800e94a:	4628      	mov	r0, r5
 800e94c:	f000 fc50 	bl	800f1f0 <_sbrk_r>
 800e950:	3001      	adds	r0, #1
 800e952:	d1f2      	bne.n	800e93a <sbrk_aligned+0x22>
 800e954:	e7ef      	b.n	800e936 <sbrk_aligned+0x1e>
 800e956:	bf00      	nop
 800e958:	20004d1c 	.word	0x20004d1c

0800e95c <_malloc_r>:
 800e95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e960:	1ccd      	adds	r5, r1, #3
 800e962:	f025 0503 	bic.w	r5, r5, #3
 800e966:	3508      	adds	r5, #8
 800e968:	2d0c      	cmp	r5, #12
 800e96a:	bf38      	it	cc
 800e96c:	250c      	movcc	r5, #12
 800e96e:	2d00      	cmp	r5, #0
 800e970:	4606      	mov	r6, r0
 800e972:	db01      	blt.n	800e978 <_malloc_r+0x1c>
 800e974:	42a9      	cmp	r1, r5
 800e976:	d904      	bls.n	800e982 <_malloc_r+0x26>
 800e978:	230c      	movs	r3, #12
 800e97a:	6033      	str	r3, [r6, #0]
 800e97c:	2000      	movs	r0, #0
 800e97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e982:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea58 <_malloc_r+0xfc>
 800e986:	f000 f869 	bl	800ea5c <__malloc_lock>
 800e98a:	f8d8 3000 	ldr.w	r3, [r8]
 800e98e:	461c      	mov	r4, r3
 800e990:	bb44      	cbnz	r4, 800e9e4 <_malloc_r+0x88>
 800e992:	4629      	mov	r1, r5
 800e994:	4630      	mov	r0, r6
 800e996:	f7ff ffbf 	bl	800e918 <sbrk_aligned>
 800e99a:	1c43      	adds	r3, r0, #1
 800e99c:	4604      	mov	r4, r0
 800e99e:	d158      	bne.n	800ea52 <_malloc_r+0xf6>
 800e9a0:	f8d8 4000 	ldr.w	r4, [r8]
 800e9a4:	4627      	mov	r7, r4
 800e9a6:	2f00      	cmp	r7, #0
 800e9a8:	d143      	bne.n	800ea32 <_malloc_r+0xd6>
 800e9aa:	2c00      	cmp	r4, #0
 800e9ac:	d04b      	beq.n	800ea46 <_malloc_r+0xea>
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	4639      	mov	r1, r7
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	eb04 0903 	add.w	r9, r4, r3
 800e9b8:	f000 fc1a 	bl	800f1f0 <_sbrk_r>
 800e9bc:	4581      	cmp	r9, r0
 800e9be:	d142      	bne.n	800ea46 <_malloc_r+0xea>
 800e9c0:	6821      	ldr	r1, [r4, #0]
 800e9c2:	1a6d      	subs	r5, r5, r1
 800e9c4:	4629      	mov	r1, r5
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	f7ff ffa6 	bl	800e918 <sbrk_aligned>
 800e9cc:	3001      	adds	r0, #1
 800e9ce:	d03a      	beq.n	800ea46 <_malloc_r+0xea>
 800e9d0:	6823      	ldr	r3, [r4, #0]
 800e9d2:	442b      	add	r3, r5
 800e9d4:	6023      	str	r3, [r4, #0]
 800e9d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e9da:	685a      	ldr	r2, [r3, #4]
 800e9dc:	bb62      	cbnz	r2, 800ea38 <_malloc_r+0xdc>
 800e9de:	f8c8 7000 	str.w	r7, [r8]
 800e9e2:	e00f      	b.n	800ea04 <_malloc_r+0xa8>
 800e9e4:	6822      	ldr	r2, [r4, #0]
 800e9e6:	1b52      	subs	r2, r2, r5
 800e9e8:	d420      	bmi.n	800ea2c <_malloc_r+0xd0>
 800e9ea:	2a0b      	cmp	r2, #11
 800e9ec:	d917      	bls.n	800ea1e <_malloc_r+0xc2>
 800e9ee:	1961      	adds	r1, r4, r5
 800e9f0:	42a3      	cmp	r3, r4
 800e9f2:	6025      	str	r5, [r4, #0]
 800e9f4:	bf18      	it	ne
 800e9f6:	6059      	strne	r1, [r3, #4]
 800e9f8:	6863      	ldr	r3, [r4, #4]
 800e9fa:	bf08      	it	eq
 800e9fc:	f8c8 1000 	streq.w	r1, [r8]
 800ea00:	5162      	str	r2, [r4, r5]
 800ea02:	604b      	str	r3, [r1, #4]
 800ea04:	4630      	mov	r0, r6
 800ea06:	f000 f82f 	bl	800ea68 <__malloc_unlock>
 800ea0a:	f104 000b 	add.w	r0, r4, #11
 800ea0e:	1d23      	adds	r3, r4, #4
 800ea10:	f020 0007 	bic.w	r0, r0, #7
 800ea14:	1ac2      	subs	r2, r0, r3
 800ea16:	bf1c      	itt	ne
 800ea18:	1a1b      	subne	r3, r3, r0
 800ea1a:	50a3      	strne	r3, [r4, r2]
 800ea1c:	e7af      	b.n	800e97e <_malloc_r+0x22>
 800ea1e:	6862      	ldr	r2, [r4, #4]
 800ea20:	42a3      	cmp	r3, r4
 800ea22:	bf0c      	ite	eq
 800ea24:	f8c8 2000 	streq.w	r2, [r8]
 800ea28:	605a      	strne	r2, [r3, #4]
 800ea2a:	e7eb      	b.n	800ea04 <_malloc_r+0xa8>
 800ea2c:	4623      	mov	r3, r4
 800ea2e:	6864      	ldr	r4, [r4, #4]
 800ea30:	e7ae      	b.n	800e990 <_malloc_r+0x34>
 800ea32:	463c      	mov	r4, r7
 800ea34:	687f      	ldr	r7, [r7, #4]
 800ea36:	e7b6      	b.n	800e9a6 <_malloc_r+0x4a>
 800ea38:	461a      	mov	r2, r3
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	42a3      	cmp	r3, r4
 800ea3e:	d1fb      	bne.n	800ea38 <_malloc_r+0xdc>
 800ea40:	2300      	movs	r3, #0
 800ea42:	6053      	str	r3, [r2, #4]
 800ea44:	e7de      	b.n	800ea04 <_malloc_r+0xa8>
 800ea46:	230c      	movs	r3, #12
 800ea48:	6033      	str	r3, [r6, #0]
 800ea4a:	4630      	mov	r0, r6
 800ea4c:	f000 f80c 	bl	800ea68 <__malloc_unlock>
 800ea50:	e794      	b.n	800e97c <_malloc_r+0x20>
 800ea52:	6005      	str	r5, [r0, #0]
 800ea54:	e7d6      	b.n	800ea04 <_malloc_r+0xa8>
 800ea56:	bf00      	nop
 800ea58:	20004d20 	.word	0x20004d20

0800ea5c <__malloc_lock>:
 800ea5c:	4801      	ldr	r0, [pc, #4]	@ (800ea64 <__malloc_lock+0x8>)
 800ea5e:	f7ff beda 	b.w	800e816 <__retarget_lock_acquire_recursive>
 800ea62:	bf00      	nop
 800ea64:	20004d18 	.word	0x20004d18

0800ea68 <__malloc_unlock>:
 800ea68:	4801      	ldr	r0, [pc, #4]	@ (800ea70 <__malloc_unlock+0x8>)
 800ea6a:	f7ff bed5 	b.w	800e818 <__retarget_lock_release_recursive>
 800ea6e:	bf00      	nop
 800ea70:	20004d18 	.word	0x20004d18

0800ea74 <__ssputs_r>:
 800ea74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea78:	688e      	ldr	r6, [r1, #8]
 800ea7a:	461f      	mov	r7, r3
 800ea7c:	42be      	cmp	r6, r7
 800ea7e:	680b      	ldr	r3, [r1, #0]
 800ea80:	4682      	mov	sl, r0
 800ea82:	460c      	mov	r4, r1
 800ea84:	4690      	mov	r8, r2
 800ea86:	d82d      	bhi.n	800eae4 <__ssputs_r+0x70>
 800ea88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ea90:	d026      	beq.n	800eae0 <__ssputs_r+0x6c>
 800ea92:	6965      	ldr	r5, [r4, #20]
 800ea94:	6909      	ldr	r1, [r1, #16]
 800ea96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea9a:	eba3 0901 	sub.w	r9, r3, r1
 800ea9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eaa2:	1c7b      	adds	r3, r7, #1
 800eaa4:	444b      	add	r3, r9
 800eaa6:	106d      	asrs	r5, r5, #1
 800eaa8:	429d      	cmp	r5, r3
 800eaaa:	bf38      	it	cc
 800eaac:	461d      	movcc	r5, r3
 800eaae:	0553      	lsls	r3, r2, #21
 800eab0:	d527      	bpl.n	800eb02 <__ssputs_r+0x8e>
 800eab2:	4629      	mov	r1, r5
 800eab4:	f7ff ff52 	bl	800e95c <_malloc_r>
 800eab8:	4606      	mov	r6, r0
 800eaba:	b360      	cbz	r0, 800eb16 <__ssputs_r+0xa2>
 800eabc:	6921      	ldr	r1, [r4, #16]
 800eabe:	464a      	mov	r2, r9
 800eac0:	f7ff feab 	bl	800e81a <memcpy>
 800eac4:	89a3      	ldrh	r3, [r4, #12]
 800eac6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eaca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eace:	81a3      	strh	r3, [r4, #12]
 800ead0:	6126      	str	r6, [r4, #16]
 800ead2:	6165      	str	r5, [r4, #20]
 800ead4:	444e      	add	r6, r9
 800ead6:	eba5 0509 	sub.w	r5, r5, r9
 800eada:	6026      	str	r6, [r4, #0]
 800eadc:	60a5      	str	r5, [r4, #8]
 800eade:	463e      	mov	r6, r7
 800eae0:	42be      	cmp	r6, r7
 800eae2:	d900      	bls.n	800eae6 <__ssputs_r+0x72>
 800eae4:	463e      	mov	r6, r7
 800eae6:	6820      	ldr	r0, [r4, #0]
 800eae8:	4632      	mov	r2, r6
 800eaea:	4641      	mov	r1, r8
 800eaec:	f000 fb66 	bl	800f1bc <memmove>
 800eaf0:	68a3      	ldr	r3, [r4, #8]
 800eaf2:	1b9b      	subs	r3, r3, r6
 800eaf4:	60a3      	str	r3, [r4, #8]
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	4433      	add	r3, r6
 800eafa:	6023      	str	r3, [r4, #0]
 800eafc:	2000      	movs	r0, #0
 800eafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb02:	462a      	mov	r2, r5
 800eb04:	f000 fb8b 	bl	800f21e <_realloc_r>
 800eb08:	4606      	mov	r6, r0
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	d1e0      	bne.n	800ead0 <__ssputs_r+0x5c>
 800eb0e:	6921      	ldr	r1, [r4, #16]
 800eb10:	4650      	mov	r0, sl
 800eb12:	f7ff feaf 	bl	800e874 <_free_r>
 800eb16:	230c      	movs	r3, #12
 800eb18:	f8ca 3000 	str.w	r3, [sl]
 800eb1c:	89a3      	ldrh	r3, [r4, #12]
 800eb1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb22:	81a3      	strh	r3, [r4, #12]
 800eb24:	f04f 30ff 	mov.w	r0, #4294967295
 800eb28:	e7e9      	b.n	800eafe <__ssputs_r+0x8a>
	...

0800eb2c <_svfiprintf_r>:
 800eb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb30:	4698      	mov	r8, r3
 800eb32:	898b      	ldrh	r3, [r1, #12]
 800eb34:	061b      	lsls	r3, r3, #24
 800eb36:	b09d      	sub	sp, #116	@ 0x74
 800eb38:	4607      	mov	r7, r0
 800eb3a:	460d      	mov	r5, r1
 800eb3c:	4614      	mov	r4, r2
 800eb3e:	d510      	bpl.n	800eb62 <_svfiprintf_r+0x36>
 800eb40:	690b      	ldr	r3, [r1, #16]
 800eb42:	b973      	cbnz	r3, 800eb62 <_svfiprintf_r+0x36>
 800eb44:	2140      	movs	r1, #64	@ 0x40
 800eb46:	f7ff ff09 	bl	800e95c <_malloc_r>
 800eb4a:	6028      	str	r0, [r5, #0]
 800eb4c:	6128      	str	r0, [r5, #16]
 800eb4e:	b930      	cbnz	r0, 800eb5e <_svfiprintf_r+0x32>
 800eb50:	230c      	movs	r3, #12
 800eb52:	603b      	str	r3, [r7, #0]
 800eb54:	f04f 30ff 	mov.w	r0, #4294967295
 800eb58:	b01d      	add	sp, #116	@ 0x74
 800eb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb5e:	2340      	movs	r3, #64	@ 0x40
 800eb60:	616b      	str	r3, [r5, #20]
 800eb62:	2300      	movs	r3, #0
 800eb64:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb66:	2320      	movs	r3, #32
 800eb68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb70:	2330      	movs	r3, #48	@ 0x30
 800eb72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ed10 <_svfiprintf_r+0x1e4>
 800eb76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eb7a:	f04f 0901 	mov.w	r9, #1
 800eb7e:	4623      	mov	r3, r4
 800eb80:	469a      	mov	sl, r3
 800eb82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb86:	b10a      	cbz	r2, 800eb8c <_svfiprintf_r+0x60>
 800eb88:	2a25      	cmp	r2, #37	@ 0x25
 800eb8a:	d1f9      	bne.n	800eb80 <_svfiprintf_r+0x54>
 800eb8c:	ebba 0b04 	subs.w	fp, sl, r4
 800eb90:	d00b      	beq.n	800ebaa <_svfiprintf_r+0x7e>
 800eb92:	465b      	mov	r3, fp
 800eb94:	4622      	mov	r2, r4
 800eb96:	4629      	mov	r1, r5
 800eb98:	4638      	mov	r0, r7
 800eb9a:	f7ff ff6b 	bl	800ea74 <__ssputs_r>
 800eb9e:	3001      	adds	r0, #1
 800eba0:	f000 80a7 	beq.w	800ecf2 <_svfiprintf_r+0x1c6>
 800eba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eba6:	445a      	add	r2, fp
 800eba8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebaa:	f89a 3000 	ldrb.w	r3, [sl]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f000 809f 	beq.w	800ecf2 <_svfiprintf_r+0x1c6>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebbe:	f10a 0a01 	add.w	sl, sl, #1
 800ebc2:	9304      	str	r3, [sp, #16]
 800ebc4:	9307      	str	r3, [sp, #28]
 800ebc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ebca:	931a      	str	r3, [sp, #104]	@ 0x68
 800ebcc:	4654      	mov	r4, sl
 800ebce:	2205      	movs	r2, #5
 800ebd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebd4:	484e      	ldr	r0, [pc, #312]	@ (800ed10 <_svfiprintf_r+0x1e4>)
 800ebd6:	f7f1 fb1b 	bl	8000210 <memchr>
 800ebda:	9a04      	ldr	r2, [sp, #16]
 800ebdc:	b9d8      	cbnz	r0, 800ec16 <_svfiprintf_r+0xea>
 800ebde:	06d0      	lsls	r0, r2, #27
 800ebe0:	bf44      	itt	mi
 800ebe2:	2320      	movmi	r3, #32
 800ebe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ebe8:	0711      	lsls	r1, r2, #28
 800ebea:	bf44      	itt	mi
 800ebec:	232b      	movmi	r3, #43	@ 0x2b
 800ebee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ebf2:	f89a 3000 	ldrb.w	r3, [sl]
 800ebf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebf8:	d015      	beq.n	800ec26 <_svfiprintf_r+0xfa>
 800ebfa:	9a07      	ldr	r2, [sp, #28]
 800ebfc:	4654      	mov	r4, sl
 800ebfe:	2000      	movs	r0, #0
 800ec00:	f04f 0c0a 	mov.w	ip, #10
 800ec04:	4621      	mov	r1, r4
 800ec06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec0a:	3b30      	subs	r3, #48	@ 0x30
 800ec0c:	2b09      	cmp	r3, #9
 800ec0e:	d94b      	bls.n	800eca8 <_svfiprintf_r+0x17c>
 800ec10:	b1b0      	cbz	r0, 800ec40 <_svfiprintf_r+0x114>
 800ec12:	9207      	str	r2, [sp, #28]
 800ec14:	e014      	b.n	800ec40 <_svfiprintf_r+0x114>
 800ec16:	eba0 0308 	sub.w	r3, r0, r8
 800ec1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	9304      	str	r3, [sp, #16]
 800ec22:	46a2      	mov	sl, r4
 800ec24:	e7d2      	b.n	800ebcc <_svfiprintf_r+0xa0>
 800ec26:	9b03      	ldr	r3, [sp, #12]
 800ec28:	1d19      	adds	r1, r3, #4
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	9103      	str	r1, [sp, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	bfbb      	ittet	lt
 800ec32:	425b      	neglt	r3, r3
 800ec34:	f042 0202 	orrlt.w	r2, r2, #2
 800ec38:	9307      	strge	r3, [sp, #28]
 800ec3a:	9307      	strlt	r3, [sp, #28]
 800ec3c:	bfb8      	it	lt
 800ec3e:	9204      	strlt	r2, [sp, #16]
 800ec40:	7823      	ldrb	r3, [r4, #0]
 800ec42:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec44:	d10a      	bne.n	800ec5c <_svfiprintf_r+0x130>
 800ec46:	7863      	ldrb	r3, [r4, #1]
 800ec48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec4a:	d132      	bne.n	800ecb2 <_svfiprintf_r+0x186>
 800ec4c:	9b03      	ldr	r3, [sp, #12]
 800ec4e:	1d1a      	adds	r2, r3, #4
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	9203      	str	r2, [sp, #12]
 800ec54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec58:	3402      	adds	r4, #2
 800ec5a:	9305      	str	r3, [sp, #20]
 800ec5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ed20 <_svfiprintf_r+0x1f4>
 800ec60:	7821      	ldrb	r1, [r4, #0]
 800ec62:	2203      	movs	r2, #3
 800ec64:	4650      	mov	r0, sl
 800ec66:	f7f1 fad3 	bl	8000210 <memchr>
 800ec6a:	b138      	cbz	r0, 800ec7c <_svfiprintf_r+0x150>
 800ec6c:	9b04      	ldr	r3, [sp, #16]
 800ec6e:	eba0 000a 	sub.w	r0, r0, sl
 800ec72:	2240      	movs	r2, #64	@ 0x40
 800ec74:	4082      	lsls	r2, r0
 800ec76:	4313      	orrs	r3, r2
 800ec78:	3401      	adds	r4, #1
 800ec7a:	9304      	str	r3, [sp, #16]
 800ec7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec80:	4824      	ldr	r0, [pc, #144]	@ (800ed14 <_svfiprintf_r+0x1e8>)
 800ec82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ec86:	2206      	movs	r2, #6
 800ec88:	f7f1 fac2 	bl	8000210 <memchr>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d036      	beq.n	800ecfe <_svfiprintf_r+0x1d2>
 800ec90:	4b21      	ldr	r3, [pc, #132]	@ (800ed18 <_svfiprintf_r+0x1ec>)
 800ec92:	bb1b      	cbnz	r3, 800ecdc <_svfiprintf_r+0x1b0>
 800ec94:	9b03      	ldr	r3, [sp, #12]
 800ec96:	3307      	adds	r3, #7
 800ec98:	f023 0307 	bic.w	r3, r3, #7
 800ec9c:	3308      	adds	r3, #8
 800ec9e:	9303      	str	r3, [sp, #12]
 800eca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eca2:	4433      	add	r3, r6
 800eca4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eca6:	e76a      	b.n	800eb7e <_svfiprintf_r+0x52>
 800eca8:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecac:	460c      	mov	r4, r1
 800ecae:	2001      	movs	r0, #1
 800ecb0:	e7a8      	b.n	800ec04 <_svfiprintf_r+0xd8>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	3401      	adds	r4, #1
 800ecb6:	9305      	str	r3, [sp, #20]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	f04f 0c0a 	mov.w	ip, #10
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecc4:	3a30      	subs	r2, #48	@ 0x30
 800ecc6:	2a09      	cmp	r2, #9
 800ecc8:	d903      	bls.n	800ecd2 <_svfiprintf_r+0x1a6>
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d0c6      	beq.n	800ec5c <_svfiprintf_r+0x130>
 800ecce:	9105      	str	r1, [sp, #20]
 800ecd0:	e7c4      	b.n	800ec5c <_svfiprintf_r+0x130>
 800ecd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e7f0      	b.n	800ecbe <_svfiprintf_r+0x192>
 800ecdc:	ab03      	add	r3, sp, #12
 800ecde:	9300      	str	r3, [sp, #0]
 800ece0:	462a      	mov	r2, r5
 800ece2:	4b0e      	ldr	r3, [pc, #56]	@ (800ed1c <_svfiprintf_r+0x1f0>)
 800ece4:	a904      	add	r1, sp, #16
 800ece6:	4638      	mov	r0, r7
 800ece8:	f3af 8000 	nop.w
 800ecec:	1c42      	adds	r2, r0, #1
 800ecee:	4606      	mov	r6, r0
 800ecf0:	d1d6      	bne.n	800eca0 <_svfiprintf_r+0x174>
 800ecf2:	89ab      	ldrh	r3, [r5, #12]
 800ecf4:	065b      	lsls	r3, r3, #25
 800ecf6:	f53f af2d 	bmi.w	800eb54 <_svfiprintf_r+0x28>
 800ecfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ecfc:	e72c      	b.n	800eb58 <_svfiprintf_r+0x2c>
 800ecfe:	ab03      	add	r3, sp, #12
 800ed00:	9300      	str	r3, [sp, #0]
 800ed02:	462a      	mov	r2, r5
 800ed04:	4b05      	ldr	r3, [pc, #20]	@ (800ed1c <_svfiprintf_r+0x1f0>)
 800ed06:	a904      	add	r1, sp, #16
 800ed08:	4638      	mov	r0, r7
 800ed0a:	f000 f879 	bl	800ee00 <_printf_i>
 800ed0e:	e7ed      	b.n	800ecec <_svfiprintf_r+0x1c0>
 800ed10:	0801dd33 	.word	0x0801dd33
 800ed14:	0801dd3d 	.word	0x0801dd3d
 800ed18:	00000000 	.word	0x00000000
 800ed1c:	0800ea75 	.word	0x0800ea75
 800ed20:	0801dd39 	.word	0x0801dd39

0800ed24 <_printf_common>:
 800ed24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed28:	4616      	mov	r6, r2
 800ed2a:	4698      	mov	r8, r3
 800ed2c:	688a      	ldr	r2, [r1, #8]
 800ed2e:	690b      	ldr	r3, [r1, #16]
 800ed30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ed34:	4293      	cmp	r3, r2
 800ed36:	bfb8      	it	lt
 800ed38:	4613      	movlt	r3, r2
 800ed3a:	6033      	str	r3, [r6, #0]
 800ed3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ed40:	4607      	mov	r7, r0
 800ed42:	460c      	mov	r4, r1
 800ed44:	b10a      	cbz	r2, 800ed4a <_printf_common+0x26>
 800ed46:	3301      	adds	r3, #1
 800ed48:	6033      	str	r3, [r6, #0]
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	0699      	lsls	r1, r3, #26
 800ed4e:	bf42      	ittt	mi
 800ed50:	6833      	ldrmi	r3, [r6, #0]
 800ed52:	3302      	addmi	r3, #2
 800ed54:	6033      	strmi	r3, [r6, #0]
 800ed56:	6825      	ldr	r5, [r4, #0]
 800ed58:	f015 0506 	ands.w	r5, r5, #6
 800ed5c:	d106      	bne.n	800ed6c <_printf_common+0x48>
 800ed5e:	f104 0a19 	add.w	sl, r4, #25
 800ed62:	68e3      	ldr	r3, [r4, #12]
 800ed64:	6832      	ldr	r2, [r6, #0]
 800ed66:	1a9b      	subs	r3, r3, r2
 800ed68:	42ab      	cmp	r3, r5
 800ed6a:	dc26      	bgt.n	800edba <_printf_common+0x96>
 800ed6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed70:	6822      	ldr	r2, [r4, #0]
 800ed72:	3b00      	subs	r3, #0
 800ed74:	bf18      	it	ne
 800ed76:	2301      	movne	r3, #1
 800ed78:	0692      	lsls	r2, r2, #26
 800ed7a:	d42b      	bmi.n	800edd4 <_printf_common+0xb0>
 800ed7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed80:	4641      	mov	r1, r8
 800ed82:	4638      	mov	r0, r7
 800ed84:	47c8      	blx	r9
 800ed86:	3001      	adds	r0, #1
 800ed88:	d01e      	beq.n	800edc8 <_printf_common+0xa4>
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	6922      	ldr	r2, [r4, #16]
 800ed8e:	f003 0306 	and.w	r3, r3, #6
 800ed92:	2b04      	cmp	r3, #4
 800ed94:	bf02      	ittt	eq
 800ed96:	68e5      	ldreq	r5, [r4, #12]
 800ed98:	6833      	ldreq	r3, [r6, #0]
 800ed9a:	1aed      	subeq	r5, r5, r3
 800ed9c:	68a3      	ldr	r3, [r4, #8]
 800ed9e:	bf0c      	ite	eq
 800eda0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eda4:	2500      	movne	r5, #0
 800eda6:	4293      	cmp	r3, r2
 800eda8:	bfc4      	itt	gt
 800edaa:	1a9b      	subgt	r3, r3, r2
 800edac:	18ed      	addgt	r5, r5, r3
 800edae:	2600      	movs	r6, #0
 800edb0:	341a      	adds	r4, #26
 800edb2:	42b5      	cmp	r5, r6
 800edb4:	d11a      	bne.n	800edec <_printf_common+0xc8>
 800edb6:	2000      	movs	r0, #0
 800edb8:	e008      	b.n	800edcc <_printf_common+0xa8>
 800edba:	2301      	movs	r3, #1
 800edbc:	4652      	mov	r2, sl
 800edbe:	4641      	mov	r1, r8
 800edc0:	4638      	mov	r0, r7
 800edc2:	47c8      	blx	r9
 800edc4:	3001      	adds	r0, #1
 800edc6:	d103      	bne.n	800edd0 <_printf_common+0xac>
 800edc8:	f04f 30ff 	mov.w	r0, #4294967295
 800edcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edd0:	3501      	adds	r5, #1
 800edd2:	e7c6      	b.n	800ed62 <_printf_common+0x3e>
 800edd4:	18e1      	adds	r1, r4, r3
 800edd6:	1c5a      	adds	r2, r3, #1
 800edd8:	2030      	movs	r0, #48	@ 0x30
 800edda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800edde:	4422      	add	r2, r4
 800ede0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ede4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ede8:	3302      	adds	r3, #2
 800edea:	e7c7      	b.n	800ed7c <_printf_common+0x58>
 800edec:	2301      	movs	r3, #1
 800edee:	4622      	mov	r2, r4
 800edf0:	4641      	mov	r1, r8
 800edf2:	4638      	mov	r0, r7
 800edf4:	47c8      	blx	r9
 800edf6:	3001      	adds	r0, #1
 800edf8:	d0e6      	beq.n	800edc8 <_printf_common+0xa4>
 800edfa:	3601      	adds	r6, #1
 800edfc:	e7d9      	b.n	800edb2 <_printf_common+0x8e>
	...

0800ee00 <_printf_i>:
 800ee00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee04:	7e0f      	ldrb	r7, [r1, #24]
 800ee06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee08:	2f78      	cmp	r7, #120	@ 0x78
 800ee0a:	4691      	mov	r9, r2
 800ee0c:	4680      	mov	r8, r0
 800ee0e:	460c      	mov	r4, r1
 800ee10:	469a      	mov	sl, r3
 800ee12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ee16:	d807      	bhi.n	800ee28 <_printf_i+0x28>
 800ee18:	2f62      	cmp	r7, #98	@ 0x62
 800ee1a:	d80a      	bhi.n	800ee32 <_printf_i+0x32>
 800ee1c:	2f00      	cmp	r7, #0
 800ee1e:	f000 80d2 	beq.w	800efc6 <_printf_i+0x1c6>
 800ee22:	2f58      	cmp	r7, #88	@ 0x58
 800ee24:	f000 80b9 	beq.w	800ef9a <_printf_i+0x19a>
 800ee28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ee30:	e03a      	b.n	800eea8 <_printf_i+0xa8>
 800ee32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ee36:	2b15      	cmp	r3, #21
 800ee38:	d8f6      	bhi.n	800ee28 <_printf_i+0x28>
 800ee3a:	a101      	add	r1, pc, #4	@ (adr r1, 800ee40 <_printf_i+0x40>)
 800ee3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee40:	0800ee99 	.word	0x0800ee99
 800ee44:	0800eead 	.word	0x0800eead
 800ee48:	0800ee29 	.word	0x0800ee29
 800ee4c:	0800ee29 	.word	0x0800ee29
 800ee50:	0800ee29 	.word	0x0800ee29
 800ee54:	0800ee29 	.word	0x0800ee29
 800ee58:	0800eead 	.word	0x0800eead
 800ee5c:	0800ee29 	.word	0x0800ee29
 800ee60:	0800ee29 	.word	0x0800ee29
 800ee64:	0800ee29 	.word	0x0800ee29
 800ee68:	0800ee29 	.word	0x0800ee29
 800ee6c:	0800efad 	.word	0x0800efad
 800ee70:	0800eed7 	.word	0x0800eed7
 800ee74:	0800ef67 	.word	0x0800ef67
 800ee78:	0800ee29 	.word	0x0800ee29
 800ee7c:	0800ee29 	.word	0x0800ee29
 800ee80:	0800efcf 	.word	0x0800efcf
 800ee84:	0800ee29 	.word	0x0800ee29
 800ee88:	0800eed7 	.word	0x0800eed7
 800ee8c:	0800ee29 	.word	0x0800ee29
 800ee90:	0800ee29 	.word	0x0800ee29
 800ee94:	0800ef6f 	.word	0x0800ef6f
 800ee98:	6833      	ldr	r3, [r6, #0]
 800ee9a:	1d1a      	adds	r2, r3, #4
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	6032      	str	r2, [r6, #0]
 800eea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eea4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e09d      	b.n	800efe8 <_printf_i+0x1e8>
 800eeac:	6833      	ldr	r3, [r6, #0]
 800eeae:	6820      	ldr	r0, [r4, #0]
 800eeb0:	1d19      	adds	r1, r3, #4
 800eeb2:	6031      	str	r1, [r6, #0]
 800eeb4:	0606      	lsls	r6, r0, #24
 800eeb6:	d501      	bpl.n	800eebc <_printf_i+0xbc>
 800eeb8:	681d      	ldr	r5, [r3, #0]
 800eeba:	e003      	b.n	800eec4 <_printf_i+0xc4>
 800eebc:	0645      	lsls	r5, r0, #25
 800eebe:	d5fb      	bpl.n	800eeb8 <_printf_i+0xb8>
 800eec0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eec4:	2d00      	cmp	r5, #0
 800eec6:	da03      	bge.n	800eed0 <_printf_i+0xd0>
 800eec8:	232d      	movs	r3, #45	@ 0x2d
 800eeca:	426d      	negs	r5, r5
 800eecc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eed0:	4859      	ldr	r0, [pc, #356]	@ (800f038 <_printf_i+0x238>)
 800eed2:	230a      	movs	r3, #10
 800eed4:	e011      	b.n	800eefa <_printf_i+0xfa>
 800eed6:	6821      	ldr	r1, [r4, #0]
 800eed8:	6833      	ldr	r3, [r6, #0]
 800eeda:	0608      	lsls	r0, r1, #24
 800eedc:	f853 5b04 	ldr.w	r5, [r3], #4
 800eee0:	d402      	bmi.n	800eee8 <_printf_i+0xe8>
 800eee2:	0649      	lsls	r1, r1, #25
 800eee4:	bf48      	it	mi
 800eee6:	b2ad      	uxthmi	r5, r5
 800eee8:	2f6f      	cmp	r7, #111	@ 0x6f
 800eeea:	4853      	ldr	r0, [pc, #332]	@ (800f038 <_printf_i+0x238>)
 800eeec:	6033      	str	r3, [r6, #0]
 800eeee:	bf14      	ite	ne
 800eef0:	230a      	movne	r3, #10
 800eef2:	2308      	moveq	r3, #8
 800eef4:	2100      	movs	r1, #0
 800eef6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eefa:	6866      	ldr	r6, [r4, #4]
 800eefc:	60a6      	str	r6, [r4, #8]
 800eefe:	2e00      	cmp	r6, #0
 800ef00:	bfa2      	ittt	ge
 800ef02:	6821      	ldrge	r1, [r4, #0]
 800ef04:	f021 0104 	bicge.w	r1, r1, #4
 800ef08:	6021      	strge	r1, [r4, #0]
 800ef0a:	b90d      	cbnz	r5, 800ef10 <_printf_i+0x110>
 800ef0c:	2e00      	cmp	r6, #0
 800ef0e:	d04b      	beq.n	800efa8 <_printf_i+0x1a8>
 800ef10:	4616      	mov	r6, r2
 800ef12:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef16:	fb03 5711 	mls	r7, r3, r1, r5
 800ef1a:	5dc7      	ldrb	r7, [r0, r7]
 800ef1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef20:	462f      	mov	r7, r5
 800ef22:	42bb      	cmp	r3, r7
 800ef24:	460d      	mov	r5, r1
 800ef26:	d9f4      	bls.n	800ef12 <_printf_i+0x112>
 800ef28:	2b08      	cmp	r3, #8
 800ef2a:	d10b      	bne.n	800ef44 <_printf_i+0x144>
 800ef2c:	6823      	ldr	r3, [r4, #0]
 800ef2e:	07df      	lsls	r7, r3, #31
 800ef30:	d508      	bpl.n	800ef44 <_printf_i+0x144>
 800ef32:	6923      	ldr	r3, [r4, #16]
 800ef34:	6861      	ldr	r1, [r4, #4]
 800ef36:	4299      	cmp	r1, r3
 800ef38:	bfde      	ittt	le
 800ef3a:	2330      	movle	r3, #48	@ 0x30
 800ef3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef44:	1b92      	subs	r2, r2, r6
 800ef46:	6122      	str	r2, [r4, #16]
 800ef48:	f8cd a000 	str.w	sl, [sp]
 800ef4c:	464b      	mov	r3, r9
 800ef4e:	aa03      	add	r2, sp, #12
 800ef50:	4621      	mov	r1, r4
 800ef52:	4640      	mov	r0, r8
 800ef54:	f7ff fee6 	bl	800ed24 <_printf_common>
 800ef58:	3001      	adds	r0, #1
 800ef5a:	d14a      	bne.n	800eff2 <_printf_i+0x1f2>
 800ef5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef60:	b004      	add	sp, #16
 800ef62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	f043 0320 	orr.w	r3, r3, #32
 800ef6c:	6023      	str	r3, [r4, #0]
 800ef6e:	4833      	ldr	r0, [pc, #204]	@ (800f03c <_printf_i+0x23c>)
 800ef70:	2778      	movs	r7, #120	@ 0x78
 800ef72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	6831      	ldr	r1, [r6, #0]
 800ef7a:	061f      	lsls	r7, r3, #24
 800ef7c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef80:	d402      	bmi.n	800ef88 <_printf_i+0x188>
 800ef82:	065f      	lsls	r7, r3, #25
 800ef84:	bf48      	it	mi
 800ef86:	b2ad      	uxthmi	r5, r5
 800ef88:	6031      	str	r1, [r6, #0]
 800ef8a:	07d9      	lsls	r1, r3, #31
 800ef8c:	bf44      	itt	mi
 800ef8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ef92:	6023      	strmi	r3, [r4, #0]
 800ef94:	b11d      	cbz	r5, 800ef9e <_printf_i+0x19e>
 800ef96:	2310      	movs	r3, #16
 800ef98:	e7ac      	b.n	800eef4 <_printf_i+0xf4>
 800ef9a:	4827      	ldr	r0, [pc, #156]	@ (800f038 <_printf_i+0x238>)
 800ef9c:	e7e9      	b.n	800ef72 <_printf_i+0x172>
 800ef9e:	6823      	ldr	r3, [r4, #0]
 800efa0:	f023 0320 	bic.w	r3, r3, #32
 800efa4:	6023      	str	r3, [r4, #0]
 800efa6:	e7f6      	b.n	800ef96 <_printf_i+0x196>
 800efa8:	4616      	mov	r6, r2
 800efaa:	e7bd      	b.n	800ef28 <_printf_i+0x128>
 800efac:	6833      	ldr	r3, [r6, #0]
 800efae:	6825      	ldr	r5, [r4, #0]
 800efb0:	6961      	ldr	r1, [r4, #20]
 800efb2:	1d18      	adds	r0, r3, #4
 800efb4:	6030      	str	r0, [r6, #0]
 800efb6:	062e      	lsls	r6, r5, #24
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	d501      	bpl.n	800efc0 <_printf_i+0x1c0>
 800efbc:	6019      	str	r1, [r3, #0]
 800efbe:	e002      	b.n	800efc6 <_printf_i+0x1c6>
 800efc0:	0668      	lsls	r0, r5, #25
 800efc2:	d5fb      	bpl.n	800efbc <_printf_i+0x1bc>
 800efc4:	8019      	strh	r1, [r3, #0]
 800efc6:	2300      	movs	r3, #0
 800efc8:	6123      	str	r3, [r4, #16]
 800efca:	4616      	mov	r6, r2
 800efcc:	e7bc      	b.n	800ef48 <_printf_i+0x148>
 800efce:	6833      	ldr	r3, [r6, #0]
 800efd0:	1d1a      	adds	r2, r3, #4
 800efd2:	6032      	str	r2, [r6, #0]
 800efd4:	681e      	ldr	r6, [r3, #0]
 800efd6:	6862      	ldr	r2, [r4, #4]
 800efd8:	2100      	movs	r1, #0
 800efda:	4630      	mov	r0, r6
 800efdc:	f7f1 f918 	bl	8000210 <memchr>
 800efe0:	b108      	cbz	r0, 800efe6 <_printf_i+0x1e6>
 800efe2:	1b80      	subs	r0, r0, r6
 800efe4:	6060      	str	r0, [r4, #4]
 800efe6:	6863      	ldr	r3, [r4, #4]
 800efe8:	6123      	str	r3, [r4, #16]
 800efea:	2300      	movs	r3, #0
 800efec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eff0:	e7aa      	b.n	800ef48 <_printf_i+0x148>
 800eff2:	6923      	ldr	r3, [r4, #16]
 800eff4:	4632      	mov	r2, r6
 800eff6:	4649      	mov	r1, r9
 800eff8:	4640      	mov	r0, r8
 800effa:	47d0      	blx	sl
 800effc:	3001      	adds	r0, #1
 800effe:	d0ad      	beq.n	800ef5c <_printf_i+0x15c>
 800f000:	6823      	ldr	r3, [r4, #0]
 800f002:	079b      	lsls	r3, r3, #30
 800f004:	d413      	bmi.n	800f02e <_printf_i+0x22e>
 800f006:	68e0      	ldr	r0, [r4, #12]
 800f008:	9b03      	ldr	r3, [sp, #12]
 800f00a:	4298      	cmp	r0, r3
 800f00c:	bfb8      	it	lt
 800f00e:	4618      	movlt	r0, r3
 800f010:	e7a6      	b.n	800ef60 <_printf_i+0x160>
 800f012:	2301      	movs	r3, #1
 800f014:	4632      	mov	r2, r6
 800f016:	4649      	mov	r1, r9
 800f018:	4640      	mov	r0, r8
 800f01a:	47d0      	blx	sl
 800f01c:	3001      	adds	r0, #1
 800f01e:	d09d      	beq.n	800ef5c <_printf_i+0x15c>
 800f020:	3501      	adds	r5, #1
 800f022:	68e3      	ldr	r3, [r4, #12]
 800f024:	9903      	ldr	r1, [sp, #12]
 800f026:	1a5b      	subs	r3, r3, r1
 800f028:	42ab      	cmp	r3, r5
 800f02a:	dcf2      	bgt.n	800f012 <_printf_i+0x212>
 800f02c:	e7eb      	b.n	800f006 <_printf_i+0x206>
 800f02e:	2500      	movs	r5, #0
 800f030:	f104 0619 	add.w	r6, r4, #25
 800f034:	e7f5      	b.n	800f022 <_printf_i+0x222>
 800f036:	bf00      	nop
 800f038:	0801dd44 	.word	0x0801dd44
 800f03c:	0801dd55 	.word	0x0801dd55

0800f040 <__sflush_r>:
 800f040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f048:	0716      	lsls	r6, r2, #28
 800f04a:	4605      	mov	r5, r0
 800f04c:	460c      	mov	r4, r1
 800f04e:	d454      	bmi.n	800f0fa <__sflush_r+0xba>
 800f050:	684b      	ldr	r3, [r1, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	dc02      	bgt.n	800f05c <__sflush_r+0x1c>
 800f056:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f058:	2b00      	cmp	r3, #0
 800f05a:	dd48      	ble.n	800f0ee <__sflush_r+0xae>
 800f05c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f05e:	2e00      	cmp	r6, #0
 800f060:	d045      	beq.n	800f0ee <__sflush_r+0xae>
 800f062:	2300      	movs	r3, #0
 800f064:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f068:	682f      	ldr	r7, [r5, #0]
 800f06a:	6a21      	ldr	r1, [r4, #32]
 800f06c:	602b      	str	r3, [r5, #0]
 800f06e:	d030      	beq.n	800f0d2 <__sflush_r+0x92>
 800f070:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f072:	89a3      	ldrh	r3, [r4, #12]
 800f074:	0759      	lsls	r1, r3, #29
 800f076:	d505      	bpl.n	800f084 <__sflush_r+0x44>
 800f078:	6863      	ldr	r3, [r4, #4]
 800f07a:	1ad2      	subs	r2, r2, r3
 800f07c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f07e:	b10b      	cbz	r3, 800f084 <__sflush_r+0x44>
 800f080:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f082:	1ad2      	subs	r2, r2, r3
 800f084:	2300      	movs	r3, #0
 800f086:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f088:	6a21      	ldr	r1, [r4, #32]
 800f08a:	4628      	mov	r0, r5
 800f08c:	47b0      	blx	r6
 800f08e:	1c43      	adds	r3, r0, #1
 800f090:	89a3      	ldrh	r3, [r4, #12]
 800f092:	d106      	bne.n	800f0a2 <__sflush_r+0x62>
 800f094:	6829      	ldr	r1, [r5, #0]
 800f096:	291d      	cmp	r1, #29
 800f098:	d82b      	bhi.n	800f0f2 <__sflush_r+0xb2>
 800f09a:	4a2a      	ldr	r2, [pc, #168]	@ (800f144 <__sflush_r+0x104>)
 800f09c:	410a      	asrs	r2, r1
 800f09e:	07d6      	lsls	r6, r2, #31
 800f0a0:	d427      	bmi.n	800f0f2 <__sflush_r+0xb2>
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	6062      	str	r2, [r4, #4]
 800f0a6:	04d9      	lsls	r1, r3, #19
 800f0a8:	6922      	ldr	r2, [r4, #16]
 800f0aa:	6022      	str	r2, [r4, #0]
 800f0ac:	d504      	bpl.n	800f0b8 <__sflush_r+0x78>
 800f0ae:	1c42      	adds	r2, r0, #1
 800f0b0:	d101      	bne.n	800f0b6 <__sflush_r+0x76>
 800f0b2:	682b      	ldr	r3, [r5, #0]
 800f0b4:	b903      	cbnz	r3, 800f0b8 <__sflush_r+0x78>
 800f0b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f0b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0ba:	602f      	str	r7, [r5, #0]
 800f0bc:	b1b9      	cbz	r1, 800f0ee <__sflush_r+0xae>
 800f0be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0c2:	4299      	cmp	r1, r3
 800f0c4:	d002      	beq.n	800f0cc <__sflush_r+0x8c>
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	f7ff fbd4 	bl	800e874 <_free_r>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0d0:	e00d      	b.n	800f0ee <__sflush_r+0xae>
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	47b0      	blx	r6
 800f0d8:	4602      	mov	r2, r0
 800f0da:	1c50      	adds	r0, r2, #1
 800f0dc:	d1c9      	bne.n	800f072 <__sflush_r+0x32>
 800f0de:	682b      	ldr	r3, [r5, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d0c6      	beq.n	800f072 <__sflush_r+0x32>
 800f0e4:	2b1d      	cmp	r3, #29
 800f0e6:	d001      	beq.n	800f0ec <__sflush_r+0xac>
 800f0e8:	2b16      	cmp	r3, #22
 800f0ea:	d11e      	bne.n	800f12a <__sflush_r+0xea>
 800f0ec:	602f      	str	r7, [r5, #0]
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	e022      	b.n	800f138 <__sflush_r+0xf8>
 800f0f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0f6:	b21b      	sxth	r3, r3
 800f0f8:	e01b      	b.n	800f132 <__sflush_r+0xf2>
 800f0fa:	690f      	ldr	r7, [r1, #16]
 800f0fc:	2f00      	cmp	r7, #0
 800f0fe:	d0f6      	beq.n	800f0ee <__sflush_r+0xae>
 800f100:	0793      	lsls	r3, r2, #30
 800f102:	680e      	ldr	r6, [r1, #0]
 800f104:	bf08      	it	eq
 800f106:	694b      	ldreq	r3, [r1, #20]
 800f108:	600f      	str	r7, [r1, #0]
 800f10a:	bf18      	it	ne
 800f10c:	2300      	movne	r3, #0
 800f10e:	eba6 0807 	sub.w	r8, r6, r7
 800f112:	608b      	str	r3, [r1, #8]
 800f114:	f1b8 0f00 	cmp.w	r8, #0
 800f118:	dde9      	ble.n	800f0ee <__sflush_r+0xae>
 800f11a:	6a21      	ldr	r1, [r4, #32]
 800f11c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f11e:	4643      	mov	r3, r8
 800f120:	463a      	mov	r2, r7
 800f122:	4628      	mov	r0, r5
 800f124:	47b0      	blx	r6
 800f126:	2800      	cmp	r0, #0
 800f128:	dc08      	bgt.n	800f13c <__sflush_r+0xfc>
 800f12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f132:	81a3      	strh	r3, [r4, #12]
 800f134:	f04f 30ff 	mov.w	r0, #4294967295
 800f138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f13c:	4407      	add	r7, r0
 800f13e:	eba8 0800 	sub.w	r8, r8, r0
 800f142:	e7e7      	b.n	800f114 <__sflush_r+0xd4>
 800f144:	dfbffffe 	.word	0xdfbffffe

0800f148 <_fflush_r>:
 800f148:	b538      	push	{r3, r4, r5, lr}
 800f14a:	690b      	ldr	r3, [r1, #16]
 800f14c:	4605      	mov	r5, r0
 800f14e:	460c      	mov	r4, r1
 800f150:	b913      	cbnz	r3, 800f158 <_fflush_r+0x10>
 800f152:	2500      	movs	r5, #0
 800f154:	4628      	mov	r0, r5
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	b118      	cbz	r0, 800f162 <_fflush_r+0x1a>
 800f15a:	6a03      	ldr	r3, [r0, #32]
 800f15c:	b90b      	cbnz	r3, 800f162 <_fflush_r+0x1a>
 800f15e:	f7ff f9f1 	bl	800e544 <__sinit>
 800f162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d0f3      	beq.n	800f152 <_fflush_r+0xa>
 800f16a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f16c:	07d0      	lsls	r0, r2, #31
 800f16e:	d404      	bmi.n	800f17a <_fflush_r+0x32>
 800f170:	0599      	lsls	r1, r3, #22
 800f172:	d402      	bmi.n	800f17a <_fflush_r+0x32>
 800f174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f176:	f7ff fb4e 	bl	800e816 <__retarget_lock_acquire_recursive>
 800f17a:	4628      	mov	r0, r5
 800f17c:	4621      	mov	r1, r4
 800f17e:	f7ff ff5f 	bl	800f040 <__sflush_r>
 800f182:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f184:	07da      	lsls	r2, r3, #31
 800f186:	4605      	mov	r5, r0
 800f188:	d4e4      	bmi.n	800f154 <_fflush_r+0xc>
 800f18a:	89a3      	ldrh	r3, [r4, #12]
 800f18c:	059b      	lsls	r3, r3, #22
 800f18e:	d4e1      	bmi.n	800f154 <_fflush_r+0xc>
 800f190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f192:	f7ff fb41 	bl	800e818 <__retarget_lock_release_recursive>
 800f196:	e7dd      	b.n	800f154 <_fflush_r+0xc>

0800f198 <fiprintf>:
 800f198:	b40e      	push	{r1, r2, r3}
 800f19a:	b503      	push	{r0, r1, lr}
 800f19c:	4601      	mov	r1, r0
 800f19e:	ab03      	add	r3, sp, #12
 800f1a0:	4805      	ldr	r0, [pc, #20]	@ (800f1b8 <fiprintf+0x20>)
 800f1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1a6:	6800      	ldr	r0, [r0, #0]
 800f1a8:	9301      	str	r3, [sp, #4]
 800f1aa:	f000 f88f 	bl	800f2cc <_vfiprintf_r>
 800f1ae:	b002      	add	sp, #8
 800f1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1b4:	b003      	add	sp, #12
 800f1b6:	4770      	bx	lr
 800f1b8:	20000064 	.word	0x20000064

0800f1bc <memmove>:
 800f1bc:	4288      	cmp	r0, r1
 800f1be:	b510      	push	{r4, lr}
 800f1c0:	eb01 0402 	add.w	r4, r1, r2
 800f1c4:	d902      	bls.n	800f1cc <memmove+0x10>
 800f1c6:	4284      	cmp	r4, r0
 800f1c8:	4623      	mov	r3, r4
 800f1ca:	d807      	bhi.n	800f1dc <memmove+0x20>
 800f1cc:	1e43      	subs	r3, r0, #1
 800f1ce:	42a1      	cmp	r1, r4
 800f1d0:	d008      	beq.n	800f1e4 <memmove+0x28>
 800f1d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1da:	e7f8      	b.n	800f1ce <memmove+0x12>
 800f1dc:	4402      	add	r2, r0
 800f1de:	4601      	mov	r1, r0
 800f1e0:	428a      	cmp	r2, r1
 800f1e2:	d100      	bne.n	800f1e6 <memmove+0x2a>
 800f1e4:	bd10      	pop	{r4, pc}
 800f1e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1ee:	e7f7      	b.n	800f1e0 <memmove+0x24>

0800f1f0 <_sbrk_r>:
 800f1f0:	b538      	push	{r3, r4, r5, lr}
 800f1f2:	4d06      	ldr	r5, [pc, #24]	@ (800f20c <_sbrk_r+0x1c>)
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	4608      	mov	r0, r1
 800f1fa:	602b      	str	r3, [r5, #0]
 800f1fc:	f7f6 f998 	bl	8005530 <_sbrk>
 800f200:	1c43      	adds	r3, r0, #1
 800f202:	d102      	bne.n	800f20a <_sbrk_r+0x1a>
 800f204:	682b      	ldr	r3, [r5, #0]
 800f206:	b103      	cbz	r3, 800f20a <_sbrk_r+0x1a>
 800f208:	6023      	str	r3, [r4, #0]
 800f20a:	bd38      	pop	{r3, r4, r5, pc}
 800f20c:	20004d14 	.word	0x20004d14

0800f210 <abort>:
 800f210:	b508      	push	{r3, lr}
 800f212:	2006      	movs	r0, #6
 800f214:	f000 fa2e 	bl	800f674 <raise>
 800f218:	2001      	movs	r0, #1
 800f21a:	f7f6 f911 	bl	8005440 <_exit>

0800f21e <_realloc_r>:
 800f21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f222:	4680      	mov	r8, r0
 800f224:	4615      	mov	r5, r2
 800f226:	460c      	mov	r4, r1
 800f228:	b921      	cbnz	r1, 800f234 <_realloc_r+0x16>
 800f22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f22e:	4611      	mov	r1, r2
 800f230:	f7ff bb94 	b.w	800e95c <_malloc_r>
 800f234:	b92a      	cbnz	r2, 800f242 <_realloc_r+0x24>
 800f236:	f7ff fb1d 	bl	800e874 <_free_r>
 800f23a:	2400      	movs	r4, #0
 800f23c:	4620      	mov	r0, r4
 800f23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f242:	f000 fa33 	bl	800f6ac <_malloc_usable_size_r>
 800f246:	4285      	cmp	r5, r0
 800f248:	4606      	mov	r6, r0
 800f24a:	d802      	bhi.n	800f252 <_realloc_r+0x34>
 800f24c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f250:	d8f4      	bhi.n	800f23c <_realloc_r+0x1e>
 800f252:	4629      	mov	r1, r5
 800f254:	4640      	mov	r0, r8
 800f256:	f7ff fb81 	bl	800e95c <_malloc_r>
 800f25a:	4607      	mov	r7, r0
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d0ec      	beq.n	800f23a <_realloc_r+0x1c>
 800f260:	42b5      	cmp	r5, r6
 800f262:	462a      	mov	r2, r5
 800f264:	4621      	mov	r1, r4
 800f266:	bf28      	it	cs
 800f268:	4632      	movcs	r2, r6
 800f26a:	f7ff fad6 	bl	800e81a <memcpy>
 800f26e:	4621      	mov	r1, r4
 800f270:	4640      	mov	r0, r8
 800f272:	f7ff faff 	bl	800e874 <_free_r>
 800f276:	463c      	mov	r4, r7
 800f278:	e7e0      	b.n	800f23c <_realloc_r+0x1e>

0800f27a <__sfputc_r>:
 800f27a:	6893      	ldr	r3, [r2, #8]
 800f27c:	3b01      	subs	r3, #1
 800f27e:	2b00      	cmp	r3, #0
 800f280:	b410      	push	{r4}
 800f282:	6093      	str	r3, [r2, #8]
 800f284:	da08      	bge.n	800f298 <__sfputc_r+0x1e>
 800f286:	6994      	ldr	r4, [r2, #24]
 800f288:	42a3      	cmp	r3, r4
 800f28a:	db01      	blt.n	800f290 <__sfputc_r+0x16>
 800f28c:	290a      	cmp	r1, #10
 800f28e:	d103      	bne.n	800f298 <__sfputc_r+0x1e>
 800f290:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f294:	f000 b932 	b.w	800f4fc <__swbuf_r>
 800f298:	6813      	ldr	r3, [r2, #0]
 800f29a:	1c58      	adds	r0, r3, #1
 800f29c:	6010      	str	r0, [r2, #0]
 800f29e:	7019      	strb	r1, [r3, #0]
 800f2a0:	4608      	mov	r0, r1
 800f2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2a6:	4770      	bx	lr

0800f2a8 <__sfputs_r>:
 800f2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2aa:	4606      	mov	r6, r0
 800f2ac:	460f      	mov	r7, r1
 800f2ae:	4614      	mov	r4, r2
 800f2b0:	18d5      	adds	r5, r2, r3
 800f2b2:	42ac      	cmp	r4, r5
 800f2b4:	d101      	bne.n	800f2ba <__sfputs_r+0x12>
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	e007      	b.n	800f2ca <__sfputs_r+0x22>
 800f2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2be:	463a      	mov	r2, r7
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f7ff ffda 	bl	800f27a <__sfputc_r>
 800f2c6:	1c43      	adds	r3, r0, #1
 800f2c8:	d1f3      	bne.n	800f2b2 <__sfputs_r+0xa>
 800f2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f2cc <_vfiprintf_r>:
 800f2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d0:	460d      	mov	r5, r1
 800f2d2:	b09d      	sub	sp, #116	@ 0x74
 800f2d4:	4614      	mov	r4, r2
 800f2d6:	4698      	mov	r8, r3
 800f2d8:	4606      	mov	r6, r0
 800f2da:	b118      	cbz	r0, 800f2e4 <_vfiprintf_r+0x18>
 800f2dc:	6a03      	ldr	r3, [r0, #32]
 800f2de:	b90b      	cbnz	r3, 800f2e4 <_vfiprintf_r+0x18>
 800f2e0:	f7ff f930 	bl	800e544 <__sinit>
 800f2e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2e6:	07d9      	lsls	r1, r3, #31
 800f2e8:	d405      	bmi.n	800f2f6 <_vfiprintf_r+0x2a>
 800f2ea:	89ab      	ldrh	r3, [r5, #12]
 800f2ec:	059a      	lsls	r2, r3, #22
 800f2ee:	d402      	bmi.n	800f2f6 <_vfiprintf_r+0x2a>
 800f2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2f2:	f7ff fa90 	bl	800e816 <__retarget_lock_acquire_recursive>
 800f2f6:	89ab      	ldrh	r3, [r5, #12]
 800f2f8:	071b      	lsls	r3, r3, #28
 800f2fa:	d501      	bpl.n	800f300 <_vfiprintf_r+0x34>
 800f2fc:	692b      	ldr	r3, [r5, #16]
 800f2fe:	b99b      	cbnz	r3, 800f328 <_vfiprintf_r+0x5c>
 800f300:	4629      	mov	r1, r5
 800f302:	4630      	mov	r0, r6
 800f304:	f000 f938 	bl	800f578 <__swsetup_r>
 800f308:	b170      	cbz	r0, 800f328 <_vfiprintf_r+0x5c>
 800f30a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f30c:	07dc      	lsls	r4, r3, #31
 800f30e:	d504      	bpl.n	800f31a <_vfiprintf_r+0x4e>
 800f310:	f04f 30ff 	mov.w	r0, #4294967295
 800f314:	b01d      	add	sp, #116	@ 0x74
 800f316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31a:	89ab      	ldrh	r3, [r5, #12]
 800f31c:	0598      	lsls	r0, r3, #22
 800f31e:	d4f7      	bmi.n	800f310 <_vfiprintf_r+0x44>
 800f320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f322:	f7ff fa79 	bl	800e818 <__retarget_lock_release_recursive>
 800f326:	e7f3      	b.n	800f310 <_vfiprintf_r+0x44>
 800f328:	2300      	movs	r3, #0
 800f32a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f32c:	2320      	movs	r3, #32
 800f32e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f332:	f8cd 800c 	str.w	r8, [sp, #12]
 800f336:	2330      	movs	r3, #48	@ 0x30
 800f338:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f4e8 <_vfiprintf_r+0x21c>
 800f33c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f340:	f04f 0901 	mov.w	r9, #1
 800f344:	4623      	mov	r3, r4
 800f346:	469a      	mov	sl, r3
 800f348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f34c:	b10a      	cbz	r2, 800f352 <_vfiprintf_r+0x86>
 800f34e:	2a25      	cmp	r2, #37	@ 0x25
 800f350:	d1f9      	bne.n	800f346 <_vfiprintf_r+0x7a>
 800f352:	ebba 0b04 	subs.w	fp, sl, r4
 800f356:	d00b      	beq.n	800f370 <_vfiprintf_r+0xa4>
 800f358:	465b      	mov	r3, fp
 800f35a:	4622      	mov	r2, r4
 800f35c:	4629      	mov	r1, r5
 800f35e:	4630      	mov	r0, r6
 800f360:	f7ff ffa2 	bl	800f2a8 <__sfputs_r>
 800f364:	3001      	adds	r0, #1
 800f366:	f000 80a7 	beq.w	800f4b8 <_vfiprintf_r+0x1ec>
 800f36a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f36c:	445a      	add	r2, fp
 800f36e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f370:	f89a 3000 	ldrb.w	r3, [sl]
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 809f 	beq.w	800f4b8 <_vfiprintf_r+0x1ec>
 800f37a:	2300      	movs	r3, #0
 800f37c:	f04f 32ff 	mov.w	r2, #4294967295
 800f380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f384:	f10a 0a01 	add.w	sl, sl, #1
 800f388:	9304      	str	r3, [sp, #16]
 800f38a:	9307      	str	r3, [sp, #28]
 800f38c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f390:	931a      	str	r3, [sp, #104]	@ 0x68
 800f392:	4654      	mov	r4, sl
 800f394:	2205      	movs	r2, #5
 800f396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f39a:	4853      	ldr	r0, [pc, #332]	@ (800f4e8 <_vfiprintf_r+0x21c>)
 800f39c:	f7f0 ff38 	bl	8000210 <memchr>
 800f3a0:	9a04      	ldr	r2, [sp, #16]
 800f3a2:	b9d8      	cbnz	r0, 800f3dc <_vfiprintf_r+0x110>
 800f3a4:	06d1      	lsls	r1, r2, #27
 800f3a6:	bf44      	itt	mi
 800f3a8:	2320      	movmi	r3, #32
 800f3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3ae:	0713      	lsls	r3, r2, #28
 800f3b0:	bf44      	itt	mi
 800f3b2:	232b      	movmi	r3, #43	@ 0x2b
 800f3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f3bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3be:	d015      	beq.n	800f3ec <_vfiprintf_r+0x120>
 800f3c0:	9a07      	ldr	r2, [sp, #28]
 800f3c2:	4654      	mov	r4, sl
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	f04f 0c0a 	mov.w	ip, #10
 800f3ca:	4621      	mov	r1, r4
 800f3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3d0:	3b30      	subs	r3, #48	@ 0x30
 800f3d2:	2b09      	cmp	r3, #9
 800f3d4:	d94b      	bls.n	800f46e <_vfiprintf_r+0x1a2>
 800f3d6:	b1b0      	cbz	r0, 800f406 <_vfiprintf_r+0x13a>
 800f3d8:	9207      	str	r2, [sp, #28]
 800f3da:	e014      	b.n	800f406 <_vfiprintf_r+0x13a>
 800f3dc:	eba0 0308 	sub.w	r3, r0, r8
 800f3e0:	fa09 f303 	lsl.w	r3, r9, r3
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	9304      	str	r3, [sp, #16]
 800f3e8:	46a2      	mov	sl, r4
 800f3ea:	e7d2      	b.n	800f392 <_vfiprintf_r+0xc6>
 800f3ec:	9b03      	ldr	r3, [sp, #12]
 800f3ee:	1d19      	adds	r1, r3, #4
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	9103      	str	r1, [sp, #12]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	bfbb      	ittet	lt
 800f3f8:	425b      	neglt	r3, r3
 800f3fa:	f042 0202 	orrlt.w	r2, r2, #2
 800f3fe:	9307      	strge	r3, [sp, #28]
 800f400:	9307      	strlt	r3, [sp, #28]
 800f402:	bfb8      	it	lt
 800f404:	9204      	strlt	r2, [sp, #16]
 800f406:	7823      	ldrb	r3, [r4, #0]
 800f408:	2b2e      	cmp	r3, #46	@ 0x2e
 800f40a:	d10a      	bne.n	800f422 <_vfiprintf_r+0x156>
 800f40c:	7863      	ldrb	r3, [r4, #1]
 800f40e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f410:	d132      	bne.n	800f478 <_vfiprintf_r+0x1ac>
 800f412:	9b03      	ldr	r3, [sp, #12]
 800f414:	1d1a      	adds	r2, r3, #4
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	9203      	str	r2, [sp, #12]
 800f41a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f41e:	3402      	adds	r4, #2
 800f420:	9305      	str	r3, [sp, #20]
 800f422:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f4f8 <_vfiprintf_r+0x22c>
 800f426:	7821      	ldrb	r1, [r4, #0]
 800f428:	2203      	movs	r2, #3
 800f42a:	4650      	mov	r0, sl
 800f42c:	f7f0 fef0 	bl	8000210 <memchr>
 800f430:	b138      	cbz	r0, 800f442 <_vfiprintf_r+0x176>
 800f432:	9b04      	ldr	r3, [sp, #16]
 800f434:	eba0 000a 	sub.w	r0, r0, sl
 800f438:	2240      	movs	r2, #64	@ 0x40
 800f43a:	4082      	lsls	r2, r0
 800f43c:	4313      	orrs	r3, r2
 800f43e:	3401      	adds	r4, #1
 800f440:	9304      	str	r3, [sp, #16]
 800f442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f446:	4829      	ldr	r0, [pc, #164]	@ (800f4ec <_vfiprintf_r+0x220>)
 800f448:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f44c:	2206      	movs	r2, #6
 800f44e:	f7f0 fedf 	bl	8000210 <memchr>
 800f452:	2800      	cmp	r0, #0
 800f454:	d03f      	beq.n	800f4d6 <_vfiprintf_r+0x20a>
 800f456:	4b26      	ldr	r3, [pc, #152]	@ (800f4f0 <_vfiprintf_r+0x224>)
 800f458:	bb1b      	cbnz	r3, 800f4a2 <_vfiprintf_r+0x1d6>
 800f45a:	9b03      	ldr	r3, [sp, #12]
 800f45c:	3307      	adds	r3, #7
 800f45e:	f023 0307 	bic.w	r3, r3, #7
 800f462:	3308      	adds	r3, #8
 800f464:	9303      	str	r3, [sp, #12]
 800f466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f468:	443b      	add	r3, r7
 800f46a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f46c:	e76a      	b.n	800f344 <_vfiprintf_r+0x78>
 800f46e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f472:	460c      	mov	r4, r1
 800f474:	2001      	movs	r0, #1
 800f476:	e7a8      	b.n	800f3ca <_vfiprintf_r+0xfe>
 800f478:	2300      	movs	r3, #0
 800f47a:	3401      	adds	r4, #1
 800f47c:	9305      	str	r3, [sp, #20]
 800f47e:	4619      	mov	r1, r3
 800f480:	f04f 0c0a 	mov.w	ip, #10
 800f484:	4620      	mov	r0, r4
 800f486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f48a:	3a30      	subs	r2, #48	@ 0x30
 800f48c:	2a09      	cmp	r2, #9
 800f48e:	d903      	bls.n	800f498 <_vfiprintf_r+0x1cc>
 800f490:	2b00      	cmp	r3, #0
 800f492:	d0c6      	beq.n	800f422 <_vfiprintf_r+0x156>
 800f494:	9105      	str	r1, [sp, #20]
 800f496:	e7c4      	b.n	800f422 <_vfiprintf_r+0x156>
 800f498:	fb0c 2101 	mla	r1, ip, r1, r2
 800f49c:	4604      	mov	r4, r0
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e7f0      	b.n	800f484 <_vfiprintf_r+0x1b8>
 800f4a2:	ab03      	add	r3, sp, #12
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	462a      	mov	r2, r5
 800f4a8:	4b12      	ldr	r3, [pc, #72]	@ (800f4f4 <_vfiprintf_r+0x228>)
 800f4aa:	a904      	add	r1, sp, #16
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f3af 8000 	nop.w
 800f4b2:	4607      	mov	r7, r0
 800f4b4:	1c78      	adds	r0, r7, #1
 800f4b6:	d1d6      	bne.n	800f466 <_vfiprintf_r+0x19a>
 800f4b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4ba:	07d9      	lsls	r1, r3, #31
 800f4bc:	d405      	bmi.n	800f4ca <_vfiprintf_r+0x1fe>
 800f4be:	89ab      	ldrh	r3, [r5, #12]
 800f4c0:	059a      	lsls	r2, r3, #22
 800f4c2:	d402      	bmi.n	800f4ca <_vfiprintf_r+0x1fe>
 800f4c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4c6:	f7ff f9a7 	bl	800e818 <__retarget_lock_release_recursive>
 800f4ca:	89ab      	ldrh	r3, [r5, #12]
 800f4cc:	065b      	lsls	r3, r3, #25
 800f4ce:	f53f af1f 	bmi.w	800f310 <_vfiprintf_r+0x44>
 800f4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4d4:	e71e      	b.n	800f314 <_vfiprintf_r+0x48>
 800f4d6:	ab03      	add	r3, sp, #12
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	462a      	mov	r2, r5
 800f4dc:	4b05      	ldr	r3, [pc, #20]	@ (800f4f4 <_vfiprintf_r+0x228>)
 800f4de:	a904      	add	r1, sp, #16
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	f7ff fc8d 	bl	800ee00 <_printf_i>
 800f4e6:	e7e4      	b.n	800f4b2 <_vfiprintf_r+0x1e6>
 800f4e8:	0801dd33 	.word	0x0801dd33
 800f4ec:	0801dd3d 	.word	0x0801dd3d
 800f4f0:	00000000 	.word	0x00000000
 800f4f4:	0800f2a9 	.word	0x0800f2a9
 800f4f8:	0801dd39 	.word	0x0801dd39

0800f4fc <__swbuf_r>:
 800f4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4fe:	460e      	mov	r6, r1
 800f500:	4614      	mov	r4, r2
 800f502:	4605      	mov	r5, r0
 800f504:	b118      	cbz	r0, 800f50e <__swbuf_r+0x12>
 800f506:	6a03      	ldr	r3, [r0, #32]
 800f508:	b90b      	cbnz	r3, 800f50e <__swbuf_r+0x12>
 800f50a:	f7ff f81b 	bl	800e544 <__sinit>
 800f50e:	69a3      	ldr	r3, [r4, #24]
 800f510:	60a3      	str	r3, [r4, #8]
 800f512:	89a3      	ldrh	r3, [r4, #12]
 800f514:	071a      	lsls	r2, r3, #28
 800f516:	d501      	bpl.n	800f51c <__swbuf_r+0x20>
 800f518:	6923      	ldr	r3, [r4, #16]
 800f51a:	b943      	cbnz	r3, 800f52e <__swbuf_r+0x32>
 800f51c:	4621      	mov	r1, r4
 800f51e:	4628      	mov	r0, r5
 800f520:	f000 f82a 	bl	800f578 <__swsetup_r>
 800f524:	b118      	cbz	r0, 800f52e <__swbuf_r+0x32>
 800f526:	f04f 37ff 	mov.w	r7, #4294967295
 800f52a:	4638      	mov	r0, r7
 800f52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f52e:	6823      	ldr	r3, [r4, #0]
 800f530:	6922      	ldr	r2, [r4, #16]
 800f532:	1a98      	subs	r0, r3, r2
 800f534:	6963      	ldr	r3, [r4, #20]
 800f536:	b2f6      	uxtb	r6, r6
 800f538:	4283      	cmp	r3, r0
 800f53a:	4637      	mov	r7, r6
 800f53c:	dc05      	bgt.n	800f54a <__swbuf_r+0x4e>
 800f53e:	4621      	mov	r1, r4
 800f540:	4628      	mov	r0, r5
 800f542:	f7ff fe01 	bl	800f148 <_fflush_r>
 800f546:	2800      	cmp	r0, #0
 800f548:	d1ed      	bne.n	800f526 <__swbuf_r+0x2a>
 800f54a:	68a3      	ldr	r3, [r4, #8]
 800f54c:	3b01      	subs	r3, #1
 800f54e:	60a3      	str	r3, [r4, #8]
 800f550:	6823      	ldr	r3, [r4, #0]
 800f552:	1c5a      	adds	r2, r3, #1
 800f554:	6022      	str	r2, [r4, #0]
 800f556:	701e      	strb	r6, [r3, #0]
 800f558:	6962      	ldr	r2, [r4, #20]
 800f55a:	1c43      	adds	r3, r0, #1
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d004      	beq.n	800f56a <__swbuf_r+0x6e>
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	07db      	lsls	r3, r3, #31
 800f564:	d5e1      	bpl.n	800f52a <__swbuf_r+0x2e>
 800f566:	2e0a      	cmp	r6, #10
 800f568:	d1df      	bne.n	800f52a <__swbuf_r+0x2e>
 800f56a:	4621      	mov	r1, r4
 800f56c:	4628      	mov	r0, r5
 800f56e:	f7ff fdeb 	bl	800f148 <_fflush_r>
 800f572:	2800      	cmp	r0, #0
 800f574:	d0d9      	beq.n	800f52a <__swbuf_r+0x2e>
 800f576:	e7d6      	b.n	800f526 <__swbuf_r+0x2a>

0800f578 <__swsetup_r>:
 800f578:	b538      	push	{r3, r4, r5, lr}
 800f57a:	4b29      	ldr	r3, [pc, #164]	@ (800f620 <__swsetup_r+0xa8>)
 800f57c:	4605      	mov	r5, r0
 800f57e:	6818      	ldr	r0, [r3, #0]
 800f580:	460c      	mov	r4, r1
 800f582:	b118      	cbz	r0, 800f58c <__swsetup_r+0x14>
 800f584:	6a03      	ldr	r3, [r0, #32]
 800f586:	b90b      	cbnz	r3, 800f58c <__swsetup_r+0x14>
 800f588:	f7fe ffdc 	bl	800e544 <__sinit>
 800f58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f590:	0719      	lsls	r1, r3, #28
 800f592:	d422      	bmi.n	800f5da <__swsetup_r+0x62>
 800f594:	06da      	lsls	r2, r3, #27
 800f596:	d407      	bmi.n	800f5a8 <__swsetup_r+0x30>
 800f598:	2209      	movs	r2, #9
 800f59a:	602a      	str	r2, [r5, #0]
 800f59c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5a0:	81a3      	strh	r3, [r4, #12]
 800f5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a6:	e033      	b.n	800f610 <__swsetup_r+0x98>
 800f5a8:	0758      	lsls	r0, r3, #29
 800f5aa:	d512      	bpl.n	800f5d2 <__swsetup_r+0x5a>
 800f5ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5ae:	b141      	cbz	r1, 800f5c2 <__swsetup_r+0x4a>
 800f5b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5b4:	4299      	cmp	r1, r3
 800f5b6:	d002      	beq.n	800f5be <__swsetup_r+0x46>
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	f7ff f95b 	bl	800e874 <_free_r>
 800f5be:	2300      	movs	r3, #0
 800f5c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5c2:	89a3      	ldrh	r3, [r4, #12]
 800f5c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f5c8:	81a3      	strh	r3, [r4, #12]
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	6063      	str	r3, [r4, #4]
 800f5ce:	6923      	ldr	r3, [r4, #16]
 800f5d0:	6023      	str	r3, [r4, #0]
 800f5d2:	89a3      	ldrh	r3, [r4, #12]
 800f5d4:	f043 0308 	orr.w	r3, r3, #8
 800f5d8:	81a3      	strh	r3, [r4, #12]
 800f5da:	6923      	ldr	r3, [r4, #16]
 800f5dc:	b94b      	cbnz	r3, 800f5f2 <__swsetup_r+0x7a>
 800f5de:	89a3      	ldrh	r3, [r4, #12]
 800f5e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f5e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f5e8:	d003      	beq.n	800f5f2 <__swsetup_r+0x7a>
 800f5ea:	4621      	mov	r1, r4
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	f000 f88b 	bl	800f708 <__smakebuf_r>
 800f5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5f6:	f013 0201 	ands.w	r2, r3, #1
 800f5fa:	d00a      	beq.n	800f612 <__swsetup_r+0x9a>
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	60a2      	str	r2, [r4, #8]
 800f600:	6962      	ldr	r2, [r4, #20]
 800f602:	4252      	negs	r2, r2
 800f604:	61a2      	str	r2, [r4, #24]
 800f606:	6922      	ldr	r2, [r4, #16]
 800f608:	b942      	cbnz	r2, 800f61c <__swsetup_r+0xa4>
 800f60a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f60e:	d1c5      	bne.n	800f59c <__swsetup_r+0x24>
 800f610:	bd38      	pop	{r3, r4, r5, pc}
 800f612:	0799      	lsls	r1, r3, #30
 800f614:	bf58      	it	pl
 800f616:	6962      	ldrpl	r2, [r4, #20]
 800f618:	60a2      	str	r2, [r4, #8]
 800f61a:	e7f4      	b.n	800f606 <__swsetup_r+0x8e>
 800f61c:	2000      	movs	r0, #0
 800f61e:	e7f7      	b.n	800f610 <__swsetup_r+0x98>
 800f620:	20000064 	.word	0x20000064

0800f624 <_raise_r>:
 800f624:	291f      	cmp	r1, #31
 800f626:	b538      	push	{r3, r4, r5, lr}
 800f628:	4605      	mov	r5, r0
 800f62a:	460c      	mov	r4, r1
 800f62c:	d904      	bls.n	800f638 <_raise_r+0x14>
 800f62e:	2316      	movs	r3, #22
 800f630:	6003      	str	r3, [r0, #0]
 800f632:	f04f 30ff 	mov.w	r0, #4294967295
 800f636:	bd38      	pop	{r3, r4, r5, pc}
 800f638:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f63a:	b112      	cbz	r2, 800f642 <_raise_r+0x1e>
 800f63c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f640:	b94b      	cbnz	r3, 800f656 <_raise_r+0x32>
 800f642:	4628      	mov	r0, r5
 800f644:	f000 f830 	bl	800f6a8 <_getpid_r>
 800f648:	4622      	mov	r2, r4
 800f64a:	4601      	mov	r1, r0
 800f64c:	4628      	mov	r0, r5
 800f64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f652:	f000 b817 	b.w	800f684 <_kill_r>
 800f656:	2b01      	cmp	r3, #1
 800f658:	d00a      	beq.n	800f670 <_raise_r+0x4c>
 800f65a:	1c59      	adds	r1, r3, #1
 800f65c:	d103      	bne.n	800f666 <_raise_r+0x42>
 800f65e:	2316      	movs	r3, #22
 800f660:	6003      	str	r3, [r0, #0]
 800f662:	2001      	movs	r0, #1
 800f664:	e7e7      	b.n	800f636 <_raise_r+0x12>
 800f666:	2100      	movs	r1, #0
 800f668:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f66c:	4620      	mov	r0, r4
 800f66e:	4798      	blx	r3
 800f670:	2000      	movs	r0, #0
 800f672:	e7e0      	b.n	800f636 <_raise_r+0x12>

0800f674 <raise>:
 800f674:	4b02      	ldr	r3, [pc, #8]	@ (800f680 <raise+0xc>)
 800f676:	4601      	mov	r1, r0
 800f678:	6818      	ldr	r0, [r3, #0]
 800f67a:	f7ff bfd3 	b.w	800f624 <_raise_r>
 800f67e:	bf00      	nop
 800f680:	20000064 	.word	0x20000064

0800f684 <_kill_r>:
 800f684:	b538      	push	{r3, r4, r5, lr}
 800f686:	4d07      	ldr	r5, [pc, #28]	@ (800f6a4 <_kill_r+0x20>)
 800f688:	2300      	movs	r3, #0
 800f68a:	4604      	mov	r4, r0
 800f68c:	4608      	mov	r0, r1
 800f68e:	4611      	mov	r1, r2
 800f690:	602b      	str	r3, [r5, #0]
 800f692:	f7f5 fec5 	bl	8005420 <_kill>
 800f696:	1c43      	adds	r3, r0, #1
 800f698:	d102      	bne.n	800f6a0 <_kill_r+0x1c>
 800f69a:	682b      	ldr	r3, [r5, #0]
 800f69c:	b103      	cbz	r3, 800f6a0 <_kill_r+0x1c>
 800f69e:	6023      	str	r3, [r4, #0]
 800f6a0:	bd38      	pop	{r3, r4, r5, pc}
 800f6a2:	bf00      	nop
 800f6a4:	20004d14 	.word	0x20004d14

0800f6a8 <_getpid_r>:
 800f6a8:	f7f5 beb2 	b.w	8005410 <_getpid>

0800f6ac <_malloc_usable_size_r>:
 800f6ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6b0:	1f18      	subs	r0, r3, #4
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	bfbc      	itt	lt
 800f6b6:	580b      	ldrlt	r3, [r1, r0]
 800f6b8:	18c0      	addlt	r0, r0, r3
 800f6ba:	4770      	bx	lr

0800f6bc <__swhatbuf_r>:
 800f6bc:	b570      	push	{r4, r5, r6, lr}
 800f6be:	460c      	mov	r4, r1
 800f6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c4:	2900      	cmp	r1, #0
 800f6c6:	b096      	sub	sp, #88	@ 0x58
 800f6c8:	4615      	mov	r5, r2
 800f6ca:	461e      	mov	r6, r3
 800f6cc:	da0d      	bge.n	800f6ea <__swhatbuf_r+0x2e>
 800f6ce:	89a3      	ldrh	r3, [r4, #12]
 800f6d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f6d4:	f04f 0100 	mov.w	r1, #0
 800f6d8:	bf14      	ite	ne
 800f6da:	2340      	movne	r3, #64	@ 0x40
 800f6dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	6031      	str	r1, [r6, #0]
 800f6e4:	602b      	str	r3, [r5, #0]
 800f6e6:	b016      	add	sp, #88	@ 0x58
 800f6e8:	bd70      	pop	{r4, r5, r6, pc}
 800f6ea:	466a      	mov	r2, sp
 800f6ec:	f000 f848 	bl	800f780 <_fstat_r>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	dbec      	blt.n	800f6ce <__swhatbuf_r+0x12>
 800f6f4:	9901      	ldr	r1, [sp, #4]
 800f6f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f6fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f6fe:	4259      	negs	r1, r3
 800f700:	4159      	adcs	r1, r3
 800f702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f706:	e7eb      	b.n	800f6e0 <__swhatbuf_r+0x24>

0800f708 <__smakebuf_r>:
 800f708:	898b      	ldrh	r3, [r1, #12]
 800f70a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f70c:	079d      	lsls	r5, r3, #30
 800f70e:	4606      	mov	r6, r0
 800f710:	460c      	mov	r4, r1
 800f712:	d507      	bpl.n	800f724 <__smakebuf_r+0x1c>
 800f714:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f718:	6023      	str	r3, [r4, #0]
 800f71a:	6123      	str	r3, [r4, #16]
 800f71c:	2301      	movs	r3, #1
 800f71e:	6163      	str	r3, [r4, #20]
 800f720:	b003      	add	sp, #12
 800f722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f724:	ab01      	add	r3, sp, #4
 800f726:	466a      	mov	r2, sp
 800f728:	f7ff ffc8 	bl	800f6bc <__swhatbuf_r>
 800f72c:	9f00      	ldr	r7, [sp, #0]
 800f72e:	4605      	mov	r5, r0
 800f730:	4639      	mov	r1, r7
 800f732:	4630      	mov	r0, r6
 800f734:	f7ff f912 	bl	800e95c <_malloc_r>
 800f738:	b948      	cbnz	r0, 800f74e <__smakebuf_r+0x46>
 800f73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f73e:	059a      	lsls	r2, r3, #22
 800f740:	d4ee      	bmi.n	800f720 <__smakebuf_r+0x18>
 800f742:	f023 0303 	bic.w	r3, r3, #3
 800f746:	f043 0302 	orr.w	r3, r3, #2
 800f74a:	81a3      	strh	r3, [r4, #12]
 800f74c:	e7e2      	b.n	800f714 <__smakebuf_r+0xc>
 800f74e:	89a3      	ldrh	r3, [r4, #12]
 800f750:	6020      	str	r0, [r4, #0]
 800f752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f756:	81a3      	strh	r3, [r4, #12]
 800f758:	9b01      	ldr	r3, [sp, #4]
 800f75a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f75e:	b15b      	cbz	r3, 800f778 <__smakebuf_r+0x70>
 800f760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f764:	4630      	mov	r0, r6
 800f766:	f000 f81d 	bl	800f7a4 <_isatty_r>
 800f76a:	b128      	cbz	r0, 800f778 <__smakebuf_r+0x70>
 800f76c:	89a3      	ldrh	r3, [r4, #12]
 800f76e:	f023 0303 	bic.w	r3, r3, #3
 800f772:	f043 0301 	orr.w	r3, r3, #1
 800f776:	81a3      	strh	r3, [r4, #12]
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	431d      	orrs	r5, r3
 800f77c:	81a5      	strh	r5, [r4, #12]
 800f77e:	e7cf      	b.n	800f720 <__smakebuf_r+0x18>

0800f780 <_fstat_r>:
 800f780:	b538      	push	{r3, r4, r5, lr}
 800f782:	4d07      	ldr	r5, [pc, #28]	@ (800f7a0 <_fstat_r+0x20>)
 800f784:	2300      	movs	r3, #0
 800f786:	4604      	mov	r4, r0
 800f788:	4608      	mov	r0, r1
 800f78a:	4611      	mov	r1, r2
 800f78c:	602b      	str	r3, [r5, #0]
 800f78e:	f7f5 fea7 	bl	80054e0 <_fstat>
 800f792:	1c43      	adds	r3, r0, #1
 800f794:	d102      	bne.n	800f79c <_fstat_r+0x1c>
 800f796:	682b      	ldr	r3, [r5, #0]
 800f798:	b103      	cbz	r3, 800f79c <_fstat_r+0x1c>
 800f79a:	6023      	str	r3, [r4, #0]
 800f79c:	bd38      	pop	{r3, r4, r5, pc}
 800f79e:	bf00      	nop
 800f7a0:	20004d14 	.word	0x20004d14

0800f7a4 <_isatty_r>:
 800f7a4:	b538      	push	{r3, r4, r5, lr}
 800f7a6:	4d06      	ldr	r5, [pc, #24]	@ (800f7c0 <_isatty_r+0x1c>)
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	4608      	mov	r0, r1
 800f7ae:	602b      	str	r3, [r5, #0]
 800f7b0:	f7f5 fea6 	bl	8005500 <_isatty>
 800f7b4:	1c43      	adds	r3, r0, #1
 800f7b6:	d102      	bne.n	800f7be <_isatty_r+0x1a>
 800f7b8:	682b      	ldr	r3, [r5, #0]
 800f7ba:	b103      	cbz	r3, 800f7be <_isatty_r+0x1a>
 800f7bc:	6023      	str	r3, [r4, #0]
 800f7be:	bd38      	pop	{r3, r4, r5, pc}
 800f7c0:	20004d14 	.word	0x20004d14

0800f7c4 <_init>:
 800f7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c6:	bf00      	nop
 800f7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ca:	bc08      	pop	{r3}
 800f7cc:	469e      	mov	lr, r3
 800f7ce:	4770      	bx	lr

0800f7d0 <_fini>:
 800f7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d2:	bf00      	nop
 800f7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7d6:	bc08      	pop	{r3}
 800f7d8:	469e      	mov	lr, r3
 800f7da:	4770      	bx	lr
