
miniProjet442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c528  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004034  0800c6f8  0800c6f8  0000d6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801072c  0801072c  0001209c  2**0
                  CONTENTS
  4 .ARM          00000008  0801072c  0801072c  0001172c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010734  08010734  0001209c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010734  08010734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010738  08010738  00011738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0801073c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a68  2000009c  080107d8  0001209c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b04  080107d8  00012b04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001209c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d382  00000000  00000000  000120cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c88  00000000  00000000  0003f44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002650  00000000  00000000  000460d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d88  00000000  00000000  00048728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003015b  00000000  00000000  0004a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031288  00000000  00000000  0007a60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116aa5  00000000  00000000  000ab893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c2338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3f0  00000000  00000000  001c237c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001cc76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c6e0 	.word	0x0800c6e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800c6e0 	.word	0x0800c6e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_ADC1_Init+0xa0>)
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000602:	f004 f993 	bl	800492c <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800060c:	f001 fcde 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000622:	f004 fb2d 	bl	8004c80 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800062c:	f001 fcce 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000b8 	.word	0x200000b8
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_ADC3_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC3_Init+0x98>)
 800065e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_ADC3_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_ADC3_Init+0xa0>)
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a6:	f004 f941 	bl	800492c <HAL_ADC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006b0:	f001 fc8c 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006c6:	f004 fadb 	bl	8004c80 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006d0:	f001 fc7c 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000100 	.word	0x20000100
 80006e0:	40012200 	.word	0x40012200
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d124      	bne.n	8000754 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <HAL_ADC_MspInit+0xd0>)
 800074e:	f005 fc03 	bl	8005f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000752:	e029      	b.n	80007a8 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <HAL_ADC_MspInit+0xd4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d124      	bne.n	80007a8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800078e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <HAL_ADC_MspInit+0xd8>)
 80007a4:	f005 fbd8 	bl	8005f58 <HAL_GPIO_Init>
}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012000 	.word	0x40012000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40012200 	.word	0x40012200
 80007c0:	40021400 	.word	0x40021400

080007c4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <MX_DAC_Init+0x50>)
 80007d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007da:	f004 fd83 	bl	80052e4 <HAL_DAC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007e4:	f001 fbf2 	bl	8001fcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007f8:	f004 fdfa 	bl	80053f0 <HAL_DAC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000802:	f001 fbe3 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000148 	.word	0x20000148
 8000814:	40007400 	.word	0x40007400

08000818 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_DAC_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000844:	6413      	str	r3, [r2, #64]	@ 0x40
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800086a:	2310      	movs	r3, #16
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <HAL_DAC_MspInit+0x8c>)
 800087e:	f005 fb6b 	bl	8005f58 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	2036      	movs	r0, #54	@ 0x36
 8000888:	f004 fd02 	bl	8005290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800088c:	2036      	movs	r0, #54	@ 0x36
 800088e:	f004 fd1b 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40007400 	.word	0x40007400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <MX_DMA2D_Init+0x60>)
 80008b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008de:	f004 ff9f 	bl	8005820 <HAL_DMA2D_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008e8:	f001 fb70 	bl	8001fcc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008ec:	2101      	movs	r1, #1
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008f0:	f005 fa04 	bl	8005cfc <HAL_DMA2D_ConfigLayer>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008fa:	f001 fb67 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000015c 	.word	0x2000015c
 8000908:	4002b000 	.word	0x4002b000

0800090c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <HAL_DMA2D_MspInit+0x44>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d113      	bne.n	8000946 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	205a      	movs	r0, #90	@ 0x5a
 800093c:	f004 fca8 	bl	8005290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000940:	205a      	movs	r0, #90	@ 0x5a
 8000942:	f004 fcc1 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	4002b000 	.word	0x4002b000
 8000954:	40023800 	.word	0x40023800

08000958 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000972:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <MX_FMC_Init+0x9c>)
 8000974:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_FMC_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000984:	2204      	movs	r2, #4
 8000986:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_FMC_Init+0x98>)
 800098a:	2210      	movs	r2, #16
 800098c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000990:	2240      	movs	r2, #64	@ 0x40
 8000992:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000996:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800099a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_FMC_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009bc:	2307      	movs	r3, #7
 80009be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009c4:	2307      	movs	r3, #7
 80009c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009da:	f008 fc2f 	bl	800923c <HAL_SDRAM_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009e4:	f001 faf2 	bl	8001fcc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000019c 	.word	0x2000019c
 80009f4:	a0000140 	.word	0xa0000140

080009f8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d16d      	bne.n	8000af0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a14:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a1a:	4b38      	ldr	r3, [pc, #224]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a1e:	4a37      	ldr	r2, [pc, #220]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a32:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a36:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a44:	230c      	movs	r3, #12
 8000a46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482c      	ldr	r0, [pc, #176]	@ (8000b00 <HAL_FMC_MspInit+0x108>)
 8000a4e:	f005 fa83 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a52:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a56:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a64:	230c      	movs	r3, #12
 8000a66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4825      	ldr	r0, [pc, #148]	@ (8000b04 <HAL_FMC_MspInit+0x10c>)
 8000a6e:	f005 fa73 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a72:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a76:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a84:	230c      	movs	r3, #12
 8000a86:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <HAL_FMC_MspInit+0x110>)
 8000a8e:	f005 fa63 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a92:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a96:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4817      	ldr	r0, [pc, #92]	@ (8000b0c <HAL_FMC_MspInit+0x114>)
 8000aae:	f005 fa53 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ab2:	2328      	movs	r3, #40	@ 0x28
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4811      	ldr	r0, [pc, #68]	@ (8000b10 <HAL_FMC_MspInit+0x118>)
 8000acc:	f005 fa44 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480a      	ldr	r0, [pc, #40]	@ (8000b14 <HAL_FMC_MspInit+0x11c>)
 8000aea:	f005 fa35 	bl	8005f58 <HAL_GPIO_Init>
 8000aee:	e000      	b.n	8000af2 <HAL_FMC_MspInit+0xfa>
    return;
 8000af0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001d0 	.word	0x200001d0
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40021400 	.word	0x40021400
 8000b10:	40021c00 	.word	0x40021c00
 8000b14:	40020800 	.word	0x40020800

08000b18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b20:	f7ff ff6a 	bl	80009f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <vApplicationGetIdleTaskMemory+0x30>)
 8000b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200001d8 	.word	0x200001d8
 8000b5c:	2000022c 	.word	0x2000022c

08000b60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <MX_FREERTOS_Init+0x30>)
 8000b68:	1d3c      	adds	r4, r7, #4
 8000b6a:	461d      	mov	r5, r3
 8000b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f009 fed4 	bl	800a92a <osThreadCreate>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a03      	ldr	r2, [pc, #12]	@ (8000b94 <MX_FREERTOS_Init+0x34>)
 8000b86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b90:	0800c704 	.word	0x0800c704
 8000b94:	200001d4 	.word	0x200001d4

08000b98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f009 ff0e 	bl	800a9c2 <osDelay>
 8000ba6:	e7fb      	b.n	8000ba0 <StartDefaultTask+0x8>

08000ba8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000bb2:	20c8      	movs	r0, #200	@ 0xc8
 8000bb4:	f001 fd1a 	bl	80025ec <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000bb8:	f000 fa7a 	bl	80010b0 <ft5336_I2C_InitializeIfRequired>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000bec:	2300      	movs	r3, #0
 8000bee:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000bf0:	f000 fa5e 	bl	80010b0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e010      	b.n	8000c1c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	21a8      	movs	r1, #168	@ 0xa8
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fcd5 	bl	80025b0 <TS_IO_Read>
 8000c06:	4603      	mov	r3, r0
 8000c08:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000c0a:	7b7b      	ldrb	r3, [r7, #13]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b51      	cmp	r3, #81	@ 0x51
 8000c10:	d101      	bne.n	8000c16 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d802      	bhi.n	8000c28 <ft5336_ReadID+0x4e>
 8000c22:	7bbb      	ldrb	r3, [r7, #14]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0e8      	beq.n	8000bfa <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	b2db      	uxtb	r3, r3
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fa45 	bl	80010d0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f933 	bl	8000eb4 <ft5336_TS_DisableIT>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fc9f 	bl	80025b0 <TS_IO_Read>
 8000c72:	4603      	mov	r3, r0
 8000c74:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b05      	cmp	r3, #5
 8000c88:	d901      	bls.n	8000c8e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <ft5336_TS_DetectTouch+0x50>)
 8000c94:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000c96:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <ft5336_TS_DetectTouch+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	b2db      	uxtb	r3, r3
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000042c 	.word	0x2000042c

08000cac <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000cce:	4b6d      	ldr	r3, [pc, #436]	@ (8000e84 <ft5336_TS_GetXY+0x1d8>)
 8000cd0:	789a      	ldrb	r2, [r3, #2]
 8000cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8000e84 <ft5336_TS_GetXY+0x1d8>)
 8000cd4:	785b      	ldrb	r3, [r3, #1]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	f080 80cf 	bcs.w	8000e7a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000cdc:	4b69      	ldr	r3, [pc, #420]	@ (8000e84 <ft5336_TS_GetXY+0x1d8>)
 8000cde:	789b      	ldrb	r3, [r3, #2]
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	d871      	bhi.n	8000dc8 <ft5336_TS_GetXY+0x11c>
 8000ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8000cec <ft5336_TS_GetXY+0x40>)
 8000ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cea:	bf00      	nop
 8000cec:	08000d15 	.word	0x08000d15
 8000cf0:	08000d27 	.word	0x08000d27
 8000cf4:	08000d39 	.word	0x08000d39
 8000cf8:	08000d4b 	.word	0x08000d4b
 8000cfc:	08000d5d 	.word	0x08000d5d
 8000d00:	08000d6f 	.word	0x08000d6f
 8000d04:	08000d81 	.word	0x08000d81
 8000d08:	08000d93 	.word	0x08000d93
 8000d0c:	08000da5 	.word	0x08000da5
 8000d10:	08000db7 	.word	0x08000db7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000d14:	2304      	movs	r3, #4
 8000d16:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000d20:	2305      	movs	r3, #5
 8000d22:	753b      	strb	r3, [r7, #20]
      break;
 8000d24:	e051      	b.n	8000dca <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000d26:	230a      	movs	r3, #10
 8000d28:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000d2a:	2309      	movs	r3, #9
 8000d2c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000d32:	230b      	movs	r3, #11
 8000d34:	753b      	strb	r3, [r7, #20]
      break;
 8000d36:	e048      	b.n	8000dca <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000d40:	2312      	movs	r3, #18
 8000d42:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000d44:	2311      	movs	r3, #17
 8000d46:	753b      	strb	r3, [r7, #20]
      break;
 8000d48:	e03f      	b.n	8000dca <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000d4a:	2316      	movs	r3, #22
 8000d4c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000d4e:	2315      	movs	r3, #21
 8000d50:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000d52:	2318      	movs	r3, #24
 8000d54:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000d56:	2317      	movs	r3, #23
 8000d58:	753b      	strb	r3, [r7, #20]
      break;
 8000d5a:	e036      	b.n	8000dca <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000d5c:	231c      	movs	r3, #28
 8000d5e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000d60:	231b      	movs	r3, #27
 8000d62:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000d64:	231e      	movs	r3, #30
 8000d66:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000d68:	231d      	movs	r3, #29
 8000d6a:	753b      	strb	r3, [r7, #20]
      break;
 8000d6c:	e02d      	b.n	8000dca <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000d6e:	2322      	movs	r3, #34	@ 0x22
 8000d70:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000d72:	2321      	movs	r3, #33	@ 0x21
 8000d74:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000d76:	2324      	movs	r3, #36	@ 0x24
 8000d78:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000d7a:	2323      	movs	r3, #35	@ 0x23
 8000d7c:	753b      	strb	r3, [r7, #20]
      break;
 8000d7e:	e024      	b.n	8000dca <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000d80:	2328      	movs	r3, #40	@ 0x28
 8000d82:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000d84:	2327      	movs	r3, #39	@ 0x27
 8000d86:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000d88:	232a      	movs	r3, #42	@ 0x2a
 8000d8a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000d8c:	2329      	movs	r3, #41	@ 0x29
 8000d8e:	753b      	strb	r3, [r7, #20]
      break;
 8000d90:	e01b      	b.n	8000dca <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000d92:	232e      	movs	r3, #46	@ 0x2e
 8000d94:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000d96:	232d      	movs	r3, #45	@ 0x2d
 8000d98:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000d9a:	2330      	movs	r3, #48	@ 0x30
 8000d9c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000d9e:	232f      	movs	r3, #47	@ 0x2f
 8000da0:	753b      	strb	r3, [r7, #20]
      break;
 8000da2:	e012      	b.n	8000dca <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000da4:	2334      	movs	r3, #52	@ 0x34
 8000da6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000da8:	2333      	movs	r3, #51	@ 0x33
 8000daa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000dac:	2336      	movs	r3, #54	@ 0x36
 8000dae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000db0:	2335      	movs	r3, #53	@ 0x35
 8000db2:	753b      	strb	r3, [r7, #20]
      break;
 8000db4:	e009      	b.n	8000dca <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000db6:	233a      	movs	r3, #58	@ 0x3a
 8000db8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000dba:	2339      	movs	r3, #57	@ 0x39
 8000dbc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000dbe:	233c      	movs	r3, #60	@ 0x3c
 8000dc0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000dc2:	233b      	movs	r3, #59	@ 0x3b
 8000dc4:	753b      	strb	r3, [r7, #20]
      break;
 8000dc6:	e000      	b.n	8000dca <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000dc8:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	7dfa      	ldrb	r2, [r7, #23]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fbec 	bl	80025b0 <TS_IO_Read>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000ddc:	7cfb      	ldrb	r3, [r7, #19]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b29      	ldr	r3, [pc, #164]	@ (8000e88 <ft5336_TS_GetXY+0x1dc>)
 8000de4:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	7dba      	ldrb	r2, [r7, #22]
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fbde 	bl	80025b0 <TS_IO_Read>
 8000df4:	4603      	mov	r3, r0
 8000df6:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000df8:	7cfb      	ldrb	r3, [r7, #19]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <ft5336_TS_GetXY+0x1dc>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <ft5336_TS_GetXY+0x1dc>)
 8000e12:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <ft5336_TS_GetXY+0x1dc>)
 8000e16:	881a      	ldrh	r2, [r3, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	7d7a      	ldrb	r2, [r7, #21]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 fbc3 	bl	80025b0 <TS_IO_Read>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000e2e:	7cfb      	ldrb	r3, [r7, #19]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <ft5336_TS_GetXY+0x1dc>)
 8000e36:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	7d3a      	ldrb	r2, [r7, #20]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fbb5 	bl	80025b0 <TS_IO_Read>
 8000e46:	4603      	mov	r3, r0
 8000e48:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <ft5336_TS_GetXY+0x1dc>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <ft5336_TS_GetXY+0x1dc>)
 8000e64:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <ft5336_TS_GetXY+0x1dc>)
 8000e68:	881a      	ldrh	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <ft5336_TS_GetXY+0x1d8>)
 8000e70:	789b      	ldrb	r3, [r3, #2]
 8000e72:	3301      	adds	r3, #1
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b03      	ldr	r3, [pc, #12]	@ (8000e84 <ft5336_TS_GetXY+0x1d8>)
 8000e78:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000042c 	.word	0x2000042c
 8000e88:	20000430 	.word	0x20000430

08000e8c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	21a4      	movs	r1, #164	@ 0xa4
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fb68 	bl	800257c <TS_IO_Write>
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	21a4      	movs	r1, #164	@ 0xa4
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fb54 	bl	800257c <TS_IO_Write>
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	6039      	str	r1, [r7, #0]
 8000f14:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fb45 	bl	80025b0 <TS_IO_Read>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	4603      	mov	r3, r0
 8000f4a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001094 <ft5336_TS_GetTouchInfo+0x158>)
 8000f5e:	785b      	ldrb	r3, [r3, #1]
 8000f60:	461a      	mov	r2, r3
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	4293      	cmp	r3, r2
 8000f66:	f080 8090 	bcs.w	800108a <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b09      	cmp	r3, #9
 8000f6e:	d85d      	bhi.n	800102c <ft5336_TS_GetTouchInfo+0xf0>
 8000f70:	a201      	add	r2, pc, #4	@ (adr r2, 8000f78 <ft5336_TS_GetTouchInfo+0x3c>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000fa1 	.word	0x08000fa1
 8000f7c:	08000faf 	.word	0x08000faf
 8000f80:	08000fbd 	.word	0x08000fbd
 8000f84:	08000fcb 	.word	0x08000fcb
 8000f88:	08000fd9 	.word	0x08000fd9
 8000f8c:	08000fe7 	.word	0x08000fe7
 8000f90:	08000ff5 	.word	0x08000ff5
 8000f94:	08001003 	.word	0x08001003
 8000f98:	08001011 	.word	0x08001011
 8000f9c:	0800101f 	.word	0x0800101f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	757b      	strb	r3, [r7, #21]
      break;
 8000fac:	e03f      	b.n	800102e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000fae:	2309      	movs	r3, #9
 8000fb0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000fb2:	230d      	movs	r3, #13
 8000fb4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000fb6:	230e      	movs	r3, #14
 8000fb8:	757b      	strb	r3, [r7, #21]
      break;
 8000fba:	e038      	b.n	800102e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000fc0:	2313      	movs	r3, #19
 8000fc2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000fc4:	2314      	movs	r3, #20
 8000fc6:	757b      	strb	r3, [r7, #21]
      break;
 8000fc8:	e031      	b.n	800102e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000fca:	2315      	movs	r3, #21
 8000fcc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000fce:	2319      	movs	r3, #25
 8000fd0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000fd2:	231a      	movs	r3, #26
 8000fd4:	757b      	strb	r3, [r7, #21]
      break;
 8000fd6:	e02a      	b.n	800102e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000fd8:	231b      	movs	r3, #27
 8000fda:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000fdc:	231f      	movs	r3, #31
 8000fde:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	757b      	strb	r3, [r7, #21]
      break;
 8000fe4:	e023      	b.n	800102e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000fe6:	2321      	movs	r3, #33	@ 0x21
 8000fe8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000fea:	2325      	movs	r3, #37	@ 0x25
 8000fec:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000fee:	2326      	movs	r3, #38	@ 0x26
 8000ff0:	757b      	strb	r3, [r7, #21]
      break;
 8000ff2:	e01c      	b.n	800102e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000ff4:	2327      	movs	r3, #39	@ 0x27
 8000ff6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000ff8:	232b      	movs	r3, #43	@ 0x2b
 8000ffa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000ffc:	232c      	movs	r3, #44	@ 0x2c
 8000ffe:	757b      	strb	r3, [r7, #21]
      break;
 8001000:	e015      	b.n	800102e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001002:	232d      	movs	r3, #45	@ 0x2d
 8001004:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001006:	2331      	movs	r3, #49	@ 0x31
 8001008:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	757b      	strb	r3, [r7, #21]
      break;
 800100e:	e00e      	b.n	800102e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001010:	2333      	movs	r3, #51	@ 0x33
 8001012:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001014:	2337      	movs	r3, #55	@ 0x37
 8001016:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001018:	2338      	movs	r3, #56	@ 0x38
 800101a:	757b      	strb	r3, [r7, #21]
      break;
 800101c:	e007      	b.n	800102e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800101e:	2339      	movs	r3, #57	@ 0x39
 8001020:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001022:	233d      	movs	r3, #61	@ 0x3d
 8001024:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001026:	233e      	movs	r3, #62	@ 0x3e
 8001028:	757b      	strb	r3, [r7, #21]
      break;
 800102a:	e000      	b.n	800102e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800102c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800102e:	89fb      	ldrh	r3, [r7, #14]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	7dfa      	ldrb	r2, [r7, #23]
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 faba 	bl	80025b0 <TS_IO_Read>
 800103c:	4603      	mov	r3, r0
 800103e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001040:	7d3b      	ldrb	r3, [r7, #20]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	119b      	asrs	r3, r3, #6
 8001046:	f003 0203 	and.w	r2, r3, #3
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	7dba      	ldrb	r2, [r7, #22]
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f001 faaa 	bl	80025b0 <TS_IO_Read>
 800105c:	4603      	mov	r3, r0
 800105e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001060:	7d3b      	ldrb	r3, [r7, #20]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800106a:	89fb      	ldrh	r3, [r7, #14]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	7d7a      	ldrb	r2, [r7, #21]
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fa9c 	bl	80025b0 <TS_IO_Read>
 8001078:	4603      	mov	r3, r0
 800107a:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800107c:	7d3b      	ldrb	r3, [r7, #20]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	111b      	asrs	r3, r3, #4
 8001082:	f003 0204 	and.w	r2, r3, #4
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000042c 	.word	0x2000042c

08001098 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800109c:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <ft5336_Get_I2C_InitializedStatus+0x14>)
 800109e:	781b      	ldrb	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000042c 	.word	0x2000042c

080010b0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80010b4:	f7ff fff0 	bl	8001098 <ft5336_Get_I2C_InitializedStatus>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d104      	bne.n	80010c8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80010be:	f001 fa53 	bl	8002568 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80010c2:	4b02      	ldr	r3, [pc, #8]	@ (80010cc <ft5336_I2C_InitializeIfRequired+0x1c>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
  }
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000042c 	.word	0x2000042c

080010d0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b090      	sub	sp, #64	@ 0x40
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001102:	4baf      	ldr	r3, [pc, #700]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4aae      	ldr	r2, [pc, #696]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4bac      	ldr	r3, [pc, #688]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800111a:	4ba9      	ldr	r3, [pc, #676]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4aa8      	ldr	r2, [pc, #672]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4ba6      	ldr	r3, [pc, #664]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4ba3      	ldr	r3, [pc, #652]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4aa2      	ldr	r2, [pc, #648]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4ba0      	ldr	r3, [pc, #640]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	623b      	str	r3, [r7, #32]
 8001148:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	4b9d      	ldr	r3, [pc, #628]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a9c      	ldr	r2, [pc, #624]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b9a      	ldr	r3, [pc, #616]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b97      	ldr	r3, [pc, #604]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a96      	ldr	r2, [pc, #600]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b94      	ldr	r3, [pc, #592]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b91      	ldr	r3, [pc, #580]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a90      	ldr	r2, [pc, #576]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b8e      	ldr	r3, [pc, #568]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001192:	4b8b      	ldr	r3, [pc, #556]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a8a      	ldr	r2, [pc, #552]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001198:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b88      	ldr	r3, [pc, #544]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011aa:	4b85      	ldr	r3, [pc, #532]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a84      	ldr	r2, [pc, #528]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b82      	ldr	r3, [pc, #520]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011c2:	4b7f      	ldr	r3, [pc, #508]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a7e      	ldr	r2, [pc, #504]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b7c      	ldr	r3, [pc, #496]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011da:	4b79      	ldr	r3, [pc, #484]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a78      	ldr	r2, [pc, #480]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011e0:	f043 0320 	orr.w	r3, r3, #32
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b76      	ldr	r3, [pc, #472]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0320 	and.w	r3, r3, #32
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	4b73      	ldr	r3, [pc, #460]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a72      	ldr	r2, [pc, #456]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b70      	ldr	r3, [pc, #448]	@ (80013c0 <MX_GPIO_Init+0x2d4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2160      	movs	r1, #96	@ 0x60
 800120e:	486d      	ldr	r0, [pc, #436]	@ (80013c4 <MX_GPIO_Init+0x2d8>)
 8001210:	f005 f972 	bl	80064f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2120      	movs	r1, #32
 8001218:	486b      	ldr	r0, [pc, #428]	@ (80013c8 <MX_GPIO_Init+0x2dc>)
 800121a:	f005 f96d 	bl	80064f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2108      	movs	r1, #8
 8001222:	4869      	ldr	r0, [pc, #420]	@ (80013c8 <MX_GPIO_Init+0x2dc>)
 8001224:	f005 f968 	bl	80064f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2108      	movs	r1, #8
 800122c:	4867      	ldr	r0, [pc, #412]	@ (80013cc <MX_GPIO_Init+0x2e0>)
 800122e:	f005 f963 	bl	80064f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001238:	4865      	ldr	r0, [pc, #404]	@ (80013d0 <MX_GPIO_Init+0x2e4>)
 800123a:	f005 f95d 	bl	80064f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800123e:	2200      	movs	r2, #0
 8001240:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8001244:	4863      	ldr	r0, [pc, #396]	@ (80013d4 <MX_GPIO_Init+0x2e8>)
 8001246:	f005 f957 	bl	80064f8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	21c8      	movs	r1, #200	@ 0xc8
 800124e:	4862      	ldr	r0, [pc, #392]	@ (80013d8 <MX_GPIO_Init+0x2ec>)
 8001250:	f005 f952 	bl	80064f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001254:	2308      	movs	r3, #8
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001258:	2300      	movs	r3, #0
 800125a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001264:	4619      	mov	r1, r3
 8001266:	4857      	ldr	r0, [pc, #348]	@ (80013c4 <MX_GPIO_Init+0x2d8>)
 8001268:	f004 fe76 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800126c:	2304      	movs	r3, #4
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800127c:	2309      	movs	r3, #9
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	484f      	ldr	r0, [pc, #316]	@ (80013c4 <MX_GPIO_Init+0x2d8>)
 8001288:	f004 fe66 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800128c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129e:	230b      	movs	r3, #11
 80012a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012a6:	4619      	mov	r1, r3
 80012a8:	484b      	ldr	r0, [pc, #300]	@ (80013d8 <MX_GPIO_Init+0x2ec>)
 80012aa:	f004 fe55 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80012ae:	f643 0323 	movw	r3, #14371	@ 0x3823
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012c0:	230a      	movs	r3, #10
 80012c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012c8:	4619      	mov	r1, r3
 80012ca:	4844      	ldr	r0, [pc, #272]	@ (80013dc <MX_GPIO_Init+0x2f0>)
 80012cc:	f004 fe44 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80012e0:	2308      	movs	r3, #8
 80012e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e8:	4619      	mov	r1, r3
 80012ea:	4837      	ldr	r0, [pc, #220]	@ (80013c8 <MX_GPIO_Init+0x2dc>)
 80012ec:	f004 fe34 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80012f0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001302:	230c      	movs	r3, #12
 8001304:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800130a:	4619      	mov	r1, r3
 800130c:	4834      	ldr	r0, [pc, #208]	@ (80013e0 <MX_GPIO_Init+0x2f4>)
 800130e:	f004 fe23 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8001312:	f248 1340 	movw	r3, #33088	@ 0x8140
 8001316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001324:	4619      	mov	r1, r3
 8001326:	482f      	ldr	r0, [pc, #188]	@ (80013e4 <MX_GPIO_Init+0x2f8>)
 8001328:	f004 fe16 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 800132c:	2360      	movs	r3, #96	@ 0x60
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001340:	4619      	mov	r1, r3
 8001342:	4820      	ldr	r0, [pc, #128]	@ (80013c4 <MX_GPIO_Init+0x2d8>)
 8001344:	f004 fe08 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001348:	2340      	movs	r3, #64	@ 0x40
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001358:	230a      	movs	r3, #10
 800135a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001360:	4619      	mov	r1, r3
 8001362:	481e      	ldr	r0, [pc, #120]	@ (80013dc <MX_GPIO_Init+0x2f0>)
 8001364:	f004 fdf8 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136e:	2300      	movs	r3, #0
 8001370:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800137a:	4619      	mov	r1, r3
 800137c:	481a      	ldr	r0, [pc, #104]	@ (80013e8 <MX_GPIO_Init+0x2fc>)
 800137e:	f004 fdeb 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001382:	2340      	movs	r3, #64	@ 0x40
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001386:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800138a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001394:	4619      	mov	r1, r3
 8001396:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <MX_GPIO_Init+0x2dc>)
 8001398:	f004 fdde 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 800139c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013ae:	230a      	movs	r3, #10
 80013b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b6:	4619      	mov	r1, r3
 80013b8:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <MX_GPIO_Init+0x2f8>)
 80013ba:	f004 fdcd 	bl	8005f58 <HAL_GPIO_Init>
 80013be:	e015      	b.n	80013ec <MX_GPIO_Init+0x300>
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40022800 	.word	0x40022800
 80013d0:	40022000 	.word	0x40022000
 80013d4:	40021c00 	.word	0x40021c00
 80013d8:	40021800 	.word	0x40021800
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80013ec:	23f0      	movs	r3, #240	@ 0xf0
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013fc:	230a      	movs	r3, #10
 80013fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001400:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001404:	4619      	mov	r1, r3
 8001406:	4891      	ldr	r0, [pc, #580]	@ (800164c <MX_GPIO_Init+0x560>)
 8001408:	f004 fda6 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800140c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800141e:	230a      	movs	r3, #10
 8001420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001426:	4619      	mov	r1, r3
 8001428:	4889      	ldr	r0, [pc, #548]	@ (8001650 <MX_GPIO_Init+0x564>)
 800142a:	f004 fd95 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 800142e:	2328      	movs	r3, #40	@ 0x28
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001442:	4619      	mov	r1, r3
 8001444:	4883      	ldr	r0, [pc, #524]	@ (8001654 <MX_GPIO_Init+0x568>)
 8001446:	f004 fd87 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800144a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800145c:	4619      	mov	r1, r3
 800145e:	487e      	ldr	r0, [pc, #504]	@ (8001658 <MX_GPIO_Init+0x56c>)
 8001460:	f004 fd7a 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001464:	2308      	movs	r3, #8
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001478:	4619      	mov	r1, r3
 800147a:	4878      	ldr	r0, [pc, #480]	@ (800165c <MX_GPIO_Init+0x570>)
 800147c:	f004 fd6c 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001480:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8001484:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800148e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001492:	4619      	mov	r1, r3
 8001494:	486e      	ldr	r0, [pc, #440]	@ (8001650 <MX_GPIO_Init+0x564>)
 8001496:	f004 fd5f 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800149a:	2310      	movs	r3, #16
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4869      	ldr	r0, [pc, #420]	@ (8001654 <MX_GPIO_Init+0x568>)
 80014ae:	f004 fd53 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80014b2:	2304      	movs	r3, #4
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014c2:	230c      	movs	r3, #12
 80014c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ca:	4619      	mov	r1, r3
 80014cc:	4861      	ldr	r0, [pc, #388]	@ (8001654 <MX_GPIO_Init+0x568>)
 80014ce:	f004 fd43 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 80014d2:	f24a 0304 	movw	r3, #40964	@ 0xa004
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014e4:	4619      	mov	r1, r3
 80014e6:	485e      	ldr	r0, [pc, #376]	@ (8001660 <MX_GPIO_Init+0x574>)
 80014e8:	f004 fd36 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80014ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001502:	4619      	mov	r1, r3
 8001504:	4851      	ldr	r0, [pc, #324]	@ (800164c <MX_GPIO_Init+0x560>)
 8001506:	f004 fd27 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800150a:	f645 6340 	movw	r3, #24128	@ 0x5e40
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800151c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001520:	4619      	mov	r1, r3
 8001522:	484f      	ldr	r0, [pc, #316]	@ (8001660 <MX_GPIO_Init+0x574>)
 8001524:	f004 fd18 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800152e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800153c:	4619      	mov	r1, r3
 800153e:	4843      	ldr	r0, [pc, #268]	@ (800164c <MX_GPIO_Init+0x560>)
 8001540:	f004 fd0a 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001544:	2310      	movs	r3, #16
 8001546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001554:	230a      	movs	r3, #10
 8001556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800155c:	4619      	mov	r1, r3
 800155e:	4840      	ldr	r0, [pc, #256]	@ (8001660 <MX_GPIO_Init+0x574>)
 8001560:	f004 fcfa 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001564:	23c8      	movs	r3, #200	@ 0xc8
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001574:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001578:	4619      	mov	r1, r3
 800157a:	4835      	ldr	r0, [pc, #212]	@ (8001650 <MX_GPIO_Init+0x564>)
 800157c:	f004 fcec 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001580:	2305      	movs	r3, #5
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001590:	230a      	movs	r3, #10
 8001592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001594:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001598:	4619      	mov	r1, r3
 800159a:	482f      	ldr	r0, [pc, #188]	@ (8001658 <MX_GPIO_Init+0x56c>)
 800159c:	f004 fcdc 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015a0:	2332      	movs	r3, #50	@ 0x32
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b0:	230b      	movs	r3, #11
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015b8:	4619      	mov	r1, r3
 80015ba:	4827      	ldr	r0, [pc, #156]	@ (8001658 <MX_GPIO_Init+0x56c>)
 80015bc:	f004 fccc 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015c0:	2304      	movs	r3, #4
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015d0:	2309      	movs	r3, #9
 80015d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015d8:	4619      	mov	r1, r3
 80015da:	4822      	ldr	r0, [pc, #136]	@ (8001664 <MX_GPIO_Init+0x578>)
 80015dc:	f004 fcbc 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80015e0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015f2:	2309      	movs	r3, #9
 80015f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015fa:	4619      	mov	r1, r3
 80015fc:	4815      	ldr	r0, [pc, #84]	@ (8001654 <MX_GPIO_Init+0x568>)
 80015fe:	f004 fcab 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001602:	2386      	movs	r3, #134	@ 0x86
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001612:	230b      	movs	r3, #11
 8001614:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800161a:	4619      	mov	r1, r3
 800161c:	4812      	ldr	r0, [pc, #72]	@ (8001668 <MX_GPIO_Init+0x57c>)
 800161e:	f004 fc9b 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001622:	2328      	movs	r3, #40	@ 0x28
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001632:	230a      	movs	r3, #10
 8001634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800163a:	4619      	mov	r1, r3
 800163c:	480a      	ldr	r0, [pc, #40]	@ (8001668 <MX_GPIO_Init+0x57c>)
 800163e:	f004 fc8b 	bl	8005f58 <HAL_GPIO_Init>

}
 8001642:	bf00      	nop
 8001644:	3740      	adds	r7, #64	@ 0x40
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000
 8001650:	40021800 	.word	0x40021800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40020800 	.word	0x40020800
 800165c:	40022800 	.word	0x40022800
 8001660:	40021c00 	.word	0x40021c00
 8001664:	40020400 	.word	0x40020400
 8001668:	40020000 	.word	0x40020000

0800166c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <MX_I2C1_Init+0x74>)
 8001672:	4a1c      	ldr	r2, [pc, #112]	@ (80016e4 <MX_I2C1_Init+0x78>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001676:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <MX_I2C1_Init+0x74>)
 8001678:	4a1b      	ldr	r2, [pc, #108]	@ (80016e8 <MX_I2C1_Init+0x7c>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800167c:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001682:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <MX_I2C1_Init+0x74>)
 8001684:	2201      	movs	r2, #1
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001688:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <MX_I2C1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800168e:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <MX_I2C1_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <MX_I2C1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_I2C1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a6:	480e      	ldr	r0, [pc, #56]	@ (80016e0 <MX_I2C1_Init+0x74>)
 80016a8:	f004 ff40 	bl	800652c <HAL_I2C_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016b2:	f000 fc8b 	bl	8001fcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016b6:	2100      	movs	r1, #0
 80016b8:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <MX_I2C1_Init+0x74>)
 80016ba:	f005 fccd 	bl	8007058 <HAL_I2CEx_ConfigAnalogFilter>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016c4:	f000 fc82 	bl	8001fcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016c8:	2100      	movs	r1, #0
 80016ca:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <MX_I2C1_Init+0x74>)
 80016cc:	f005 fd0f 	bl	80070ee <HAL_I2CEx_ConfigDigitalFilter>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016d6:	f000 fc79 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000434 	.word	0x20000434
 80016e4:	40005400 	.word	0x40005400
 80016e8:	00c0eaff 	.word	0x00c0eaff

080016ec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <MX_I2C3_Init+0x74>)
 80016f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001764 <MX_I2C3_Init+0x78>)
 80016f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_I2C3_Init+0x74>)
 80016f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001768 <MX_I2C3_Init+0x7c>)
 80016fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <MX_I2C3_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <MX_I2C3_Init+0x74>)
 8001704:	2201      	movs	r2, #1
 8001706:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_I2C3_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800170e:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <MX_I2C3_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <MX_I2C3_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_I2C3_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <MX_I2C3_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001726:	480e      	ldr	r0, [pc, #56]	@ (8001760 <MX_I2C3_Init+0x74>)
 8001728:	f004 ff00 	bl	800652c <HAL_I2C_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001732:	f000 fc4b 	bl	8001fcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001736:	2100      	movs	r1, #0
 8001738:	4809      	ldr	r0, [pc, #36]	@ (8001760 <MX_I2C3_Init+0x74>)
 800173a:	f005 fc8d 	bl	8007058 <HAL_I2CEx_ConfigAnalogFilter>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001744:	f000 fc42 	bl	8001fcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001748:	2100      	movs	r1, #0
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_I2C3_Init+0x74>)
 800174c:	f005 fccf 	bl	80070ee <HAL_I2CEx_ConfigDigitalFilter>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001756:	f000 fc39 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000488 	.word	0x20000488
 8001764:	40005c00 	.word	0x40005c00
 8001768:	00c0eaff 	.word	0x00c0eaff

0800176c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0ac      	sub	sp, #176	@ 0xb0
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	2284      	movs	r2, #132	@ 0x84
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f00a fb27 	bl	800bde0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a44      	ldr	r2, [pc, #272]	@ (80018a8 <HAL_I2C_MspInit+0x13c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d13d      	bne.n	8001818 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800179c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	4618      	mov	r0, r3
 80017ac:	f006 fd80 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017b6:	f000 fc09 	bl	8001fcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4b3c      	ldr	r3, [pc, #240]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a3b      	ldr	r2, [pc, #236]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b39      	ldr	r3, [pc, #228]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ec:	2304      	movs	r3, #4
 80017ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017f6:	4619      	mov	r1, r3
 80017f8:	482d      	ldr	r0, [pc, #180]	@ (80018b0 <HAL_I2C_MspInit+0x144>)
 80017fa:	f004 fbad 	bl	8005f58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017fe:	4b2b      	ldr	r3, [pc, #172]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a2a      	ldr	r2, [pc, #168]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 8001804:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001816:	e042      	b.n	800189e <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <HAL_I2C_MspInit+0x148>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d13d      	bne.n	800189e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001822:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001826:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182e:	f107 0318 	add.w	r3, r7, #24
 8001832:	4618      	mov	r0, r3
 8001834:	f006 fd3c 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800183e:	f000 fbc5 	bl	8001fcc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a19      	ldr	r2, [pc, #100]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800185a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800185e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001862:	2312      	movs	r3, #18
 8001864:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001868:	2301      	movs	r3, #1
 800186a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001874:	2304      	movs	r3, #4
 8001876:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800187a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800187e:	4619      	mov	r1, r3
 8001880:	480d      	ldr	r0, [pc, #52]	@ (80018b8 <HAL_I2C_MspInit+0x14c>)
 8001882:	f004 fb69 	bl	8005f58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a08      	ldr	r2, [pc, #32]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 800188c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_I2C_MspInit+0x140>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
}
 800189e:	bf00      	nop
 80018a0:	37b0      	adds	r7, #176	@ 0xb0
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40005400 	.word	0x40005400
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40005c00 	.word	0x40005c00
 80018b8:	40021c00 	.word	0x40021c00

080018bc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a15      	ldr	r2, [pc, #84]	@ (8001920 <HAL_I2C_MspDeInit+0x64>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d110      	bne.n	80018f0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_I2C_MspDeInit+0x68>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <HAL_I2C_MspDeInit+0x68>)
 80018d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018d8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80018da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018de:	4812      	ldr	r0, [pc, #72]	@ (8001928 <HAL_I2C_MspDeInit+0x6c>)
 80018e0:	f004 fce6 	bl	80062b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80018e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018e8:	480f      	ldr	r0, [pc, #60]	@ (8001928 <HAL_I2C_MspDeInit+0x6c>)
 80018ea:	f004 fce1 	bl	80062b0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80018ee:	e013      	b.n	8001918 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <HAL_I2C_MspDeInit+0x70>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10e      	bne.n	8001918 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <HAL_I2C_MspDeInit+0x68>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a09      	ldr	r2, [pc, #36]	@ (8001924 <HAL_I2C_MspDeInit+0x68>)
 8001900:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001906:	2180      	movs	r1, #128	@ 0x80
 8001908:	4809      	ldr	r0, [pc, #36]	@ (8001930 <HAL_I2C_MspDeInit+0x74>)
 800190a:	f004 fcd1 	bl	80062b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800190e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001912:	4807      	ldr	r0, [pc, #28]	@ (8001930 <HAL_I2C_MspDeInit+0x74>)
 8001914:	f004 fccc 	bl	80062b0 <HAL_GPIO_DeInit>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40005400 	.word	0x40005400
 8001924:	40023800 	.word	0x40023800
 8001928:	40020400 	.word	0x40020400
 800192c:	40005c00 	.word	0x40005c00
 8001930:	40021c00 	.word	0x40021c00

08001934 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	@ 0x38
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2234      	movs	r2, #52	@ 0x34
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f00a fa4d 	bl	800bde0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001946:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 8001948:	4a3a      	ldr	r2, [pc, #232]	@ (8001a34 <MX_LTDC_Init+0x100>)
 800194a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800194c:	4b38      	ldr	r3, [pc, #224]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001952:	4b37      	ldr	r3, [pc, #220]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001958:	4b35      	ldr	r3, [pc, #212]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800195e:	4b34      	ldr	r3, [pc, #208]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001964:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 8001966:	2228      	movs	r2, #40	@ 0x28
 8001968:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800196a:	4b31      	ldr	r3, [pc, #196]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 800196c:	2209      	movs	r2, #9
 800196e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001970:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 8001972:	2235      	movs	r2, #53	@ 0x35
 8001974:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001976:	4b2e      	ldr	r3, [pc, #184]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 8001978:	220b      	movs	r2, #11
 800197a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800197c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 800197e:	f240 2215 	movw	r2, #533	@ 0x215
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001984:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 8001986:	f240 121b 	movw	r2, #283	@ 0x11b
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 800198c:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 800198e:	f240 2235 	movw	r2, #565	@ 0x235
 8001992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001994:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 8001996:	f240 121d 	movw	r2, #285	@ 0x11d
 800199a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800199c:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80019a4:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80019ac:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80019b4:	481e      	ldr	r0, [pc, #120]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 80019b6:	f005 fbe7 	bl	8007188 <HAL_LTDC_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80019c0:	f000 fb04 	bl	8001fcc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80019c8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80019cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80019d2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80019d6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80019d8:	2302      	movs	r3, #2
 80019da:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80019dc:	23ff      	movs	r3, #255	@ 0xff
 80019de:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80019e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019e8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80019ea:	2307      	movs	r3, #7
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80019ee:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80019f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80019f4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80019fa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80019fe:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <MX_LTDC_Init+0xfc>)
 8001a1a:	f005 fd47 	bl	80074ac <HAL_LTDC_ConfigLayer>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001a24:	f000 fad2 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3738      	adds	r7, #56	@ 0x38
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200004dc 	.word	0x200004dc
 8001a34:	40016800 	.word	0x40016800

08001a38 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0ae      	sub	sp, #184	@ 0xb8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	2284      	movs	r2, #132	@ 0x84
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00a f9c1 	bl	800bde0 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6f      	ldr	r2, [pc, #444]	@ (8001c20 <HAL_LTDC_MspInit+0x1e8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	f040 80d6 	bne.w	8001c16 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a6e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a74:	2305      	movs	r3, #5
 8001a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8a:	f107 0320 	add.w	r3, r7, #32
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f006 fc0e 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001a9a:	f000 fa97 	bl	8001fcc <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a9e:	4b61      	ldr	r3, [pc, #388]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a60      	ldr	r2, [pc, #384]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001aa4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b5e      	ldr	r3, [pc, #376]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a5a      	ldr	r2, [pc, #360]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b58      	ldr	r3, [pc, #352]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ace:	4b55      	ldr	r3, [pc, #340]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a54      	ldr	r2, [pc, #336]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001ad4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b52      	ldr	r3, [pc, #328]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a4e      	ldr	r2, [pc, #312]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001aec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b4c      	ldr	r3, [pc, #304]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001afe:	4b49      	ldr	r3, [pc, #292]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a48      	ldr	r2, [pc, #288]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b46      	ldr	r3, [pc, #280]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b16:	4b43      	ldr	r3, [pc, #268]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a42      	ldr	r2, [pc, #264]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b40      	ldr	r3, [pc, #256]	@ (8001c24 <HAL_LTDC_MspInit+0x1ec>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001b2e:	2310      	movs	r3, #16
 8001b30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b46:	230e      	movs	r3, #14
 8001b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4835      	ldr	r0, [pc, #212]	@ (8001c28 <HAL_LTDC_MspInit+0x1f0>)
 8001b54:	f004 fa00 	bl	8005f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001b58:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b72:	230e      	movs	r3, #14
 8001b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001b78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	482b      	ldr	r0, [pc, #172]	@ (8001c2c <HAL_LTDC_MspInit+0x1f4>)
 8001b80:	f004 f9ea 	bl	8005f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001b84:	23f7      	movs	r3, #247	@ 0xf7
 8001b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b9c:	230e      	movs	r3, #14
 8001b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001ba2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4821      	ldr	r0, [pc, #132]	@ (8001c30 <HAL_LTDC_MspInit+0x1f8>)
 8001baa:	f004 f9d5 	bl	8005f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001bae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bc8:	2309      	movs	r3, #9
 8001bca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4817      	ldr	r0, [pc, #92]	@ (8001c34 <HAL_LTDC_MspInit+0x1fc>)
 8001bd6:	f004 f9bf 	bl	8005f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001bda:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001bde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bf4:	230e      	movs	r3, #14
 8001bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bfa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <HAL_LTDC_MspInit+0x200>)
 8001c02:	f004 f9a9 	bl	8005f58 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2105      	movs	r1, #5
 8001c0a:	2058      	movs	r0, #88	@ 0x58
 8001c0c:	f003 fb40 	bl	8005290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c10:	2058      	movs	r0, #88	@ 0x58
 8001c12:	f003 fb59 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001c16:	bf00      	nop
 8001c18:	37b8      	adds	r7, #184	@ 0xb8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40016800 	.word	0x40016800
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40022400 	.word	0x40022400
 8001c30:	40022800 	.word	0x40022800
 8001c34:	40021800 	.word	0x40021800
 8001c38:	40022000 	.word	0x40022000

08001c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b097      	sub	sp, #92	@ 0x5c
 8001c40:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	char text[50]={};
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	222e      	movs	r2, #46	@ 0x2e
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f00a f8c6 	bl	800bde0 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c54:	463b      	mov	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c68:	f002 fe0f 	bl	800488a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c6c:	f000 f92a 	bl	8001ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c70:	f7ff fa3c 	bl	80010ec <MX_GPIO_Init>
  MX_ADC3_Init();
 8001c74:	f7fe fce6 	bl	8000644 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001c78:	f7fe fe16 	bl	80008a8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001c7c:	f7fe fe6c 	bl	8000958 <MX_FMC_Init>
  MX_I2C1_Init();
 8001c80:	f7ff fcf4 	bl	800166c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c84:	f7ff fd32 	bl	80016ec <MX_I2C3_Init>
  MX_LTDC_Init();
 8001c88:	f7ff fe54 	bl	8001934 <MX_LTDC_Init>
  MX_RTC_Init();
 8001c8c:	f000 f9a4 	bl	8001fd8 <MX_RTC_Init>
  MX_SPI2_Init();
 8001c90:	f000 fa74 	bl	800217c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001c94:	f002 fa0c 	bl	80040b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c98:	f002 fa5e 	bl	8004158 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c9c:	f002 faaa 	bl	80041f4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001ca0:	f002 faf6 	bl	8004290 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001ca4:	f002 fb42 	bl	800432c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001ca8:	f002 fc56 	bl	8004558 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001cac:	f002 fc84 	bl	80045b8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001cb0:	f7fe fc76 	bl	80005a0 <MX_ADC1_Init>
  MX_DAC_Init();
 8001cb4:	f7fe fd86 	bl	80007c4 <MX_DAC_Init>
  MX_UART7_Init();
 8001cb8:	f002 fc1e 	bl	80044f8 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001cbc:	f000 fca2 	bl	8002604 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001cc0:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f000 fd35 	bl	8002734 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001cca:	f000 fd0b 	bl	80026e4 <BSP_LCD_GetXSize>
 8001cce:	4604      	mov	r4, r0
 8001cd0:	f000 fd1c 	bl	800270c <BSP_LCD_GetYSize>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	fb04 f303 	mul.w	r3, r4, r3
 8001cda:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f000 fd26 	bl	8002734 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001ce8:	f001 fa24 	bl	8003134 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f000 fd81 	bl	80027f4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001cf2:	4867      	ldr	r0, [pc, #412]	@ (8001e90 <main+0x254>)
 8001cf4:	f000 fdf0 	bl	80028d8 <BSP_LCD_Clear>
  BSP_LCD_DrawBitmap(100,100,(uint8_t*)apple_bmp);
 8001cf8:	4a66      	ldr	r2, [pc, #408]	@ (8001e94 <main+0x258>)
 8001cfa:	2164      	movs	r1, #100	@ 0x64
 8001cfc:	2064      	movs	r0, #100	@ 0x64
 8001cfe:	f001 f8c7 	bl	8002e90 <BSP_LCD_DrawBitmap>
  BSP_LCD_SelectLayer(1);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f000 fd76 	bl	80027f4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f000 fde5 	bl	80028d8 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8001d0e:	4862      	ldr	r0, [pc, #392]	@ (8001e98 <main+0x25c>)
 8001d10:	f000 fdb2 	bl	8002878 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d14:	4861      	ldr	r0, [pc, #388]	@ (8001e9c <main+0x260>)
 8001d16:	f000 fd7d 	bl	8002814 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f000 fd92 	bl	8002844 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001d20:	f000 fce0 	bl	80026e4 <BSP_LCD_GetXSize>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b29c      	uxth	r4, r3
 8001d28:	f000 fcf0 	bl	800270c <BSP_LCD_GetYSize>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4619      	mov	r1, r3
 8001d32:	4620      	mov	r0, r4
 8001d34:	f001 fe10 	bl	8003958 <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d38:	f7fe ff12 	bl	8000b60 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d3c:	f008 fdee 	bl	800a91c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001d40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d44:	4856      	ldr	r0, [pc, #344]	@ (8001ea0 <main+0x264>)
 8001d46:	f004 fbbf 	bl	80064c8 <HAL_GPIO_ReadPin>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d52:	4854      	ldr	r0, [pc, #336]	@ (8001ea4 <main+0x268>)
 8001d54:	f004 fbd0 	bl	80064f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8001d58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d5c:	4850      	ldr	r0, [pc, #320]	@ (8001ea0 <main+0x264>)
 8001d5e:	f004 fbb3 	bl	80064c8 <HAL_GPIO_ReadPin>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	2120      	movs	r1, #32
 8001d68:	484f      	ldr	r0, [pc, #316]	@ (8001ea8 <main+0x26c>)
 8001d6a:	f004 fbc5 	bl	80064f8 <HAL_GPIO_WritePin>
		sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001d6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d72:	484b      	ldr	r0, [pc, #300]	@ (8001ea0 <main+0x264>)
 8001d74:	f004 fba8 	bl	80064c8 <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	494a      	ldr	r1, [pc, #296]	@ (8001eac <main+0x270>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00a f80c 	bl	800bda0 <siprintf>
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	2005      	movs	r0, #5
 8001d90:	f000 fed6 	bl	8002b40 <BSP_LCD_DisplayStringAtLine>

		sConfig.Channel = ADC_CHANNEL_6;
 8001d94:	2306      	movs	r3, #6
 8001d96:	603b      	str	r3, [r7, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d98:	463b      	mov	r3, r7
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4844      	ldr	r0, [pc, #272]	@ (8001eb0 <main+0x274>)
 8001d9e:	f002 ff6f 	bl	8004c80 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001da2:	4843      	ldr	r0, [pc, #268]	@ (8001eb0 <main+0x274>)
 8001da4:	f002 fe06 	bl	80049b4 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001da8:	bf00      	nop
 8001daa:	2164      	movs	r1, #100	@ 0x64
 8001dac:	4840      	ldr	r0, [pc, #256]	@ (8001eb0 <main+0x274>)
 8001dae:	f002 fecf 	bl	8004b50 <HAL_ADC_PollForConversion>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f8      	bne.n	8001daa <main+0x16e>
		potr = HAL_ADC_GetValue(&hadc3);
 8001db8:	483d      	ldr	r0, [pc, #244]	@ (8001eb0 <main+0x274>)
 8001dba:	f002 ff54 	bl	8004c66 <HAL_ADC_GetValue>
 8001dbe:	64f8      	str	r0, [r7, #76]	@ 0x4c

		sConfig.Channel = ADC_CHANNEL_7;
 8001dc0:	2307      	movs	r3, #7
 8001dc2:	603b      	str	r3, [r7, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4839      	ldr	r0, [pc, #228]	@ (8001eb0 <main+0x274>)
 8001dca:	f002 ff59 	bl	8004c80 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001dce:	4838      	ldr	r0, [pc, #224]	@ (8001eb0 <main+0x274>)
 8001dd0:	f002 fdf0 	bl	80049b4 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001dd4:	bf00      	nop
 8001dd6:	2164      	movs	r1, #100	@ 0x64
 8001dd8:	4835      	ldr	r0, [pc, #212]	@ (8001eb0 <main+0x274>)
 8001dda:	f002 feb9 	bl	8004b50 <HAL_ADC_PollForConversion>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f8      	bne.n	8001dd6 <main+0x19a>
		potl = HAL_ADC_GetValue(&hadc3);
 8001de4:	4832      	ldr	r0, [pc, #200]	@ (8001eb0 <main+0x274>)
 8001de6:	f002 ff3e 	bl	8004c66 <HAL_ADC_GetValue>
 8001dea:	64b8      	str	r0, [r7, #72]	@ 0x48

		sConfig.Channel = ADC_CHANNEL_8;
 8001dec:	2308      	movs	r3, #8
 8001dee:	603b      	str	r3, [r7, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	482e      	ldr	r0, [pc, #184]	@ (8001eb0 <main+0x274>)
 8001df6:	f002 ff43 	bl	8004c80 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001dfa:	482d      	ldr	r0, [pc, #180]	@ (8001eb0 <main+0x274>)
 8001dfc:	f002 fdda 	bl	80049b4 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001e00:	bf00      	nop
 8001e02:	2164      	movs	r1, #100	@ 0x64
 8001e04:	482a      	ldr	r0, [pc, #168]	@ (8001eb0 <main+0x274>)
 8001e06:	f002 fea3 	bl	8004b50 <HAL_ADC_PollForConversion>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f8      	bne.n	8001e02 <main+0x1c6>
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001e10:	4827      	ldr	r0, [pc, #156]	@ (8001eb0 <main+0x274>)
 8001e12:	f002 ff28 	bl	8004c66 <HAL_ADC_GetValue>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4a26      	ldr	r2, [pc, #152]	@ (8001eb4 <main+0x278>)
 8001e1a:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start(&hadc1);
 8001e1c:	4826      	ldr	r0, [pc, #152]	@ (8001eb8 <main+0x27c>)
 8001e1e:	f002 fdc9 	bl	80049b4 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001e22:	bf00      	nop
 8001e24:	2164      	movs	r1, #100	@ 0x64
 8001e26:	4824      	ldr	r0, [pc, #144]	@ (8001eb8 <main+0x27c>)
 8001e28:	f002 fe92 	bl	8004b50 <HAL_ADC_PollForConversion>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f8      	bne.n	8001e24 <main+0x1e8>
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001e32:	4821      	ldr	r0, [pc, #132]	@ (8001eb8 <main+0x27c>)
 8001e34:	f002 ff17 	bl	8004c66 <HAL_ADC_GetValue>
 8001e38:	6478      	str	r0, [r7, #68]	@ 0x44

		sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint16_t)potl,(uint16_t)potr,(uint16_t)joystick_v,(uint16_t)joystick_h);
 8001e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461c      	mov	r4, r3
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <main+0x278>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e4e:	b292      	uxth	r2, r2
 8001e50:	f107 0010 	add.w	r0, r7, #16
 8001e54:	9201      	str	r2, [sp, #4]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4623      	mov	r3, r4
 8001e5a:	460a      	mov	r2, r1
 8001e5c:	4917      	ldr	r1, [pc, #92]	@ (8001ebc <main+0x280>)
 8001e5e:	f009 ff9f 	bl	800bda0 <siprintf>
		BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8001e62:	f107 0310 	add.w	r3, r7, #16
 8001e66:	4619      	mov	r1, r3
 8001e68:	2009      	movs	r0, #9
 8001e6a:	f000 fe69 	bl	8002b40 <BSP_LCD_DisplayStringAtLine>

		BSP_TS_GetState(&TS_State);
 8001e6e:	4814      	ldr	r0, [pc, #80]	@ (8001ec0 <main+0x284>)
 8001e70:	f001 fdb2 	bl	80039d8 <BSP_TS_GetState>
		if(TS_State.touchDetected){
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <main+0x284>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f43f af61 	beq.w	8001d40 <main+0x104>
			//TODO : Il faudrait vérifier que le cercle reste entièrement sur l'écran...
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <main+0x284>)
 8001e80:	885b      	ldrh	r3, [r3, #2]
 8001e82:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec0 <main+0x284>)
 8001e84:	8991      	ldrh	r1, [r2, #12]
 8001e86:	2204      	movs	r2, #4
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 f8b3 	bl	8002ff4 <BSP_LCD_FillCircle>
	  	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001e8e:	e757      	b.n	8001d40 <main+0x104>
 8001e90:	ffff0000 	.word	0xffff0000
 8001e94:	0800c764 	.word	0x0800c764
 8001e98:	20000030 	.word	0x20000030
 8001e9c:	ff0000ff 	.word	0xff0000ff
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	40021c00 	.word	0x40021c00
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	0800c720 	.word	0x0800c720
 8001eb0:	20000100 	.word	0x20000100
 8001eb4:	20000584 	.word	0x20000584
 8001eb8:	200000b8 	.word	0x200000b8
 8001ebc:	0800c72c 	.word	0x0800c72c
 8001ec0:	20000588 	.word	0x20000588

08001ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b094      	sub	sp, #80	@ 0x50
 8001ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	2230      	movs	r2, #48	@ 0x30
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f009 ff84 	bl	800bde0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ee8:	f005 fcc6 	bl	8007878 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa0 <SystemClock_Config+0xdc>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa0 <SystemClock_Config+0xdc>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef8:	4b29      	ldr	r3, [pc, #164]	@ (8001fa0 <SystemClock_Config+0xdc>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f04:	4b27      	ldr	r3, [pc, #156]	@ (8001fa4 <SystemClock_Config+0xe0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a26      	ldr	r2, [pc, #152]	@ (8001fa4 <SystemClock_Config+0xe0>)
 8001f0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <SystemClock_Config+0xe0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f1c:	2309      	movs	r3, #9
 8001f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f26:	2301      	movs	r3, #1
 8001f28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f34:	2319      	movs	r3, #25
 8001f36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001f38:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001f3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f42:	2309      	movs	r3, #9
 8001f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f005 fcf4 	bl	8007938 <HAL_RCC_OscConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f56:	f000 f839 	bl	8001fcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f5a:	f005 fc9d 	bl	8007898 <HAL_PWREx_EnableOverDrive>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001f64:	f000 f832 	bl	8001fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f68:	230f      	movs	r3, #15
 8001f6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f74:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	2106      	movs	r1, #6
 8001f86:	4618      	mov	r0, r3
 8001f88:	f005 ff7a 	bl	8007e80 <HAL_RCC_ClockConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001f92:	f000 f81b 	bl	8001fcc <Error_Handler>
  }
}
 8001f96:	bf00      	nop
 8001f98:	3750      	adds	r7, #80	@ 0x50
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000

08001fa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fba:	f002 fc73 	bl	80048a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40001000 	.word	0x40001000

08001fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd0:	b672      	cpsid	i
}
 8001fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <Error_Handler+0x8>

08001fd8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b090      	sub	sp, #64	@ 0x40
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001fde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2228      	movs	r2, #40	@ 0x28
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f009 fef1 	bl	800bde0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ffe:	4b46      	ldr	r3, [pc, #280]	@ (8002118 <MX_RTC_Init+0x140>)
 8002000:	4a46      	ldr	r2, [pc, #280]	@ (800211c <MX_RTC_Init+0x144>)
 8002002:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002004:	4b44      	ldr	r3, [pc, #272]	@ (8002118 <MX_RTC_Init+0x140>)
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800200a:	4b43      	ldr	r3, [pc, #268]	@ (8002118 <MX_RTC_Init+0x140>)
 800200c:	227f      	movs	r2, #127	@ 0x7f
 800200e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002010:	4b41      	ldr	r3, [pc, #260]	@ (8002118 <MX_RTC_Init+0x140>)
 8002012:	22ff      	movs	r2, #255	@ 0xff
 8002014:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002016:	4b40      	ldr	r3, [pc, #256]	@ (8002118 <MX_RTC_Init+0x140>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800201c:	4b3e      	ldr	r3, [pc, #248]	@ (8002118 <MX_RTC_Init+0x140>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002022:	4b3d      	ldr	r3, [pc, #244]	@ (8002118 <MX_RTC_Init+0x140>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002028:	483b      	ldr	r0, [pc, #236]	@ (8002118 <MX_RTC_Init+0x140>)
 800202a:	f006 fd31 	bl	8008a90 <HAL_RTC_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002034:	f7ff ffca 	bl	8001fcc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800204a:	2300      	movs	r3, #0
 800204c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002052:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002056:	2201      	movs	r2, #1
 8002058:	4619      	mov	r1, r3
 800205a:	482f      	ldr	r0, [pc, #188]	@ (8002118 <MX_RTC_Init+0x140>)
 800205c:	f006 fd9c 	bl	8008b98 <HAL_RTC_SetTime>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002066:	f7ff ffb1 	bl	8001fcc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002070:	2301      	movs	r3, #1
 8002072:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002082:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002086:	2201      	movs	r2, #1
 8002088:	4619      	mov	r1, r3
 800208a:	4823      	ldr	r0, [pc, #140]	@ (8002118 <MX_RTC_Init+0x140>)
 800208c:	f006 fe1e 	bl	8008ccc <HAL_RTC_SetDate>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002096:	f7ff ff99 	bl	8001fcc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800209a:	2300      	movs	r3, #0
 800209c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800209e:	2300      	movs	r3, #0
 80020a0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80020be:	2301      	movs	r3, #1
 80020c0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80020c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020ca:	463b      	mov	r3, r7
 80020cc:	2201      	movs	r2, #1
 80020ce:	4619      	mov	r1, r3
 80020d0:	4811      	ldr	r0, [pc, #68]	@ (8002118 <MX_RTC_Init+0x140>)
 80020d2:	f006 fe7f 	bl	8008dd4 <HAL_RTC_SetAlarm>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80020dc:	f7ff ff76 	bl	8001fcc <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80020e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020e6:	463b      	mov	r3, r7
 80020e8:	2201      	movs	r2, #1
 80020ea:	4619      	mov	r1, r3
 80020ec:	480a      	ldr	r0, [pc, #40]	@ (8002118 <MX_RTC_Init+0x140>)
 80020ee:	f006 fe71 	bl	8008dd4 <HAL_RTC_SetAlarm>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80020f8:	f7ff ff68 	bl	8001fcc <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80020fc:	2202      	movs	r2, #2
 80020fe:	2100      	movs	r1, #0
 8002100:	4805      	ldr	r0, [pc, #20]	@ (8002118 <MX_RTC_Init+0x140>)
 8002102:	f007 f833 	bl	800916c <HAL_RTCEx_SetTimeStamp>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 800210c:	f7ff ff5e 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	3740      	adds	r7, #64	@ 0x40
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	200005b4 	.word	0x200005b4
 800211c:	40002800 	.word	0x40002800

08002120 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b0a4      	sub	sp, #144	@ 0x90
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	2284      	movs	r2, #132	@ 0x84
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f009 fe55 	bl	800bde0 <memset>
  if(rtcHandle->Instance==RTC)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a0e      	ldr	r2, [pc, #56]	@ (8002174 <HAL_RTC_MspInit+0x54>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d114      	bne.n	800216a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002140:	2320      	movs	r3, #32
 8002142:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002148:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f006 f8ae 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800215a:	f7ff ff37 	bl	8001fcc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_RTC_MspInit+0x58>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <HAL_RTC_MspInit+0x58>)
 8002164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002168:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800216a:	bf00      	nop
 800216c:	3790      	adds	r7, #144	@ 0x90
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40002800 	.word	0x40002800
 8002178:	40023800 	.word	0x40023800

0800217c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002180:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <MX_SPI2_Init+0x74>)
 8002182:	4a1c      	ldr	r2, [pc, #112]	@ (80021f4 <MX_SPI2_Init+0x78>)
 8002184:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <MX_SPI2_Init+0x74>)
 8002188:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800218c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800218e:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <MX_SPI2_Init+0x74>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <MX_SPI2_Init+0x74>)
 8002196:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800219a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <MX_SPI2_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021ca:	2207      	movs	r2, #7
 80021cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021d6:	2208      	movs	r2, #8
 80021d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021da:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021dc:	f007 f8bf 	bl	800935e <HAL_SPI_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021e6:	f7ff fef1 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200005d4 	.word	0x200005d4
 80021f4:	40003800 	.word	0x40003800

080021f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a25      	ldr	r2, [pc, #148]	@ (80022ac <HAL_SPI_MspInit+0xb4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d144      	bne.n	80022a4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800221a:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <HAL_SPI_MspInit+0xb8>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	4a24      	ldr	r2, [pc, #144]	@ (80022b0 <HAL_SPI_MspInit+0xb8>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002224:	6413      	str	r3, [r2, #64]	@ 0x40
 8002226:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <HAL_SPI_MspInit+0xb8>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002232:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <HAL_SPI_MspInit+0xb8>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a1e      	ldr	r2, [pc, #120]	@ (80022b0 <HAL_SPI_MspInit+0xb8>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <HAL_SPI_MspInit+0xb8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_SPI_MspInit+0xb8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a18      	ldr	r2, [pc, #96]	@ (80022b0 <HAL_SPI_MspInit+0xb8>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
 8002256:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <HAL_SPI_MspInit+0xb8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002262:	2303      	movs	r3, #3
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226e:	2303      	movs	r3, #3
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002272:	2305      	movs	r3, #5
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4619      	mov	r1, r3
 800227c:	480d      	ldr	r0, [pc, #52]	@ (80022b4 <HAL_SPI_MspInit+0xbc>)
 800227e:	f003 fe6b 	bl	8005f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002282:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002294:	2305      	movs	r3, #5
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4619      	mov	r1, r3
 800229e:	4806      	ldr	r0, [pc, #24]	@ (80022b8 <HAL_SPI_MspInit+0xc0>)
 80022a0:	f003 fe5a 	bl	8005f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022a4:	bf00      	nop
 80022a6:	3728      	adds	r7, #40	@ 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40003800 	.word	0x40003800
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40022000 	.word	0x40022000
 80022b8:	40020400 	.word	0x40020400

080022bc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	@ 0x30
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a51      	ldr	r2, [pc, #324]	@ (800240c <I2Cx_MspInit+0x150>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d14d      	bne.n	8002368 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022cc:	4b50      	ldr	r3, [pc, #320]	@ (8002410 <I2Cx_MspInit+0x154>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002410 <I2Cx_MspInit+0x154>)
 80022d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002410 <I2Cx_MspInit+0x154>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80022e8:	2312      	movs	r3, #18
 80022ea:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80022f0:	2302      	movs	r3, #2
 80022f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80022f4:	2304      	movs	r3, #4
 80022f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	4619      	mov	r1, r3
 80022fe:	4845      	ldr	r0, [pc, #276]	@ (8002414 <I2Cx_MspInit+0x158>)
 8002300:	f003 fe2a 	bl	8005f58 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002304:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	4619      	mov	r1, r3
 8002310:	4840      	ldr	r0, [pc, #256]	@ (8002414 <I2Cx_MspInit+0x158>)
 8002312:	f003 fe21 	bl	8005f58 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002316:	4b3e      	ldr	r3, [pc, #248]	@ (8002410 <I2Cx_MspInit+0x154>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	4a3d      	ldr	r2, [pc, #244]	@ (8002410 <I2Cx_MspInit+0x154>)
 800231c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002320:	6413      	str	r3, [r2, #64]	@ 0x40
 8002322:	4b3b      	ldr	r3, [pc, #236]	@ (8002410 <I2Cx_MspInit+0x154>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800232e:	4b38      	ldr	r3, [pc, #224]	@ (8002410 <I2Cx_MspInit+0x154>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a37      	ldr	r2, [pc, #220]	@ (8002410 <I2Cx_MspInit+0x154>)
 8002334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002338:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800233a:	4b35      	ldr	r3, [pc, #212]	@ (8002410 <I2Cx_MspInit+0x154>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a34      	ldr	r2, [pc, #208]	@ (8002410 <I2Cx_MspInit+0x154>)
 8002340:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002344:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	210f      	movs	r1, #15
 800234a:	2048      	movs	r0, #72	@ 0x48
 800234c:	f002 ffa0 	bl	8005290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002350:	2048      	movs	r0, #72	@ 0x48
 8002352:	f002 ffb9 	bl	80052c8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	210f      	movs	r1, #15
 800235a:	2049      	movs	r0, #73	@ 0x49
 800235c:	f002 ff98 	bl	8005290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002360:	2049      	movs	r0, #73	@ 0x49
 8002362:	f002 ffb1 	bl	80052c8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002366:	e04d      	b.n	8002404 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002368:	4b29      	ldr	r3, [pc, #164]	@ (8002410 <I2Cx_MspInit+0x154>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	4a28      	ldr	r2, [pc, #160]	@ (8002410 <I2Cx_MspInit+0x154>)
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	6313      	str	r3, [r2, #48]	@ 0x30
 8002374:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <I2Cx_MspInit+0x154>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002384:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002386:	2312      	movs	r3, #18
 8002388:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800238e:	2302      	movs	r3, #2
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002392:	2304      	movs	r3, #4
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	481e      	ldr	r0, [pc, #120]	@ (8002418 <I2Cx_MspInit+0x15c>)
 800239e:	f003 fddb 	bl	8005f58 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80023a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	4619      	mov	r1, r3
 80023ae:	481a      	ldr	r0, [pc, #104]	@ (8002418 <I2Cx_MspInit+0x15c>)
 80023b0:	f003 fdd2 	bl	8005f58 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80023b4:	4b16      	ldr	r3, [pc, #88]	@ (8002410 <I2Cx_MspInit+0x154>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	4a15      	ldr	r2, [pc, #84]	@ (8002410 <I2Cx_MspInit+0x154>)
 80023ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023be:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c0:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <I2Cx_MspInit+0x154>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80023cc:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <I2Cx_MspInit+0x154>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002410 <I2Cx_MspInit+0x154>)
 80023d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023d6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80023d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <I2Cx_MspInit+0x154>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002410 <I2Cx_MspInit+0x154>)
 80023de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023e2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	210f      	movs	r1, #15
 80023e8:	201f      	movs	r0, #31
 80023ea:	f002 ff51 	bl	8005290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80023ee:	201f      	movs	r0, #31
 80023f0:	f002 ff6a 	bl	80052c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	210f      	movs	r1, #15
 80023f8:	2020      	movs	r0, #32
 80023fa:	f002 ff49 	bl	8005290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80023fe:	2020      	movs	r0, #32
 8002400:	f002 ff62 	bl	80052c8 <HAL_NVIC_EnableIRQ>
}
 8002404:	bf00      	nop
 8002406:	3730      	adds	r7, #48	@ 0x30
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000638 	.word	0x20000638
 8002410:	40023800 	.word	0x40023800
 8002414:	40021c00 	.word	0x40021c00
 8002418:	40020400 	.word	0x40020400

0800241c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f004 fb6f 	bl	8006b08 <HAL_I2C_GetState>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d125      	bne.n	800247c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <I2Cx_Init+0x68>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d103      	bne.n	8002440 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a13      	ldr	r2, [pc, #76]	@ (8002488 <I2Cx_Init+0x6c>)
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e002      	b.n	8002446 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a12      	ldr	r2, [pc, #72]	@ (800248c <I2Cx_Init+0x70>)
 8002444:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a11      	ldr	r2, [pc, #68]	@ (8002490 <I2Cx_Init+0x74>)
 800244a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff23 	bl	80022bc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f004 f858 	bl	800652c <HAL_I2C_Init>
  }
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000638 	.word	0x20000638
 8002488:	40005c00 	.word	0x40005c00
 800248c:	40005400 	.word	0x40005400
 8002490:	40912732 	.word	0x40912732

08002494 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	@ 0x28
 8002498:	af04      	add	r7, sp, #16
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	72fb      	strb	r3, [r7, #11]
 80024a6:	460b      	mov	r3, r1
 80024a8:	813b      	strh	r3, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024b2:	7afb      	ldrb	r3, [r7, #11]
 80024b4:	b299      	uxth	r1, r3
 80024b6:	88f8      	ldrh	r0, [r7, #6]
 80024b8:	893a      	ldrh	r2, [r7, #8]
 80024ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024be:	9302      	str	r3, [sp, #8]
 80024c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	4603      	mov	r3, r0
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f004 fa02 	bl	80068d4 <HAL_I2C_Mem_Read>
 80024d0:	4603      	mov	r3, r0
 80024d2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	4619      	mov	r1, r3
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f832 	bl	8002548 <I2Cx_Error>
  }
  return status;    
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b08a      	sub	sp, #40	@ 0x28
 80024f2:	af04      	add	r7, sp, #16
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	4608      	mov	r0, r1
 80024f8:	4611      	mov	r1, r2
 80024fa:	461a      	mov	r2, r3
 80024fc:	4603      	mov	r3, r0
 80024fe:	72fb      	strb	r3, [r7, #11]
 8002500:	460b      	mov	r3, r1
 8002502:	813b      	strh	r3, [r7, #8]
 8002504:	4613      	mov	r3, r2
 8002506:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800250c:	7afb      	ldrb	r3, [r7, #11]
 800250e:	b299      	uxth	r1, r3
 8002510:	88f8      	ldrh	r0, [r7, #6]
 8002512:	893a      	ldrh	r2, [r7, #8]
 8002514:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002518:	9302      	str	r3, [sp, #8]
 800251a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	4603      	mov	r3, r0
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f004 f8c1 	bl	80066ac <HAL_I2C_Mem_Write>
 800252a:	4603      	mov	r3, r0
 800252c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002534:	7afb      	ldrb	r3, [r7, #11]
 8002536:	4619      	mov	r1, r3
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f805 	bl	8002548 <I2Cx_Error>
  }
  return status;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f004 f879 	bl	800664c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ff5e 	bl	800241c <I2Cx_Init>
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800256c:	4802      	ldr	r0, [pc, #8]	@ (8002578 <TS_IO_Init+0x10>)
 800256e:	f7ff ff55 	bl	800241c <I2Cx_Init>
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000638 	.word	0x20000638

0800257c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af02      	add	r7, sp, #8
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
 8002586:	460b      	mov	r3, r1
 8002588:	71bb      	strb	r3, [r7, #6]
 800258a:	4613      	mov	r3, r2
 800258c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800258e:	79bb      	ldrb	r3, [r7, #6]
 8002590:	b29a      	uxth	r2, r3
 8002592:	79f9      	ldrb	r1, [r7, #7]
 8002594:	2301      	movs	r3, #1
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	1d7b      	adds	r3, r7, #5
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2301      	movs	r3, #1
 800259e:	4803      	ldr	r0, [pc, #12]	@ (80025ac <TS_IO_Write+0x30>)
 80025a0:	f7ff ffa5 	bl	80024ee <I2Cx_WriteMultiple>
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000638 	.word	0x20000638

080025b0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	4613      	mov	r3, r2
 80025be:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80025c4:	79bb      	ldrb	r3, [r7, #6]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	79f9      	ldrb	r1, [r7, #7]
 80025ca:	2301      	movs	r3, #1
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	f107 030f 	add.w	r3, r7, #15
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2301      	movs	r3, #1
 80025d6:	4804      	ldr	r0, [pc, #16]	@ (80025e8 <TS_IO_Read+0x38>)
 80025d8:	f7ff ff5c 	bl	8002494 <I2Cx_ReadMultiple>

  return read_value;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000638 	.word	0x20000638

080025ec <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f002 f975 	bl	80048e4 <HAL_Delay>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002608:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 800260a:	2228      	movs	r2, #40	@ 0x28
 800260c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800260e:	4b30      	ldr	r3, [pc, #192]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002610:	2209      	movs	r2, #9
 8002612:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002614:	4b2e      	ldr	r3, [pc, #184]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002616:	2235      	movs	r2, #53	@ 0x35
 8002618:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800261a:	4b2d      	ldr	r3, [pc, #180]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 800261c:	220b      	movs	r2, #11
 800261e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002620:	4b2b      	ldr	r3, [pc, #172]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002622:	f240 121b 	movw	r2, #283	@ 0x11b
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002628:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 800262a:	f240 2215 	movw	r2, #533	@ 0x215
 800262e:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002630:	4b27      	ldr	r3, [pc, #156]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002632:	f240 121d 	movw	r2, #285	@ 0x11d
 8002636:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002638:	4b25      	ldr	r3, [pc, #148]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 800263a:	f240 2235 	movw	r2, #565	@ 0x235
 800263e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002640:	2100      	movs	r1, #0
 8002642:	4823      	ldr	r0, [pc, #140]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002644:	f000 fe6e 	bl	8003324 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002648:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 800264a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800264e:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002650:	4b1f      	ldr	r3, [pc, #124]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002652:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8002656:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002660:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002670:	4b17      	ldr	r3, [pc, #92]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002676:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002682:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 800268a:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <BSP_LCD_Init+0xd0>)
 800268c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800268e:	4810      	ldr	r0, [pc, #64]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 8002690:	f004 ff4a 	bl	8007528 <HAL_LTDC_GetState>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800269a:	2100      	movs	r1, #0
 800269c:	480c      	ldr	r0, [pc, #48]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 800269e:	f000 fd67 	bl	8003170 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80026a2:	480b      	ldr	r0, [pc, #44]	@ (80026d0 <BSP_LCD_Init+0xcc>)
 80026a4:	f004 fd70 	bl	8007188 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80026a8:	2201      	movs	r2, #1
 80026aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026ae:	480a      	ldr	r0, [pc, #40]	@ (80026d8 <BSP_LCD_Init+0xd4>)
 80026b0:	f003 ff22 	bl	80064f8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	2108      	movs	r1, #8
 80026b8:	4808      	ldr	r0, [pc, #32]	@ (80026dc <BSP_LCD_Init+0xd8>)
 80026ba:	f003 ff1d 	bl	80064f8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80026be:	f000 ff95 	bl	80035ec <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80026c2:	4807      	ldr	r0, [pc, #28]	@ (80026e0 <BSP_LCD_Init+0xdc>)
 80026c4:	f000 f8d8 	bl	8002878 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000068c 	.word	0x2000068c
 80026d4:	40016800 	.word	0x40016800
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40022800 	.word	0x40022800
 80026e0:	20000028 	.word	0x20000028

080026e4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80026e8:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <BSP_LCD_GetXSize+0x20>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a06      	ldr	r2, [pc, #24]	@ (8002708 <BSP_LCD_GetXSize+0x24>)
 80026ee:	2134      	movs	r1, #52	@ 0x34
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	3360      	adds	r3, #96	@ 0x60
 80026f8:	681b      	ldr	r3, [r3, #0]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	20000774 	.word	0x20000774
 8002708:	2000068c 	.word	0x2000068c

0800270c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <BSP_LCD_GetYSize+0x20>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a06      	ldr	r2, [pc, #24]	@ (8002730 <BSP_LCD_GetYSize+0x24>)
 8002716:	2134      	movs	r1, #52	@ 0x34
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3364      	adds	r3, #100	@ 0x64
 8002720:	681b      	ldr	r3, [r3, #0]
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	20000774 	.word	0x20000774
 8002730:	2000068c 	.word	0x2000068c

08002734 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002734:	b580      	push	{r7, lr}
 8002736:	b090      	sub	sp, #64	@ 0x40
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002744:	f7ff ffce 	bl	80026e4 <BSP_LCD_GetXSize>
 8002748:	4603      	mov	r3, r0
 800274a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002750:	f7ff ffdc 	bl	800270c <BSP_LCD_GetYSize>
 8002754:	4603      	mov	r3, r0
 8002756:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8002760:	23ff      	movs	r3, #255	@ 0xff
 8002762:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800277a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002780:	2307      	movs	r3, #7
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002784:	f7ff ffae 	bl	80026e4 <BSP_LCD_GetXSize>
 8002788:	4603      	mov	r3, r0
 800278a:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800278c:	f7ff ffbe 	bl	800270c <BSP_LCD_GetYSize>
 8002790:	4603      	mov	r3, r0
 8002792:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002794:	88fa      	ldrh	r2, [r7, #6]
 8002796:	f107 030c 	add.w	r3, r7, #12
 800279a:	4619      	mov	r1, r3
 800279c:	4812      	ldr	r0, [pc, #72]	@ (80027e8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800279e:	f004 fe85 	bl	80074ac <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	4911      	ldr	r1, [pc, #68]	@ (80027ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	3304      	adds	r3, #4
 80027b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	490c      	ldr	r1, [pc, #48]	@ (80027ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	3308      	adds	r3, #8
 80027c8:	4a09      	ldr	r2, [pc, #36]	@ (80027f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80027ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80027cc:	88fa      	ldrh	r2, [r7, #6]
 80027ce:	4907      	ldr	r1, [pc, #28]	@ (80027ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80027de:	601a      	str	r2, [r3, #0]
}
 80027e0:	bf00      	nop
 80027e2:	3740      	adds	r7, #64	@ 0x40
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000068c 	.word	0x2000068c
 80027ec:	20000778 	.word	0x20000778
 80027f0:	20000028 	.word	0x20000028

080027f4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80027fc:	4a04      	ldr	r2, [pc, #16]	@ (8002810 <BSP_LCD_SelectLayer+0x1c>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
} 
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000774 	.word	0x20000774

08002814 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800281c:	4b07      	ldr	r3, [pc, #28]	@ (800283c <BSP_LCD_SetTextColor+0x28>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4907      	ldr	r1, [pc, #28]	@ (8002840 <BSP_LCD_SetTextColor+0x2c>)
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	601a      	str	r2, [r3, #0]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	20000774 	.word	0x20000774
 8002840:	20000778 	.word	0x20000778

08002844 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <BSP_LCD_SetBackColor+0x2c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4908      	ldr	r1, [pc, #32]	@ (8002874 <BSP_LCD_SetBackColor+0x30>)
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	3304      	adds	r3, #4
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	601a      	str	r2, [r3, #0]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000774 	.word	0x20000774
 8002874:	20000778 	.word	0x20000778

08002878 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <BSP_LCD_SetFont+0x2c>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4908      	ldr	r1, [pc, #32]	@ (80028a8 <BSP_LCD_SetFont+0x30>)
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3308      	adds	r3, #8
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000774 	.word	0x20000774
 80028a8:	20000778 	.word	0x20000778

080028ac <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80028b0:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <BSP_LCD_GetFont+0x24>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4907      	ldr	r1, [pc, #28]	@ (80028d4 <BSP_LCD_GetFont+0x28>)
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3308      	adds	r3, #8
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000774 	.word	0x20000774
 80028d4:	20000778 	.word	0x20000778

080028d8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028da:	b085      	sub	sp, #20
 80028dc:	af02      	add	r7, sp, #8
 80028de:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80028e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <BSP_LCD_Clear+0x48>)
 80028e2:	681c      	ldr	r4, [r3, #0]
 80028e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <BSP_LCD_Clear+0x48>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002924 <BSP_LCD_Clear+0x4c>)
 80028ea:	2134      	movs	r1, #52	@ 0x34
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	335c      	adds	r3, #92	@ 0x5c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	461e      	mov	r6, r3
 80028f8:	f7ff fef4 	bl	80026e4 <BSP_LCD_GetXSize>
 80028fc:	4605      	mov	r5, r0
 80028fe:	f7ff ff05 	bl	800270c <BSP_LCD_GetYSize>
 8002902:	4602      	mov	r2, r0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	2300      	movs	r3, #0
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	462a      	mov	r2, r5
 8002910:	4631      	mov	r1, r6
 8002912:	4620      	mov	r0, r4
 8002914:	f000 fdda 	bl	80034cc <LL_FillBuffer>
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002920:	20000774 	.word	0x20000774
 8002924:	2000068c 	.word	0x2000068c

08002928 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	80fb      	strh	r3, [r7, #6]
 8002932:	460b      	mov	r3, r1
 8002934:	80bb      	strh	r3, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800293a:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <BSP_LCD_DisplayChar+0x80>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	491b      	ldr	r1, [pc, #108]	@ (80029ac <BSP_LCD_DisplayChar+0x84>)
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3308      	adds	r3, #8
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002956:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <BSP_LCD_DisplayChar+0x80>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4c14      	ldr	r4, [pc, #80]	@ (80029ac <BSP_LCD_DisplayChar+0x84>)
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4423      	add	r3, r4
 8002966:	3308      	adds	r3, #8
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800296c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002970:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <BSP_LCD_DisplayChar+0x80>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4c0d      	ldr	r4, [pc, #52]	@ (80029ac <BSP_LCD_DisplayChar+0x84>)
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4423      	add	r3, r4
 8002980:	3308      	adds	r3, #8
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	889b      	ldrh	r3, [r3, #4]
 8002986:	3307      	adds	r3, #7
 8002988:	2b00      	cmp	r3, #0
 800298a:	da00      	bge.n	800298e <BSP_LCD_DisplayChar+0x66>
 800298c:	3307      	adds	r3, #7
 800298e:	10db      	asrs	r3, r3, #3
 8002990:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002994:	18ca      	adds	r2, r1, r3
 8002996:	88b9      	ldrh	r1, [r7, #4]
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fcde 	bl	800335c <DrawChar>
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd90      	pop	{r4, r7, pc}
 80029a8:	20000774 	.word	0x20000774
 80029ac:	20000778 	.word	0x20000778

080029b0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60ba      	str	r2, [r7, #8]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	81fb      	strh	r3, [r7, #14]
 80029be:	460b      	mov	r3, r1
 80029c0:	81bb      	strh	r3, [r7, #12]
 80029c2:	4613      	mov	r3, r2
 80029c4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80029c6:	2301      	movs	r3, #1
 80029c8:	83fb      	strh	r3, [r7, #30]
 80029ca:	2300      	movs	r3, #0
 80029cc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80029da:	e002      	b.n	80029e2 <BSP_LCD_DisplayStringAt+0x32>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	3301      	adds	r3, #1
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	617a      	str	r2, [r7, #20]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f6      	bne.n	80029dc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80029ee:	f7ff fe79 	bl	80026e4 <BSP_LCD_GetXSize>
 80029f2:	4601      	mov	r1, r0
 80029f4:	4b50      	ldr	r3, [pc, #320]	@ (8002b38 <BSP_LCD_DisplayStringAt+0x188>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4850      	ldr	r0, [pc, #320]	@ (8002b3c <BSP_LCD_DisplayStringAt+0x18c>)
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4403      	add	r3, r0
 8002a04:	3308      	adds	r3, #8
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	889b      	ldrh	r3, [r3, #4]
 8002a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a0e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d01c      	beq.n	8002a50 <BSP_LCD_DisplayStringAt+0xa0>
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	dc33      	bgt.n	8002a82 <BSP_LCD_DisplayStringAt+0xd2>
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d002      	beq.n	8002a24 <BSP_LCD_DisplayStringAt+0x74>
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d019      	beq.n	8002a56 <BSP_LCD_DisplayStringAt+0xa6>
 8002a22:	e02e      	b.n	8002a82 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	1ad1      	subs	r1, r2, r3
 8002a2a:	4b43      	ldr	r3, [pc, #268]	@ (8002b38 <BSP_LCD_DisplayStringAt+0x188>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4843      	ldr	r0, [pc, #268]	@ (8002b3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4403      	add	r3, r0
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	889b      	ldrh	r3, [r3, #4]
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	89fb      	ldrh	r3, [r7, #14]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	83fb      	strh	r3, [r7, #30]
      break;
 8002a4e:	e01b      	b.n	8002a88 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	83fb      	strh	r3, [r7, #30]
      break;
 8002a54:	e018      	b.n	8002a88 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	b299      	uxth	r1, r3
 8002a5e:	4b36      	ldr	r3, [pc, #216]	@ (8002b38 <BSP_LCD_DisplayStringAt+0x188>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4836      	ldr	r0, [pc, #216]	@ (8002b3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4403      	add	r3, r0
 8002a6e:	3308      	adds	r3, #8
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	889b      	ldrh	r3, [r3, #4]
 8002a74:	fb11 f303 	smulbb	r3, r1, r3
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	89fb      	ldrh	r3, [r7, #14]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	83fb      	strh	r3, [r7, #30]
      break;
 8002a80:	e002      	b.n	8002a88 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002a82:	89fb      	ldrh	r3, [r7, #14]
 8002a84:	83fb      	strh	r3, [r7, #30]
      break;
 8002a86:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002a88:	8bfb      	ldrh	r3, [r7, #30]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <BSP_LCD_DisplayStringAt+0xe6>
 8002a8e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	da1d      	bge.n	8002ad2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002a96:	2301      	movs	r3, #1
 8002a98:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002a9a:	e01a      	b.n	8002ad2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	89b9      	ldrh	r1, [r7, #12]
 8002aa2:	8bfb      	ldrh	r3, [r7, #30]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff3f 	bl	8002928 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002aaa:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <BSP_LCD_DisplayStringAt+0x188>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4923      	ldr	r1, [pc, #140]	@ (8002b3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	3308      	adds	r3, #8
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	889a      	ldrh	r2, [r3, #4]
 8002ac0:	8bfb      	ldrh	r3, [r7, #30]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
    i++;
 8002acc:	8bbb      	ldrh	r3, [r7, #28]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2dc      	uxtb	r4, r3
 8002ae0:	f7ff fe00 	bl	80026e4 <BSP_LCD_GetXSize>
 8002ae4:	8bb9      	ldrh	r1, [r7, #28]
 8002ae6:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <BSP_LCD_DisplayStringAt+0x188>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4d14      	ldr	r5, [pc, #80]	@ (8002b3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	442b      	add	r3, r5
 8002af6:	3308      	adds	r3, #8
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	889b      	ldrh	r3, [r3, #4]
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	1ac3      	subs	r3, r0, r3
 8002b02:	b299      	uxth	r1, r3
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <BSP_LCD_DisplayStringAt+0x188>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	480c      	ldr	r0, [pc, #48]	@ (8002b3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4403      	add	r3, r0
 8002b14:	3308      	adds	r3, #8
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	889b      	ldrh	r3, [r3, #4]
 8002b1a:	4299      	cmp	r1, r3
 8002b1c:	bf2c      	ite	cs
 8002b1e:	2301      	movcs	r3, #1
 8002b20:	2300      	movcc	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	4023      	ands	r3, r4
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1b7      	bne.n	8002a9c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bdb0      	pop	{r4, r5, r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000774 	.word	0x20000774
 8002b3c:	20000778 	.word	0x20000778

08002b40 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002b4c:	f7ff feae 	bl	80028ac <BSP_LCD_GetFont>
 8002b50:	4603      	mov	r3, r0
 8002b52:	88db      	ldrh	r3, [r3, #6]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	fb12 f303 	smulbb	r3, r2, r3
 8002b5a:	b299      	uxth	r1, r3
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7ff ff25 	bl	80029b0 <BSP_LCD_DisplayStringAt>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	80bb      	strh	r3, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b86:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <BSP_LCD_DrawHLine+0xb0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a26      	ldr	r2, [pc, #152]	@ (8002c24 <BSP_LCD_DrawHLine+0xb4>)
 8002b8c:	2134      	movs	r1, #52	@ 0x34
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3348      	adds	r3, #72	@ 0x48
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d114      	bne.n	8002bc6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b9c:	4b20      	ldr	r3, [pc, #128]	@ (8002c20 <BSP_LCD_DrawHLine+0xb0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a20      	ldr	r2, [pc, #128]	@ (8002c24 <BSP_LCD_DrawHLine+0xb4>)
 8002ba2:	2134      	movs	r1, #52	@ 0x34
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	335c      	adds	r3, #92	@ 0x5c
 8002bac:	681c      	ldr	r4, [r3, #0]
 8002bae:	f7ff fd99 	bl	80026e4 <BSP_LCD_GetXSize>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	88bb      	ldrh	r3, [r7, #4]
 8002bb6:	fb03 f202 	mul.w	r2, r3, r2
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4423      	add	r3, r4
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e013      	b.n	8002bee <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002bc6:	4b16      	ldr	r3, [pc, #88]	@ (8002c20 <BSP_LCD_DrawHLine+0xb0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a16      	ldr	r2, [pc, #88]	@ (8002c24 <BSP_LCD_DrawHLine+0xb4>)
 8002bcc:	2134      	movs	r1, #52	@ 0x34
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	335c      	adds	r3, #92	@ 0x5c
 8002bd6:	681c      	ldr	r4, [r3, #0]
 8002bd8:	f7ff fd84 	bl	80026e4 <BSP_LCD_GetXSize>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	88bb      	ldrh	r3, [r7, #4]
 8002be0:	fb03 f202 	mul.w	r2, r3, r2
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4423      	add	r3, r4
 8002bec:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002bee:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <BSP_LCD_DrawHLine+0xb0>)
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	68f9      	ldr	r1, [r7, #12]
 8002bf4:	887c      	ldrh	r4, [r7, #2]
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <BSP_LCD_DrawHLine+0xb0>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4d0b      	ldr	r5, [pc, #44]	@ (8002c28 <BSP_LCD_DrawHLine+0xb8>)
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	442b      	add	r3, r5
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2301      	movs	r3, #1
 8002c10:	4622      	mov	r2, r4
 8002c12:	f000 fc5b 	bl	80034cc <LL_FillBuffer>
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000774 	.word	0x20000774
 8002c24:	2000068c 	.word	0x2000068c
 8002c28:	20000778 	.word	0x20000778

08002c2c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	80fb      	strh	r3, [r7, #6]
 8002c36:	460b      	mov	r3, r1
 8002c38:	80bb      	strh	r3, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	f1c3 0303 	rsb	r3, r3, #3
 8002c46:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002c50:	e0c7      	b.n	8002de2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b298      	uxth	r0, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	88ba      	ldrh	r2, [r7, #4]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	b299      	uxth	r1, r3
 8002c66:	4b64      	ldr	r3, [pc, #400]	@ (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4c64      	ldr	r4, [pc, #400]	@ (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4423      	add	r3, r4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f000 f8c1 	bl	8002e00 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	b298      	uxth	r0, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	88ba      	ldrh	r2, [r7, #4]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b299      	uxth	r1, r3
 8002c92:	4b59      	ldr	r3, [pc, #356]	@ (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4c59      	ldr	r4, [pc, #356]	@ (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4423      	add	r3, r4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f000 f8ab 	bl	8002e00 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b298      	uxth	r0, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	88ba      	ldrh	r2, [r7, #4]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	b299      	uxth	r1, r3
 8002cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4c4e      	ldr	r4, [pc, #312]	@ (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4423      	add	r3, r4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f000 f895 	bl	8002e00 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	b298      	uxth	r0, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	88ba      	ldrh	r2, [r7, #4]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	b299      	uxth	r1, r3
 8002cea:	4b43      	ldr	r3, [pc, #268]	@ (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4c43      	ldr	r4, [pc, #268]	@ (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4423      	add	r3, r4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f000 f87f 	bl	8002e00 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	4413      	add	r3, r2
 8002d0a:	b298      	uxth	r0, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	88bb      	ldrh	r3, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	b299      	uxth	r1, r3
 8002d16:	4b38      	ldr	r3, [pc, #224]	@ (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4c38      	ldr	r4, [pc, #224]	@ (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4423      	add	r3, r4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f000 f869 	bl	8002e00 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	b298      	uxth	r0, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	88bb      	ldrh	r3, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	b299      	uxth	r1, r3
 8002d42:	4b2d      	ldr	r3, [pc, #180]	@ (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4c2d      	ldr	r4, [pc, #180]	@ (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4423      	add	r3, r4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	f000 f853 	bl	8002e00 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	4413      	add	r3, r2
 8002d62:	b298      	uxth	r0, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	88bb      	ldrh	r3, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b299      	uxth	r1, r3
 8002d6e:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4c22      	ldr	r4, [pc, #136]	@ (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4423      	add	r3, r4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	f000 f83d 	bl	8002e00 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	b298      	uxth	r0, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	88bb      	ldrh	r3, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	b299      	uxth	r1, r3
 8002d9a:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4c17      	ldr	r4, [pc, #92]	@ (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4423      	add	r3, r4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f000 f827 	bl	8002e00 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da06      	bge.n	8002dc6 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	009a      	lsls	r2, r3, #2
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3306      	adds	r3, #6
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e00a      	b.n	8002ddc <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	009a      	lsls	r2, r3, #2
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	330a      	adds	r3, #10
 8002dd4:	617b      	str	r3, [r7, #20]
      current_y--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	3301      	adds	r3, #1
 8002de0:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	f67f af33 	bls.w	8002c52 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000774 	.word	0x20000774
 8002dfc:	20000778 	.word	0x20000778

08002e00 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	603a      	str	r2, [r7, #0]
 8002e0a:	80fb      	strh	r3, [r7, #6]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e10:	4b1d      	ldr	r3, [pc, #116]	@ (8002e88 <BSP_LCD_DrawPixel+0x88>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1d      	ldr	r2, [pc, #116]	@ (8002e8c <BSP_LCD_DrawPixel+0x8c>)
 8002e16:	2134      	movs	r1, #52	@ 0x34
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3348      	adds	r3, #72	@ 0x48
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d116      	bne.n	8002e54 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002e26:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <BSP_LCD_DrawPixel+0x88>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a18      	ldr	r2, [pc, #96]	@ (8002e8c <BSP_LCD_DrawPixel+0x8c>)
 8002e2c:	2134      	movs	r1, #52	@ 0x34
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	335c      	adds	r3, #92	@ 0x5c
 8002e36:	681c      	ldr	r4, [r3, #0]
 8002e38:	88bd      	ldrh	r5, [r7, #4]
 8002e3a:	f7ff fc53 	bl	80026e4 <BSP_LCD_GetXSize>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	fb03 f205 	mul.w	r2, r3, r5
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	4413      	add	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4423      	add	r3, r4
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002e52:	e015      	b.n	8002e80 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <BSP_LCD_DrawPixel+0x88>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0c      	ldr	r2, [pc, #48]	@ (8002e8c <BSP_LCD_DrawPixel+0x8c>)
 8002e5a:	2134      	movs	r1, #52	@ 0x34
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	335c      	adds	r3, #92	@ 0x5c
 8002e64:	681c      	ldr	r4, [r3, #0]
 8002e66:	88bd      	ldrh	r5, [r7, #4]
 8002e68:	f7ff fc3c 	bl	80026e4 <BSP_LCD_GetXSize>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	fb03 f205 	mul.w	r2, r3, r5
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4423      	add	r3, r4
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bdb0      	pop	{r4, r5, r7, pc}
 8002e88:	20000774 	.word	0x20000774
 8002e8c:	2000068c 	.word	0x2000068c

08002e90 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b08b      	sub	sp, #44	@ 0x2c
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	330a      	adds	r3, #10
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	330b      	adds	r3, #11
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	441a      	add	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	441a      	add	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	330d      	adds	r3, #13
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	061b      	lsls	r3, r3, #24
 8002ed4:	4413      	add	r3, r2
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3312      	adds	r3, #18
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3313      	adds	r3, #19
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	441a      	add	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3314      	adds	r3, #20
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	441a      	add	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3315      	adds	r3, #21
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	061b      	lsls	r3, r3, #24
 8002efc:	4413      	add	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3316      	adds	r3, #22
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3317      	adds	r3, #23
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	441a      	add	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3318      	adds	r3, #24
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	441a      	add	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3319      	adds	r3, #25
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	061b      	lsls	r3, r3, #24
 8002f24:	4413      	add	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	331c      	adds	r3, #28
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	331d      	adds	r3, #29
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	4413      	add	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fec <BSP_LCD_DrawBitmap+0x15c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff0 <BSP_LCD_DrawBitmap+0x160>)
 8002f42:	2134      	movs	r1, #52	@ 0x34
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	335c      	adds	r3, #92	@ 0x5c
 8002f4c:	681c      	ldr	r4, [r3, #0]
 8002f4e:	f7ff fbc9 	bl	80026e4 <BSP_LCD_GetXSize>
 8002f52:	4602      	mov	r2, r0
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	fb03 f202 	mul.w	r2, r3, r2
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4423      	add	r3, r4
 8002f62:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	3b20      	subs	r3, #32
 8002f68:	2b07      	cmp	r3, #7
 8002f6a:	d802      	bhi.n	8002f72 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	e008      	b.n	8002f84 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	3b10      	subs	r3, #16
 8002f76:	2b07      	cmp	r3, #7
 8002f78:	d802      	bhi.n	8002f80 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e001      	b.n	8002f84 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002f80:	2301      	movs	r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	08d2      	lsrs	r2, r2, #3
 8002f92:	fb03 f202 	mul.w	r2, r3, r2
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	4413      	add	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa4:	e018      	b.n	8002fd8 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002fa6:	6a39      	ldr	r1, [r7, #32]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fad9 	bl	8003564 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002fb2:	f7ff fb97 	bl	80026e4 <BSP_LCD_GetXSize>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	6a3a      	ldr	r2, [r7, #32]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	08db      	lsrs	r3, r3, #3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	425b      	negs	r3, r3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d3e2      	bcc.n	8002fa6 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	372c      	adds	r7, #44	@ 0x2c
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000774 	.word	0x20000774
 8002ff0:	2000068c 	.word	0x2000068c

08002ff4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	80fb      	strh	r3, [r7, #6]
 8002ffe:	460b      	mov	r3, r1
 8003000:	80bb      	strh	r3, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003006:	887b      	ldrh	r3, [r7, #2]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	f1c3 0303 	rsb	r3, r3, #3
 800300e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003018:	4b44      	ldr	r3, [pc, #272]	@ (800312c <BSP_LCD_FillCircle+0x138>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4944      	ldr	r1, [pc, #272]	@ (8003130 <BSP_LCD_FillCircle+0x13c>)
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fbf2 	bl	8002814 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003030:	e061      	b.n	80030f6 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d021      	beq.n	800307c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	b29b      	uxth	r3, r3
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	b298      	uxth	r0, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	b29a      	uxth	r2, r3
 8003046:	88bb      	ldrh	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	b299      	uxth	r1, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	b29b      	uxth	r3, r3
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	f7ff fd8b 	bl	8002b70 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	b29b      	uxth	r3, r3
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	b298      	uxth	r0, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	b29b      	uxth	r3, r3
 8003068:	88ba      	ldrh	r2, [r7, #4]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	b299      	uxth	r1, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	b29b      	uxth	r3, r3
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	b29b      	uxth	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	f7ff fd7a 	bl	8002b70 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d021      	beq.n	80030c6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	b29b      	uxth	r3, r3
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	b298      	uxth	r0, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	b29b      	uxth	r3, r3
 8003090:	88ba      	ldrh	r2, [r7, #4]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	b299      	uxth	r1, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	b29b      	uxth	r3, r3
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	b29b      	uxth	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	f7ff fd66 	bl	8002b70 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	88fa      	ldrh	r2, [r7, #6]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	b298      	uxth	r0, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	88bb      	ldrh	r3, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	b299      	uxth	r1, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	b29b      	uxth	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	f7ff fd55 	bl	8002b70 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	da06      	bge.n	80030da <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	009a      	lsls	r2, r3, #2
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	4413      	add	r3, r2
 80030d4:	3306      	adds	r3, #6
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e00a      	b.n	80030f0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	009a      	lsls	r2, r3, #2
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4413      	add	r3, r2
 80030e6:	330a      	adds	r3, #10
 80030e8:	617b      	str	r3, [r7, #20]
      current_y--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	3301      	adds	r3, #1
 80030f4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d999      	bls.n	8003032 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80030fe:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <BSP_LCD_FillCircle+0x138>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	490b      	ldr	r1, [pc, #44]	@ (8003130 <BSP_LCD_FillCircle+0x13c>)
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fb7f 	bl	8002814 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	88b9      	ldrh	r1, [r7, #4]
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fd85 	bl	8002c2c <BSP_LCD_DrawCircle>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000774 	.word	0x20000774
 8003130:	20000778 	.word	0x20000778

08003134 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003138:	4b0a      	ldr	r3, [pc, #40]	@ (8003164 <BSP_LCD_DisplayOn+0x30>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <BSP_LCD_DisplayOn+0x30>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003148:	2201      	movs	r2, #1
 800314a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800314e:	4806      	ldr	r0, [pc, #24]	@ (8003168 <BSP_LCD_DisplayOn+0x34>)
 8003150:	f003 f9d2 	bl	80064f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003154:	2201      	movs	r2, #1
 8003156:	2108      	movs	r1, #8
 8003158:	4804      	ldr	r0, [pc, #16]	@ (800316c <BSP_LCD_DisplayOn+0x38>)
 800315a:	f003 f9cd 	bl	80064f8 <HAL_GPIO_WritePin>
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	2000068c 	.word	0x2000068c
 8003168:	40022000 	.word	0x40022000
 800316c:	40022800 	.word	0x40022800

08003170 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b090      	sub	sp, #64	@ 0x40
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800317a:	4b64      	ldr	r3, [pc, #400]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	4a63      	ldr	r2, [pc, #396]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003180:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003184:	6453      	str	r3, [r2, #68]	@ 0x44
 8003186:	4b61      	ldr	r3, [pc, #388]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800318e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003192:	4b5e      	ldr	r3, [pc, #376]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	4a5d      	ldr	r2, [pc, #372]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003198:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800319c:	6313      	str	r3, [r2, #48]	@ 0x30
 800319e:	4b5b      	ldr	r3, [pc, #364]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031aa:	4b58      	ldr	r3, [pc, #352]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	4a57      	ldr	r2, [pc, #348]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031b0:	f043 0310 	orr.w	r3, r3, #16
 80031b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b6:	4b55      	ldr	r3, [pc, #340]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	623b      	str	r3, [r7, #32]
 80031c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031c2:	4b52      	ldr	r3, [pc, #328]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	4a51      	ldr	r2, [pc, #324]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ce:	4b4f      	ldr	r3, [pc, #316]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80031da:	4b4c      	ldr	r3, [pc, #304]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	4a4b      	ldr	r2, [pc, #300]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e6:	4b49      	ldr	r3, [pc, #292]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80031f2:	4b46      	ldr	r3, [pc, #280]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	4a45      	ldr	r2, [pc, #276]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 80031f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fe:	4b43      	ldr	r3, [pc, #268]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800320a:	4b40      	ldr	r3, [pc, #256]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	4a3f      	ldr	r2, [pc, #252]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003210:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003214:	6313      	str	r3, [r2, #48]	@ 0x30
 8003216:	4b3d      	ldr	r3, [pc, #244]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003222:	4b3a      	ldr	r3, [pc, #232]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	4a39      	ldr	r2, [pc, #228]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800322c:	6313      	str	r3, [r2, #48]	@ 0x30
 800322e:	4b37      	ldr	r3, [pc, #220]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800323a:	4b34      	ldr	r3, [pc, #208]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	4a33      	ldr	r2, [pc, #204]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003240:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003244:	6313      	str	r3, [r2, #48]	@ 0x30
 8003246:	4b31      	ldr	r3, [pc, #196]	@ (800330c <BSP_LCD_MspInit+0x19c>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003252:	2310      	movs	r3, #16
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003256:	2302      	movs	r3, #2
 8003258:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800325e:	2302      	movs	r3, #2
 8003260:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003262:	230e      	movs	r3, #14
 8003264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003266:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800326a:	4619      	mov	r1, r3
 800326c:	4828      	ldr	r0, [pc, #160]	@ (8003310 <BSP_LCD_MspInit+0x1a0>)
 800326e:	f002 fe73 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800327c:	2309      	movs	r3, #9
 800327e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003280:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003284:	4619      	mov	r1, r3
 8003286:	4823      	ldr	r0, [pc, #140]	@ (8003314 <BSP_LCD_MspInit+0x1a4>)
 8003288:	f002 fe66 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800328c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8003290:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003296:	230e      	movs	r3, #14
 8003298:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800329a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800329e:	4619      	mov	r1, r3
 80032a0:	481d      	ldr	r0, [pc, #116]	@ (8003318 <BSP_LCD_MspInit+0x1a8>)
 80032a2:	f002 fe59 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80032a6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032b0:	230e      	movs	r3, #14
 80032b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80032b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032b8:	4619      	mov	r1, r3
 80032ba:	4818      	ldr	r0, [pc, #96]	@ (800331c <BSP_LCD_MspInit+0x1ac>)
 80032bc:	f002 fe4c 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80032c0:	23f7      	movs	r3, #247	@ 0xf7
 80032c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032c8:	230e      	movs	r3, #14
 80032ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80032cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032d0:	4619      	mov	r1, r3
 80032d2:	4813      	ldr	r0, [pc, #76]	@ (8003320 <BSP_LCD_MspInit+0x1b0>)
 80032d4:	f002 fe40 	bl	8005f58 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80032d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80032de:	2301      	movs	r3, #1
 80032e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80032e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032e6:	4619      	mov	r1, r3
 80032e8:	480b      	ldr	r0, [pc, #44]	@ (8003318 <BSP_LCD_MspInit+0x1a8>)
 80032ea:	f002 fe35 	bl	8005f58 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80032ee:	2308      	movs	r3, #8
 80032f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80032f2:	2301      	movs	r3, #1
 80032f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80032f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032fa:	4619      	mov	r1, r3
 80032fc:	4808      	ldr	r0, [pc, #32]	@ (8003320 <BSP_LCD_MspInit+0x1b0>)
 80032fe:	f002 fe2b 	bl	8005f58 <HAL_GPIO_Init>
}
 8003302:	bf00      	nop
 8003304:	3740      	adds	r7, #64	@ 0x40
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40021000 	.word	0x40021000
 8003314:	40021800 	.word	0x40021800
 8003318:	40022000 	.word	0x40022000
 800331c:	40022400 	.word	0x40022400
 8003320:	40022800 	.word	0x40022800

08003324 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800332e:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <BSP_LCD_ClockConfig+0x34>)
 8003330:	2208      	movs	r2, #8
 8003332:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <BSP_LCD_ClockConfig+0x34>)
 8003336:	22c0      	movs	r2, #192	@ 0xc0
 8003338:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800333a:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <BSP_LCD_ClockConfig+0x34>)
 800333c:	2205      	movs	r2, #5
 800333e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <BSP_LCD_ClockConfig+0x34>)
 8003342:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003346:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003348:	4803      	ldr	r0, [pc, #12]	@ (8003358 <BSP_LCD_ClockConfig+0x34>)
 800334a:	f004 ffb1 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000790 	.word	0x20000790

0800335c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	603a      	str	r2, [r7, #0]
 8003366:	80fb      	strh	r3, [r7, #6]
 8003368:	460b      	mov	r3, r1
 800336a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003374:	4b53      	ldr	r3, [pc, #332]	@ (80034c4 <DrawChar+0x168>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4953      	ldr	r1, [pc, #332]	@ (80034c8 <DrawChar+0x16c>)
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	3308      	adds	r3, #8
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	88db      	ldrh	r3, [r3, #6]
 800338a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800338c:	4b4d      	ldr	r3, [pc, #308]	@ (80034c4 <DrawChar+0x168>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	494d      	ldr	r1, [pc, #308]	@ (80034c8 <DrawChar+0x16c>)
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3308      	adds	r3, #8
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	889b      	ldrh	r3, [r3, #4]
 80033a2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80033a4:	8a3b      	ldrh	r3, [r7, #16]
 80033a6:	3307      	adds	r3, #7
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da00      	bge.n	80033ae <DrawChar+0x52>
 80033ac:	3307      	adds	r3, #7
 80033ae:	10db      	asrs	r3, r3, #3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	8a3b      	ldrh	r3, [r7, #16]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	e076      	b.n	80034b2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80033c4:	8a3b      	ldrh	r3, [r7, #16]
 80033c6:	3307      	adds	r3, #7
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da00      	bge.n	80033ce <DrawChar+0x72>
 80033cc:	3307      	adds	r3, #7
 80033ce:	10db      	asrs	r3, r3, #3
 80033d0:	461a      	mov	r2, r3
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80033de:	8a3b      	ldrh	r3, [r7, #16]
 80033e0:	3307      	adds	r3, #7
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da00      	bge.n	80033e8 <DrawChar+0x8c>
 80033e6:	3307      	adds	r3, #7
 80033e8:	10db      	asrs	r3, r3, #3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d002      	beq.n	80033f4 <DrawChar+0x98>
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d004      	beq.n	80033fc <DrawChar+0xa0>
 80033f2:	e00c      	b.n	800340e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	617b      	str	r3, [r7, #20]
      break;
 80033fa:	e016      	b.n	800342a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	3201      	adds	r2, #1
 8003406:	7812      	ldrb	r2, [r2, #0]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
      break;
 800340c:	e00d      	b.n	800342a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	041a      	lsls	r2, r3, #16
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	3301      	adds	r3, #1
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	4313      	orrs	r3, r2
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	3202      	adds	r2, #2
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
      break;
 8003428:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	e036      	b.n	800349e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003430:	8a3a      	ldrh	r2, [r7, #16]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	1ad2      	subs	r2, r2, r3
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	4413      	add	r3, r2
 800343a:	3b01      	subs	r3, #1
 800343c:	2201      	movs	r2, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	461a      	mov	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d012      	beq.n	8003472 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	b29a      	uxth	r2, r3
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	4413      	add	r3, r2
 8003454:	b298      	uxth	r0, r3
 8003456:	4b1b      	ldr	r3, [pc, #108]	@ (80034c4 <DrawChar+0x168>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	491b      	ldr	r1, [pc, #108]	@ (80034c8 <DrawChar+0x16c>)
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	88bb      	ldrh	r3, [r7, #4]
 800346a:	4619      	mov	r1, r3
 800346c:	f7ff fcc8 	bl	8002e00 <BSP_LCD_DrawPixel>
 8003470:	e012      	b.n	8003498 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	b29a      	uxth	r2, r3
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	4413      	add	r3, r2
 800347a:	b298      	uxth	r0, r3
 800347c:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <DrawChar+0x168>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4911      	ldr	r1, [pc, #68]	@ (80034c8 <DrawChar+0x16c>)
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3304      	adds	r3, #4
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	88bb      	ldrh	r3, [r7, #4]
 8003492:	4619      	mov	r1, r3
 8003494:	f7ff fcb4 	bl	8002e00 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	3301      	adds	r3, #1
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	8a3b      	ldrh	r3, [r7, #16]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d3c4      	bcc.n	8003430 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80034a6:	88bb      	ldrh	r3, [r7, #4]
 80034a8:	3301      	adds	r3, #1
 80034aa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	3301      	adds	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	8a7b      	ldrh	r3, [r7, #18]
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d384      	bcc.n	80033c4 <DrawChar+0x68>
  }
}
 80034ba:	bf00      	nop
 80034bc:	bf00      	nop
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000774 	.word	0x20000774
 80034c8:	20000778 	.word	0x20000778

080034cc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80034da:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <LL_FillBuffer+0x88>)
 80034dc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80034e0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80034e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <LL_FillBuffer+0x8c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1d      	ldr	r2, [pc, #116]	@ (800355c <LL_FillBuffer+0x90>)
 80034e8:	2134      	movs	r1, #52	@ 0x34
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3348      	adds	r3, #72	@ 0x48
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d103      	bne.n	8003500 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80034f8:	4b16      	ldr	r3, [pc, #88]	@ (8003554 <LL_FillBuffer+0x88>)
 80034fa:	2202      	movs	r2, #2
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	e002      	b.n	8003506 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003500:	4b14      	ldr	r3, [pc, #80]	@ (8003554 <LL_FillBuffer+0x88>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003506:	4a13      	ldr	r2, [pc, #76]	@ (8003554 <LL_FillBuffer+0x88>)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800350c:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <LL_FillBuffer+0x88>)
 800350e:	4a14      	ldr	r2, [pc, #80]	@ (8003560 <LL_FillBuffer+0x94>)
 8003510:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003512:	4810      	ldr	r0, [pc, #64]	@ (8003554 <LL_FillBuffer+0x88>)
 8003514:	f002 f984 	bl	8005820 <HAL_DMA2D_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d115      	bne.n	800354a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800351e:	68f9      	ldr	r1, [r7, #12]
 8003520:	480c      	ldr	r0, [pc, #48]	@ (8003554 <LL_FillBuffer+0x88>)
 8003522:	f002 fbeb 	bl	8005cfc <HAL_DMA2D_ConfigLayer>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10e      	bne.n	800354a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69f9      	ldr	r1, [r7, #28]
 8003536:	4807      	ldr	r0, [pc, #28]	@ (8003554 <LL_FillBuffer+0x88>)
 8003538:	f002 f9bc 	bl	80058b4 <HAL_DMA2D_Start>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003542:	210a      	movs	r1, #10
 8003544:	4803      	ldr	r0, [pc, #12]	@ (8003554 <LL_FillBuffer+0x88>)
 8003546:	f002 f9e0 	bl	800590a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000734 	.word	0x20000734
 8003558:	20000774 	.word	0x20000774
 800355c:	2000068c 	.word	0x2000068c
 8003560:	4002b000 	.word	0x4002b000

08003564 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003572:	4b1c      	ldr	r3, [pc, #112]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 8003574:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003578:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800357a:	4b1a      	ldr	r3, [pc, #104]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003580:	4b18      	ldr	r3, [pc, #96]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003586:	4b17      	ldr	r3, [pc, #92]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800358c:	4b15      	ldr	r3, [pc, #84]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 800358e:	22ff      	movs	r2, #255	@ 0xff
 8003590:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003592:	4a14      	ldr	r2, [pc, #80]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003598:	4b12      	ldr	r3, [pc, #72]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 800359a:	2200      	movs	r2, #0
 800359c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800359e:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 80035a0:	4a11      	ldr	r2, [pc, #68]	@ (80035e8 <LL_ConvertLineToARGB8888+0x84>)
 80035a2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80035a4:	480f      	ldr	r0, [pc, #60]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 80035a6:	f002 f93b 	bl	8005820 <HAL_DMA2D_Init>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d115      	bne.n	80035dc <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80035b0:	2101      	movs	r1, #1
 80035b2:	480c      	ldr	r0, [pc, #48]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 80035b4:	f002 fba2 	bl	8005cfc <HAL_DMA2D_ConfigLayer>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10e      	bne.n	80035dc <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80035be:	68f9      	ldr	r1, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	2301      	movs	r3, #1
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4806      	ldr	r0, [pc, #24]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 80035ca:	f002 f973 	bl	80058b4 <HAL_DMA2D_Start>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d103      	bne.n	80035dc <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80035d4:	210a      	movs	r1, #10
 80035d6:	4803      	ldr	r0, [pc, #12]	@ (80035e4 <LL_ConvertLineToARGB8888+0x80>)
 80035d8:	f002 f997 	bl	800590a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000734 	.word	0x20000734
 80035e8:	4002b000 	.word	0x4002b000

080035ec <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80035f0:	4b29      	ldr	r3, [pc, #164]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 80035f2:	4a2a      	ldr	r2, [pc, #168]	@ (800369c <BSP_SDRAM_Init+0xb0>)
 80035f4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80035f6:	4b2a      	ldr	r3, [pc, #168]	@ (80036a0 <BSP_SDRAM_Init+0xb4>)
 80035f8:	2202      	movs	r2, #2
 80035fa:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80035fc:	4b28      	ldr	r3, [pc, #160]	@ (80036a0 <BSP_SDRAM_Init+0xb4>)
 80035fe:	2207      	movs	r2, #7
 8003600:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003602:	4b27      	ldr	r3, [pc, #156]	@ (80036a0 <BSP_SDRAM_Init+0xb4>)
 8003604:	2204      	movs	r2, #4
 8003606:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003608:	4b25      	ldr	r3, [pc, #148]	@ (80036a0 <BSP_SDRAM_Init+0xb4>)
 800360a:	2207      	movs	r2, #7
 800360c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800360e:	4b24      	ldr	r3, [pc, #144]	@ (80036a0 <BSP_SDRAM_Init+0xb4>)
 8003610:	2202      	movs	r2, #2
 8003612:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003614:	4b22      	ldr	r3, [pc, #136]	@ (80036a0 <BSP_SDRAM_Init+0xb4>)
 8003616:	2202      	movs	r2, #2
 8003618:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800361a:	4b21      	ldr	r3, [pc, #132]	@ (80036a0 <BSP_SDRAM_Init+0xb4>)
 800361c:	2202      	movs	r2, #2
 800361e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003620:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 8003622:	2200      	movs	r2, #0
 8003624:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003626:	4b1c      	ldr	r3, [pc, #112]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800362c:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 800362e:	2204      	movs	r2, #4
 8003630:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003632:	4b19      	ldr	r3, [pc, #100]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 8003634:	2210      	movs	r2, #16
 8003636:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003638:	4b17      	ldr	r3, [pc, #92]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 800363a:	2240      	movs	r2, #64	@ 0x40
 800363c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800363e:	4b16      	ldr	r3, [pc, #88]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 8003640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003644:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003646:	4b14      	ldr	r3, [pc, #80]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 8003648:	2200      	movs	r2, #0
 800364a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800364c:	4b12      	ldr	r3, [pc, #72]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 800364e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003652:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003654:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 8003656:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800365a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800365c:	4b0e      	ldr	r3, [pc, #56]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 800365e:	2200      	movs	r2, #0
 8003660:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003662:	2100      	movs	r1, #0
 8003664:	480c      	ldr	r0, [pc, #48]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 8003666:	f000 f87f 	bl	8003768 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800366a:	490d      	ldr	r1, [pc, #52]	@ (80036a0 <BSP_SDRAM_Init+0xb4>)
 800366c:	480a      	ldr	r0, [pc, #40]	@ (8003698 <BSP_SDRAM_Init+0xac>)
 800366e:	f005 fde5 	bl	800923c <HAL_SDRAM_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003678:	4b0a      	ldr	r3, [pc, #40]	@ (80036a4 <BSP_SDRAM_Init+0xb8>)
 800367a:	2201      	movs	r2, #1
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	e002      	b.n	8003686 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003680:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <BSP_SDRAM_Init+0xb8>)
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003686:	f240 6003 	movw	r0, #1539	@ 0x603
 800368a:	f000 f80d 	bl	80036a8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800368e:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <BSP_SDRAM_Init+0xb8>)
 8003690:	781b      	ldrb	r3, [r3, #0]
}
 8003692:	4618      	mov	r0, r3
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000814 	.word	0x20000814
 800369c:	a0000140 	.word	0xa0000140
 80036a0:	20000848 	.word	0x20000848
 80036a4:	20000038 	.word	0x20000038

080036a8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80036b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036ba:	4b29      	ldr	r3, [pc, #164]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036bc:	2210      	movs	r2, #16
 80036be:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036c0:	4b27      	ldr	r3, [pc, #156]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80036c6:	4b26      	ldr	r3, [pc, #152]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80036cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036d0:	4923      	ldr	r1, [pc, #140]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036d2:	4824      	ldr	r0, [pc, #144]	@ (8003764 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036d4:	f005 fde6 	bl	80092a4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80036d8:	2001      	movs	r0, #1
 80036da:	f001 f903 	bl	80048e4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80036de:	4b20      	ldr	r3, [pc, #128]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e0:	2202      	movs	r2, #2
 80036e2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e6:	2210      	movs	r2, #16
 80036e8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80036f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80036f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036fa:	4919      	ldr	r1, [pc, #100]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036fc:	4819      	ldr	r0, [pc, #100]	@ (8003764 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036fe:	f005 fdd1 	bl	80092a4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003702:	4b17      	ldr	r3, [pc, #92]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003704:	2203      	movs	r2, #3
 8003706:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003708:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370a:	2210      	movs	r2, #16
 800370c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800370e:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003710:	2208      	movs	r2, #8
 8003712:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003714:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800371a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800371e:	4910      	ldr	r1, [pc, #64]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003720:	4810      	ldr	r0, [pc, #64]	@ (8003764 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003722:	f005 fdbf 	bl	80092a4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003726:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800372a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800372e:	2204      	movs	r2, #4
 8003730:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003732:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003734:	2210      	movs	r2, #16
 8003736:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003738:	4b09      	ldr	r3, [pc, #36]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800373a:	2201      	movs	r2, #1
 800373c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4a07      	ldr	r2, [pc, #28]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003742:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003744:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003748:	4905      	ldr	r1, [pc, #20]	@ (8003760 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374a:	4806      	ldr	r0, [pc, #24]	@ (8003764 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800374c:	f005 fdaa 	bl	80092a4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4804      	ldr	r0, [pc, #16]	@ (8003764 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003754:	f005 fddb 	bl	800930e <HAL_SDRAM_ProgramRefreshRate>
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000864 	.word	0x20000864
 8003764:	20000814 	.word	0x20000814

08003768 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003768:	b580      	push	{r7, lr}
 800376a:	b090      	sub	sp, #64	@ 0x40
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003772:	4b70      	ldr	r3, [pc, #448]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 8003774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003776:	4a6f      	ldr	r2, [pc, #444]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6393      	str	r3, [r2, #56]	@ 0x38
 800377e:	4b6d      	ldr	r3, [pc, #436]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800378a:	4b6a      	ldr	r3, [pc, #424]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	4a69      	ldr	r2, [pc, #420]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 8003790:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003794:	6313      	str	r3, [r2, #48]	@ 0x30
 8003796:	4b67      	ldr	r3, [pc, #412]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037a2:	4b64      	ldr	r3, [pc, #400]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	4a63      	ldr	r2, [pc, #396]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037a8:	f043 0304 	orr.w	r3, r3, #4
 80037ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ae:	4b61      	ldr	r3, [pc, #388]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	4a5d      	ldr	r2, [pc, #372]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037c0:	f043 0308 	orr.w	r3, r3, #8
 80037c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037d2:	4b58      	ldr	r3, [pc, #352]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	4a57      	ldr	r2, [pc, #348]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037d8:	f043 0310 	orr.w	r3, r3, #16
 80037dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037de:	4b55      	ldr	r3, [pc, #340]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037ea:	4b52      	ldr	r3, [pc, #328]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	4a51      	ldr	r2, [pc, #324]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037f0:	f043 0320 	orr.w	r3, r3, #32
 80037f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003802:	4b4c      	ldr	r3, [pc, #304]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	4a4b      	ldr	r2, [pc, #300]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 8003808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800380c:	6313      	str	r3, [r2, #48]	@ 0x30
 800380e:	4b49      	ldr	r3, [pc, #292]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800381a:	4b46      	ldr	r3, [pc, #280]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	4a45      	ldr	r2, [pc, #276]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 8003820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003824:	6313      	str	r3, [r2, #48]	@ 0x30
 8003826:	4b43      	ldr	r3, [pc, #268]	@ (8003934 <BSP_SDRAM_MspInit+0x1cc>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003832:	2302      	movs	r3, #2
 8003834:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003836:	2301      	movs	r3, #1
 8003838:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800383a:	2302      	movs	r3, #2
 800383c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800383e:	230c      	movs	r3, #12
 8003840:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003842:	2308      	movs	r3, #8
 8003844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003846:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800384a:	4619      	mov	r1, r3
 800384c:	483a      	ldr	r0, [pc, #232]	@ (8003938 <BSP_SDRAM_MspInit+0x1d0>)
 800384e:	f002 fb83 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003852:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003858:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800385c:	4619      	mov	r1, r3
 800385e:	4837      	ldr	r0, [pc, #220]	@ (800393c <BSP_SDRAM_MspInit+0x1d4>)
 8003860:	f002 fb7a 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003864:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003868:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800386a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800386e:	4619      	mov	r1, r3
 8003870:	4833      	ldr	r0, [pc, #204]	@ (8003940 <BSP_SDRAM_MspInit+0x1d8>)
 8003872:	f002 fb71 	bl	8005f58 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003876:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800387a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800387c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003880:	4619      	mov	r1, r3
 8003882:	4830      	ldr	r0, [pc, #192]	@ (8003944 <BSP_SDRAM_MspInit+0x1dc>)
 8003884:	f002 fb68 	bl	8005f58 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003888:	f248 1333 	movw	r3, #33075	@ 0x8133
 800388c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800388e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003892:	4619      	mov	r1, r3
 8003894:	482c      	ldr	r0, [pc, #176]	@ (8003948 <BSP_SDRAM_MspInit+0x1e0>)
 8003896:	f002 fb5f 	bl	8005f58 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800389a:	2328      	movs	r3, #40	@ 0x28
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800389e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038a2:	4619      	mov	r1, r3
 80038a4:	4829      	ldr	r0, [pc, #164]	@ (800394c <BSP_SDRAM_MspInit+0x1e4>)
 80038a6:	f002 fb57 	bl	8005f58 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80038aa:	4b29      	ldr	r3, [pc, #164]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80038b0:	4b27      	ldr	r3, [pc, #156]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038b2:	2280      	movs	r2, #128	@ 0x80
 80038b4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80038b6:	4b26      	ldr	r3, [pc, #152]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038bc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80038be:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038c4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038c6:	4b22      	ldr	r3, [pc, #136]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038cc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80038ce:	4b20      	ldr	r3, [pc, #128]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038d4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80038d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038d8:	2200      	movs	r2, #0
 80038da:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80038dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038e2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80038e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80038ea:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038ec:	2203      	movs	r2, #3
 80038ee:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80038f0:	4b17      	ldr	r3, [pc, #92]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80038f6:	4b16      	ldr	r3, [pc, #88]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80038fc:	4b14      	ldr	r3, [pc, #80]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 80038fe:	4a15      	ldr	r2, [pc, #84]	@ (8003954 <BSP_SDRAM_MspInit+0x1ec>)
 8003900:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a12      	ldr	r2, [pc, #72]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
 8003908:	4a11      	ldr	r2, [pc, #68]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800390e:	4810      	ldr	r0, [pc, #64]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 8003910:	f001 fe76 	bl	8005600 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003914:	480e      	ldr	r0, [pc, #56]	@ (8003950 <BSP_SDRAM_MspInit+0x1e8>)
 8003916:	f001 fdc5 	bl	80054a4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800391a:	2200      	movs	r2, #0
 800391c:	210f      	movs	r1, #15
 800391e:	2038      	movs	r0, #56	@ 0x38
 8003920:	f001 fcb6 	bl	8005290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003924:	2038      	movs	r0, #56	@ 0x38
 8003926:	f001 fccf 	bl	80052c8 <HAL_NVIC_EnableIRQ>
}
 800392a:	bf00      	nop
 800392c:	3740      	adds	r7, #64	@ 0x40
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	40020800 	.word	0x40020800
 800393c:	40020c00 	.word	0x40020c00
 8003940:	40021000 	.word	0x40021000
 8003944:	40021400 	.word	0x40021400
 8003948:	40021800 	.word	0x40021800
 800394c:	40021c00 	.word	0x40021c00
 8003950:	20000874 	.word	0x20000874
 8003954:	40026410 	.word	0x40026410

08003958 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	460a      	mov	r2, r1
 8003962:	80fb      	strh	r3, [r7, #6]
 8003964:	4613      	mov	r3, r2
 8003966:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800396c:	4a14      	ldr	r2, [pc, #80]	@ (80039c0 <BSP_TS_Init+0x68>)
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003972:	4a14      	ldr	r2, [pc, #80]	@ (80039c4 <BSP_TS_Init+0x6c>)
 8003974:	88bb      	ldrh	r3, [r7, #4]
 8003976:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003978:	4b13      	ldr	r3, [pc, #76]	@ (80039c8 <BSP_TS_Init+0x70>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2070      	movs	r0, #112	@ 0x70
 800397e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003980:	4b11      	ldr	r3, [pc, #68]	@ (80039c8 <BSP_TS_Init+0x70>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2070      	movs	r0, #112	@ 0x70
 8003986:	4798      	blx	r3
 8003988:	4603      	mov	r3, r0
 800398a:	2b51      	cmp	r3, #81	@ 0x51
 800398c:	d110      	bne.n	80039b0 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800398e:	4b0f      	ldr	r3, [pc, #60]	@ (80039cc <BSP_TS_Init+0x74>)
 8003990:	4a0d      	ldr	r2, [pc, #52]	@ (80039c8 <BSP_TS_Init+0x70>)
 8003992:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003994:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <BSP_TS_Init+0x78>)
 8003996:	2270      	movs	r2, #112	@ 0x70
 8003998:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800399a:	4b0e      	ldr	r3, [pc, #56]	@ (80039d4 <BSP_TS_Init+0x7c>)
 800399c:	2208      	movs	r2, #8
 800399e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <BSP_TS_Init+0x74>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <BSP_TS_Init+0x78>)
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	4610      	mov	r0, r2
 80039ac:	4798      	blx	r3
 80039ae:	e001      	b.n	80039b4 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80039b0:	2303      	movs	r3, #3
 80039b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200008d8 	.word	0x200008d8
 80039c4:	200008da 	.word	0x200008da
 80039c8:	20000000 	.word	0x20000000
 80039cc:	200008d4 	.word	0x200008d4
 80039d0:	200008dd 	.word	0x200008dd
 80039d4:	200008dc 	.word	0x200008dc

080039d8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b097      	sub	sp, #92	@ 0x5c
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80039f2:	4bb8      	ldr	r3, [pc, #736]	@ (8003cd4 <BSP_TS_GetState+0x2fc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	4ab7      	ldr	r2, [pc, #732]	@ (8003cd8 <BSP_TS_GetState+0x300>)
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	4610      	mov	r0, r2
 80039fe:	4798      	blx	r3
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8198 	beq.w	8003d42 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a16:	e187      	b.n	8003d28 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003a18:	4bae      	ldr	r3, [pc, #696]	@ (8003cd4 <BSP_TS_GetState+0x2fc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4aae      	ldr	r2, [pc, #696]	@ (8003cd8 <BSP_TS_GetState+0x300>)
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	4614      	mov	r4, r2
 8003a24:	f107 0120 	add.w	r1, r7, #32
 8003a28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a2a:	0052      	lsls	r2, r2, #1
 8003a2c:	1888      	adds	r0, r1, r2
 8003a2e:	f107 0114 	add.w	r1, r7, #20
 8003a32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a34:	0052      	lsls	r2, r2, #1
 8003a36:	440a      	add	r2, r1
 8003a38:	4601      	mov	r1, r0
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003a3e:	4ba7      	ldr	r3, [pc, #668]	@ (8003cdc <BSP_TS_GetState+0x304>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d117      	bne.n	8003a76 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8003a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	3350      	adds	r3, #80	@ 0x50
 8003a4c:	443b      	add	r3, r7
 8003a4e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	3350      	adds	r3, #80	@ 0x50
 8003a58:	443b      	add	r3, r7
 8003a5a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	3350      	adds	r3, #80	@ 0x50
 8003a64:	443b      	add	r3, r7
 8003a66:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	3350      	adds	r3, #80	@ 0x50
 8003a70:	443b      	add	r3, r7
 8003a72:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003a76:	4b99      	ldr	r3, [pc, #612]	@ (8003cdc <BSP_TS_GetState+0x304>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00e      	beq.n	8003aa0 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8003a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	3350      	adds	r3, #80	@ 0x50
 8003a88:	443b      	add	r3, r7
 8003a8a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003a8e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	3350      	adds	r3, #80	@ 0x50
 8003a9a:	443b      	add	r3, r7
 8003a9c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8003cdc <BSP_TS_GetState+0x304>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00e      	beq.n	8003aca <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8003aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	3350      	adds	r3, #80	@ 0x50
 8003ab2:	443b      	add	r3, r7
 8003ab4:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003ab8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	3350      	adds	r3, #80	@ 0x50
 8003ac4:	443b      	add	r3, r7
 8003ac6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003aca:	4b84      	ldr	r3, [pc, #528]	@ (8003cdc <BSP_TS_GetState+0x304>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d017      	beq.n	8003b06 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8003ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	3350      	adds	r3, #80	@ 0x50
 8003adc:	443b      	add	r3, r7
 8003ade:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	3350      	adds	r3, #80	@ 0x50
 8003ae8:	443b      	add	r3, r7
 8003aea:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	3350      	adds	r3, #80	@ 0x50
 8003af4:	443b      	add	r3, r7
 8003af6:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	3350      	adds	r3, #80	@ 0x50
 8003b00:	443b      	add	r3, r7
 8003b02:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	3350      	adds	r3, #80	@ 0x50
 8003b0c:	443b      	add	r3, r7
 8003b0e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003b12:	4619      	mov	r1, r3
 8003b14:	4a72      	ldr	r2, [pc, #456]	@ (8003ce0 <BSP_TS_GetState+0x308>)
 8003b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	d90d      	bls.n	8003b3c <BSP_TS_GetState+0x164>
 8003b20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	3350      	adds	r3, #80	@ 0x50
 8003b26:	443b      	add	r3, r7
 8003b28:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003b2c:	496c      	ldr	r1, [pc, #432]	@ (8003ce0 <BSP_TS_GetState+0x308>)
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	e00c      	b.n	8003b56 <BSP_TS_GetState+0x17e>
 8003b3c:	4a68      	ldr	r2, [pc, #416]	@ (8003ce0 <BSP_TS_GetState+0x308>)
 8003b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	3350      	adds	r3, #80	@ 0x50
 8003b4c:	443b      	add	r3, r7
 8003b4e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	3350      	adds	r3, #80	@ 0x50
 8003b60:	443b      	add	r3, r7
 8003b62:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003b66:	4619      	mov	r1, r3
 8003b68:	4a5e      	ldr	r2, [pc, #376]	@ (8003ce4 <BSP_TS_GetState+0x30c>)
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b70:	4299      	cmp	r1, r3
 8003b72:	d90d      	bls.n	8003b90 <BSP_TS_GetState+0x1b8>
 8003b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	3350      	adds	r3, #80	@ 0x50
 8003b7a:	443b      	add	r3, r7
 8003b7c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003b80:	4958      	ldr	r1, [pc, #352]	@ (8003ce4 <BSP_TS_GetState+0x30c>)
 8003b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	e00c      	b.n	8003baa <BSP_TS_GetState+0x1d2>
 8003b90:	4a54      	ldr	r2, [pc, #336]	@ (8003ce4 <BSP_TS_GetState+0x30c>)
 8003b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	3350      	adds	r3, #80	@ 0x50
 8003ba0:	443b      	add	r3, r7
 8003ba2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8003bae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003bb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003bb6:	4413      	add	r3, r2
 8003bb8:	2b05      	cmp	r3, #5
 8003bba:	dd15      	ble.n	8003be8 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8003bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	3350      	adds	r3, #80	@ 0x50
 8003bc2:	443b      	add	r3, r7
 8003bc4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4a45      	ldr	r2, [pc, #276]	@ (8003ce0 <BSP_TS_GetState+0x308>)
 8003bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	3350      	adds	r3, #80	@ 0x50
 8003bd8:	443b      	add	r3, r7
 8003bda:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003bde:	4619      	mov	r1, r3
 8003be0:	4a40      	ldr	r2, [pc, #256]	@ (8003ce4 <BSP_TS_GetState+0x30c>)
 8003be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003be4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003be8:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd8 <BSP_TS_GetState+0x300>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b70      	cmp	r3, #112	@ 0x70
 8003bee:	d119      	bne.n	8003c24 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8003bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	3350      	adds	r3, #80	@ 0x50
 8003bf6:	443b      	add	r3, r7
 8003bf8:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	460a      	mov	r2, r1
 8003c06:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	3350      	adds	r3, #80	@ 0x50
 8003c0e:	443b      	add	r3, r7
 8003c10:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c18:	3304      	adds	r3, #4
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	460a      	mov	r2, r1
 8003c20:	809a      	strh	r2, [r3, #4]
 8003c22:	e022      	b.n	8003c6a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003c24:	4b30      	ldr	r3, [pc, #192]	@ (8003ce8 <BSP_TS_GetState+0x310>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce0 <BSP_TS_GetState+0x308>)
 8003c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	0b1b      	lsrs	r3, r3, #12
 8003c38:	b299      	uxth	r1, r3
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	460a      	mov	r2, r1
 8003c44:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003c46:	4b29      	ldr	r3, [pc, #164]	@ (8003cec <BSP_TS_GetState+0x314>)
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4a25      	ldr	r2, [pc, #148]	@ (8003ce4 <BSP_TS_GetState+0x30c>)
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	0b1b      	lsrs	r3, r3, #12
 8003c5a:	b299      	uxth	r1, r3
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c60:	3304      	adds	r3, #4
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	460a      	mov	r2, r1
 8003c68:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <BSP_TS_GetState+0x300>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f107 010c 	add.w	r1, r7, #12
 8003c74:	f107 0210 	add.w	r2, r7, #16
 8003c78:	f107 0308 	add.w	r3, r7, #8
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003c82:	f7fd f95b 	bl	8000f3c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	b2d9      	uxtb	r1, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c8e:	4413      	add	r3, r2
 8003c90:	3316      	adds	r3, #22
 8003c92:	460a      	mov	r2, r1
 8003c94:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	b2d9      	uxtb	r1, r3
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3320      	adds	r3, #32
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d836      	bhi.n	8003d1a <BSP_TS_GetState+0x342>
 8003cac:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <BSP_TS_GetState+0x2dc>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003cf1 	.word	0x08003cf1
 8003cbc:	08003cff 	.word	0x08003cff
 8003cc0:	08003d0d 	.word	0x08003d0d
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cc8:	4413      	add	r3, r2
 8003cca:	331b      	adds	r3, #27
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
          break;
 8003cd0:	e027      	b.n	8003d22 <BSP_TS_GetState+0x34a>
 8003cd2:	bf00      	nop
 8003cd4:	200008d4 	.word	0x200008d4
 8003cd8:	200008dd 	.word	0x200008dd
 8003cdc:	200008dc 	.word	0x200008dc
 8003ce0:	200008e0 	.word	0x200008e0
 8003ce4:	200008f4 	.word	0x200008f4
 8003ce8:	200008d8 	.word	0x200008d8
 8003cec:	200008da 	.word	0x200008da
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf4:	4413      	add	r3, r2
 8003cf6:	331b      	adds	r3, #27
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	701a      	strb	r2, [r3, #0]
          break;
 8003cfc:	e011      	b.n	8003d22 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d02:	4413      	add	r3, r2
 8003d04:	331b      	adds	r3, #27
 8003d06:	2203      	movs	r2, #3
 8003d08:	701a      	strb	r2, [r3, #0]
          break;
 8003d0a:	e00a      	b.n	8003d22 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d10:	4413      	add	r3, r2
 8003d12:	331b      	adds	r3, #27
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
          break;
 8003d18:	e003      	b.n	8003d22 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8003d20:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d24:	3301      	adds	r3, #1
 8003d26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d30:	4293      	cmp	r3, r2
 8003d32:	f4ff ae71 	bcc.w	8003a18 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f80a 	bl	8003d50 <BSP_TS_Get_GestureId>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003d42:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3754      	adds	r7, #84	@ 0x54
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd90      	pop	{r4, r7, pc}
 8003d4e:	bf00      	nop

08003d50 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003d60:	4b3b      	ldr	r3, [pc, #236]	@ (8003e50 <BSP_TS_Get_GestureId+0x100>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	f107 0308 	add.w	r3, r7, #8
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f7fd f8cc 	bl	8000f0a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b49      	cmp	r3, #73	@ 0x49
 8003d76:	d05e      	beq.n	8003e36 <BSP_TS_Get_GestureId+0xe6>
 8003d78:	2b49      	cmp	r3, #73	@ 0x49
 8003d7a:	d860      	bhi.n	8003e3e <BSP_TS_Get_GestureId+0xee>
 8003d7c:	2b1c      	cmp	r3, #28
 8003d7e:	d83f      	bhi.n	8003e00 <BSP_TS_Get_GestureId+0xb0>
 8003d80:	2b1c      	cmp	r3, #28
 8003d82:	d85c      	bhi.n	8003e3e <BSP_TS_Get_GestureId+0xee>
 8003d84:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <BSP_TS_Get_GestureId+0x3c>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003e07 	.word	0x08003e07
 8003d90:	08003e3f 	.word	0x08003e3f
 8003d94:	08003e3f 	.word	0x08003e3f
 8003d98:	08003e3f 	.word	0x08003e3f
 8003d9c:	08003e3f 	.word	0x08003e3f
 8003da0:	08003e3f 	.word	0x08003e3f
 8003da4:	08003e3f 	.word	0x08003e3f
 8003da8:	08003e3f 	.word	0x08003e3f
 8003dac:	08003e3f 	.word	0x08003e3f
 8003db0:	08003e3f 	.word	0x08003e3f
 8003db4:	08003e3f 	.word	0x08003e3f
 8003db8:	08003e3f 	.word	0x08003e3f
 8003dbc:	08003e3f 	.word	0x08003e3f
 8003dc0:	08003e3f 	.word	0x08003e3f
 8003dc4:	08003e3f 	.word	0x08003e3f
 8003dc8:	08003e3f 	.word	0x08003e3f
 8003dcc:	08003e0f 	.word	0x08003e0f
 8003dd0:	08003e3f 	.word	0x08003e3f
 8003dd4:	08003e3f 	.word	0x08003e3f
 8003dd8:	08003e3f 	.word	0x08003e3f
 8003ddc:	08003e17 	.word	0x08003e17
 8003de0:	08003e3f 	.word	0x08003e3f
 8003de4:	08003e3f 	.word	0x08003e3f
 8003de8:	08003e3f 	.word	0x08003e3f
 8003dec:	08003e1f 	.word	0x08003e1f
 8003df0:	08003e3f 	.word	0x08003e3f
 8003df4:	08003e3f 	.word	0x08003e3f
 8003df8:	08003e3f 	.word	0x08003e3f
 8003dfc:	08003e27 	.word	0x08003e27
 8003e00:	2b40      	cmp	r3, #64	@ 0x40
 8003e02:	d014      	beq.n	8003e2e <BSP_TS_Get_GestureId+0xde>
 8003e04:	e01b      	b.n	8003e3e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003e0c:	e01a      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003e14:	e016      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003e1c:	e012      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2203      	movs	r2, #3
 8003e22:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003e24:	e00e      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2204      	movs	r2, #4
 8003e2a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003e2c:	e00a      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2205      	movs	r2, #5
 8003e32:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003e34:	e006      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2206      	movs	r2, #6
 8003e3a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003e3c:	e002      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
      break;
 8003e42:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200008dd 	.word	0x200008dd

08003e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	4a10      	ldr	r2, [pc, #64]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	210f      	movs	r1, #15
 8003e8e:	f06f 0001 	mvn.w	r0, #1
 8003e92:	f001 f9fd 	bl	8005290 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08e      	sub	sp, #56	@ 0x38
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003eb4:	4b33      	ldr	r3, [pc, #204]	@ (8003f84 <HAL_InitTick+0xe0>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	4a32      	ldr	r2, [pc, #200]	@ (8003f84 <HAL_InitTick+0xe0>)
 8003eba:	f043 0310 	orr.w	r3, r3, #16
 8003ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec0:	4b30      	ldr	r3, [pc, #192]	@ (8003f84 <HAL_InitTick+0xe0>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ecc:	f107 0210 	add.w	r2, r7, #16
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 f9b8 	bl	800824c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ee6:	f004 f989 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 8003eea:	6378      	str	r0, [r7, #52]	@ 0x34
 8003eec:	e004      	b.n	8003ef8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003eee:	f004 f985 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efa:	4a23      	ldr	r2, [pc, #140]	@ (8003f88 <HAL_InitTick+0xe4>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	0c9b      	lsrs	r3, r3, #18
 8003f02:	3b01      	subs	r3, #1
 8003f04:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003f06:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <HAL_InitTick+0xe8>)
 8003f08:	4a21      	ldr	r2, [pc, #132]	@ (8003f90 <HAL_InitTick+0xec>)
 8003f0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f8c <HAL_InitTick+0xe8>)
 8003f0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003f14:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <HAL_InitTick+0xe8>)
 8003f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f8c <HAL_InitTick+0xe8>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f20:	4b1a      	ldr	r3, [pc, #104]	@ (8003f8c <HAL_InitTick+0xe8>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f26:	4b19      	ldr	r3, [pc, #100]	@ (8003f8c <HAL_InitTick+0xe8>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003f2c:	4817      	ldr	r0, [pc, #92]	@ (8003f8c <HAL_InitTick+0xe8>)
 8003f2e:	f005 fac1 	bl	80094b4 <HAL_TIM_Base_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003f38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d11b      	bne.n	8003f78 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003f40:	4812      	ldr	r0, [pc, #72]	@ (8003f8c <HAL_InitTick+0xe8>)
 8003f42:	f005 fb0f 	bl	8009564 <HAL_TIM_Base_Start_IT>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003f4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d111      	bne.n	8003f78 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f54:	2036      	movs	r0, #54	@ 0x36
 8003f56:	f001 f9b7 	bl	80052c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	d808      	bhi.n	8003f72 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003f60:	2200      	movs	r2, #0
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	2036      	movs	r0, #54	@ 0x36
 8003f66:	f001 f993 	bl	8005290 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f94 <HAL_InitTick+0xf0>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e002      	b.n	8003f78 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003f78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3738      	adds	r7, #56	@ 0x38
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40023800 	.word	0x40023800
 8003f88:	431bde83 	.word	0x431bde83
 8003f8c:	20000908 	.word	0x20000908
 8003f90:	40001000 	.word	0x40001000
 8003f94:	20000040 	.word	0x20000040

08003f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f9c:	bf00      	nop
 8003f9e:	e7fd      	b.n	8003f9c <NMI_Handler+0x4>

08003fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fa4:	bf00      	nop
 8003fa6:	e7fd      	b.n	8003fa4 <HardFault_Handler+0x4>

08003fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fac:	bf00      	nop
 8003fae:	e7fd      	b.n	8003fac <MemManage_Handler+0x4>

08003fb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fb4:	bf00      	nop
 8003fb6:	e7fd      	b.n	8003fb4 <BusFault_Handler+0x4>

08003fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fbc:	bf00      	nop
 8003fbe:	e7fd      	b.n	8003fbc <UsageFault_Handler+0x4>

08003fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003fd4:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <TIM6_DAC_IRQHandler+0x20>)
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003fde:	4804      	ldr	r0, [pc, #16]	@ (8003ff0 <TIM6_DAC_IRQHandler+0x20>)
 8003fe0:	f001 f9a2 	bl	8005328 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003fe4:	4803      	ldr	r0, [pc, #12]	@ (8003ff4 <TIM6_DAC_IRQHandler+0x24>)
 8003fe6:	f005 fb35 	bl	8009654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000148 	.word	0x20000148
 8003ff4:	20000908 	.word	0x20000908

08003ff8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003ffc:	4802      	ldr	r0, [pc, #8]	@ (8004008 <LTDC_IRQHandler+0x10>)
 8003ffe:	f003 f993 	bl	8007328 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200004dc 	.word	0x200004dc

0800400c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004010:	4802      	ldr	r0, [pc, #8]	@ (800401c <DMA2D_IRQHandler+0x10>)
 8004012:	f001 fd63 	bl	8005adc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	2000015c 	.word	0x2000015c

08004020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004028:	4a14      	ldr	r2, [pc, #80]	@ (800407c <_sbrk+0x5c>)
 800402a:	4b15      	ldr	r3, [pc, #84]	@ (8004080 <_sbrk+0x60>)
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004034:	4b13      	ldr	r3, [pc, #76]	@ (8004084 <_sbrk+0x64>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800403c:	4b11      	ldr	r3, [pc, #68]	@ (8004084 <_sbrk+0x64>)
 800403e:	4a12      	ldr	r2, [pc, #72]	@ (8004088 <_sbrk+0x68>)
 8004040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004042:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <_sbrk+0x64>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	429a      	cmp	r2, r3
 800404e:	d207      	bcs.n	8004060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004050:	f007 fece 	bl	800bdf0 <__errno>
 8004054:	4603      	mov	r3, r0
 8004056:	220c      	movs	r2, #12
 8004058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800405e:	e009      	b.n	8004074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004060:	4b08      	ldr	r3, [pc, #32]	@ (8004084 <_sbrk+0x64>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004066:	4b07      	ldr	r3, [pc, #28]	@ (8004084 <_sbrk+0x64>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	4a05      	ldr	r2, [pc, #20]	@ (8004084 <_sbrk+0x64>)
 8004070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20050000 	.word	0x20050000
 8004080:	00000400 	.word	0x00000400
 8004084:	20000954 	.word	0x20000954
 8004088:	20004b08 	.word	0x20004b08

0800408c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <SystemInit+0x20>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004096:	4a05      	ldr	r2, [pc, #20]	@ (80040ac <SystemInit+0x20>)
 8004098:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800409c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040b6:	f107 0310 	add.w	r3, r7, #16
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040ce:	4b20      	ldr	r3, [pc, #128]	@ (8004150 <MX_TIM1_Init+0xa0>)
 80040d0:	4a20      	ldr	r2, [pc, #128]	@ (8004154 <MX_TIM1_Init+0xa4>)
 80040d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80040d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004150 <MX_TIM1_Init+0xa0>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040da:	4b1d      	ldr	r3, [pc, #116]	@ (8004150 <MX_TIM1_Init+0xa0>)
 80040dc:	2200      	movs	r2, #0
 80040de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80040e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004150 <MX_TIM1_Init+0xa0>)
 80040e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e8:	4b19      	ldr	r3, [pc, #100]	@ (8004150 <MX_TIM1_Init+0xa0>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80040ee:	4b18      	ldr	r3, [pc, #96]	@ (8004150 <MX_TIM1_Init+0xa0>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f4:	4b16      	ldr	r3, [pc, #88]	@ (8004150 <MX_TIM1_Init+0xa0>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80040fa:	4815      	ldr	r0, [pc, #84]	@ (8004150 <MX_TIM1_Init+0xa0>)
 80040fc:	f005 f9da 	bl	80094b4 <HAL_TIM_Base_Init>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004106:	f7fd ff61 	bl	8001fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800410a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800410e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004110:	f107 0310 	add.w	r3, r7, #16
 8004114:	4619      	mov	r1, r3
 8004116:	480e      	ldr	r0, [pc, #56]	@ (8004150 <MX_TIM1_Init+0xa0>)
 8004118:	f005 fbbc 	bl	8009894 <HAL_TIM_ConfigClockSource>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004122:	f7fd ff53 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4806      	ldr	r0, [pc, #24]	@ (8004150 <MX_TIM1_Init+0xa0>)
 8004138:	f005 fdd8 	bl	8009cec <HAL_TIMEx_MasterConfigSynchronization>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004142:	f7fd ff43 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004146:	bf00      	nop
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000958 	.word	0x20000958
 8004154:	40010000 	.word	0x40010000

08004158 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800415e:	f107 0310 	add.w	r3, r7, #16
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004176:	4b1e      	ldr	r3, [pc, #120]	@ (80041f0 <MX_TIM2_Init+0x98>)
 8004178:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800417c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800417e:	4b1c      	ldr	r3, [pc, #112]	@ (80041f0 <MX_TIM2_Init+0x98>)
 8004180:	2200      	movs	r2, #0
 8004182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004184:	4b1a      	ldr	r3, [pc, #104]	@ (80041f0 <MX_TIM2_Init+0x98>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800418a:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <MX_TIM2_Init+0x98>)
 800418c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004190:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004192:	4b17      	ldr	r3, [pc, #92]	@ (80041f0 <MX_TIM2_Init+0x98>)
 8004194:	2200      	movs	r2, #0
 8004196:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004198:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <MX_TIM2_Init+0x98>)
 800419a:	2200      	movs	r2, #0
 800419c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800419e:	4814      	ldr	r0, [pc, #80]	@ (80041f0 <MX_TIM2_Init+0x98>)
 80041a0:	f005 f988 	bl	80094b4 <HAL_TIM_Base_Init>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80041aa:	f7fd ff0f 	bl	8001fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041b4:	f107 0310 	add.w	r3, r7, #16
 80041b8:	4619      	mov	r1, r3
 80041ba:	480d      	ldr	r0, [pc, #52]	@ (80041f0 <MX_TIM2_Init+0x98>)
 80041bc:	f005 fb6a 	bl	8009894 <HAL_TIM_ConfigClockSource>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80041c6:	f7fd ff01 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041d2:	1d3b      	adds	r3, r7, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4806      	ldr	r0, [pc, #24]	@ (80041f0 <MX_TIM2_Init+0x98>)
 80041d8:	f005 fd88 	bl	8009cec <HAL_TIMEx_MasterConfigSynchronization>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80041e2:	f7fd fef3 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80041e6:	bf00      	nop
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200009a4 	.word	0x200009a4

080041f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041fa:	f107 0310 	add.w	r3, r7, #16
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004212:	4b1d      	ldr	r3, [pc, #116]	@ (8004288 <MX_TIM3_Init+0x94>)
 8004214:	4a1d      	ldr	r2, [pc, #116]	@ (800428c <MX_TIM3_Init+0x98>)
 8004216:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004218:	4b1b      	ldr	r3, [pc, #108]	@ (8004288 <MX_TIM3_Init+0x94>)
 800421a:	2200      	movs	r2, #0
 800421c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800421e:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <MX_TIM3_Init+0x94>)
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004224:	4b18      	ldr	r3, [pc, #96]	@ (8004288 <MX_TIM3_Init+0x94>)
 8004226:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800422a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800422c:	4b16      	ldr	r3, [pc, #88]	@ (8004288 <MX_TIM3_Init+0x94>)
 800422e:	2200      	movs	r2, #0
 8004230:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004232:	4b15      	ldr	r3, [pc, #84]	@ (8004288 <MX_TIM3_Init+0x94>)
 8004234:	2200      	movs	r2, #0
 8004236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004238:	4813      	ldr	r0, [pc, #76]	@ (8004288 <MX_TIM3_Init+0x94>)
 800423a:	f005 f93b 	bl	80094b4 <HAL_TIM_Base_Init>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004244:	f7fd fec2 	bl	8001fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800424c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800424e:	f107 0310 	add.w	r3, r7, #16
 8004252:	4619      	mov	r1, r3
 8004254:	480c      	ldr	r0, [pc, #48]	@ (8004288 <MX_TIM3_Init+0x94>)
 8004256:	f005 fb1d 	bl	8009894 <HAL_TIM_ConfigClockSource>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004260:	f7fd feb4 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004264:	2300      	movs	r3, #0
 8004266:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4805      	ldr	r0, [pc, #20]	@ (8004288 <MX_TIM3_Init+0x94>)
 8004272:	f005 fd3b 	bl	8009cec <HAL_TIMEx_MasterConfigSynchronization>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800427c:	f7fd fea6 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004280:	bf00      	nop
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	200009f0 	.word	0x200009f0
 800428c:	40000400 	.word	0x40000400

08004290 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004296:	f107 0310 	add.w	r3, r7, #16
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	609a      	str	r2, [r3, #8]
 80042a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042a4:	1d3b      	adds	r3, r7, #4
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	605a      	str	r2, [r3, #4]
 80042ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80042ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004324 <MX_TIM5_Init+0x94>)
 80042b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004328 <MX_TIM5_Init+0x98>)
 80042b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80042b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004324 <MX_TIM5_Init+0x94>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004324 <MX_TIM5_Init+0x94>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80042c0:	4b18      	ldr	r3, [pc, #96]	@ (8004324 <MX_TIM5_Init+0x94>)
 80042c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c8:	4b16      	ldr	r3, [pc, #88]	@ (8004324 <MX_TIM5_Init+0x94>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ce:	4b15      	ldr	r3, [pc, #84]	@ (8004324 <MX_TIM5_Init+0x94>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80042d4:	4813      	ldr	r0, [pc, #76]	@ (8004324 <MX_TIM5_Init+0x94>)
 80042d6:	f005 f8ed 	bl	80094b4 <HAL_TIM_Base_Init>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80042e0:	f7fd fe74 	bl	8001fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80042ea:	f107 0310 	add.w	r3, r7, #16
 80042ee:	4619      	mov	r1, r3
 80042f0:	480c      	ldr	r0, [pc, #48]	@ (8004324 <MX_TIM5_Init+0x94>)
 80042f2:	f005 facf 	bl	8009894 <HAL_TIM_ConfigClockSource>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80042fc:	f7fd fe66 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004300:	2300      	movs	r3, #0
 8004302:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004308:	1d3b      	adds	r3, r7, #4
 800430a:	4619      	mov	r1, r3
 800430c:	4805      	ldr	r0, [pc, #20]	@ (8004324 <MX_TIM5_Init+0x94>)
 800430e:	f005 fced 	bl	8009cec <HAL_TIMEx_MasterConfigSynchronization>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004318:	f7fd fe58 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800431c:	bf00      	nop
 800431e:	3720      	adds	r7, #32
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000a3c 	.word	0x20000a3c
 8004328:	40000c00 	.word	0x40000c00

0800432c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004332:	f107 0310 	add.w	r3, r7, #16
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	609a      	str	r2, [r3, #8]
 800433e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004340:	1d3b      	adds	r3, r7, #4
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800434a:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <MX_TIM8_Init+0xa0>)
 800434c:	4a20      	ldr	r2, [pc, #128]	@ (80043d0 <MX_TIM8_Init+0xa4>)
 800434e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004350:	4b1e      	ldr	r3, [pc, #120]	@ (80043cc <MX_TIM8_Init+0xa0>)
 8004352:	2200      	movs	r2, #0
 8004354:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004356:	4b1d      	ldr	r3, [pc, #116]	@ (80043cc <MX_TIM8_Init+0xa0>)
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800435c:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <MX_TIM8_Init+0xa0>)
 800435e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004362:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004364:	4b19      	ldr	r3, [pc, #100]	@ (80043cc <MX_TIM8_Init+0xa0>)
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800436a:	4b18      	ldr	r3, [pc, #96]	@ (80043cc <MX_TIM8_Init+0xa0>)
 800436c:	2200      	movs	r2, #0
 800436e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004370:	4b16      	ldr	r3, [pc, #88]	@ (80043cc <MX_TIM8_Init+0xa0>)
 8004372:	2200      	movs	r2, #0
 8004374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004376:	4815      	ldr	r0, [pc, #84]	@ (80043cc <MX_TIM8_Init+0xa0>)
 8004378:	f005 f89c 	bl	80094b4 <HAL_TIM_Base_Init>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8004382:	f7fd fe23 	bl	8001fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800438a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800438c:	f107 0310 	add.w	r3, r7, #16
 8004390:	4619      	mov	r1, r3
 8004392:	480e      	ldr	r0, [pc, #56]	@ (80043cc <MX_TIM8_Init+0xa0>)
 8004394:	f005 fa7e 	bl	8009894 <HAL_TIM_ConfigClockSource>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800439e:	f7fd fe15 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4806      	ldr	r0, [pc, #24]	@ (80043cc <MX_TIM8_Init+0xa0>)
 80043b4:	f005 fc9a 	bl	8009cec <HAL_TIMEx_MasterConfigSynchronization>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80043be:	f7fd fe05 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80043c2:	bf00      	nop
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000a88 	.word	0x20000a88
 80043d0:	40010400 	.word	0x40010400

080043d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08e      	sub	sp, #56	@ 0x38
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a3b      	ldr	r2, [pc, #236]	@ (80044e0 <HAL_TIM_Base_MspInit+0x10c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10c      	bne.n	8004410 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043f6:	4b3b      	ldr	r3, [pc, #236]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fa:	4a3a      	ldr	r2, [pc, #232]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6453      	str	r3, [r2, #68]	@ 0x44
 8004402:	4b38      	ldr	r3, [pc, #224]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	623b      	str	r3, [r7, #32]
 800440c:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800440e:	e062      	b.n	80044d6 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004418:	d10c      	bne.n	8004434 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800441a:	4b32      	ldr	r3, [pc, #200]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	4a31      	ldr	r2, [pc, #196]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6413      	str	r3, [r2, #64]	@ 0x40
 8004426:	4b2f      	ldr	r3, [pc, #188]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	69fb      	ldr	r3, [r7, #28]
}
 8004432:	e050      	b.n	80044d6 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2b      	ldr	r2, [pc, #172]	@ (80044e8 <HAL_TIM_Base_MspInit+0x114>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10c      	bne.n	8004458 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800443e:	4b29      	ldr	r3, [pc, #164]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	4a28      	ldr	r2, [pc, #160]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 8004444:	f043 0302 	orr.w	r3, r3, #2
 8004448:	6413      	str	r3, [r2, #64]	@ 0x40
 800444a:	4b26      	ldr	r3, [pc, #152]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	69bb      	ldr	r3, [r7, #24]
}
 8004456:	e03e      	b.n	80044d6 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a23      	ldr	r2, [pc, #140]	@ (80044ec <HAL_TIM_Base_MspInit+0x118>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10c      	bne.n	800447c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004462:	4b20      	ldr	r3, [pc, #128]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	4a1f      	ldr	r2, [pc, #124]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 8004468:	f043 0308 	orr.w	r3, r3, #8
 800446c:	6413      	str	r3, [r2, #64]	@ 0x40
 800446e:	4b1d      	ldr	r3, [pc, #116]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697b      	ldr	r3, [r7, #20]
}
 800447a:	e02c      	b.n	80044d6 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <HAL_TIM_Base_MspInit+0x11c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d127      	bne.n	80044d6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004486:	4b17      	ldr	r3, [pc, #92]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	4a16      	ldr	r2, [pc, #88]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 800448c:	f043 0302 	orr.w	r3, r3, #2
 8004490:	6453      	str	r3, [r2, #68]	@ 0x44
 8004492:	4b14      	ldr	r3, [pc, #80]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800449e:	4b11      	ldr	r3, [pc, #68]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	4a10      	ldr	r2, [pc, #64]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044aa:	4b0e      	ldr	r3, [pc, #56]	@ (80044e4 <HAL_TIM_Base_MspInit+0x110>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044b6:	2304      	movs	r3, #4
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ba:	2302      	movs	r3, #2
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c2:	2300      	movs	r3, #0
 80044c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80044c6:	2303      	movs	r3, #3
 80044c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80044ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044ce:	4619      	mov	r1, r3
 80044d0:	4808      	ldr	r0, [pc, #32]	@ (80044f4 <HAL_TIM_Base_MspInit+0x120>)
 80044d2:	f001 fd41 	bl	8005f58 <HAL_GPIO_Init>
}
 80044d6:	bf00      	nop
 80044d8:	3738      	adds	r7, #56	@ 0x38
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40010000 	.word	0x40010000
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000c00 	.word	0x40000c00
 80044f0:	40010400 	.word	0x40010400
 80044f4:	40022000 	.word	0x40022000

080044f8 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80044fc:	4b14      	ldr	r3, [pc, #80]	@ (8004550 <MX_UART7_Init+0x58>)
 80044fe:	4a15      	ldr	r2, [pc, #84]	@ (8004554 <MX_UART7_Init+0x5c>)
 8004500:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004502:	4b13      	ldr	r3, [pc, #76]	@ (8004550 <MX_UART7_Init+0x58>)
 8004504:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004508:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800450a:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <MX_UART7_Init+0x58>)
 800450c:	2200      	movs	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004510:	4b0f      	ldr	r3, [pc, #60]	@ (8004550 <MX_UART7_Init+0x58>)
 8004512:	2200      	movs	r2, #0
 8004514:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004516:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <MX_UART7_Init+0x58>)
 8004518:	2200      	movs	r2, #0
 800451a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800451c:	4b0c      	ldr	r3, [pc, #48]	@ (8004550 <MX_UART7_Init+0x58>)
 800451e:	220c      	movs	r2, #12
 8004520:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004522:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <MX_UART7_Init+0x58>)
 8004524:	2200      	movs	r2, #0
 8004526:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004528:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <MX_UART7_Init+0x58>)
 800452a:	2200      	movs	r2, #0
 800452c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800452e:	4b08      	ldr	r3, [pc, #32]	@ (8004550 <MX_UART7_Init+0x58>)
 8004530:	2200      	movs	r2, #0
 8004532:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004534:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <MX_UART7_Init+0x58>)
 8004536:	2200      	movs	r2, #0
 8004538:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800453a:	4805      	ldr	r0, [pc, #20]	@ (8004550 <MX_UART7_Init+0x58>)
 800453c:	f005 fc82 	bl	8009e44 <HAL_UART_Init>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004546:	f7fd fd41 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000ad4 	.word	0x20000ad4
 8004554:	40007800 	.word	0x40007800

08004558 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800455c:	4b14      	ldr	r3, [pc, #80]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 800455e:	4a15      	ldr	r2, [pc, #84]	@ (80045b4 <MX_USART1_UART_Init+0x5c>)
 8004560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004562:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 8004564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800456a:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 800456c:	2200      	movs	r2, #0
 800456e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004570:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 8004572:	2200      	movs	r2, #0
 8004574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004576:	4b0e      	ldr	r3, [pc, #56]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 8004578:	2200      	movs	r2, #0
 800457a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800457c:	4b0c      	ldr	r3, [pc, #48]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 800457e:	220c      	movs	r2, #12
 8004580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004582:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 8004584:	2200      	movs	r2, #0
 8004586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004588:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 800458a:	2200      	movs	r2, #0
 800458c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800458e:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 8004590:	2200      	movs	r2, #0
 8004592:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004594:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 8004596:	2200      	movs	r2, #0
 8004598:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800459a:	4805      	ldr	r0, [pc, #20]	@ (80045b0 <MX_USART1_UART_Init+0x58>)
 800459c:	f005 fc52 	bl	8009e44 <HAL_UART_Init>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80045a6:	f7fd fd11 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000b5c 	.word	0x20000b5c
 80045b4:	40011000 	.word	0x40011000

080045b8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80045bc:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045be:	4a15      	ldr	r2, [pc, #84]	@ (8004614 <MX_USART6_UART_Init+0x5c>)
 80045c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80045c2:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80045c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80045ca:	4b11      	ldr	r3, [pc, #68]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80045d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045de:	220c      	movs	r2, #12
 80045e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e8:	4b09      	ldr	r3, [pc, #36]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045ee:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045f4:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80045fa:	4805      	ldr	r0, [pc, #20]	@ (8004610 <MX_USART6_UART_Init+0x58>)
 80045fc:	f005 fc22 	bl	8009e44 <HAL_UART_Init>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004606:	f7fd fce1 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000be4 	.word	0x20000be4
 8004614:	40011400 	.word	0x40011400

08004618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b0b0      	sub	sp, #192	@ 0xc0
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004620:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004630:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004634:	2284      	movs	r2, #132	@ 0x84
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f007 fbd1 	bl	800bde0 <memset>
  if(uartHandle->Instance==UART7)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a75      	ldr	r2, [pc, #468]	@ (8004818 <HAL_UART_MspInit+0x200>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d13d      	bne.n	80046c4 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800464c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800464e:	2300      	movs	r3, #0
 8004650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004654:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004658:	4618      	mov	r0, r3
 800465a:	f003 fe29 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004664:	f7fd fcb2 	bl	8001fcc <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004668:	4b6c      	ldr	r3, [pc, #432]	@ (800481c <HAL_UART_MspInit+0x204>)
 800466a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466c:	4a6b      	ldr	r2, [pc, #428]	@ (800481c <HAL_UART_MspInit+0x204>)
 800466e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004672:	6413      	str	r3, [r2, #64]	@ 0x40
 8004674:	4b69      	ldr	r3, [pc, #420]	@ (800481c <HAL_UART_MspInit+0x204>)
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004680:	4b66      	ldr	r3, [pc, #408]	@ (800481c <HAL_UART_MspInit+0x204>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	4a65      	ldr	r2, [pc, #404]	@ (800481c <HAL_UART_MspInit+0x204>)
 8004686:	f043 0320 	orr.w	r3, r3, #32
 800468a:	6313      	str	r3, [r2, #48]	@ 0x30
 800468c:	4b63      	ldr	r3, [pc, #396]	@ (800481c <HAL_UART_MspInit+0x204>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	623b      	str	r3, [r7, #32]
 8004696:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004698:	23c0      	movs	r3, #192	@ 0xc0
 800469a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469e:	2302      	movs	r3, #2
 80046a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046aa:	2303      	movs	r3, #3
 80046ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80046b0:	2308      	movs	r3, #8
 80046b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046b6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80046ba:	4619      	mov	r1, r3
 80046bc:	4858      	ldr	r0, [pc, #352]	@ (8004820 <HAL_UART_MspInit+0x208>)
 80046be:	f001 fc4b 	bl	8005f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80046c2:	e0a4      	b.n	800480e <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a56      	ldr	r2, [pc, #344]	@ (8004824 <HAL_UART_MspInit+0x20c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d15d      	bne.n	800478a <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80046ce:	2340      	movs	r3, #64	@ 0x40
 80046d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80046d2:	2300      	movs	r3, #0
 80046d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80046da:	4618      	mov	r0, r3
 80046dc:	f003 fde8 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80046e6:	f7fd fc71 	bl	8001fcc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80046ea:	4b4c      	ldr	r3, [pc, #304]	@ (800481c <HAL_UART_MspInit+0x204>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	4a4b      	ldr	r2, [pc, #300]	@ (800481c <HAL_UART_MspInit+0x204>)
 80046f0:	f043 0310 	orr.w	r3, r3, #16
 80046f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046f6:	4b49      	ldr	r3, [pc, #292]	@ (800481c <HAL_UART_MspInit+0x204>)
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004702:	4b46      	ldr	r3, [pc, #280]	@ (800481c <HAL_UART_MspInit+0x204>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	4a45      	ldr	r2, [pc, #276]	@ (800481c <HAL_UART_MspInit+0x204>)
 8004708:	f043 0302 	orr.w	r3, r3, #2
 800470c:	6313      	str	r3, [r2, #48]	@ 0x30
 800470e:	4b43      	ldr	r3, [pc, #268]	@ (800481c <HAL_UART_MspInit+0x204>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800471a:	4b40      	ldr	r3, [pc, #256]	@ (800481c <HAL_UART_MspInit+0x204>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	4a3f      	ldr	r2, [pc, #252]	@ (800481c <HAL_UART_MspInit+0x204>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6313      	str	r3, [r2, #48]	@ 0x30
 8004726:	4b3d      	ldr	r3, [pc, #244]	@ (800481c <HAL_UART_MspInit+0x204>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004732:	2380      	movs	r3, #128	@ 0x80
 8004734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004738:	2302      	movs	r3, #2
 800473a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473e:	2300      	movs	r3, #0
 8004740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800474a:	2307      	movs	r3, #7
 800474c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004750:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004754:	4619      	mov	r1, r3
 8004756:	4834      	ldr	r0, [pc, #208]	@ (8004828 <HAL_UART_MspInit+0x210>)
 8004758:	f001 fbfe 	bl	8005f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800475c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004764:	2302      	movs	r3, #2
 8004766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004776:	2307      	movs	r3, #7
 8004778:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800477c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004780:	4619      	mov	r1, r3
 8004782:	482a      	ldr	r0, [pc, #168]	@ (800482c <HAL_UART_MspInit+0x214>)
 8004784:	f001 fbe8 	bl	8005f58 <HAL_GPIO_Init>
}
 8004788:	e041      	b.n	800480e <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a28      	ldr	r2, [pc, #160]	@ (8004830 <HAL_UART_MspInit+0x218>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d13c      	bne.n	800480e <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004794:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004798:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800479a:	2300      	movs	r3, #0
 800479c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80047a4:	4618      	mov	r0, r3
 80047a6:	f003 fd83 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80047b0:	f7fd fc0c 	bl	8001fcc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80047b4:	4b19      	ldr	r3, [pc, #100]	@ (800481c <HAL_UART_MspInit+0x204>)
 80047b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b8:	4a18      	ldr	r2, [pc, #96]	@ (800481c <HAL_UART_MspInit+0x204>)
 80047ba:	f043 0320 	orr.w	r3, r3, #32
 80047be:	6453      	str	r3, [r2, #68]	@ 0x44
 80047c0:	4b16      	ldr	r3, [pc, #88]	@ (800481c <HAL_UART_MspInit+0x204>)
 80047c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047cc:	4b13      	ldr	r3, [pc, #76]	@ (800481c <HAL_UART_MspInit+0x204>)
 80047ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d0:	4a12      	ldr	r2, [pc, #72]	@ (800481c <HAL_UART_MspInit+0x204>)
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d8:	4b10      	ldr	r3, [pc, #64]	@ (800481c <HAL_UART_MspInit+0x204>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80047e4:	23c0      	movs	r3, #192	@ 0xc0
 80047e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ea:	2302      	movs	r3, #2
 80047ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f6:	2303      	movs	r3, #3
 80047f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80047fc:	2308      	movs	r3, #8
 80047fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004802:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004806:	4619      	mov	r1, r3
 8004808:	480a      	ldr	r0, [pc, #40]	@ (8004834 <HAL_UART_MspInit+0x21c>)
 800480a:	f001 fba5 	bl	8005f58 <HAL_GPIO_Init>
}
 800480e:	bf00      	nop
 8004810:	37c0      	adds	r7, #192	@ 0xc0
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40007800 	.word	0x40007800
 800481c:	40023800 	.word	0x40023800
 8004820:	40021400 	.word	0x40021400
 8004824:	40011000 	.word	0x40011000
 8004828:	40020400 	.word	0x40020400
 800482c:	40020000 	.word	0x40020000
 8004830:	40011400 	.word	0x40011400
 8004834:	40020800 	.word	0x40020800

08004838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004838:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800483c:	480d      	ldr	r0, [pc, #52]	@ (8004874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800483e:	490e      	ldr	r1, [pc, #56]	@ (8004878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004840:	4a0e      	ldr	r2, [pc, #56]	@ (800487c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004844:	e002      	b.n	800484c <LoopCopyDataInit>

08004846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800484a:	3304      	adds	r3, #4

0800484c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800484c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800484e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004850:	d3f9      	bcc.n	8004846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004852:	4a0b      	ldr	r2, [pc, #44]	@ (8004880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004854:	4c0b      	ldr	r4, [pc, #44]	@ (8004884 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004858:	e001      	b.n	800485e <LoopFillZerobss>

0800485a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800485a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800485c:	3204      	adds	r2, #4

0800485e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800485e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004860:	d3fb      	bcc.n	800485a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004862:	f7ff fc13 	bl	800408c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004866:	f007 fac9 	bl	800bdfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800486a:	f7fd f9e7 	bl	8001c3c <main>
  bx  lr    
 800486e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004870:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004878:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800487c:	0801073c 	.word	0x0801073c
  ldr r2, =_sbss
 8004880:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8004884:	20004b04 	.word	0x20004b04

08004888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004888:	e7fe      	b.n	8004888 <ADC_IRQHandler>

0800488a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800488e:	2003      	movs	r0, #3
 8004890:	f000 fcf3 	bl	800527a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004894:	200f      	movs	r0, #15
 8004896:	f7ff fb05 	bl	8003ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800489a:	f7ff fadb 	bl	8003e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_IncTick+0x20>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <HAL_IncTick+0x24>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4413      	add	r3, r2
 80048b4:	4a04      	ldr	r2, [pc, #16]	@ (80048c8 <HAL_IncTick+0x24>)
 80048b6:	6013      	str	r3, [r2, #0]
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000044 	.word	0x20000044
 80048c8:	20000c6c 	.word	0x20000c6c

080048cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return uwTick;
 80048d0:	4b03      	ldr	r3, [pc, #12]	@ (80048e0 <HAL_GetTick+0x14>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000c6c 	.word	0x20000c6c

080048e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048ec:	f7ff ffee 	bl	80048cc <HAL_GetTick>
 80048f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048fc:	d005      	beq.n	800490a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <HAL_Delay+0x44>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800490a:	bf00      	nop
 800490c:	f7ff ffde 	bl	80048cc <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	d8f7      	bhi.n	800490c <HAL_Delay+0x28>
  {
  }
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000044 	.word	0x20000044

0800492c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e031      	b.n	80049a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fb fecc 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	d116      	bne.n	8004998 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800496e:	4b10      	ldr	r3, [pc, #64]	@ (80049b0 <HAL_ADC_Init+0x84>)
 8004970:	4013      	ands	r3, r2
 8004972:	f043 0202 	orr.w	r2, r3, #2
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fad6 	bl	8004f2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	641a      	str	r2, [r3, #64]	@ 0x40
 8004996:	e001      	b.n	800499c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	ffffeefd 	.word	0xffffeefd

080049b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_Start+0x1a>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e0ad      	b.n	8004b2a <HAL_ADC_Start+0x176>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d018      	beq.n	8004a16 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80049f4:	4b50      	ldr	r3, [pc, #320]	@ (8004b38 <HAL_ADC_Start+0x184>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a50      	ldr	r2, [pc, #320]	@ (8004b3c <HAL_ADC_Start+0x188>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0c9a      	lsrs	r2, r3, #18
 8004a00:	4613      	mov	r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4413      	add	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a08:	e002      	b.n	8004a10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f9      	bne.n	8004a0a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d175      	bne.n	8004b10 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a28:	4b45      	ldr	r3, [pc, #276]	@ (8004b40 <HAL_ADC_Start+0x18c>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5e:	d106      	bne.n	8004a6e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a64:	f023 0206 	bic.w	r2, r3, #6
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a6c:	e002      	b.n	8004a74 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004a84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004a86:	4b2f      	ldr	r3, [pc, #188]	@ (8004b44 <HAL_ADC_Start+0x190>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d143      	bne.n	8004b28 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004aae:	609a      	str	r2, [r3, #8]
 8004ab0:	e03a      	b.n	8004b28 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a24      	ldr	r2, [pc, #144]	@ (8004b48 <HAL_ADC_Start+0x194>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10e      	bne.n	8004ada <HAL_ADC_Start+0x126>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d107      	bne.n	8004ada <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004ad8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004ada:	4b1a      	ldr	r3, [pc, #104]	@ (8004b44 <HAL_ADC_Start+0x190>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d120      	bne.n	8004b28 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a18      	ldr	r2, [pc, #96]	@ (8004b4c <HAL_ADC_Start+0x198>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d11b      	bne.n	8004b28 <HAL_ADC_Start+0x174>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d114      	bne.n	8004b28 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b0c:	609a      	str	r2, [r3, #8]
 8004b0e:	e00b      	b.n	8004b28 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f043 0210 	orr.w	r2, r3, #16
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b20:	f043 0201 	orr.w	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	2000003c 	.word	0x2000003c
 8004b3c:	431bde83 	.word	0x431bde83
 8004b40:	fffff8fe 	.word	0xfffff8fe
 8004b44:	40012300 	.word	0x40012300
 8004b48:	40012000 	.word	0x40012000
 8004b4c:	40012200 	.word	0x40012200

08004b50 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b6c:	d113      	bne.n	8004b96 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b7c:	d10b      	bne.n	8004b96 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	f043 0220 	orr.w	r2, r3, #32
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e063      	b.n	8004c5e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004b96:	f7ff fe99 	bl	80048cc <HAL_GetTick>
 8004b9a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b9c:	e021      	b.n	8004be2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ba4:	d01d      	beq.n	8004be2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_ADC_PollForConversion+0x6c>
 8004bac:	f7ff fe8e 	bl	80048cc <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d212      	bcs.n	8004be2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d00b      	beq.n	8004be2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	f043 0204 	orr.w	r2, r3, #4
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e03d      	b.n	8004c5e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d1d6      	bne.n	8004b9e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0212 	mvn.w	r2, #18
 8004bf8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d123      	bne.n	8004c5c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d11f      	bne.n	8004c5c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d006      	beq.n	8004c38 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d111      	bne.n	8004c5c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d105      	bne.n	8004c5c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c54:	f043 0201 	orr.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x1c>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e136      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x28a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b09      	cmp	r3, #9
 8004caa:	d93a      	bls.n	8004d22 <HAL_ADC_ConfigChannel+0xa2>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cb4:	d035      	beq.n	8004d22 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68d9      	ldr	r1, [r3, #12]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	3b1e      	subs	r3, #30
 8004ccc:	2207      	movs	r2, #7
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	400a      	ands	r2, r1
 8004cda:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a8d      	ldr	r2, [pc, #564]	@ (8004f18 <HAL_ADC_ConfigChannel+0x298>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10a      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68d9      	ldr	r1, [r3, #12]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	061a      	lsls	r2, r3, #24
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cfa:	e035      	b.n	8004d68 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68d9      	ldr	r1, [r3, #12]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	4603      	mov	r3, r0
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	4403      	add	r3, r0
 8004d14:	3b1e      	subs	r3, #30
 8004d16:	409a      	lsls	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d20:	e022      	b.n	8004d68 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6919      	ldr	r1, [r3, #16]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	4613      	mov	r3, r2
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4413      	add	r3, r2
 8004d36:	2207      	movs	r2, #7
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43da      	mvns	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	400a      	ands	r2, r1
 8004d44:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6919      	ldr	r1, [r3, #16]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	4618      	mov	r0, r3
 8004d58:	4603      	mov	r3, r0
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4403      	add	r3, r0
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b06      	cmp	r3, #6
 8004d6e:	d824      	bhi.n	8004dba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	3b05      	subs	r3, #5
 8004d82:	221f      	movs	r2, #31
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43da      	mvns	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	400a      	ands	r2, r1
 8004d90:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	4618      	mov	r0, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	3b05      	subs	r3, #5
 8004dac:	fa00 f203 	lsl.w	r2, r0, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	635a      	str	r2, [r3, #52]	@ 0x34
 8004db8:	e04c      	b.n	8004e54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b0c      	cmp	r3, #12
 8004dc0:	d824      	bhi.n	8004e0c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3b23      	subs	r3, #35	@ 0x23
 8004dd4:	221f      	movs	r2, #31
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	400a      	ands	r2, r1
 8004de2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	4618      	mov	r0, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3b23      	subs	r3, #35	@ 0x23
 8004dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e0a:	e023      	b.n	8004e54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3b41      	subs	r3, #65	@ 0x41
 8004e1e:	221f      	movs	r2, #31
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43da      	mvns	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	400a      	ands	r2, r1
 8004e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	3b41      	subs	r3, #65	@ 0x41
 8004e48:	fa00 f203 	lsl.w	r2, r0, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a30      	ldr	r2, [pc, #192]	@ (8004f1c <HAL_ADC_ConfigChannel+0x29c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d10a      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x1f4>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e66:	d105      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004e68:	4b2d      	ldr	r3, [pc, #180]	@ (8004f20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e6e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004e72:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a28      	ldr	r2, [pc, #160]	@ (8004f1c <HAL_ADC_ConfigChannel+0x29c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d10f      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x21e>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b12      	cmp	r3, #18
 8004e84:	d10b      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004e86:	4b26      	ldr	r3, [pc, #152]	@ (8004f20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4a25      	ldr	r2, [pc, #148]	@ (8004f20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004e90:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004e92:	4b23      	ldr	r3, [pc, #140]	@ (8004f20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4a22      	ldr	r2, [pc, #136]	@ (8004f20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e9c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f1c <HAL_ADC_ConfigChannel+0x29c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d12b      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x280>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1a      	ldr	r2, [pc, #104]	@ (8004f18 <HAL_ADC_ConfigChannel+0x298>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <HAL_ADC_ConfigChannel+0x23a>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b11      	cmp	r3, #17
 8004eb8:	d122      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004eba:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4a18      	ldr	r2, [pc, #96]	@ (8004f20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ec0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004ec4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004ec6:	4b16      	ldr	r3, [pc, #88]	@ (8004f20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4a15      	ldr	r2, [pc, #84]	@ (8004f20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ecc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ed0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a10      	ldr	r2, [pc, #64]	@ (8004f18 <HAL_ADC_ConfigChannel+0x298>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d111      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004edc:	4b11      	ldr	r3, [pc, #68]	@ (8004f24 <HAL_ADC_ConfigChannel+0x2a4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a11      	ldr	r2, [pc, #68]	@ (8004f28 <HAL_ADC_ConfigChannel+0x2a8>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	0c9a      	lsrs	r2, r3, #18
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004ef2:	e002      	b.n	8004efa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f9      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	10000012 	.word	0x10000012
 8004f1c:	40012000 	.word	0x40012000
 8004f20:	40012300 	.word	0x40012300
 8004f24:	2000003c 	.word	0x2000003c
 8004f28:	431bde83 	.word	0x431bde83

08004f2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004f34:	4b78      	ldr	r3, [pc, #480]	@ (8005118 <ADC_Init+0x1ec>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a77      	ldr	r2, [pc, #476]	@ (8005118 <ADC_Init+0x1ec>)
 8004f3a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004f3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004f40:	4b75      	ldr	r3, [pc, #468]	@ (8005118 <ADC_Init+0x1ec>)
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	4973      	ldr	r1, [pc, #460]	@ (8005118 <ADC_Init+0x1ec>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	021a      	lsls	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6859      	ldr	r1, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6899      	ldr	r1, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fba:	4a58      	ldr	r2, [pc, #352]	@ (800511c <ADC_Init+0x1f0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d022      	beq.n	8005006 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004fce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6899      	ldr	r1, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6899      	ldr	r1, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	e00f      	b.n	8005026 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005024:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0202 	bic.w	r2, r2, #2
 8005034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6899      	ldr	r1, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	005a      	lsls	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005062:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005072:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6859      	ldr	r1, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	3b01      	subs	r3, #1
 8005080:	035a      	lsls	r2, r3, #13
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	e007      	b.n	800509c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800509a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80050aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	051a      	lsls	r2, r3, #20
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80050d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6899      	ldr	r1, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050de:	025a      	lsls	r2, r3, #9
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6899      	ldr	r1, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	029a      	lsls	r2, r3, #10
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	40012300 	.word	0x40012300
 800511c:	0f000001 	.word	0x0f000001

08005120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005130:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <__NVIC_SetPriorityGrouping+0x40>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800513c:	4013      	ands	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005148:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <__NVIC_SetPriorityGrouping+0x44>)
 800514a:	4313      	orrs	r3, r2
 800514c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800514e:	4a04      	ldr	r2, [pc, #16]	@ (8005160 <__NVIC_SetPriorityGrouping+0x40>)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	60d3      	str	r3, [r2, #12]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	e000ed00 	.word	0xe000ed00
 8005164:	05fa0000 	.word	0x05fa0000

08005168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800516c:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <__NVIC_GetPriorityGrouping+0x18>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	0a1b      	lsrs	r3, r3, #8
 8005172:	f003 0307 	and.w	r3, r3, #7
}
 8005176:	4618      	mov	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800518e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005192:	2b00      	cmp	r3, #0
 8005194:	db0b      	blt.n	80051ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	f003 021f 	and.w	r2, r3, #31
 800519c:	4907      	ldr	r1, [pc, #28]	@ (80051bc <__NVIC_EnableIRQ+0x38>)
 800519e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	2001      	movs	r0, #1
 80051a6:	fa00 f202 	lsl.w	r2, r0, r2
 80051aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	e000e100 	.word	0xe000e100

080051c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	6039      	str	r1, [r7, #0]
 80051ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	db0a      	blt.n	80051ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	490c      	ldr	r1, [pc, #48]	@ (800520c <__NVIC_SetPriority+0x4c>)
 80051da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051de:	0112      	lsls	r2, r2, #4
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	440b      	add	r3, r1
 80051e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051e8:	e00a      	b.n	8005200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	4908      	ldr	r1, [pc, #32]	@ (8005210 <__NVIC_SetPriority+0x50>)
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	3b04      	subs	r3, #4
 80051f8:	0112      	lsls	r2, r2, #4
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	440b      	add	r3, r1
 80051fe:	761a      	strb	r2, [r3, #24]
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	e000e100 	.word	0xe000e100
 8005210:	e000ed00 	.word	0xe000ed00

08005214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005214:	b480      	push	{r7}
 8005216:	b089      	sub	sp, #36	@ 0x24
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f1c3 0307 	rsb	r3, r3, #7
 800522e:	2b04      	cmp	r3, #4
 8005230:	bf28      	it	cs
 8005232:	2304      	movcs	r3, #4
 8005234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	3304      	adds	r3, #4
 800523a:	2b06      	cmp	r3, #6
 800523c:	d902      	bls.n	8005244 <NVIC_EncodePriority+0x30>
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	3b03      	subs	r3, #3
 8005242:	e000      	b.n	8005246 <NVIC_EncodePriority+0x32>
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005248:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	43da      	mvns	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	401a      	ands	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800525c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	fa01 f303 	lsl.w	r3, r1, r3
 8005266:	43d9      	mvns	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800526c:	4313      	orrs	r3, r2
         );
}
 800526e:	4618      	mov	r0, r3
 8005270:	3724      	adds	r7, #36	@ 0x24
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff ff4c 	bl	8005120 <__NVIC_SetPriorityGrouping>
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052a2:	f7ff ff61 	bl	8005168 <__NVIC_GetPriorityGrouping>
 80052a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	6978      	ldr	r0, [r7, #20]
 80052ae:	f7ff ffb1 	bl	8005214 <NVIC_EncodePriority>
 80052b2:	4602      	mov	r2, r0
 80052b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff ff80 	bl	80051c0 <__NVIC_SetPriority>
}
 80052c0:	bf00      	nop
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff ff54 	bl	8005184 <__NVIC_EnableIRQ>
}
 80052dc:	bf00      	nop
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e014      	b.n	8005320 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	791b      	ldrb	r3, [r3, #4]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d105      	bne.n	800530c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fb fa86 	bl	8000818 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800533a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800533e:	d120      	bne.n	8005382 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800534a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800534e:	d118      	bne.n	8005382 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2204      	movs	r2, #4
 8005354:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f043 0201 	orr.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800536a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800537a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f82d 	bl	80053dc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800538c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005390:	d120      	bne.n	80053d4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800539c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053a0:	d118      	bne.n	80053d4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2204      	movs	r2, #4
 80053a6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f043 0202 	orr.w	r2, r3, #2
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80053bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80053cc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f85d 	bl	800548e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	795b      	ldrb	r3, [r3, #5]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_DAC_ConfigChannel+0x18>
 8005404:	2302      	movs	r3, #2
 8005406:	e03c      	b.n	8005482 <HAL_DAC_ConfigChannel+0x92>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2202      	movs	r2, #2
 8005412:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43db      	mvns	r3, r3
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4013      	ands	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	22c0      	movs	r2, #192	@ 0xc0
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	43da      	mvns	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	400a      	ands	r2, r1
 8005472:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054b0:	f7ff fa0c 	bl	80048cc <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e099      	b.n	80055f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054e0:	e00f      	b.n	8005502 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054e2:	f7ff f9f3 	bl	80048cc <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b05      	cmp	r3, #5
 80054ee:	d908      	bls.n	8005502 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2203      	movs	r2, #3
 80054fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e078      	b.n	80055f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e8      	bne.n	80054e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4b38      	ldr	r3, [pc, #224]	@ (80055fc <HAL_DMA_Init+0x158>)
 800551c:	4013      	ands	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800552e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800553a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	2b04      	cmp	r3, #4
 800555a:	d107      	bne.n	800556c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005564:	4313      	orrs	r3, r2
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0307 	bic.w	r3, r3, #7
 8005582:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	2b04      	cmp	r3, #4
 8005594:	d117      	bne.n	80055c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00e      	beq.n	80055c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f8bd 	bl	8005728 <DMA_CheckFifoParam>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2240      	movs	r2, #64	@ 0x40
 80055b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80055c2:	2301      	movs	r3, #1
 80055c4:	e016      	b.n	80055f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f874 	bl	80056bc <DMA_CalcBaseAndBitshift>
 80055d4:	4603      	mov	r3, r0
 80055d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055dc:	223f      	movs	r2, #63	@ 0x3f
 80055de:	409a      	lsls	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	f010803f 	.word	0xf010803f

08005600 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e050      	b.n	80056b4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d101      	bne.n	8005622 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	e048      	b.n	80056b4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2200      	movs	r2, #0
 8005640:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2200      	movs	r2, #0
 8005658:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2221      	movs	r2, #33	@ 0x21
 8005660:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f82a 	bl	80056bc <DMA_CalcBaseAndBitshift>
 8005668:	4603      	mov	r3, r0
 800566a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005670:	223f      	movs	r2, #63	@ 0x3f
 8005672:	409a      	lsls	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	3b10      	subs	r3, #16
 80056cc:	4a13      	ldr	r2, [pc, #76]	@ (800571c <DMA_CalcBaseAndBitshift+0x60>)
 80056ce:	fba2 2303 	umull	r2, r3, r2, r3
 80056d2:	091b      	lsrs	r3, r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056d6:	4a12      	ldr	r2, [pc, #72]	@ (8005720 <DMA_CalcBaseAndBitshift+0x64>)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d908      	bls.n	80056fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005724 <DMA_CalcBaseAndBitshift+0x68>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	1d1a      	adds	r2, r3, #4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80056fa:	e006      	b.n	800570a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	4b08      	ldr	r3, [pc, #32]	@ (8005724 <DMA_CalcBaseAndBitshift+0x68>)
 8005704:	4013      	ands	r3, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	aaaaaaab 	.word	0xaaaaaaab
 8005720:	080106f0 	.word	0x080106f0
 8005724:	fffffc00 	.word	0xfffffc00

08005728 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11f      	bne.n	8005782 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b03      	cmp	r3, #3
 8005746:	d856      	bhi.n	80057f6 <DMA_CheckFifoParam+0xce>
 8005748:	a201      	add	r2, pc, #4	@ (adr r2, 8005750 <DMA_CheckFifoParam+0x28>)
 800574a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574e:	bf00      	nop
 8005750:	08005761 	.word	0x08005761
 8005754:	08005773 	.word	0x08005773
 8005758:	08005761 	.word	0x08005761
 800575c:	080057f7 	.word	0x080057f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d046      	beq.n	80057fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005770:	e043      	b.n	80057fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800577a:	d140      	bne.n	80057fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005780:	e03d      	b.n	80057fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800578a:	d121      	bne.n	80057d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d837      	bhi.n	8005802 <DMA_CheckFifoParam+0xda>
 8005792:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <DMA_CheckFifoParam+0x70>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057af 	.word	0x080057af
 80057a0:	080057a9 	.word	0x080057a9
 80057a4:	080057c1 	.word	0x080057c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      break;
 80057ac:	e030      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d025      	beq.n	8005806 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057be:	e022      	b.n	8005806 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057c8:	d11f      	bne.n	800580a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057ce:	e01c      	b.n	800580a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d903      	bls.n	80057de <DMA_CheckFifoParam+0xb6>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d003      	beq.n	80057e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057dc:	e018      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
      break;
 80057e2:	e015      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00e      	beq.n	800580e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
      break;
 80057f4:	e00b      	b.n	800580e <DMA_CheckFifoParam+0xe6>
      break;
 80057f6:	bf00      	nop
 80057f8:	e00a      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;
 80057fa:	bf00      	nop
 80057fc:	e008      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;
 80057fe:	bf00      	nop
 8005800:	e006      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;
 8005802:	bf00      	nop
 8005804:	e004      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;
 8005806:	bf00      	nop
 8005808:	e002      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;   
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;
 800580e:	bf00      	nop
    }
  } 
  
  return status; 
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop

08005820 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e039      	b.n	80058a6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fb f860 	bl	800090c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005870:	f023 0107 	bic.w	r1, r3, #7
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005886:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <HAL_DMA2D_Init+0x90>)
 8005888:	4013      	ands	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68d1      	ldr	r1, [r2, #12]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	430b      	orrs	r3, r1
 8005894:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	ffffc000 	.word	0xffffc000

080058b4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_DMA2D_Start+0x1c>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e018      	b.n	8005902 <HAL_DMA2D_Start+0x4e>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fa98 	bl	8005e20 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d056      	beq.n	80059d4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005926:	f7fe ffd1 	bl	80048cc <HAL_GetTick>
 800592a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800592c:	e04b      	b.n	80059c6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800593c:	2b00      	cmp	r3, #0
 800593e:	d023      	beq.n	8005988 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594e:	f043 0202 	orr.w	r2, r3, #2
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	f043 0201 	orr.w	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2221      	movs	r2, #33	@ 0x21
 8005972:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2204      	movs	r2, #4
 8005978:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0a5      	b.n	8005ad4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800598e:	d01a      	beq.n	80059c6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005990:	f7fe ff9c 	bl	80048cc <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d302      	bcc.n	80059a6 <HAL_DMA2D_PollForTransfer+0x9c>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10f      	bne.n	80059c6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2203      	movs	r2, #3
 80059b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e086      	b.n	8005ad4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0ac      	beq.n	800592e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d061      	beq.n	8005aba <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80059f6:	f7fe ff69 	bl	80048cc <HAL_GetTick>
 80059fa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059fc:	e056      	b.n	8005aac <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02e      	beq.n	8005a6e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1e:	f043 0204 	orr.w	r2, r3, #4
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a34:	f043 0202 	orr.w	r2, r3, #2
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2229      	movs	r2, #41	@ 0x29
 8005a58:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2204      	movs	r2, #4
 8005a5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e032      	b.n	8005ad4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a74:	d01a      	beq.n	8005aac <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a76:	f7fe ff29 	bl	80048cc <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d302      	bcc.n	8005a8c <HAL_DMA2D_PollForTransfer+0x182>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10f      	bne.n	8005aac <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a90:	f043 0220 	orr.w	r2, r3, #32
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e013      	b.n	8005ad4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0a1      	beq.n	80059fe <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2212      	movs	r2, #18
 8005ac0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d026      	beq.n	8005b4c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d021      	beq.n	8005b4c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b16:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1c:	f043 0201 	orr.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2204      	movs	r2, #4
 8005b30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d026      	beq.n	8005ba4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d021      	beq.n	8005ba4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b6e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2220      	movs	r2, #32
 8005b76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7c:	f043 0202 	orr.w	r2, r3, #2
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2204      	movs	r2, #4
 8005b88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d026      	beq.n	8005bfc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d021      	beq.n	8005bfc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bc6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2208      	movs	r2, #8
 8005bce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd4:	f043 0204 	orr.w	r2, r3, #4
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2204      	movs	r2, #4
 8005be0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d013      	beq.n	8005c2e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00e      	beq.n	8005c2e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2204      	movs	r2, #4
 8005c26:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f853 	bl	8005cd4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d024      	beq.n	8005c82 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01f      	beq.n	8005c82 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005c50:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2202      	movs	r2, #2
 8005c58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01f      	beq.n	8005ccc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d01a      	beq.n	8005ccc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ca4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2210      	movs	r2, #16
 8005cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f80e 	bl	8005ce8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_DMA2D_ConfigLayer+0x20>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e079      	b.n	8005e10 <HAL_DMA2D_ConfigLayer+0x114>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	3318      	adds	r3, #24
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	041b      	lsls	r3, r3, #16
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005d46:	4b35      	ldr	r3, [pc, #212]	@ (8005e1c <HAL_DMA2D_ConfigLayer+0x120>)
 8005d48:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b0a      	cmp	r3, #10
 8005d50:	d003      	beq.n	8005d5a <HAL_DMA2D_ConfigLayer+0x5e>
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b09      	cmp	r3, #9
 8005d58:	d107      	bne.n	8005d6a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	e005      	b.n	8005d76 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d120      	bne.n	8005dbe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	ea02 0103 	and.w	r1, r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b0a      	cmp	r3, #10
 8005da4:	d003      	beq.n	8005dae <HAL_DMA2D_ConfigLayer+0xb2>
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	d127      	bne.n	8005dfe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005dba:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dbc:	e01f      	b.n	8005dfe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	ea02 0103 	and.w	r1, r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b0a      	cmp	r3, #10
 8005de6:	d003      	beq.n	8005df0 <HAL_DMA2D_ConfigLayer+0xf4>
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b09      	cmp	r3, #9
 8005dee:	d106      	bne.n	8005dfe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005dfc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	ff03000f 	.word	0xff03000f

08005e20 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b08b      	sub	sp, #44	@ 0x2c
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e34:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	041a      	lsls	r2, r3, #16
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e58:	d174      	bne.n	8005f44 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005e60:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e68:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005e70:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d108      	bne.n	8005e92 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e90:	e053      	b.n	8005f3a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d106      	bne.n	8005ea8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea6:	e048      	b.n	8005f3a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d111      	bne.n	8005ed4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	0cdb      	lsrs	r3, r3, #19
 8005eb4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	0a9b      	lsrs	r3, r3, #10
 8005eba:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	08db      	lsrs	r3, r3, #3
 8005ec0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	02db      	lsls	r3, r3, #11
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed2:	e032      	b.n	8005f3a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d117      	bne.n	8005f0c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	0fdb      	lsrs	r3, r3, #31
 8005ee0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	0cdb      	lsrs	r3, r3, #19
 8005ee6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	0adb      	lsrs	r3, r3, #11
 8005eec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	08db      	lsrs	r3, r3, #3
 8005ef2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	029b      	lsls	r3, r3, #10
 8005efc:	431a      	orrs	r2, r3
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	03db      	lsls	r3, r3, #15
 8005f02:	4313      	orrs	r3, r2
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f0a:	e016      	b.n	8005f3a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	0f1b      	lsrs	r3, r3, #28
 8005f10:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	0d1b      	lsrs	r3, r3, #20
 8005f16:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	0b1b      	lsrs	r3, r3, #12
 8005f1c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	011a      	lsls	r2, r3, #4
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	4313      	orrs	r3, r2
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f40:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005f42:	e003      	b.n	8005f4c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	60da      	str	r2, [r3, #12]
}
 8005f4c:	bf00      	nop
 8005f4e:	372c      	adds	r7, #44	@ 0x2c
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b089      	sub	sp, #36	@ 0x24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e175      	b.n	8006264 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005f78:	2201      	movs	r2, #1
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	f040 8164 	bne.w	800625e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d005      	beq.n	8005fae <HAL_GPIO_Init+0x56>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d130      	bne.n	8006010 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	2203      	movs	r2, #3
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	43db      	mvns	r3, r3
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 0201 	and.w	r2, r3, #1
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4313      	orrs	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b03      	cmp	r3, #3
 800601a:	d017      	beq.n	800604c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	2203      	movs	r2, #3
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4313      	orrs	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d123      	bne.n	80060a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	08da      	lsrs	r2, r3, #3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3208      	adds	r2, #8
 8006060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	220f      	movs	r2, #15
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4013      	ands	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4313      	orrs	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	08da      	lsrs	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3208      	adds	r2, #8
 800609a:	69b9      	ldr	r1, [r7, #24]
 800609c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	2203      	movs	r2, #3
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f003 0203 	and.w	r2, r3, #3
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80be 	beq.w	800625e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060e2:	4b66      	ldr	r3, [pc, #408]	@ (800627c <HAL_GPIO_Init+0x324>)
 80060e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e6:	4a65      	ldr	r2, [pc, #404]	@ (800627c <HAL_GPIO_Init+0x324>)
 80060e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80060ee:	4b63      	ldr	r3, [pc, #396]	@ (800627c <HAL_GPIO_Init+0x324>)
 80060f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80060fa:	4a61      	ldr	r2, [pc, #388]	@ (8006280 <HAL_GPIO_Init+0x328>)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	089b      	lsrs	r3, r3, #2
 8006100:	3302      	adds	r3, #2
 8006102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006106:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	220f      	movs	r2, #15
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	43db      	mvns	r3, r3
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	4013      	ands	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a58      	ldr	r2, [pc, #352]	@ (8006284 <HAL_GPIO_Init+0x32c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d037      	beq.n	8006196 <HAL_GPIO_Init+0x23e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a57      	ldr	r2, [pc, #348]	@ (8006288 <HAL_GPIO_Init+0x330>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d031      	beq.n	8006192 <HAL_GPIO_Init+0x23a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a56      	ldr	r2, [pc, #344]	@ (800628c <HAL_GPIO_Init+0x334>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d02b      	beq.n	800618e <HAL_GPIO_Init+0x236>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a55      	ldr	r2, [pc, #340]	@ (8006290 <HAL_GPIO_Init+0x338>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d025      	beq.n	800618a <HAL_GPIO_Init+0x232>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a54      	ldr	r2, [pc, #336]	@ (8006294 <HAL_GPIO_Init+0x33c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d01f      	beq.n	8006186 <HAL_GPIO_Init+0x22e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a53      	ldr	r2, [pc, #332]	@ (8006298 <HAL_GPIO_Init+0x340>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d019      	beq.n	8006182 <HAL_GPIO_Init+0x22a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a52      	ldr	r2, [pc, #328]	@ (800629c <HAL_GPIO_Init+0x344>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d013      	beq.n	800617e <HAL_GPIO_Init+0x226>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a51      	ldr	r2, [pc, #324]	@ (80062a0 <HAL_GPIO_Init+0x348>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00d      	beq.n	800617a <HAL_GPIO_Init+0x222>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a50      	ldr	r2, [pc, #320]	@ (80062a4 <HAL_GPIO_Init+0x34c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <HAL_GPIO_Init+0x21e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a4f      	ldr	r2, [pc, #316]	@ (80062a8 <HAL_GPIO_Init+0x350>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d101      	bne.n	8006172 <HAL_GPIO_Init+0x21a>
 800616e:	2309      	movs	r3, #9
 8006170:	e012      	b.n	8006198 <HAL_GPIO_Init+0x240>
 8006172:	230a      	movs	r3, #10
 8006174:	e010      	b.n	8006198 <HAL_GPIO_Init+0x240>
 8006176:	2308      	movs	r3, #8
 8006178:	e00e      	b.n	8006198 <HAL_GPIO_Init+0x240>
 800617a:	2307      	movs	r3, #7
 800617c:	e00c      	b.n	8006198 <HAL_GPIO_Init+0x240>
 800617e:	2306      	movs	r3, #6
 8006180:	e00a      	b.n	8006198 <HAL_GPIO_Init+0x240>
 8006182:	2305      	movs	r3, #5
 8006184:	e008      	b.n	8006198 <HAL_GPIO_Init+0x240>
 8006186:	2304      	movs	r3, #4
 8006188:	e006      	b.n	8006198 <HAL_GPIO_Init+0x240>
 800618a:	2303      	movs	r3, #3
 800618c:	e004      	b.n	8006198 <HAL_GPIO_Init+0x240>
 800618e:	2302      	movs	r3, #2
 8006190:	e002      	b.n	8006198 <HAL_GPIO_Init+0x240>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <HAL_GPIO_Init+0x240>
 8006196:	2300      	movs	r3, #0
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	f002 0203 	and.w	r2, r2, #3
 800619e:	0092      	lsls	r2, r2, #2
 80061a0:	4093      	lsls	r3, r2
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80061a8:	4935      	ldr	r1, [pc, #212]	@ (8006280 <HAL_GPIO_Init+0x328>)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	089b      	lsrs	r3, r3, #2
 80061ae:	3302      	adds	r3, #2
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061b6:	4b3d      	ldr	r3, [pc, #244]	@ (80062ac <HAL_GPIO_Init+0x354>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	43db      	mvns	r3, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	4013      	ands	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061da:	4a34      	ldr	r2, [pc, #208]	@ (80062ac <HAL_GPIO_Init+0x354>)
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061e0:	4b32      	ldr	r3, [pc, #200]	@ (80062ac <HAL_GPIO_Init+0x354>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	43db      	mvns	r3, r3
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	4013      	ands	r3, r2
 80061ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4313      	orrs	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006204:	4a29      	ldr	r2, [pc, #164]	@ (80062ac <HAL_GPIO_Init+0x354>)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800620a:	4b28      	ldr	r3, [pc, #160]	@ (80062ac <HAL_GPIO_Init+0x354>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	43db      	mvns	r3, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4013      	ands	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800622e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ac <HAL_GPIO_Init+0x354>)
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006234:	4b1d      	ldr	r3, [pc, #116]	@ (80062ac <HAL_GPIO_Init+0x354>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	43db      	mvns	r3, r3
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4013      	ands	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006258:	4a14      	ldr	r2, [pc, #80]	@ (80062ac <HAL_GPIO_Init+0x354>)
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	3301      	adds	r3, #1
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b0f      	cmp	r3, #15
 8006268:	f67f ae86 	bls.w	8005f78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	3724      	adds	r7, #36	@ 0x24
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40023800 	.word	0x40023800
 8006280:	40013800 	.word	0x40013800
 8006284:	40020000 	.word	0x40020000
 8006288:	40020400 	.word	0x40020400
 800628c:	40020800 	.word	0x40020800
 8006290:	40020c00 	.word	0x40020c00
 8006294:	40021000 	.word	0x40021000
 8006298:	40021400 	.word	0x40021400
 800629c:	40021800 	.word	0x40021800
 80062a0:	40021c00 	.word	0x40021c00
 80062a4:	40022000 	.word	0x40022000
 80062a8:	40022400 	.word	0x40022400
 80062ac:	40013c00 	.word	0x40013c00

080062b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80062ba:	2300      	movs	r3, #0
 80062bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e0d9      	b.n	8006480 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80062cc:	2201      	movs	r2, #1
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4013      	ands	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	f040 80c9 	bne.w	800647a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80062e8:	4a6b      	ldr	r2, [pc, #428]	@ (8006498 <HAL_GPIO_DeInit+0x1e8>)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	089b      	lsrs	r3, r3, #2
 80062ee:	3302      	adds	r3, #2
 80062f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	220f      	movs	r2, #15
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4013      	ands	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a63      	ldr	r2, [pc, #396]	@ (800649c <HAL_GPIO_DeInit+0x1ec>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d037      	beq.n	8006382 <HAL_GPIO_DeInit+0xd2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a62      	ldr	r2, [pc, #392]	@ (80064a0 <HAL_GPIO_DeInit+0x1f0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d031      	beq.n	800637e <HAL_GPIO_DeInit+0xce>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a61      	ldr	r2, [pc, #388]	@ (80064a4 <HAL_GPIO_DeInit+0x1f4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d02b      	beq.n	800637a <HAL_GPIO_DeInit+0xca>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a60      	ldr	r2, [pc, #384]	@ (80064a8 <HAL_GPIO_DeInit+0x1f8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d025      	beq.n	8006376 <HAL_GPIO_DeInit+0xc6>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a5f      	ldr	r2, [pc, #380]	@ (80064ac <HAL_GPIO_DeInit+0x1fc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d01f      	beq.n	8006372 <HAL_GPIO_DeInit+0xc2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a5e      	ldr	r2, [pc, #376]	@ (80064b0 <HAL_GPIO_DeInit+0x200>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d019      	beq.n	800636e <HAL_GPIO_DeInit+0xbe>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a5d      	ldr	r2, [pc, #372]	@ (80064b4 <HAL_GPIO_DeInit+0x204>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <HAL_GPIO_DeInit+0xba>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a5c      	ldr	r2, [pc, #368]	@ (80064b8 <HAL_GPIO_DeInit+0x208>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00d      	beq.n	8006366 <HAL_GPIO_DeInit+0xb6>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a5b      	ldr	r2, [pc, #364]	@ (80064bc <HAL_GPIO_DeInit+0x20c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d007      	beq.n	8006362 <HAL_GPIO_DeInit+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a5a      	ldr	r2, [pc, #360]	@ (80064c0 <HAL_GPIO_DeInit+0x210>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <HAL_GPIO_DeInit+0xae>
 800635a:	2309      	movs	r3, #9
 800635c:	e012      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 800635e:	230a      	movs	r3, #10
 8006360:	e010      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 8006362:	2308      	movs	r3, #8
 8006364:	e00e      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 8006366:	2307      	movs	r3, #7
 8006368:	e00c      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 800636a:	2306      	movs	r3, #6
 800636c:	e00a      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 800636e:	2305      	movs	r3, #5
 8006370:	e008      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 8006372:	2304      	movs	r3, #4
 8006374:	e006      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 8006376:	2303      	movs	r3, #3
 8006378:	e004      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 800637a:	2302      	movs	r3, #2
 800637c:	e002      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 8006382:	2300      	movs	r3, #0
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	f002 0203 	and.w	r2, r2, #3
 800638a:	0092      	lsls	r2, r2, #2
 800638c:	4093      	lsls	r3, r2
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	429a      	cmp	r2, r3
 8006392:	d132      	bne.n	80063fa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006394:	4b4b      	ldr	r3, [pc, #300]	@ (80064c4 <HAL_GPIO_DeInit+0x214>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	43db      	mvns	r3, r3
 800639c:	4949      	ldr	r1, [pc, #292]	@ (80064c4 <HAL_GPIO_DeInit+0x214>)
 800639e:	4013      	ands	r3, r2
 80063a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80063a2:	4b48      	ldr	r3, [pc, #288]	@ (80064c4 <HAL_GPIO_DeInit+0x214>)
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	4946      	ldr	r1, [pc, #280]	@ (80064c4 <HAL_GPIO_DeInit+0x214>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80063b0:	4b44      	ldr	r3, [pc, #272]	@ (80064c4 <HAL_GPIO_DeInit+0x214>)
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	43db      	mvns	r3, r3
 80063b8:	4942      	ldr	r1, [pc, #264]	@ (80064c4 <HAL_GPIO_DeInit+0x214>)
 80063ba:	4013      	ands	r3, r2
 80063bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80063be:	4b41      	ldr	r3, [pc, #260]	@ (80064c4 <HAL_GPIO_DeInit+0x214>)
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	43db      	mvns	r3, r3
 80063c6:	493f      	ldr	r1, [pc, #252]	@ (80064c4 <HAL_GPIO_DeInit+0x214>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	220f      	movs	r2, #15
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80063dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006498 <HAL_GPIO_DeInit+0x1e8>)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	089b      	lsrs	r3, r3, #2
 80063e2:	3302      	adds	r3, #2
 80063e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	43da      	mvns	r2, r3
 80063ec:	482a      	ldr	r0, [pc, #168]	@ (8006498 <HAL_GPIO_DeInit+0x1e8>)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	089b      	lsrs	r3, r3, #2
 80063f2:	400a      	ands	r2, r1
 80063f4:	3302      	adds	r3, #2
 80063f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	2103      	movs	r1, #3
 8006404:	fa01 f303 	lsl.w	r3, r1, r3
 8006408:	43db      	mvns	r3, r3
 800640a:	401a      	ands	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	08da      	lsrs	r2, r3, #3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3208      	adds	r2, #8
 8006418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	220f      	movs	r2, #15
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	43db      	mvns	r3, r3
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	08d2      	lsrs	r2, r2, #3
 8006430:	4019      	ands	r1, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3208      	adds	r2, #8
 8006436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	2103      	movs	r1, #3
 8006444:	fa01 f303 	lsl.w	r3, r1, r3
 8006448:	43db      	mvns	r3, r3
 800644a:	401a      	ands	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	2101      	movs	r1, #1
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	fa01 f303 	lsl.w	r3, r1, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	2103      	movs	r1, #3
 800646e:	fa01 f303 	lsl.w	r3, r1, r3
 8006472:	43db      	mvns	r3, r3
 8006474:	401a      	ands	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	3301      	adds	r3, #1
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2b0f      	cmp	r3, #15
 8006484:	f67f af22 	bls.w	80062cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40013800 	.word	0x40013800
 800649c:	40020000 	.word	0x40020000
 80064a0:	40020400 	.word	0x40020400
 80064a4:	40020800 	.word	0x40020800
 80064a8:	40020c00 	.word	0x40020c00
 80064ac:	40021000 	.word	0x40021000
 80064b0:	40021400 	.word	0x40021400
 80064b4:	40021800 	.word	0x40021800
 80064b8:	40021c00 	.word	0x40021c00
 80064bc:	40022000 	.word	0x40022000
 80064c0:	40022400 	.word	0x40022400
 80064c4:	40013c00 	.word	0x40013c00

080064c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e001      	b.n	80064ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	807b      	strh	r3, [r7, #2]
 8006504:	4613      	mov	r3, r2
 8006506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006508:	787b      	ldrb	r3, [r7, #1]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800650e:	887a      	ldrh	r2, [r7, #2]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006514:	e003      	b.n	800651e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006516:	887b      	ldrh	r3, [r7, #2]
 8006518:	041a      	lsls	r2, r3, #16
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	619a      	str	r2, [r3, #24]
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
	...

0800652c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e07f      	b.n	800663e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fb f90a 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2224      	movs	r2, #36	@ 0x24
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0201 	bic.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800657c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800658c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d107      	bne.n	80065a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065a2:	609a      	str	r2, [r3, #8]
 80065a4:	e006      	b.n	80065b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80065b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d104      	bne.n	80065c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6859      	ldr	r1, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006648 <HAL_I2C_Init+0x11c>)
 80065d2:	430b      	orrs	r3, r1
 80065d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	69d9      	ldr	r1, [r3, #28]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1a      	ldr	r2, [r3, #32]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	02008000 	.word	0x02008000

0800664c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e021      	b.n	80066a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2224      	movs	r2, #36	@ 0x24
 8006662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fb f920 	bl	80018bc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	4608      	mov	r0, r1
 80066b6:	4611      	mov	r1, r2
 80066b8:	461a      	mov	r2, r3
 80066ba:	4603      	mov	r3, r0
 80066bc:	817b      	strh	r3, [r7, #10]
 80066be:	460b      	mov	r3, r1
 80066c0:	813b      	strh	r3, [r7, #8]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	f040 80f9 	bne.w	80068c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_I2C_Mem_Write+0x34>
 80066da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0ed      	b.n	80068c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_I2C_Mem_Write+0x4e>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e0e6      	b.n	80068c8 <HAL_I2C_Mem_Write+0x21c>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006702:	f7fe f8e3 	bl	80048cc <HAL_GetTick>
 8006706:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	2319      	movs	r3, #25
 800670e:	2201      	movs	r2, #1
 8006710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fad1 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e0d1      	b.n	80068c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2221      	movs	r2, #33	@ 0x21
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2240      	movs	r2, #64	@ 0x40
 8006730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a3a      	ldr	r2, [r7, #32]
 800673e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006744:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800674c:	88f8      	ldrh	r0, [r7, #6]
 800674e:	893a      	ldrh	r2, [r7, #8]
 8006750:	8979      	ldrh	r1, [r7, #10]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4603      	mov	r3, r0
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f9e1 	bl	8006b24 <I2C_RequestMemoryWrite>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0a9      	b.n	80068c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006778:	b29b      	uxth	r3, r3
 800677a:	2bff      	cmp	r3, #255	@ 0xff
 800677c:	d90e      	bls.n	800679c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	22ff      	movs	r2, #255	@ 0xff
 8006782:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006788:	b2da      	uxtb	r2, r3
 800678a:	8979      	ldrh	r1, [r7, #10]
 800678c:	2300      	movs	r3, #0
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fc2d 	bl	8006ff4 <I2C_TransferConfig>
 800679a:	e00f      	b.n	80067bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	8979      	ldrh	r1, [r7, #10]
 80067ae:	2300      	movs	r3, #0
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fc1c 	bl	8006ff4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fabb 	bl	8006d3c <I2C_WaitOnTXISFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e07b      	b.n	80068c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d034      	beq.n	8006874 <HAL_I2C_Mem_Write+0x1c8>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	d130      	bne.n	8006874 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006818:	2200      	movs	r2, #0
 800681a:	2180      	movs	r1, #128	@ 0x80
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fa4d 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e04d      	b.n	80068c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2bff      	cmp	r3, #255	@ 0xff
 8006834:	d90e      	bls.n	8006854 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	22ff      	movs	r2, #255	@ 0xff
 800683a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006840:	b2da      	uxtb	r2, r3
 8006842:	8979      	ldrh	r1, [r7, #10]
 8006844:	2300      	movs	r3, #0
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fbd1 	bl	8006ff4 <I2C_TransferConfig>
 8006852:	e00f      	b.n	8006874 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006862:	b2da      	uxtb	r2, r3
 8006864:	8979      	ldrh	r1, [r7, #10]
 8006866:	2300      	movs	r3, #0
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fbc0 	bl	8006ff4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d19e      	bne.n	80067bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 fa9a 	bl	8006dbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e01a      	b.n	80068c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2220      	movs	r2, #32
 8006898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6859      	ldr	r1, [r3, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b0a      	ldr	r3, [pc, #40]	@ (80068d0 <HAL_I2C_Mem_Write+0x224>)
 80068a6:	400b      	ands	r3, r1
 80068a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	fe00e800 	.word	0xfe00e800

080068d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	4608      	mov	r0, r1
 80068de:	4611      	mov	r1, r2
 80068e0:	461a      	mov	r2, r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	817b      	strh	r3, [r7, #10]
 80068e6:	460b      	mov	r3, r1
 80068e8:	813b      	strh	r3, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	f040 80fd 	bne.w	8006af6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <HAL_I2C_Mem_Read+0x34>
 8006902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	d105      	bne.n	8006914 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800690e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e0f1      	b.n	8006af8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_I2C_Mem_Read+0x4e>
 800691e:	2302      	movs	r3, #2
 8006920:	e0ea      	b.n	8006af8 <HAL_I2C_Mem_Read+0x224>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800692a:	f7fd ffcf 	bl	80048cc <HAL_GetTick>
 800692e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	2319      	movs	r3, #25
 8006936:	2201      	movs	r2, #1
 8006938:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f9bd 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0d5      	b.n	8006af8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2222      	movs	r2, #34	@ 0x22
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2240      	movs	r2, #64	@ 0x40
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a3a      	ldr	r2, [r7, #32]
 8006966:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800696c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006974:	88f8      	ldrh	r0, [r7, #6]
 8006976:	893a      	ldrh	r2, [r7, #8]
 8006978:	8979      	ldrh	r1, [r7, #10]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	9301      	str	r3, [sp, #4]
 800697e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	4603      	mov	r3, r0
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f921 	bl	8006bcc <I2C_RequestMemoryRead>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d005      	beq.n	800699c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0ad      	b.n	8006af8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2bff      	cmp	r3, #255	@ 0xff
 80069a4:	d90e      	bls.n	80069c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	22ff      	movs	r2, #255	@ 0xff
 80069aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	8979      	ldrh	r1, [r7, #10]
 80069b4:	4b52      	ldr	r3, [pc, #328]	@ (8006b00 <HAL_I2C_Mem_Read+0x22c>)
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fb19 	bl	8006ff4 <I2C_TransferConfig>
 80069c2:	e00f      	b.n	80069e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	8979      	ldrh	r1, [r7, #10]
 80069d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006b00 <HAL_I2C_Mem_Read+0x22c>)
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fb08 	bl	8006ff4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ea:	2200      	movs	r2, #0
 80069ec:	2104      	movs	r1, #4
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f964 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e07c      	b.n	8006af8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d034      	beq.n	8006aa4 <HAL_I2C_Mem_Read+0x1d0>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d130      	bne.n	8006aa4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2180      	movs	r1, #128	@ 0x80
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f935 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e04d      	b.n	8006af8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2bff      	cmp	r3, #255	@ 0xff
 8006a64:	d90e      	bls.n	8006a84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	22ff      	movs	r2, #255	@ 0xff
 8006a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	8979      	ldrh	r1, [r7, #10]
 8006a74:	2300      	movs	r3, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fab9 	bl	8006ff4 <I2C_TransferConfig>
 8006a82:	e00f      	b.n	8006aa4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	8979      	ldrh	r1, [r7, #10]
 8006a96:	2300      	movs	r3, #0
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 faa8 	bl	8006ff4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d19a      	bne.n	80069e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 f982 	bl	8006dbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e01a      	b.n	8006af8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6859      	ldr	r1, [r3, #4]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8006b04 <HAL_I2C_Mem_Read+0x230>)
 8006ad6:	400b      	ands	r3, r1
 8006ad8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e000      	b.n	8006af8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006af6:	2302      	movs	r3, #2
  }
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	80002400 	.word	0x80002400
 8006b04:	fe00e800 	.word	0xfe00e800

08006b08 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b16:	b2db      	uxtb	r3, r3
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	461a      	mov	r2, r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	817b      	strh	r3, [r7, #10]
 8006b36:	460b      	mov	r3, r1
 8006b38:	813b      	strh	r3, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	8979      	ldrh	r1, [r7, #10]
 8006b44:	4b20      	ldr	r3, [pc, #128]	@ (8006bc8 <I2C_RequestMemoryWrite+0xa4>)
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fa51 	bl	8006ff4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	69b9      	ldr	r1, [r7, #24]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f8f0 	bl	8006d3c <I2C_WaitOnTXISFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e02c      	b.n	8006bc0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d105      	bne.n	8006b78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b6c:	893b      	ldrh	r3, [r7, #8]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b76:	e015      	b.n	8006ba4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b78:	893b      	ldrh	r3, [r7, #8]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	69b9      	ldr	r1, [r7, #24]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f8d6 	bl	8006d3c <I2C_WaitOnTXISFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e012      	b.n	8006bc0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b9a:	893b      	ldrh	r3, [r7, #8]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2200      	movs	r2, #0
 8006bac:	2180      	movs	r1, #128	@ 0x80
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f884 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	80002000 	.word	0x80002000

08006bcc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	817b      	strh	r3, [r7, #10]
 8006bde:	460b      	mov	r3, r1
 8006be0:	813b      	strh	r3, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	8979      	ldrh	r1, [r7, #10]
 8006bec:	4b20      	ldr	r3, [pc, #128]	@ (8006c70 <I2C_RequestMemoryRead+0xa4>)
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f9fe 	bl	8006ff4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	69b9      	ldr	r1, [r7, #24]
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f89d 	bl	8006d3c <I2C_WaitOnTXISFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e02c      	b.n	8006c66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c0c:	88fb      	ldrh	r3, [r7, #6]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d105      	bne.n	8006c1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c12:	893b      	ldrh	r3, [r7, #8]
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c1c:	e015      	b.n	8006c4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c1e:	893b      	ldrh	r3, [r7, #8]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	69b9      	ldr	r1, [r7, #24]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f883 	bl	8006d3c <I2C_WaitOnTXISFlagUntilTimeout>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e012      	b.n	8006c66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c40:	893b      	ldrh	r3, [r7, #8]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2200      	movs	r2, #0
 8006c52:	2140      	movs	r1, #64	@ 0x40
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f831 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e000      	b.n	8006c66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	80002000 	.word	0x80002000

08006c74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d103      	bne.n	8006c92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d007      	beq.n	8006cb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	619a      	str	r2, [r3, #24]
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ccc:	e022      	b.n	8006d14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cd4:	d01e      	beq.n	8006d14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd6:	f7fd fdf9 	bl	80048cc <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d302      	bcc.n	8006cec <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d113      	bne.n	8006d14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e00f      	b.n	8006d34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	bf0c      	ite	eq
 8006d24:	2301      	moveq	r3, #1
 8006d26:	2300      	movne	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d0cd      	beq.n	8006cce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d48:	e02c      	b.n	8006da4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f870 	bl	8006e34 <I2C_IsErrorOccurred>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e02a      	b.n	8006db4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d64:	d01e      	beq.n	8006da4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d66:	f7fd fdb1 	bl	80048cc <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d302      	bcc.n	8006d7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d113      	bne.n	8006da4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d80:	f043 0220 	orr.w	r2, r3, #32
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e007      	b.n	8006db4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d1cb      	bne.n	8006d4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dc8:	e028      	b.n	8006e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 f830 	bl	8006e34 <I2C_IsErrorOccurred>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e026      	b.n	8006e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dde:	f7fd fd75 	bl	80048cc <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d302      	bcc.n	8006df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d113      	bne.n	8006e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df8:	f043 0220 	orr.w	r2, r3, #32
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e007      	b.n	8006e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d1cf      	bne.n	8006dca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08a      	sub	sp, #40	@ 0x28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d068      	beq.n	8006f32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2210      	movs	r2, #16
 8006e66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e68:	e049      	b.n	8006efe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e70:	d045      	beq.n	8006efe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e72:	f7fd fd2b 	bl	80048cc <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d302      	bcc.n	8006e88 <I2C_IsErrorOccurred+0x54>
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d13a      	bne.n	8006efe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eaa:	d121      	bne.n	8006ef0 <I2C_IsErrorOccurred+0xbc>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eb2:	d01d      	beq.n	8006ef0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006eb4:	7cfb      	ldrb	r3, [r7, #19]
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	d01a      	beq.n	8006ef0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ec8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006eca:	f7fd fcff 	bl	80048cc <HAL_GetTick>
 8006ece:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ed0:	e00e      	b.n	8006ef0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ed2:	f7fd fcfb 	bl	80048cc <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b19      	cmp	r3, #25
 8006ede:	d907      	bls.n	8006ef0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	f043 0320 	orr.w	r3, r3, #32
 8006ee6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006eee:	e006      	b.n	8006efe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	d1e9      	bne.n	8006ed2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d003      	beq.n	8006f14 <I2C_IsErrorOccurred+0xe0>
 8006f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0aa      	beq.n	8006e6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d103      	bne.n	8006f24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2220      	movs	r2, #32
 8006f22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	f043 0304 	orr.w	r3, r3, #4
 8006f2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	f043 0308 	orr.w	r3, r3, #8
 8006f6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	f043 0302 	orr.w	r3, r3, #2
 8006f8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01c      	beq.n	8006fe2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f7ff fe63 	bl	8006c74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6859      	ldr	r1, [r3, #4]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff0 <I2C_IsErrorOccurred+0x1bc>)
 8006fba:	400b      	ands	r3, r1
 8006fbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3728      	adds	r7, #40	@ 0x28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	fe00e800 	.word	0xfe00e800

08006ff4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	607b      	str	r3, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	817b      	strh	r3, [r7, #10]
 8007002:	4613      	mov	r3, r2
 8007004:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007006:	897b      	ldrh	r3, [r7, #10]
 8007008:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800700c:	7a7b      	ldrb	r3, [r7, #9]
 800700e:	041b      	lsls	r3, r3, #16
 8007010:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007014:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	4313      	orrs	r3, r2
 800701e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007022:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	0d5b      	lsrs	r3, r3, #21
 800702e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007032:	4b08      	ldr	r3, [pc, #32]	@ (8007054 <I2C_TransferConfig+0x60>)
 8007034:	430b      	orrs	r3, r1
 8007036:	43db      	mvns	r3, r3
 8007038:	ea02 0103 	and.w	r1, r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	430a      	orrs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007046:	bf00      	nop
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	03ff63ff 	.word	0x03ff63ff

08007058 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b20      	cmp	r3, #32
 800706c:	d138      	bne.n	80070e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007078:	2302      	movs	r3, #2
 800707a:	e032      	b.n	80070e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2224      	movs	r2, #36	@ 0x24
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0201 	bic.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6819      	ldr	r1, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	e000      	b.n	80070e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070e0:	2302      	movs	r3, #2
  }
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b20      	cmp	r3, #32
 8007102:	d139      	bne.n	8007178 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800710e:	2302      	movs	r3, #2
 8007110:	e033      	b.n	800717a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2224      	movs	r2, #36	@ 0x24
 800711e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0201 	bic.w	r2, r2, #1
 8007130:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007140:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	021b      	lsls	r3, r3, #8
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	e000      	b.n	800717a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007178:	2302      	movs	r3, #2
  }
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e0bf      	b.n	800731a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d106      	bne.n	80071b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fa fc42 	bl	8001a38 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80071ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6999      	ldr	r1, [r3, #24]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6899      	ldr	r1, [r3, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b4a      	ldr	r3, [pc, #296]	@ (8007324 <HAL_LTDC_Init+0x19c>)
 80071fc:	400b      	ands	r3, r1
 80071fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	041b      	lsls	r3, r3, #16
 8007206:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6899      	ldr	r1, [r3, #8]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699a      	ldr	r2, [r3, #24]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	431a      	orrs	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68d9      	ldr	r1, [r3, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b3e      	ldr	r3, [pc, #248]	@ (8007324 <HAL_LTDC_Init+0x19c>)
 800722a:	400b      	ands	r3, r1
 800722c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68d9      	ldr	r1, [r3, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1a      	ldr	r2, [r3, #32]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6919      	ldr	r1, [r3, #16]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	4b33      	ldr	r3, [pc, #204]	@ (8007324 <HAL_LTDC_Init+0x19c>)
 8007258:	400b      	ands	r3, r1
 800725a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6919      	ldr	r1, [r3, #16]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6959      	ldr	r1, [r3, #20]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	4b27      	ldr	r3, [pc, #156]	@ (8007324 <HAL_LTDC_Init+0x19c>)
 8007286:	400b      	ands	r3, r1
 8007288:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	041b      	lsls	r3, r3, #16
 8007290:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6959      	ldr	r1, [r3, #20]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80072b8:	041b      	lsls	r3, r3, #16
 80072ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80072ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0206 	orr.w	r2, r2, #6
 80072f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f042 0201 	orr.w	r2, r2, #1
 8007306:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	f000f800 	.word	0xf000f800

08007328 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800733e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	d023      	beq.n	8007392 <HAL_LTDC_IRQHandler+0x6a>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01e      	beq.n	8007392 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0204 	bic.w	r2, r2, #4
 8007362:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2204      	movs	r2, #4
 800736a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007372:	f043 0201 	orr.w	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2204      	movs	r2, #4
 8007380:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f86f 	bl	8007470 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d023      	beq.n	80073e4 <HAL_LTDC_IRQHandler+0xbc>
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01e      	beq.n	80073e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0202 	bic.w	r2, r2, #2
 80073b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2202      	movs	r2, #2
 80073bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80073c4:	f043 0202 	orr.w	r2, r3, #2
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2204      	movs	r2, #4
 80073d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f846 	bl	8007470 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d01b      	beq.n	8007426 <HAL_LTDC_IRQHandler+0xfe>
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d016      	beq.n	8007426 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0201 	bic.w	r2, r2, #1
 8007406:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2201      	movs	r2, #1
 800740e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f82f 	bl	8007484 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0308 	and.w	r3, r3, #8
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01b      	beq.n	8007468 <HAL_LTDC_IRQHandler+0x140>
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0208 	bic.w	r2, r2, #8
 8007448:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2208      	movs	r2, #8
 8007450:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f818 	bl	8007498 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074ac:	b5b0      	push	{r4, r5, r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d101      	bne.n	80074c6 <HAL_LTDC_ConfigLayer+0x1a>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e02c      	b.n	8007520 <HAL_LTDC_ConfigLayer+0x74>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2202      	movs	r2, #2
 80074d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2134      	movs	r1, #52	@ 0x34
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	4413      	add	r3, r2
 80074e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	4614      	mov	r4, r2
 80074ea:	461d      	mov	r5, r3
 80074ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f81f 	bl	8007544 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2201      	movs	r2, #1
 800750c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bdb0      	pop	{r4, r5, r7, pc}

08007528 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007536:	b2db      	uxtb	r3, r3
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007544:	b480      	push	{r7}
 8007546:	b089      	sub	sp, #36	@ 0x24
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	0c1b      	lsrs	r3, r3, #16
 800755c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007560:	4413      	add	r3, r2
 8007562:	041b      	lsls	r3, r3, #16
 8007564:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	01db      	lsls	r3, r3, #7
 8007570:	4413      	add	r3, r2
 8007572:	3384      	adds	r3, #132	@ 0x84
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	4611      	mov	r1, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	01d2      	lsls	r2, r2, #7
 8007580:	440a      	add	r2, r1
 8007582:	3284      	adds	r2, #132	@ 0x84
 8007584:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007588:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	0c1b      	lsrs	r3, r3, #16
 8007596:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800759a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800759c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4619      	mov	r1, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	01db      	lsls	r3, r3, #7
 80075a8:	440b      	add	r3, r1
 80075aa:	3384      	adds	r3, #132	@ 0x84
 80075ac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80075b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075c2:	4413      	add	r3, r2
 80075c4:	041b      	lsls	r3, r3, #16
 80075c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	01db      	lsls	r3, r3, #7
 80075d2:	4413      	add	r3, r2
 80075d4:	3384      	adds	r3, #132	@ 0x84
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	4611      	mov	r1, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	01d2      	lsls	r2, r2, #7
 80075e2:	440a      	add	r2, r1
 80075e4:	3284      	adds	r2, #132	@ 0x84
 80075e6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80075ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075fa:	4413      	add	r3, r2
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4619      	mov	r1, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	01db      	lsls	r3, r3, #7
 8007608:	440b      	add	r3, r1
 800760a:	3384      	adds	r3, #132	@ 0x84
 800760c:	4619      	mov	r1, r3
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4313      	orrs	r3, r2
 8007612:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	01db      	lsls	r3, r3, #7
 800761e:	4413      	add	r3, r2
 8007620:	3384      	adds	r3, #132	@ 0x84
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	6812      	ldr	r2, [r2, #0]
 8007628:	4611      	mov	r1, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	01d2      	lsls	r2, r2, #7
 800762e:	440a      	add	r2, r1
 8007630:	3284      	adds	r2, #132	@ 0x84
 8007632:	f023 0307 	bic.w	r3, r3, #7
 8007636:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	01db      	lsls	r3, r3, #7
 8007642:	4413      	add	r3, r2
 8007644:	3384      	adds	r3, #132	@ 0x84
 8007646:	461a      	mov	r2, r3
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007654:	021b      	lsls	r3, r3, #8
 8007656:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800765e:	041b      	lsls	r3, r3, #16
 8007660:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	061b      	lsls	r3, r3, #24
 8007668:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	01db      	lsls	r3, r3, #7
 8007674:	4413      	add	r3, r2
 8007676:	3384      	adds	r3, #132	@ 0x84
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	01db      	lsls	r3, r3, #7
 8007684:	4413      	add	r3, r2
 8007686:	3384      	adds	r3, #132	@ 0x84
 8007688:	461a      	mov	r2, r3
 800768a:	2300      	movs	r3, #0
 800768c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007694:	461a      	mov	r2, r3
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	431a      	orrs	r2, r3
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	431a      	orrs	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4619      	mov	r1, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	01db      	lsls	r3, r3, #7
 80076a8:	440b      	add	r3, r1
 80076aa:	3384      	adds	r3, #132	@ 0x84
 80076ac:	4619      	mov	r1, r3
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	01db      	lsls	r3, r3, #7
 80076be:	4413      	add	r3, r2
 80076c0:	3384      	adds	r3, #132	@ 0x84
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	6812      	ldr	r2, [r2, #0]
 80076c8:	4611      	mov	r1, r2
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	01d2      	lsls	r2, r2, #7
 80076ce:	440a      	add	r2, r1
 80076d0:	3284      	adds	r2, #132	@ 0x84
 80076d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80076d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	01db      	lsls	r3, r3, #7
 80076e2:	4413      	add	r3, r2
 80076e4:	3384      	adds	r3, #132	@ 0x84
 80076e6:	461a      	mov	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	01db      	lsls	r3, r3, #7
 80076f8:	4413      	add	r3, r2
 80076fa:	3384      	adds	r3, #132	@ 0x84
 80076fc:	69da      	ldr	r2, [r3, #28]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	01db      	lsls	r3, r3, #7
 8007708:	440b      	add	r3, r1
 800770a:	3384      	adds	r3, #132	@ 0x84
 800770c:	4619      	mov	r1, r3
 800770e:	4b58      	ldr	r3, [pc, #352]	@ (8007870 <LTDC_SetConfig+0x32c>)
 8007710:	4013      	ands	r3, r2
 8007712:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	69da      	ldr	r2, [r3, #28]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	68f9      	ldr	r1, [r7, #12]
 800771e:	6809      	ldr	r1, [r1, #0]
 8007720:	4608      	mov	r0, r1
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	01c9      	lsls	r1, r1, #7
 8007726:	4401      	add	r1, r0
 8007728:	3184      	adds	r1, #132	@ 0x84
 800772a:	4313      	orrs	r3, r2
 800772c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	01db      	lsls	r3, r3, #7
 8007738:	4413      	add	r3, r2
 800773a:	3384      	adds	r3, #132	@ 0x84
 800773c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	01db      	lsls	r3, r3, #7
 8007748:	4413      	add	r3, r2
 800774a:	3384      	adds	r3, #132	@ 0x84
 800774c:	461a      	mov	r2, r3
 800774e:	2300      	movs	r3, #0
 8007750:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	01db      	lsls	r3, r3, #7
 800775c:	4413      	add	r3, r2
 800775e:	3384      	adds	r3, #132	@ 0x84
 8007760:	461a      	mov	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007766:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007770:	2304      	movs	r3, #4
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	e01b      	b.n	80077ae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d102      	bne.n	8007784 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800777e:	2303      	movs	r3, #3
 8007780:	61fb      	str	r3, [r7, #28]
 8007782:	e014      	b.n	80077ae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b04      	cmp	r3, #4
 800778a:	d00b      	beq.n	80077a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007790:	2b02      	cmp	r3, #2
 8007792:	d007      	beq.n	80077a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007798:	2b03      	cmp	r3, #3
 800779a:	d003      	beq.n	80077a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80077a0:	2b07      	cmp	r3, #7
 80077a2:	d102      	bne.n	80077aa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80077a4:	2302      	movs	r3, #2
 80077a6:	61fb      	str	r3, [r7, #28]
 80077a8:	e001      	b.n	80077ae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80077aa:	2301      	movs	r3, #1
 80077ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	01db      	lsls	r3, r3, #7
 80077b8:	4413      	add	r3, r2
 80077ba:	3384      	adds	r3, #132	@ 0x84
 80077bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	4611      	mov	r1, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	01d2      	lsls	r2, r2, #7
 80077c8:	440a      	add	r2, r1
 80077ca:	3284      	adds	r2, #132	@ 0x84
 80077cc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80077d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	fb02 f303 	mul.w	r3, r2, r3
 80077dc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6859      	ldr	r1, [r3, #4]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	1acb      	subs	r3, r1, r3
 80077e8:	69f9      	ldr	r1, [r7, #28]
 80077ea:	fb01 f303 	mul.w	r3, r1, r3
 80077ee:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80077f0:	68f9      	ldr	r1, [r7, #12]
 80077f2:	6809      	ldr	r1, [r1, #0]
 80077f4:	4608      	mov	r0, r1
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	01c9      	lsls	r1, r1, #7
 80077fa:	4401      	add	r1, r0
 80077fc:	3184      	adds	r1, #132	@ 0x84
 80077fe:	4313      	orrs	r3, r2
 8007800:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	01db      	lsls	r3, r3, #7
 800780c:	4413      	add	r3, r2
 800780e:	3384      	adds	r3, #132	@ 0x84
 8007810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4619      	mov	r1, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	01db      	lsls	r3, r3, #7
 800781c:	440b      	add	r3, r1
 800781e:	3384      	adds	r3, #132	@ 0x84
 8007820:	4619      	mov	r1, r3
 8007822:	4b14      	ldr	r3, [pc, #80]	@ (8007874 <LTDC_SetConfig+0x330>)
 8007824:	4013      	ands	r3, r2
 8007826:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	01db      	lsls	r3, r3, #7
 8007832:	4413      	add	r3, r2
 8007834:	3384      	adds	r3, #132	@ 0x84
 8007836:	461a      	mov	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	01db      	lsls	r3, r3, #7
 8007848:	4413      	add	r3, r2
 800784a:	3384      	adds	r3, #132	@ 0x84
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	6812      	ldr	r2, [r2, #0]
 8007852:	4611      	mov	r1, r2
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	01d2      	lsls	r2, r2, #7
 8007858:	440a      	add	r2, r1
 800785a:	3284      	adds	r2, #132	@ 0x84
 800785c:	f043 0301 	orr.w	r3, r3, #1
 8007860:	6013      	str	r3, [r2, #0]
}
 8007862:	bf00      	nop
 8007864:	3724      	adds	r7, #36	@ 0x24
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	fffff8f8 	.word	0xfffff8f8
 8007874:	fffff800 	.word	0xfffff800

08007878 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007878:	b480      	push	{r7}
 800787a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800787c:	4b05      	ldr	r3, [pc, #20]	@ (8007894 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a04      	ldr	r2, [pc, #16]	@ (8007894 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007886:	6013      	str	r3, [r2, #0]
}
 8007888:	bf00      	nop
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40007000 	.word	0x40007000

08007898 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80078a2:	4b23      	ldr	r3, [pc, #140]	@ (8007930 <HAL_PWREx_EnableOverDrive+0x98>)
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	4a22      	ldr	r2, [pc, #136]	@ (8007930 <HAL_PWREx_EnableOverDrive+0x98>)
 80078a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80078ae:	4b20      	ldr	r3, [pc, #128]	@ (8007930 <HAL_PWREx_EnableOverDrive+0x98>)
 80078b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078b6:	603b      	str	r3, [r7, #0]
 80078b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80078ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a1d      	ldr	r2, [pc, #116]	@ (8007934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078c6:	f7fd f801 	bl	80048cc <HAL_GetTick>
 80078ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078cc:	e009      	b.n	80078e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078ce:	f7fc fffd 	bl	80048cc <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078dc:	d901      	bls.n	80078e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e022      	b.n	8007928 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078e2:	4b14      	ldr	r3, [pc, #80]	@ (8007934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ee:	d1ee      	bne.n	80078ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078f0:	4b10      	ldr	r3, [pc, #64]	@ (8007934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078fc:	f7fc ffe6 	bl	80048cc <HAL_GetTick>
 8007900:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007902:	e009      	b.n	8007918 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007904:	f7fc ffe2 	bl	80048cc <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007912:	d901      	bls.n	8007918 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e007      	b.n	8007928 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007918:	4b06      	ldr	r3, [pc, #24]	@ (8007934 <HAL_PWREx_EnableOverDrive+0x9c>)
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007924:	d1ee      	bne.n	8007904 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	40023800 	.word	0x40023800
 8007934:	40007000 	.word	0x40007000

08007938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007940:	2300      	movs	r3, #0
 8007942:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e291      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8087 	beq.w	8007a6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800795c:	4b96      	ldr	r3, [pc, #600]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 030c 	and.w	r3, r3, #12
 8007964:	2b04      	cmp	r3, #4
 8007966:	d00c      	beq.n	8007982 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007968:	4b93      	ldr	r3, [pc, #588]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f003 030c 	and.w	r3, r3, #12
 8007970:	2b08      	cmp	r3, #8
 8007972:	d112      	bne.n	800799a <HAL_RCC_OscConfig+0x62>
 8007974:	4b90      	ldr	r3, [pc, #576]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800797c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007980:	d10b      	bne.n	800799a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007982:	4b8d      	ldr	r3, [pc, #564]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d06c      	beq.n	8007a68 <HAL_RCC_OscConfig+0x130>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d168      	bne.n	8007a68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e26b      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079a2:	d106      	bne.n	80079b2 <HAL_RCC_OscConfig+0x7a>
 80079a4:	4b84      	ldr	r3, [pc, #528]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a83      	ldr	r2, [pc, #524]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	e02e      	b.n	8007a10 <HAL_RCC_OscConfig+0xd8>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10c      	bne.n	80079d4 <HAL_RCC_OscConfig+0x9c>
 80079ba:	4b7f      	ldr	r3, [pc, #508]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a7e      	ldr	r2, [pc, #504]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	4b7c      	ldr	r3, [pc, #496]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a7b      	ldr	r2, [pc, #492]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	e01d      	b.n	8007a10 <HAL_RCC_OscConfig+0xd8>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079dc:	d10c      	bne.n	80079f8 <HAL_RCC_OscConfig+0xc0>
 80079de:	4b76      	ldr	r3, [pc, #472]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a75      	ldr	r2, [pc, #468]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	4b73      	ldr	r3, [pc, #460]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a72      	ldr	r2, [pc, #456]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	e00b      	b.n	8007a10 <HAL_RCC_OscConfig+0xd8>
 80079f8:	4b6f      	ldr	r3, [pc, #444]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a6e      	ldr	r2, [pc, #440]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 80079fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	4b6c      	ldr	r3, [pc, #432]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a6b      	ldr	r2, [pc, #428]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d013      	beq.n	8007a40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a18:	f7fc ff58 	bl	80048cc <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a20:	f7fc ff54 	bl	80048cc <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b64      	cmp	r3, #100	@ 0x64
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e21f      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a32:	4b61      	ldr	r3, [pc, #388]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f0      	beq.n	8007a20 <HAL_RCC_OscConfig+0xe8>
 8007a3e:	e014      	b.n	8007a6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a40:	f7fc ff44 	bl	80048cc <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a48:	f7fc ff40 	bl	80048cc <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b64      	cmp	r3, #100	@ 0x64
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e20b      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a5a:	4b57      	ldr	r3, [pc, #348]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f0      	bne.n	8007a48 <HAL_RCC_OscConfig+0x110>
 8007a66:	e000      	b.n	8007a6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d069      	beq.n	8007b4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a76:	4b50      	ldr	r3, [pc, #320]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 030c 	and.w	r3, r3, #12
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00b      	beq.n	8007a9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a82:	4b4d      	ldr	r3, [pc, #308]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 030c 	and.w	r3, r3, #12
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d11c      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x190>
 8007a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d116      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a9a:	4b47      	ldr	r3, [pc, #284]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x17a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d001      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e1df      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab2:	4b41      	ldr	r3, [pc, #260]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	493d      	ldr	r1, [pc, #244]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ac6:	e040      	b.n	8007b4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d023      	beq.n	8007b18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ad0:	4b39      	ldr	r3, [pc, #228]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a38      	ldr	r2, [pc, #224]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007ad6:	f043 0301 	orr.w	r3, r3, #1
 8007ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007adc:	f7fc fef6 	bl	80048cc <HAL_GetTick>
 8007ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ae2:	e008      	b.n	8007af6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ae4:	f7fc fef2 	bl	80048cc <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e1bd      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af6:	4b30      	ldr	r3, [pc, #192]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f0      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b02:	4b2d      	ldr	r3, [pc, #180]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4929      	ldr	r1, [pc, #164]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	600b      	str	r3, [r1, #0]
 8007b16:	e018      	b.n	8007b4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b18:	4b27      	ldr	r3, [pc, #156]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a26      	ldr	r2, [pc, #152]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007b1e:	f023 0301 	bic.w	r3, r3, #1
 8007b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b24:	f7fc fed2 	bl	80048cc <HAL_GetTick>
 8007b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b2c:	f7fc fece 	bl	80048cc <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e199      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1f0      	bne.n	8007b2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0308 	and.w	r3, r3, #8
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d038      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d019      	beq.n	8007b92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b5e:	4b16      	ldr	r3, [pc, #88]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b62:	4a15      	ldr	r2, [pc, #84]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007b64:	f043 0301 	orr.w	r3, r3, #1
 8007b68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b6a:	f7fc feaf 	bl	80048cc <HAL_GetTick>
 8007b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b70:	e008      	b.n	8007b84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b72:	f7fc feab 	bl	80048cc <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e176      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b84:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0f0      	beq.n	8007b72 <HAL_RCC_OscConfig+0x23a>
 8007b90:	e01a      	b.n	8007bc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b92:	4b09      	ldr	r3, [pc, #36]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b96:	4a08      	ldr	r2, [pc, #32]	@ (8007bb8 <HAL_RCC_OscConfig+0x280>)
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b9e:	f7fc fe95 	bl	80048cc <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ba4:	e00a      	b.n	8007bbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ba6:	f7fc fe91 	bl	80048cc <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d903      	bls.n	8007bbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e15c      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
 8007bb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bbc:	4b91      	ldr	r3, [pc, #580]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1ee      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 80a4 	beq.w	8007d1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bd6:	4b8b      	ldr	r3, [pc, #556]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10d      	bne.n	8007bfe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007be2:	4b88      	ldr	r3, [pc, #544]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be6:	4a87      	ldr	r2, [pc, #540]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bee:	4b85      	ldr	r3, [pc, #532]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bf6:	60bb      	str	r3, [r7, #8]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bfe:	4b82      	ldr	r3, [pc, #520]	@ (8007e08 <HAL_RCC_OscConfig+0x4d0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d118      	bne.n	8007c3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8007e08 <HAL_RCC_OscConfig+0x4d0>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8007e08 <HAL_RCC_OscConfig+0x4d0>)
 8007c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c16:	f7fc fe59 	bl	80048cc <HAL_GetTick>
 8007c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c1c:	e008      	b.n	8007c30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c1e:	f7fc fe55 	bl	80048cc <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b64      	cmp	r3, #100	@ 0x64
 8007c2a:	d901      	bls.n	8007c30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e120      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c30:	4b75      	ldr	r3, [pc, #468]	@ (8007e08 <HAL_RCC_OscConfig+0x4d0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0f0      	beq.n	8007c1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d106      	bne.n	8007c52 <HAL_RCC_OscConfig+0x31a>
 8007c44:	4b6f      	ldr	r3, [pc, #444]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c48:	4a6e      	ldr	r2, [pc, #440]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c50:	e02d      	b.n	8007cae <HAL_RCC_OscConfig+0x376>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10c      	bne.n	8007c74 <HAL_RCC_OscConfig+0x33c>
 8007c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c5e:	4a69      	ldr	r2, [pc, #420]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c66:	4b67      	ldr	r3, [pc, #412]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c6a:	4a66      	ldr	r2, [pc, #408]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c6c:	f023 0304 	bic.w	r3, r3, #4
 8007c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c72:	e01c      	b.n	8007cae <HAL_RCC_OscConfig+0x376>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	d10c      	bne.n	8007c96 <HAL_RCC_OscConfig+0x35e>
 8007c7c:	4b61      	ldr	r3, [pc, #388]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c80:	4a60      	ldr	r2, [pc, #384]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c82:	f043 0304 	orr.w	r3, r3, #4
 8007c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c88:	4b5e      	ldr	r3, [pc, #376]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c8c:	4a5d      	ldr	r2, [pc, #372]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c94:	e00b      	b.n	8007cae <HAL_RCC_OscConfig+0x376>
 8007c96:	4b5b      	ldr	r3, [pc, #364]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9a:	4a5a      	ldr	r2, [pc, #360]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007c9c:	f023 0301 	bic.w	r3, r3, #1
 8007ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ca2:	4b58      	ldr	r3, [pc, #352]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca6:	4a57      	ldr	r2, [pc, #348]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007ca8:	f023 0304 	bic.w	r3, r3, #4
 8007cac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d015      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb6:	f7fc fe09 	bl	80048cc <HAL_GetTick>
 8007cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cbc:	e00a      	b.n	8007cd4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cbe:	f7fc fe05 	bl	80048cc <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e0ce      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0ee      	beq.n	8007cbe <HAL_RCC_OscConfig+0x386>
 8007ce0:	e014      	b.n	8007d0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce2:	f7fc fdf3 	bl	80048cc <HAL_GetTick>
 8007ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ce8:	e00a      	b.n	8007d00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cea:	f7fc fdef 	bl	80048cc <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d901      	bls.n	8007d00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e0b8      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d00:	4b40      	ldr	r3, [pc, #256]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1ee      	bne.n	8007cea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d105      	bne.n	8007d1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d12:	4b3c      	ldr	r3, [pc, #240]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d16:	4a3b      	ldr	r2, [pc, #236]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d1c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80a4 	beq.w	8007e70 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d28:	4b36      	ldr	r3, [pc, #216]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 030c 	and.w	r3, r3, #12
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d06b      	beq.n	8007e0c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d149      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d3c:	4b31      	ldr	r3, [pc, #196]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a30      	ldr	r2, [pc, #192]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d48:	f7fc fdc0 	bl	80048cc <HAL_GetTick>
 8007d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d4e:	e008      	b.n	8007d62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d50:	f7fc fdbc 	bl	80048cc <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e087      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d62:	4b28      	ldr	r3, [pc, #160]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1f0      	bne.n	8007d50 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	69da      	ldr	r2, [r3, #28]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7c:	019b      	lsls	r3, r3, #6
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	3b01      	subs	r3, #1
 8007d88:	041b      	lsls	r3, r3, #16
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d90:	061b      	lsls	r3, r3, #24
 8007d92:	4313      	orrs	r3, r2
 8007d94:	4a1b      	ldr	r2, [pc, #108]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007d96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d9a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d9c:	4b19      	ldr	r3, [pc, #100]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a18      	ldr	r2, [pc, #96]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da8:	f7fc fd90 	bl	80048cc <HAL_GetTick>
 8007dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dae:	e008      	b.n	8007dc2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007db0:	f7fc fd8c 	bl	80048cc <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e057      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dc2:	4b10      	ldr	r3, [pc, #64]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0f0      	beq.n	8007db0 <HAL_RCC_OscConfig+0x478>
 8007dce:	e04f      	b.n	8007e70 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ddc:	f7fc fd76 	bl	80048cc <HAL_GetTick>
 8007de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007de2:	e008      	b.n	8007df6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007de4:	f7fc fd72 	bl	80048cc <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e03d      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007df6:	4b03      	ldr	r3, [pc, #12]	@ (8007e04 <HAL_RCC_OscConfig+0x4cc>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1f0      	bne.n	8007de4 <HAL_RCC_OscConfig+0x4ac>
 8007e02:	e035      	b.n	8007e70 <HAL_RCC_OscConfig+0x538>
 8007e04:	40023800 	.word	0x40023800
 8007e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8007e7c <HAL_RCC_OscConfig+0x544>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d028      	beq.n	8007e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d121      	bne.n	8007e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d11a      	bne.n	8007e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d111      	bne.n	8007e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	3b01      	subs	r3, #1
 8007e56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d107      	bne.n	8007e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d001      	beq.n	8007e70 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40023800 	.word	0x40023800

08007e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e0d0      	b.n	800803a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e98:	4b6a      	ldr	r3, [pc, #424]	@ (8008044 <HAL_RCC_ClockConfig+0x1c4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d910      	bls.n	8007ec8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea6:	4b67      	ldr	r3, [pc, #412]	@ (8008044 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f023 020f 	bic.w	r2, r3, #15
 8007eae:	4965      	ldr	r1, [pc, #404]	@ (8008044 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb6:	4b63      	ldr	r3, [pc, #396]	@ (8008044 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d001      	beq.n	8007ec8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e0b8      	b.n	800803a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d020      	beq.n	8007f16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ee0:	4b59      	ldr	r3, [pc, #356]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	4a58      	ldr	r2, [pc, #352]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007eea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0308 	and.w	r3, r3, #8
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ef8:	4b53      	ldr	r3, [pc, #332]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	4a52      	ldr	r2, [pc, #328]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007efe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007f02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f04:	4b50      	ldr	r3, [pc, #320]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	494d      	ldr	r1, [pc, #308]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d040      	beq.n	8007fa4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d107      	bne.n	8007f3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f2a:	4b47      	ldr	r3, [pc, #284]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d115      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e07f      	b.n	800803a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d107      	bne.n	8007f52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f42:	4b41      	ldr	r3, [pc, #260]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e073      	b.n	800803a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f52:	4b3d      	ldr	r3, [pc, #244]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e06b      	b.n	800803a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f62:	4b39      	ldr	r3, [pc, #228]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f023 0203 	bic.w	r2, r3, #3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	4936      	ldr	r1, [pc, #216]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f74:	f7fc fcaa 	bl	80048cc <HAL_GetTick>
 8007f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f7a:	e00a      	b.n	8007f92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f7c:	f7fc fca6 	bl	80048cc <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e053      	b.n	800803a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f92:	4b2d      	ldr	r3, [pc, #180]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 020c 	and.w	r2, r3, #12
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d1eb      	bne.n	8007f7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fa4:	4b27      	ldr	r3, [pc, #156]	@ (8008044 <HAL_RCC_ClockConfig+0x1c4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d210      	bcs.n	8007fd4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fb2:	4b24      	ldr	r3, [pc, #144]	@ (8008044 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f023 020f 	bic.w	r2, r3, #15
 8007fba:	4922      	ldr	r1, [pc, #136]	@ (8008044 <HAL_RCC_ClockConfig+0x1c4>)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fc2:	4b20      	ldr	r3, [pc, #128]	@ (8008044 <HAL_RCC_ClockConfig+0x1c4>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 030f 	and.w	r3, r3, #15
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d001      	beq.n	8007fd4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e032      	b.n	800803a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d008      	beq.n	8007ff2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fe0:	4b19      	ldr	r3, [pc, #100]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	4916      	ldr	r1, [pc, #88]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0308 	and.w	r3, r3, #8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d009      	beq.n	8008012 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ffe:	4b12      	ldr	r3, [pc, #72]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	490e      	ldr	r1, [pc, #56]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 800800e:	4313      	orrs	r3, r2
 8008010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008012:	f000 f821 	bl	8008058 <HAL_RCC_GetSysClockFreq>
 8008016:	4602      	mov	r2, r0
 8008018:	4b0b      	ldr	r3, [pc, #44]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	091b      	lsrs	r3, r3, #4
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	490a      	ldr	r1, [pc, #40]	@ (800804c <HAL_RCC_ClockConfig+0x1cc>)
 8008024:	5ccb      	ldrb	r3, [r1, r3]
 8008026:	fa22 f303 	lsr.w	r3, r2, r3
 800802a:	4a09      	ldr	r2, [pc, #36]	@ (8008050 <HAL_RCC_ClockConfig+0x1d0>)
 800802c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800802e:	4b09      	ldr	r3, [pc, #36]	@ (8008054 <HAL_RCC_ClockConfig+0x1d4>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f7fb ff36 	bl	8003ea4 <HAL_InitTick>

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40023c00 	.word	0x40023c00
 8008048:	40023800 	.word	0x40023800
 800804c:	080106d8 	.word	0x080106d8
 8008050:	2000003c 	.word	0x2000003c
 8008054:	20000040 	.word	0x20000040

08008058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800805c:	b090      	sub	sp, #64	@ 0x40
 800805e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	637b      	str	r3, [r7, #52]	@ 0x34
 8008064:	2300      	movs	r3, #0
 8008066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008068:	2300      	movs	r3, #0
 800806a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008070:	4b59      	ldr	r3, [pc, #356]	@ (80081d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f003 030c 	and.w	r3, r3, #12
 8008078:	2b08      	cmp	r3, #8
 800807a:	d00d      	beq.n	8008098 <HAL_RCC_GetSysClockFreq+0x40>
 800807c:	2b08      	cmp	r3, #8
 800807e:	f200 80a1 	bhi.w	80081c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <HAL_RCC_GetSysClockFreq+0x34>
 8008086:	2b04      	cmp	r3, #4
 8008088:	d003      	beq.n	8008092 <HAL_RCC_GetSysClockFreq+0x3a>
 800808a:	e09b      	b.n	80081c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800808c:	4b53      	ldr	r3, [pc, #332]	@ (80081dc <HAL_RCC_GetSysClockFreq+0x184>)
 800808e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008090:	e09b      	b.n	80081ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008092:	4b53      	ldr	r3, [pc, #332]	@ (80081e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008094:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008096:	e098      	b.n	80081ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008098:	4b4f      	ldr	r3, [pc, #316]	@ (80081d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80080a2:	4b4d      	ldr	r3, [pc, #308]	@ (80081d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d028      	beq.n	8008100 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ae:	4b4a      	ldr	r3, [pc, #296]	@ (80081d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	099b      	lsrs	r3, r3, #6
 80080b4:	2200      	movs	r2, #0
 80080b6:	623b      	str	r3, [r7, #32]
 80080b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80080c0:	2100      	movs	r1, #0
 80080c2:	4b47      	ldr	r3, [pc, #284]	@ (80081e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80080c4:	fb03 f201 	mul.w	r2, r3, r1
 80080c8:	2300      	movs	r3, #0
 80080ca:	fb00 f303 	mul.w	r3, r0, r3
 80080ce:	4413      	add	r3, r2
 80080d0:	4a43      	ldr	r2, [pc, #268]	@ (80081e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80080d2:	fba0 1202 	umull	r1, r2, r0, r2
 80080d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080d8:	460a      	mov	r2, r1
 80080da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080de:	4413      	add	r3, r2
 80080e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e4:	2200      	movs	r2, #0
 80080e6:	61bb      	str	r3, [r7, #24]
 80080e8:	61fa      	str	r2, [r7, #28]
 80080ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080f2:	f7f8 f8dd 	bl	80002b0 <__aeabi_uldivmod>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4613      	mov	r3, r2
 80080fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080fe:	e053      	b.n	80081a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008100:	4b35      	ldr	r3, [pc, #212]	@ (80081d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	099b      	lsrs	r3, r3, #6
 8008106:	2200      	movs	r2, #0
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	617a      	str	r2, [r7, #20]
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008112:	f04f 0b00 	mov.w	fp, #0
 8008116:	4652      	mov	r2, sl
 8008118:	465b      	mov	r3, fp
 800811a:	f04f 0000 	mov.w	r0, #0
 800811e:	f04f 0100 	mov.w	r1, #0
 8008122:	0159      	lsls	r1, r3, #5
 8008124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008128:	0150      	lsls	r0, r2, #5
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	ebb2 080a 	subs.w	r8, r2, sl
 8008132:	eb63 090b 	sbc.w	r9, r3, fp
 8008136:	f04f 0200 	mov.w	r2, #0
 800813a:	f04f 0300 	mov.w	r3, #0
 800813e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008142:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008146:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800814a:	ebb2 0408 	subs.w	r4, r2, r8
 800814e:	eb63 0509 	sbc.w	r5, r3, r9
 8008152:	f04f 0200 	mov.w	r2, #0
 8008156:	f04f 0300 	mov.w	r3, #0
 800815a:	00eb      	lsls	r3, r5, #3
 800815c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008160:	00e2      	lsls	r2, r4, #3
 8008162:	4614      	mov	r4, r2
 8008164:	461d      	mov	r5, r3
 8008166:	eb14 030a 	adds.w	r3, r4, sl
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	eb45 030b 	adc.w	r3, r5, fp
 8008170:	607b      	str	r3, [r7, #4]
 8008172:	f04f 0200 	mov.w	r2, #0
 8008176:	f04f 0300 	mov.w	r3, #0
 800817a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800817e:	4629      	mov	r1, r5
 8008180:	028b      	lsls	r3, r1, #10
 8008182:	4621      	mov	r1, r4
 8008184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008188:	4621      	mov	r1, r4
 800818a:	028a      	lsls	r2, r1, #10
 800818c:	4610      	mov	r0, r2
 800818e:	4619      	mov	r1, r3
 8008190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008192:	2200      	movs	r2, #0
 8008194:	60bb      	str	r3, [r7, #8]
 8008196:	60fa      	str	r2, [r7, #12]
 8008198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800819c:	f7f8 f888 	bl	80002b0 <__aeabi_uldivmod>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4613      	mov	r3, r2
 80081a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80081a8:	4b0b      	ldr	r3, [pc, #44]	@ (80081d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	0c1b      	lsrs	r3, r3, #16
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	3301      	adds	r3, #1
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80081b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80081ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081c2:	e002      	b.n	80081ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081c4:	4b05      	ldr	r3, [pc, #20]	@ (80081dc <HAL_RCC_GetSysClockFreq+0x184>)
 80081c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3740      	adds	r7, #64	@ 0x40
 80081d0:	46bd      	mov	sp, r7
 80081d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081d6:	bf00      	nop
 80081d8:	40023800 	.word	0x40023800
 80081dc:	00f42400 	.word	0x00f42400
 80081e0:	017d7840 	.word	0x017d7840

080081e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081e8:	4b03      	ldr	r3, [pc, #12]	@ (80081f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80081ea:	681b      	ldr	r3, [r3, #0]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	2000003c 	.word	0x2000003c

080081fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008200:	f7ff fff0 	bl	80081e4 <HAL_RCC_GetHCLKFreq>
 8008204:	4602      	mov	r2, r0
 8008206:	4b05      	ldr	r3, [pc, #20]	@ (800821c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	0a9b      	lsrs	r3, r3, #10
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	4903      	ldr	r1, [pc, #12]	@ (8008220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008212:	5ccb      	ldrb	r3, [r1, r3]
 8008214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008218:	4618      	mov	r0, r3
 800821a:	bd80      	pop	{r7, pc}
 800821c:	40023800 	.word	0x40023800
 8008220:	080106e8 	.word	0x080106e8

08008224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008228:	f7ff ffdc 	bl	80081e4 <HAL_RCC_GetHCLKFreq>
 800822c:	4602      	mov	r2, r0
 800822e:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	0b5b      	lsrs	r3, r3, #13
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	4903      	ldr	r1, [pc, #12]	@ (8008248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800823a:	5ccb      	ldrb	r3, [r1, r3]
 800823c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008240:	4618      	mov	r0, r3
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40023800 	.word	0x40023800
 8008248:	080106e8 	.word	0x080106e8

0800824c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	220f      	movs	r2, #15
 800825a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800825c:	4b12      	ldr	r3, [pc, #72]	@ (80082a8 <HAL_RCC_GetClockConfig+0x5c>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f003 0203 	and.w	r2, r3, #3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008268:	4b0f      	ldr	r3, [pc, #60]	@ (80082a8 <HAL_RCC_GetClockConfig+0x5c>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008274:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008280:	4b09      	ldr	r3, [pc, #36]	@ (80082a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	08db      	lsrs	r3, r3, #3
 8008286:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800828e:	4b07      	ldr	r3, [pc, #28]	@ (80082ac <HAL_RCC_GetClockConfig+0x60>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 020f 	and.w	r2, r3, #15
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	601a      	str	r2, [r3, #0]
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	40023800 	.word	0x40023800
 80082ac:	40023c00 	.word	0x40023c00

080082b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d012      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082d8:	4b69      	ldr	r3, [pc, #420]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	4a68      	ldr	r2, [pc, #416]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80082e2:	6093      	str	r3, [r2, #8]
 80082e4:	4b66      	ldr	r3, [pc, #408]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ec:	4964      	ldr	r1, [pc, #400]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082fa:	2301      	movs	r3, #1
 80082fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d017      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800830a:	4b5d      	ldr	r3, [pc, #372]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008310:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008318:	4959      	ldr	r1, [pc, #356]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800831a:	4313      	orrs	r3, r2
 800831c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008328:	d101      	bne.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800832a:	2301      	movs	r3, #1
 800832c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d017      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008346:	4b4e      	ldr	r3, [pc, #312]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800834c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008354:	494a      	ldr	r1, [pc, #296]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008360:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008364:	d101      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008366:	2301      	movs	r3, #1
 8008368:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008372:	2301      	movs	r3, #1
 8008374:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008382:	2301      	movs	r3, #1
 8008384:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 808b 	beq.w	80084aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008394:	4b3a      	ldr	r3, [pc, #232]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008398:	4a39      	ldr	r2, [pc, #228]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800839a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800839e:	6413      	str	r3, [r2, #64]	@ 0x40
 80083a0:	4b37      	ldr	r3, [pc, #220]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083a8:	60bb      	str	r3, [r7, #8]
 80083aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083ac:	4b35      	ldr	r3, [pc, #212]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a34      	ldr	r2, [pc, #208]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b8:	f7fc fa88 	bl	80048cc <HAL_GetTick>
 80083bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083be:	e008      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083c0:	f7fc fa84 	bl	80048cc <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b64      	cmp	r3, #100	@ 0x64
 80083cc:	d901      	bls.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e357      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083d2:	4b2c      	ldr	r3, [pc, #176]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0f0      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083de:	4b28      	ldr	r3, [pc, #160]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d035      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d02e      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083fc:	4b20      	ldr	r3, [pc, #128]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008404:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008406:	4b1e      	ldr	r3, [pc, #120]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840a:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008410:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008412:	4b1b      	ldr	r3, [pc, #108]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008416:	4a1a      	ldr	r2, [pc, #104]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800841c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800841e:	4a18      	ldr	r2, [pc, #96]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008424:	4b16      	ldr	r3, [pc, #88]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b01      	cmp	r3, #1
 800842e:	d114      	bne.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008430:	f7fc fa4c 	bl	80048cc <HAL_GetTick>
 8008434:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008436:	e00a      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008438:	f7fc fa48 	bl	80048cc <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008446:	4293      	cmp	r3, r2
 8008448:	d901      	bls.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e319      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800844e:	4b0c      	ldr	r3, [pc, #48]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0ee      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800845e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008466:	d111      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008468:	4b05      	ldr	r3, [pc, #20]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008474:	4b04      	ldr	r3, [pc, #16]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008476:	400b      	ands	r3, r1
 8008478:	4901      	ldr	r1, [pc, #4]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800847a:	4313      	orrs	r3, r2
 800847c:	608b      	str	r3, [r1, #8]
 800847e:	e00b      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008480:	40023800 	.word	0x40023800
 8008484:	40007000 	.word	0x40007000
 8008488:	0ffffcff 	.word	0x0ffffcff
 800848c:	4baa      	ldr	r3, [pc, #680]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	4aa9      	ldr	r2, [pc, #676]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008492:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008496:	6093      	str	r3, [r2, #8]
 8008498:	4ba7      	ldr	r3, [pc, #668]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800849a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084a4:	49a4      	ldr	r1, [pc, #656]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0310 	and.w	r3, r3, #16
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d010      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084b6:	4ba0      	ldr	r3, [pc, #640]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084bc:	4a9e      	ldr	r2, [pc, #632]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80084c6:	4b9c      	ldr	r3, [pc, #624]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d0:	4999      	ldr	r1, [pc, #612]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084e4:	4b94      	ldr	r3, [pc, #592]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084f2:	4991      	ldr	r1, [pc, #580]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008506:	4b8c      	ldr	r3, [pc, #560]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800850c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008514:	4988      	ldr	r1, [pc, #544]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008528:	4b83      	ldr	r3, [pc, #524]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800852e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008536:	4980      	ldr	r1, [pc, #512]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008538:	4313      	orrs	r3, r2
 800853a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800854a:	4b7b      	ldr	r3, [pc, #492]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008550:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008558:	4977      	ldr	r1, [pc, #476]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855a:	4313      	orrs	r3, r2
 800855c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800856c:	4b72      	ldr	r3, [pc, #456]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008572:	f023 0203 	bic.w	r2, r3, #3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800857a:	496f      	ldr	r1, [pc, #444]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857c:	4313      	orrs	r3, r2
 800857e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800858e:	4b6a      	ldr	r3, [pc, #424]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008594:	f023 020c 	bic.w	r2, r3, #12
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800859c:	4966      	ldr	r1, [pc, #408]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085b0:	4b61      	ldr	r3, [pc, #388]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085be:	495e      	ldr	r1, [pc, #376]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085d2:	4b59      	ldr	r3, [pc, #356]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085e0:	4955      	ldr	r1, [pc, #340]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085f4:	4b50      	ldr	r3, [pc, #320]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008602:	494d      	ldr	r1, [pc, #308]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008604:	4313      	orrs	r3, r2
 8008606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008616:	4b48      	ldr	r3, [pc, #288]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008624:	4944      	ldr	r1, [pc, #272]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00a      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008638:	4b3f      	ldr	r3, [pc, #252]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800863e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008646:	493c      	ldr	r1, [pc, #240]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008648:	4313      	orrs	r3, r2
 800864a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800865a:	4b37      	ldr	r3, [pc, #220]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008660:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008668:	4933      	ldr	r1, [pc, #204]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800866a:	4313      	orrs	r3, r2
 800866c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800867c:	4b2e      	ldr	r3, [pc, #184]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008682:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800868a:	492b      	ldr	r1, [pc, #172]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800868c:	4313      	orrs	r3, r2
 800868e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d011      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800869e:	4b26      	ldr	r3, [pc, #152]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ac:	4922      	ldr	r1, [pc, #136]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086bc:	d101      	bne.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80086be:	2301      	movs	r3, #1
 80086c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0308 	and.w	r3, r3, #8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80086ce:	2301      	movs	r3, #1
 80086d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086de:	4b16      	ldr	r3, [pc, #88]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ec:	4912      	ldr	r1, [pc, #72]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008700:	4b0d      	ldr	r3, [pc, #52]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008706:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008710:	4909      	ldr	r1, [pc, #36]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008712:	4313      	orrs	r3, r2
 8008714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d006      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 80d9 	beq.w	80088de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800872c:	4b02      	ldr	r3, [pc, #8]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a01      	ldr	r2, [pc, #4]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008732:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008736:	e001      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008738:	40023800 	.word	0x40023800
 800873c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800873e:	f7fc f8c5 	bl	80048cc <HAL_GetTick>
 8008742:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008744:	e008      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008746:	f7fc f8c1 	bl	80048cc <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	2b64      	cmp	r3, #100	@ 0x64
 8008752:	d901      	bls.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e194      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008758:	4b6c      	ldr	r3, [pc, #432]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1f0      	bne.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d021      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008774:	2b00      	cmp	r3, #0
 8008776:	d11d      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008778:	4b64      	ldr	r3, [pc, #400]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800877a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800877e:	0c1b      	lsrs	r3, r3, #16
 8008780:	f003 0303 	and.w	r3, r3, #3
 8008784:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008786:	4b61      	ldr	r3, [pc, #388]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800878c:	0e1b      	lsrs	r3, r3, #24
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	019a      	lsls	r2, r3, #6
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	041b      	lsls	r3, r3, #16
 800879e:	431a      	orrs	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	061b      	lsls	r3, r3, #24
 80087a4:	431a      	orrs	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	071b      	lsls	r3, r3, #28
 80087ac:	4957      	ldr	r1, [pc, #348]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d004      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087c8:	d00a      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d02e      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087de:	d129      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087e0:	4b4a      	ldr	r3, [pc, #296]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087e6:	0c1b      	lsrs	r3, r3, #16
 80087e8:	f003 0303 	and.w	r3, r3, #3
 80087ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087ee:	4b47      	ldr	r3, [pc, #284]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087f4:	0f1b      	lsrs	r3, r3, #28
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	019a      	lsls	r2, r3, #6
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	041b      	lsls	r3, r3, #16
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	061b      	lsls	r3, r3, #24
 800880e:	431a      	orrs	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	071b      	lsls	r3, r3, #28
 8008814:	493d      	ldr	r1, [pc, #244]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800881c:	4b3b      	ldr	r3, [pc, #236]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800881e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008822:	f023 021f 	bic.w	r2, r3, #31
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882a:	3b01      	subs	r3, #1
 800882c:	4937      	ldr	r1, [pc, #220]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800882e:	4313      	orrs	r3, r2
 8008830:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d01d      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008840:	4b32      	ldr	r3, [pc, #200]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008846:	0e1b      	lsrs	r3, r3, #24
 8008848:	f003 030f 	and.w	r3, r3, #15
 800884c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800884e:	4b2f      	ldr	r3, [pc, #188]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008854:	0f1b      	lsrs	r3, r3, #28
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	019a      	lsls	r2, r3, #6
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	041b      	lsls	r3, r3, #16
 8008868:	431a      	orrs	r2, r3
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	061b      	lsls	r3, r3, #24
 800886e:	431a      	orrs	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	071b      	lsls	r3, r3, #28
 8008874:	4925      	ldr	r1, [pc, #148]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008876:	4313      	orrs	r3, r2
 8008878:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d011      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	019a      	lsls	r2, r3, #6
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	061b      	lsls	r3, r3, #24
 800889c:	431a      	orrs	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	071b      	lsls	r3, r3, #28
 80088a4:	4919      	ldr	r1, [pc, #100]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088ac:	4b17      	ldr	r3, [pc, #92]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a16      	ldr	r2, [pc, #88]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b8:	f7fc f808 	bl	80048cc <HAL_GetTick>
 80088bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088be:	e008      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088c0:	f7fc f804 	bl	80048cc <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b64      	cmp	r3, #100	@ 0x64
 80088cc:	d901      	bls.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e0d7      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088d2:	4b0e      	ldr	r3, [pc, #56]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f0      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	f040 80cd 	bne.w	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088e6:	4b09      	ldr	r3, [pc, #36]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a08      	ldr	r2, [pc, #32]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088f2:	f7fb ffeb 	bl	80048cc <HAL_GetTick>
 80088f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088f8:	e00a      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088fa:	f7fb ffe7 	bl	80048cc <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b64      	cmp	r3, #100	@ 0x64
 8008906:	d903      	bls.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e0ba      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800890c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008910:	4b5e      	ldr	r3, [pc, #376]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800891c:	d0ed      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d009      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800893a:	2b00      	cmp	r3, #0
 800893c:	d02e      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008942:	2b00      	cmp	r3, #0
 8008944:	d12a      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008946:	4b51      	ldr	r3, [pc, #324]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800894c:	0c1b      	lsrs	r3, r3, #16
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008954:	4b4d      	ldr	r3, [pc, #308]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800895a:	0f1b      	lsrs	r3, r3, #28
 800895c:	f003 0307 	and.w	r3, r3, #7
 8008960:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	019a      	lsls	r2, r3, #6
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	041b      	lsls	r3, r3, #16
 800896c:	431a      	orrs	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	061b      	lsls	r3, r3, #24
 8008974:	431a      	orrs	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	071b      	lsls	r3, r3, #28
 800897a:	4944      	ldr	r1, [pc, #272]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800897c:	4313      	orrs	r3, r2
 800897e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008982:	4b42      	ldr	r3, [pc, #264]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008988:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008990:	3b01      	subs	r3, #1
 8008992:	021b      	lsls	r3, r3, #8
 8008994:	493d      	ldr	r1, [pc, #244]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008996:	4313      	orrs	r3, r2
 8008998:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d022      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089b0:	d11d      	bne.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089b2:	4b36      	ldr	r3, [pc, #216]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b8:	0e1b      	lsrs	r3, r3, #24
 80089ba:	f003 030f 	and.w	r3, r3, #15
 80089be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089c0:	4b32      	ldr	r3, [pc, #200]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c6:	0f1b      	lsrs	r3, r3, #28
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	019a      	lsls	r2, r3, #6
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a1b      	ldr	r3, [r3, #32]
 80089d8:	041b      	lsls	r3, r3, #16
 80089da:	431a      	orrs	r2, r3
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	061b      	lsls	r3, r3, #24
 80089e0:	431a      	orrs	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	071b      	lsls	r3, r3, #28
 80089e6:	4929      	ldr	r1, [pc, #164]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0308 	and.w	r3, r3, #8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d028      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089fa:	4b24      	ldr	r3, [pc, #144]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a00:	0e1b      	lsrs	r3, r3, #24
 8008a02:	f003 030f 	and.w	r3, r3, #15
 8008a06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a08:	4b20      	ldr	r3, [pc, #128]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a0e:	0c1b      	lsrs	r3, r3, #16
 8008a10:	f003 0303 	and.w	r3, r3, #3
 8008a14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	019a      	lsls	r2, r3, #6
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	041b      	lsls	r3, r3, #16
 8008a20:	431a      	orrs	r2, r3
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	061b      	lsls	r3, r3, #24
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	071b      	lsls	r3, r3, #28
 8008a2e:	4917      	ldr	r1, [pc, #92]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a36:	4b15      	ldr	r3, [pc, #84]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a44:	4911      	ldr	r1, [pc, #68]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a0e      	ldr	r2, [pc, #56]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a58:	f7fb ff38 	bl	80048cc <HAL_GetTick>
 8008a5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a5e:	e008      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a60:	f7fb ff34 	bl	80048cc <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	2b64      	cmp	r3, #100	@ 0x64
 8008a6c:	d901      	bls.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e007      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a72:	4b06      	ldr	r3, [pc, #24]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a7e:	d1ef      	bne.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3720      	adds	r7, #32
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	40023800 	.word	0x40023800

08008a90 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e071      	b.n	8008b8a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	7f5b      	ldrb	r3, [r3, #29]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d105      	bne.n	8008abc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7f9 fb32 	bl	8002120 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b10      	cmp	r3, #16
 8008ace:	d053      	beq.n	8008b78 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	22ca      	movs	r2, #202	@ 0xca
 8008ad6:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2253      	movs	r2, #83	@ 0x53
 8008ade:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fac9 	bl	8009078 <RTC_EnterInitMode>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d12a      	bne.n	8008b46 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6899      	ldr	r1, [r3, #8]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4b26      	ldr	r3, [pc, #152]	@ (8008b94 <HAL_RTC_Init+0x104>)
 8008afc:	400b      	ands	r3, r1
 8008afe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6899      	ldr	r1, [r3, #8]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	68d2      	ldr	r2, [r2, #12]
 8008b26:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6919      	ldr	r1, [r3, #16]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	041a      	lsls	r2, r3, #16
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fad2 	bl	80090e6 <RTC_ExitInitMode>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d110      	bne.n	8008b6e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 0208 	bic.w	r2, r2, #8
 8008b5a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699a      	ldr	r2, [r3, #24]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	22ff      	movs	r2, #255	@ 0xff
 8008b74:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b76:	e001      	b.n	8008b7c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d102      	bne.n	8008b88 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	ff8fffbf 	.word	0xff8fffbf

08008b98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b98:	b590      	push	{r4, r7, lr}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	7f1b      	ldrb	r3, [r3, #28]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d101      	bne.n	8008bb4 <HAL_RTC_SetTime+0x1c>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e085      	b.n	8008cc0 <HAL_RTC_SetTime+0x128>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d126      	bne.n	8008c14 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 faa6 	bl	8009130 <RTC_ByteToBcd2>
 8008be4:	4603      	mov	r3, r0
 8008be6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	785b      	ldrb	r3, [r3, #1]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fa9f 	bl	8009130 <RTC_ByteToBcd2>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bf6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	789b      	ldrb	r3, [r3, #2]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 fa97 	bl	8009130 <RTC_ByteToBcd2>
 8008c02:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c04:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	78db      	ldrb	r3, [r3, #3]
 8008c0c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	617b      	str	r3, [r7, #20]
 8008c12:	e018      	b.n	8008c46 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d102      	bne.n	8008c28 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2200      	movs	r2, #0
 8008c26:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008c34:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008c3a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	78db      	ldrb	r3, [r3, #3]
 8008c40:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008c42:	4313      	orrs	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	22ca      	movs	r2, #202	@ 0xca
 8008c4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2253      	movs	r2, #83	@ 0x53
 8008c54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fa0e 	bl	8009078 <RTC_EnterInitMode>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c60:	7cfb      	ldrb	r3, [r7, #19]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d11e      	bne.n	8008ca4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	6979      	ldr	r1, [r7, #20]
 8008c6c:	4b16      	ldr	r3, [pc, #88]	@ (8008cc8 <HAL_RTC_SetTime+0x130>)
 8008c6e:	400b      	ands	r3, r1
 8008c70:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008c80:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6899      	ldr	r1, [r3, #8]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	431a      	orrs	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fa23 	bl	80090e6 <RTC_ExitInitMode>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008ca4:	7cfb      	ldrb	r3, [r7, #19]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2201      	movs	r2, #1
 8008cae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	22ff      	movs	r2, #255	@ 0xff
 8008cb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	771a      	strb	r2, [r3, #28]

  return status;
 8008cbe:	7cfb      	ldrb	r3, [r7, #19]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	371c      	adds	r7, #28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd90      	pop	{r4, r7, pc}
 8008cc8:	007f7f7f 	.word	0x007f7f7f

08008ccc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008ccc:	b590      	push	{r4, r7, lr}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	7f1b      	ldrb	r3, [r3, #28]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <HAL_RTC_SetDate+0x1c>
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e06f      	b.n	8008dc8 <HAL_RTC_SetDate+0xfc>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2201      	movs	r2, #1
 8008cec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10e      	bne.n	8008d18 <HAL_RTC_SetDate+0x4c>
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	f003 0310 	and.w	r3, r3, #16
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d008      	beq.n	8008d18 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	785b      	ldrb	r3, [r3, #1]
 8008d0a:	f023 0310 	bic.w	r3, r3, #16
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	330a      	adds	r3, #10
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d11c      	bne.n	8008d58 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	78db      	ldrb	r3, [r3, #3]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 fa04 	bl	8009130 <RTC_ByteToBcd2>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 f9fd 	bl	8009130 <RTC_ByteToBcd2>
 8008d36:	4603      	mov	r3, r0
 8008d38:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d3a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	789b      	ldrb	r3, [r3, #2]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 f9f5 	bl	8009130 <RTC_ByteToBcd2>
 8008d46:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d48:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	e00e      	b.n	8008d76 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	78db      	ldrb	r3, [r3, #3]
 8008d5c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	785b      	ldrb	r3, [r3, #1]
 8008d62:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d64:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d6a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	22ca      	movs	r2, #202	@ 0xca
 8008d7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2253      	movs	r2, #83	@ 0x53
 8008d84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 f976 	bl	8009078 <RTC_EnterInitMode>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d90:	7cfb      	ldrb	r3, [r7, #19]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10a      	bne.n	8008dac <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	6979      	ldr	r1, [r7, #20]
 8008d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd0 <HAL_RTC_SetDate+0x104>)
 8008d9e:	400b      	ands	r3, r1
 8008da0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 f99f 	bl	80090e6 <RTC_ExitInitMode>
 8008da8:	4603      	mov	r3, r0
 8008daa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008dac:	7cfb      	ldrb	r3, [r7, #19]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2201      	movs	r2, #1
 8008db6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	22ff      	movs	r2, #255	@ 0xff
 8008dbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	771a      	strb	r2, [r3, #28]

  return status;
 8008dc6:	7cfb      	ldrb	r3, [r7, #19]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	371c      	adds	r7, #28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd90      	pop	{r4, r7, pc}
 8008dd0:	00ffff3f 	.word	0x00ffff3f

08008dd4 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008dd4:	b590      	push	{r4, r7, lr}
 8008dd6:	b089      	sub	sp, #36	@ 0x24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	7f1b      	ldrb	r3, [r3, #28]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d101      	bne.n	8008df8 <HAL_RTC_SetAlarm+0x24>
 8008df4:	2302      	movs	r3, #2
 8008df6:	e113      	b.n	8009020 <HAL_RTC_SetAlarm+0x24c>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2202      	movs	r2, #2
 8008e02:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d137      	bne.n	8008e7a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d102      	bne.n	8008e1e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f984 	bl	8009130 <RTC_ByteToBcd2>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f97d 	bl	8009130 <RTC_ByteToBcd2>
 8008e36:	4603      	mov	r3, r0
 8008e38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008e3a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	789b      	ldrb	r3, [r3, #2]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f975 	bl	8009130 <RTC_ByteToBcd2>
 8008e46:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008e48:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	78db      	ldrb	r3, [r3, #3]
 8008e50:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008e52:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 f967 	bl	8009130 <RTC_ByteToBcd2>
 8008e62:	4603      	mov	r3, r0
 8008e64:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008e66:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008e6e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008e74:	4313      	orrs	r3, r2
 8008e76:	61fb      	str	r3, [r7, #28]
 8008e78:	e023      	b.n	8008ec2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	785b      	ldrb	r3, [r3, #1]
 8008e98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008e9a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008ea0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	78db      	ldrb	r3, [r3, #3]
 8008ea6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008ea8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008eb0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008eb2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008eb8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	22ca      	movs	r2, #202	@ 0xca
 8008ed4:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2253      	movs	r2, #83	@ 0x53
 8008edc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ee6:	d148      	bne.n	8008f7a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	689a      	ldr	r2, [r3, #8]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ef6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f06:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008f18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f1a:	f7fb fcd7 	bl	80048cc <HAL_GetTick>
 8008f1e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008f20:	e013      	b.n	8008f4a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f22:	f7fb fcd3 	bl	80048cc <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f30:	d90b      	bls.n	8008f4a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	22ff      	movs	r2, #255	@ 0xff
 8008f38:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2203      	movs	r2, #3
 8008f3e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e06a      	b.n	8009020 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0e4      	beq.n	8008f22 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689a      	ldr	r2, [r3, #8]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f76:	609a      	str	r2, [r3, #8]
 8008f78:	e047      	b.n	800900a <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008f88:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689a      	ldr	r2, [r3, #8]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f98:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008faa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fac:	f7fb fc8e 	bl	80048cc <HAL_GetTick>
 8008fb0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008fb2:	e013      	b.n	8008fdc <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008fb4:	f7fb fc8a 	bl	80048cc <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fc2:	d90b      	bls.n	8008fdc <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	22ff      	movs	r2, #255	@ 0xff
 8008fca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2203      	movs	r2, #3
 8008fd0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e021      	b.n	8009020 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0e4      	beq.n	8008fb4 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009008:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	22ff      	movs	r2, #255	@ 0xff
 8009010:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2201      	movs	r2, #1
 8009016:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3724      	adds	r7, #36	@ 0x24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd90      	pop	{r4, r7, pc}

08009028 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009042:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009044:	f7fb fc42 	bl	80048cc <HAL_GetTick>
 8009048:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800904a:	e009      	b.n	8009060 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800904c:	f7fb fc3e 	bl	80048cc <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800905a:	d901      	bls.n	8009060 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e007      	b.n	8009070 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0ee      	beq.n	800904c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009092:	2b00      	cmp	r3, #0
 8009094:	d122      	bne.n	80090dc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68da      	ldr	r2, [r3, #12]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80090a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090a6:	f7fb fc11 	bl	80048cc <HAL_GetTick>
 80090aa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80090ac:	e00c      	b.n	80090c8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090ae:	f7fb fc0d 	bl	80048cc <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090bc:	d904      	bls.n	80090c8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2204      	movs	r2, #4
 80090c2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d102      	bne.n	80090dc <RTC_EnterInitMode+0x64>
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d1e8      	bne.n	80090ae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68da      	ldr	r2, [r3, #12]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009100:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f003 0320 	and.w	r3, r3, #32
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7ff ff89 	bl	8009028 <HAL_RTC_WaitForSynchro>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d004      	beq.n	8009126 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2204      	movs	r2, #4
 8009120:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800913e:	e005      	b.n	800914c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3301      	adds	r3, #1
 8009144:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	3b0a      	subs	r3, #10
 800914a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800914c:	79fb      	ldrb	r3, [r7, #7]
 800914e:	2b09      	cmp	r3, #9
 8009150:	d8f6      	bhi.n	8009140 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	b2db      	uxtb	r3, r3
 8009156:	011b      	lsls	r3, r3, #4
 8009158:	b2da      	uxtb	r2, r3
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	4313      	orrs	r3, r2
 800915e:	b2db      	uxtb	r3, r3
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800916c:	b480      	push	{r7}
 800916e:	b087      	sub	sp, #28
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	7f1b      	ldrb	r3, [r3, #28]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d101      	bne.n	8009188 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009184:	2302      	movs	r3, #2
 8009186:	e050      	b.n	800922a <HAL_RTCEx_SetTimeStamp+0xbe>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2201      	movs	r2, #1
 800918c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2202      	movs	r2, #2
 8009192:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0206 	bic.w	r2, r2, #6
 80091a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009238 <HAL_RTCEx_SetTimeStamp+0xcc>)
 80091bc:	4013      	ands	r3, r2
 80091be:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	22ca      	movs	r2, #202	@ 0xca
 80091ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2253      	movs	r2, #83	@ 0x53
 80091d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 80091f0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8009202:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689a      	ldr	r2, [r3, #8]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009212:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	22ff      	movs	r2, #255	@ 0xff
 800921a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2201      	movs	r2, #1
 8009220:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	fffff7f7 	.word	0xfffff7f7

0800923c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e025      	b.n	800929c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d106      	bne.n	800926a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7f7 fc57 	bl	8000b18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2202      	movs	r2, #2
 800926e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3304      	adds	r3, #4
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f001 fa33 	bl	800a6e8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6818      	ldr	r0, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	461a      	mov	r2, r3
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	f001 fa87 	bl	800a7a0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80092b6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d101      	bne.n	80092c2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80092be:	2302      	movs	r3, #2
 80092c0:	e021      	b.n	8009306 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d002      	beq.n	80092ce <HAL_SDRAM_SendCommand+0x2a>
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	d118      	bne.n	8009300 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2202      	movs	r2, #2
 80092d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 fac8 	bl	800a874 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d104      	bne.n	80092f6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2205      	movs	r2, #5
 80092f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092f4:	e006      	b.n	8009304 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092fe:	e001      	b.n	8009304 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d101      	bne.n	8009328 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009324:	2302      	movs	r3, #2
 8009326:	e016      	b.n	8009356 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b01      	cmp	r3, #1
 8009332:	d10f      	bne.n	8009354 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	f001 faba 	bl	800a8bc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	e000      	b.n	8009356 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
}
 8009356:	4618      	mov	r0, r3
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e09d      	b.n	80094ac <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	d108      	bne.n	800938a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009380:	d009      	beq.n	8009396 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	61da      	str	r2, [r3, #28]
 8009388:	e005      	b.n	8009396 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d106      	bne.n	80093b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7f8 ff21 	bl	80021f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2202      	movs	r2, #2
 80093ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093cc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80093d6:	d902      	bls.n	80093de <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80093d8:	2300      	movs	r3, #0
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	e002      	b.n	80093e4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80093de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80093ec:	d007      	beq.n	80093fe <HAL_SPI_Init+0xa0>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80093f6:	d002      	beq.n	80093fe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800940e:	431a      	orrs	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800942c:	431a      	orrs	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009436:	431a      	orrs	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009440:	ea42 0103 	orr.w	r1, r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009448:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	0c1b      	lsrs	r3, r3, #16
 800945a:	f003 0204 	and.w	r2, r3, #4
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009462:	f003 0310 	and.w	r3, r3, #16
 8009466:	431a      	orrs	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800946c:	f003 0308 	and.w	r3, r3, #8
 8009470:	431a      	orrs	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800947a:	ea42 0103 	orr.w	r1, r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69da      	ldr	r2, [r3, #28]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800949a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e049      	b.n	800955a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fa ff7a 	bl	80043d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f000 fac0 	bl	8009a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b01      	cmp	r3, #1
 8009576:	d001      	beq.n	800957c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e054      	b.n	8009626 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2202      	movs	r2, #2
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f042 0201 	orr.w	r2, r2, #1
 8009592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a26      	ldr	r2, [pc, #152]	@ (8009634 <HAL_TIM_Base_Start_IT+0xd0>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d022      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095a6:	d01d      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a22      	ldr	r2, [pc, #136]	@ (8009638 <HAL_TIM_Base_Start_IT+0xd4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d018      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a21      	ldr	r2, [pc, #132]	@ (800963c <HAL_TIM_Base_Start_IT+0xd8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d013      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009640 <HAL_TIM_Base_Start_IT+0xdc>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00e      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a1e      	ldr	r2, [pc, #120]	@ (8009644 <HAL_TIM_Base_Start_IT+0xe0>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d009      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009648 <HAL_TIM_Base_Start_IT+0xe4>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d004      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a1b      	ldr	r2, [pc, #108]	@ (800964c <HAL_TIM_Base_Start_IT+0xe8>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d115      	bne.n	8009610 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	4b19      	ldr	r3, [pc, #100]	@ (8009650 <HAL_TIM_Base_Start_IT+0xec>)
 80095ec:	4013      	ands	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b06      	cmp	r3, #6
 80095f4:	d015      	beq.n	8009622 <HAL_TIM_Base_Start_IT+0xbe>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095fc:	d011      	beq.n	8009622 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f042 0201 	orr.w	r2, r2, #1
 800960c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800960e:	e008      	b.n	8009622 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f042 0201 	orr.w	r2, r2, #1
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e000      	b.n	8009624 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009622:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	40010000 	.word	0x40010000
 8009638:	40000400 	.word	0x40000400
 800963c:	40000800 	.word	0x40000800
 8009640:	40000c00 	.word	0x40000c00
 8009644:	40010400 	.word	0x40010400
 8009648:	40014000 	.word	0x40014000
 800964c:	40001800 	.word	0x40001800
 8009650:	00010007 	.word	0x00010007

08009654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	2b02      	cmp	r3, #2
 8009668:	d122      	bne.n	80096b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b02      	cmp	r3, #2
 8009676:	d11b      	bne.n	80096b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f06f 0202 	mvn.w	r2, #2
 8009680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f9d0 	bl	8009a3c <HAL_TIM_IC_CaptureCallback>
 800969c:	e005      	b.n	80096aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f9c2 	bl	8009a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f9d3 	bl	8009a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d122      	bne.n	8009704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b04      	cmp	r3, #4
 80096ca:	d11b      	bne.n	8009704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f06f 0204 	mvn.w	r2, #4
 80096d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2202      	movs	r2, #2
 80096da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	699b      	ldr	r3, [r3, #24]
 80096e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f9a6 	bl	8009a3c <HAL_TIM_IC_CaptureCallback>
 80096f0:	e005      	b.n	80096fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f998 	bl	8009a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f9a9 	bl	8009a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	f003 0308 	and.w	r3, r3, #8
 800970e:	2b08      	cmp	r3, #8
 8009710:	d122      	bne.n	8009758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f003 0308 	and.w	r3, r3, #8
 800971c:	2b08      	cmp	r3, #8
 800971e:	d11b      	bne.n	8009758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f06f 0208 	mvn.w	r2, #8
 8009728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2204      	movs	r2, #4
 800972e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f003 0303 	and.w	r3, r3, #3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f97c 	bl	8009a3c <HAL_TIM_IC_CaptureCallback>
 8009744:	e005      	b.n	8009752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f96e 	bl	8009a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f97f 	bl	8009a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	f003 0310 	and.w	r3, r3, #16
 8009762:	2b10      	cmp	r3, #16
 8009764:	d122      	bne.n	80097ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	f003 0310 	and.w	r3, r3, #16
 8009770:	2b10      	cmp	r3, #16
 8009772:	d11b      	bne.n	80097ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f06f 0210 	mvn.w	r2, #16
 800977c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2208      	movs	r2, #8
 8009782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f952 	bl	8009a3c <HAL_TIM_IC_CaptureCallback>
 8009798:	e005      	b.n	80097a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f944 	bl	8009a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f955 	bl	8009a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d10e      	bne.n	80097d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d107      	bne.n	80097d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f06f 0201 	mvn.w	r2, #1
 80097d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7f8 fbe8 	bl	8001fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e2:	2b80      	cmp	r3, #128	@ 0x80
 80097e4:	d10e      	bne.n	8009804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f0:	2b80      	cmp	r3, #128	@ 0x80
 80097f2:	d107      	bne.n	8009804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80097fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fb0c 	bl	8009e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800980e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009812:	d10e      	bne.n	8009832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800981e:	2b80      	cmp	r3, #128	@ 0x80
 8009820:	d107      	bne.n	8009832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800982a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 faff 	bl	8009e30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800983c:	2b40      	cmp	r3, #64	@ 0x40
 800983e:	d10e      	bne.n	800985e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800984a:	2b40      	cmp	r3, #64	@ 0x40
 800984c:	d107      	bne.n	800985e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f903 	bl	8009a64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b20      	cmp	r3, #32
 800986a:	d10e      	bne.n	800988a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b20      	cmp	r3, #32
 8009878:	d107      	bne.n	800988a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f06f 0220 	mvn.w	r2, #32
 8009882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fabf 	bl	8009e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d101      	bne.n	80098b0 <HAL_TIM_ConfigClockSource+0x1c>
 80098ac:	2302      	movs	r3, #2
 80098ae:	e0b4      	b.n	8009a1a <HAL_TIM_ConfigClockSource+0x186>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2202      	movs	r2, #2
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	4b56      	ldr	r3, [pc, #344]	@ (8009a24 <HAL_TIM_ConfigClockSource+0x190>)
 80098cc:	4013      	ands	r3, r2
 80098ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098e8:	d03e      	beq.n	8009968 <HAL_TIM_ConfigClockSource+0xd4>
 80098ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098ee:	f200 8087 	bhi.w	8009a00 <HAL_TIM_ConfigClockSource+0x16c>
 80098f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098f6:	f000 8086 	beq.w	8009a06 <HAL_TIM_ConfigClockSource+0x172>
 80098fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098fe:	d87f      	bhi.n	8009a00 <HAL_TIM_ConfigClockSource+0x16c>
 8009900:	2b70      	cmp	r3, #112	@ 0x70
 8009902:	d01a      	beq.n	800993a <HAL_TIM_ConfigClockSource+0xa6>
 8009904:	2b70      	cmp	r3, #112	@ 0x70
 8009906:	d87b      	bhi.n	8009a00 <HAL_TIM_ConfigClockSource+0x16c>
 8009908:	2b60      	cmp	r3, #96	@ 0x60
 800990a:	d050      	beq.n	80099ae <HAL_TIM_ConfigClockSource+0x11a>
 800990c:	2b60      	cmp	r3, #96	@ 0x60
 800990e:	d877      	bhi.n	8009a00 <HAL_TIM_ConfigClockSource+0x16c>
 8009910:	2b50      	cmp	r3, #80	@ 0x50
 8009912:	d03c      	beq.n	800998e <HAL_TIM_ConfigClockSource+0xfa>
 8009914:	2b50      	cmp	r3, #80	@ 0x50
 8009916:	d873      	bhi.n	8009a00 <HAL_TIM_ConfigClockSource+0x16c>
 8009918:	2b40      	cmp	r3, #64	@ 0x40
 800991a:	d058      	beq.n	80099ce <HAL_TIM_ConfigClockSource+0x13a>
 800991c:	2b40      	cmp	r3, #64	@ 0x40
 800991e:	d86f      	bhi.n	8009a00 <HAL_TIM_ConfigClockSource+0x16c>
 8009920:	2b30      	cmp	r3, #48	@ 0x30
 8009922:	d064      	beq.n	80099ee <HAL_TIM_ConfigClockSource+0x15a>
 8009924:	2b30      	cmp	r3, #48	@ 0x30
 8009926:	d86b      	bhi.n	8009a00 <HAL_TIM_ConfigClockSource+0x16c>
 8009928:	2b20      	cmp	r3, #32
 800992a:	d060      	beq.n	80099ee <HAL_TIM_ConfigClockSource+0x15a>
 800992c:	2b20      	cmp	r3, #32
 800992e:	d867      	bhi.n	8009a00 <HAL_TIM_ConfigClockSource+0x16c>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d05c      	beq.n	80099ee <HAL_TIM_ConfigClockSource+0x15a>
 8009934:	2b10      	cmp	r3, #16
 8009936:	d05a      	beq.n	80099ee <HAL_TIM_ConfigClockSource+0x15a>
 8009938:	e062      	b.n	8009a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800994a:	f000 f9af 	bl	8009cac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800995c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	609a      	str	r2, [r3, #8]
      break;
 8009966:	e04f      	b.n	8009a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009978:	f000 f998 	bl	8009cac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689a      	ldr	r2, [r3, #8]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800998a:	609a      	str	r2, [r3, #8]
      break;
 800998c:	e03c      	b.n	8009a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800999a:	461a      	mov	r2, r3
 800999c:	f000 f90c 	bl	8009bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2150      	movs	r1, #80	@ 0x50
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f965 	bl	8009c76 <TIM_ITRx_SetConfig>
      break;
 80099ac:	e02c      	b.n	8009a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099ba:	461a      	mov	r2, r3
 80099bc:	f000 f92b 	bl	8009c16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2160      	movs	r1, #96	@ 0x60
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 f955 	bl	8009c76 <TIM_ITRx_SetConfig>
      break;
 80099cc:	e01c      	b.n	8009a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099da:	461a      	mov	r2, r3
 80099dc:	f000 f8ec 	bl	8009bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2140      	movs	r1, #64	@ 0x40
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 f945 	bl	8009c76 <TIM_ITRx_SetConfig>
      break;
 80099ec:	e00c      	b.n	8009a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4619      	mov	r1, r3
 80099f8:	4610      	mov	r0, r2
 80099fa:	f000 f93c 	bl	8009c76 <TIM_ITRx_SetConfig>
      break;
 80099fe:	e003      	b.n	8009a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	73fb      	strb	r3, [r7, #15]
      break;
 8009a04:	e000      	b.n	8009a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	fffeff88 	.word	0xfffeff88

08009a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a40      	ldr	r2, [pc, #256]	@ (8009b8c <TIM_Base_SetConfig+0x114>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d013      	beq.n	8009ab8 <TIM_Base_SetConfig+0x40>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a96:	d00f      	beq.n	8009ab8 <TIM_Base_SetConfig+0x40>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8009b90 <TIM_Base_SetConfig+0x118>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00b      	beq.n	8009ab8 <TIM_Base_SetConfig+0x40>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a3c      	ldr	r2, [pc, #240]	@ (8009b94 <TIM_Base_SetConfig+0x11c>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d007      	beq.n	8009ab8 <TIM_Base_SetConfig+0x40>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a3b      	ldr	r2, [pc, #236]	@ (8009b98 <TIM_Base_SetConfig+0x120>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d003      	beq.n	8009ab8 <TIM_Base_SetConfig+0x40>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a3a      	ldr	r2, [pc, #232]	@ (8009b9c <TIM_Base_SetConfig+0x124>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d108      	bne.n	8009aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a2f      	ldr	r2, [pc, #188]	@ (8009b8c <TIM_Base_SetConfig+0x114>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d02b      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad8:	d027      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a2c      	ldr	r2, [pc, #176]	@ (8009b90 <TIM_Base_SetConfig+0x118>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d023      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8009b94 <TIM_Base_SetConfig+0x11c>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d01f      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a2a      	ldr	r2, [pc, #168]	@ (8009b98 <TIM_Base_SetConfig+0x120>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d01b      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a29      	ldr	r2, [pc, #164]	@ (8009b9c <TIM_Base_SetConfig+0x124>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d017      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a28      	ldr	r2, [pc, #160]	@ (8009ba0 <TIM_Base_SetConfig+0x128>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d013      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a27      	ldr	r2, [pc, #156]	@ (8009ba4 <TIM_Base_SetConfig+0x12c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00f      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a26      	ldr	r2, [pc, #152]	@ (8009ba8 <TIM_Base_SetConfig+0x130>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d00b      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a25      	ldr	r2, [pc, #148]	@ (8009bac <TIM_Base_SetConfig+0x134>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d007      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a24      	ldr	r2, [pc, #144]	@ (8009bb0 <TIM_Base_SetConfig+0x138>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d003      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a23      	ldr	r2, [pc, #140]	@ (8009bb4 <TIM_Base_SetConfig+0x13c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d108      	bne.n	8009b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	689a      	ldr	r2, [r3, #8]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a0a      	ldr	r2, [pc, #40]	@ (8009b8c <TIM_Base_SetConfig+0x114>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d003      	beq.n	8009b70 <TIM_Base_SetConfig+0xf8>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8009b9c <TIM_Base_SetConfig+0x124>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d103      	bne.n	8009b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	691a      	ldr	r2, [r3, #16]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	615a      	str	r2, [r3, #20]
}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	40010000 	.word	0x40010000
 8009b90:	40000400 	.word	0x40000400
 8009b94:	40000800 	.word	0x40000800
 8009b98:	40000c00 	.word	0x40000c00
 8009b9c:	40010400 	.word	0x40010400
 8009ba0:	40014000 	.word	0x40014000
 8009ba4:	40014400 	.word	0x40014400
 8009ba8:	40014800 	.word	0x40014800
 8009bac:	40001800 	.word	0x40001800
 8009bb0:	40001c00 	.word	0x40001c00
 8009bb4:	40002000 	.word	0x40002000

08009bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	f023 0201 	bic.w	r2, r3, #1
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f023 030a 	bic.w	r3, r3, #10
 8009bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	621a      	str	r2, [r3, #32]
}
 8009c0a:	bf00      	nop
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b087      	sub	sp, #28
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	f023 0210 	bic.w	r2, r3, #16
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6a1b      	ldr	r3, [r3, #32]
 8009c38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	031b      	lsls	r3, r3, #12
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	011b      	lsls	r3, r3, #4
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	621a      	str	r2, [r3, #32]
}
 8009c6a:	bf00      	nop
 8009c6c:	371c      	adds	r7, #28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c76:	b480      	push	{r7}
 8009c78:	b085      	sub	sp, #20
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	f043 0307 	orr.w	r3, r3, #7
 8009c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	609a      	str	r2, [r3, #8]
}
 8009ca0:	bf00      	nop
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	021a      	lsls	r2, r3, #8
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	609a      	str	r2, [r3, #8]
}
 8009ce0:	bf00      	nop
 8009ce2:	371c      	adds	r7, #28
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d101      	bne.n	8009d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d00:	2302      	movs	r3, #2
 8009d02:	e06d      	b.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a30      	ldr	r2, [pc, #192]	@ (8009dec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d004      	beq.n	8009d38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a2f      	ldr	r2, [pc, #188]	@ (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d108      	bne.n	8009d4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009d3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a20      	ldr	r2, [pc, #128]	@ (8009dec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d022      	beq.n	8009db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d76:	d01d      	beq.n	8009db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009df4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d018      	beq.n	8009db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a1c      	ldr	r2, [pc, #112]	@ (8009df8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d013      	beq.n	8009db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a1a      	ldr	r2, [pc, #104]	@ (8009dfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d00e      	beq.n	8009db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a15      	ldr	r2, [pc, #84]	@ (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d009      	beq.n	8009db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a16      	ldr	r2, [pc, #88]	@ (8009e00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d004      	beq.n	8009db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a15      	ldr	r2, [pc, #84]	@ (8009e04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d10c      	bne.n	8009dce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	40010000 	.word	0x40010000
 8009df0:	40010400 	.word	0x40010400
 8009df4:	40000400 	.word	0x40000400
 8009df8:	40000800 	.word	0x40000800
 8009dfc:	40000c00 	.word	0x40000c00
 8009e00:	40014000 	.word	0x40014000
 8009e04:	40001800 	.word	0x40001800

08009e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e040      	b.n	8009ed8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d106      	bne.n	8009e6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7fa fbd6 	bl	8004618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2224      	movs	r2, #36	@ 0x24
 8009e70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f022 0201 	bic.w	r2, r2, #1
 8009e80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f82c 	bl	8009ee0 <UART_SetConfig>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d101      	bne.n	8009e92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e022      	b.n	8009ed8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fa84 	bl	800a3a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	685a      	ldr	r2, [r3, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	689a      	ldr	r2, [r3, #8]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0201 	orr.w	r2, r2, #1
 8009ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fb0b 	bl	800a4ec <UART_CheckIdleState>
 8009ed6:	4603      	mov	r3, r0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b088      	sub	sp, #32
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	431a      	orrs	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	4ba6      	ldr	r3, [pc, #664]	@ (800a1a4 <UART_SetConfig+0x2c4>)
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	6812      	ldr	r2, [r2, #0]
 8009f12:	6979      	ldr	r1, [r7, #20]
 8009f14:	430b      	orrs	r3, r1
 8009f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68da      	ldr	r2, [r3, #12]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a1b      	ldr	r3, [r3, #32]
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a94      	ldr	r2, [pc, #592]	@ (800a1a8 <UART_SetConfig+0x2c8>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d120      	bne.n	8009f9e <UART_SetConfig+0xbe>
 8009f5c:	4b93      	ldr	r3, [pc, #588]	@ (800a1ac <UART_SetConfig+0x2cc>)
 8009f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f62:	f003 0303 	and.w	r3, r3, #3
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	d816      	bhi.n	8009f98 <UART_SetConfig+0xb8>
 8009f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f70 <UART_SetConfig+0x90>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009f81 	.word	0x08009f81
 8009f74:	08009f8d 	.word	0x08009f8d
 8009f78:	08009f87 	.word	0x08009f87
 8009f7c:	08009f93 	.word	0x08009f93
 8009f80:	2301      	movs	r3, #1
 8009f82:	77fb      	strb	r3, [r7, #31]
 8009f84:	e150      	b.n	800a228 <UART_SetConfig+0x348>
 8009f86:	2302      	movs	r3, #2
 8009f88:	77fb      	strb	r3, [r7, #31]
 8009f8a:	e14d      	b.n	800a228 <UART_SetConfig+0x348>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	77fb      	strb	r3, [r7, #31]
 8009f90:	e14a      	b.n	800a228 <UART_SetConfig+0x348>
 8009f92:	2308      	movs	r3, #8
 8009f94:	77fb      	strb	r3, [r7, #31]
 8009f96:	e147      	b.n	800a228 <UART_SetConfig+0x348>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	77fb      	strb	r3, [r7, #31]
 8009f9c:	e144      	b.n	800a228 <UART_SetConfig+0x348>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a83      	ldr	r2, [pc, #524]	@ (800a1b0 <UART_SetConfig+0x2d0>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d132      	bne.n	800a00e <UART_SetConfig+0x12e>
 8009fa8:	4b80      	ldr	r3, [pc, #512]	@ (800a1ac <UART_SetConfig+0x2cc>)
 8009faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fae:	f003 030c 	and.w	r3, r3, #12
 8009fb2:	2b0c      	cmp	r3, #12
 8009fb4:	d828      	bhi.n	800a008 <UART_SetConfig+0x128>
 8009fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8009fbc <UART_SetConfig+0xdc>)
 8009fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbc:	08009ff1 	.word	0x08009ff1
 8009fc0:	0800a009 	.word	0x0800a009
 8009fc4:	0800a009 	.word	0x0800a009
 8009fc8:	0800a009 	.word	0x0800a009
 8009fcc:	08009ffd 	.word	0x08009ffd
 8009fd0:	0800a009 	.word	0x0800a009
 8009fd4:	0800a009 	.word	0x0800a009
 8009fd8:	0800a009 	.word	0x0800a009
 8009fdc:	08009ff7 	.word	0x08009ff7
 8009fe0:	0800a009 	.word	0x0800a009
 8009fe4:	0800a009 	.word	0x0800a009
 8009fe8:	0800a009 	.word	0x0800a009
 8009fec:	0800a003 	.word	0x0800a003
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	77fb      	strb	r3, [r7, #31]
 8009ff4:	e118      	b.n	800a228 <UART_SetConfig+0x348>
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	77fb      	strb	r3, [r7, #31]
 8009ffa:	e115      	b.n	800a228 <UART_SetConfig+0x348>
 8009ffc:	2304      	movs	r3, #4
 8009ffe:	77fb      	strb	r3, [r7, #31]
 800a000:	e112      	b.n	800a228 <UART_SetConfig+0x348>
 800a002:	2308      	movs	r3, #8
 800a004:	77fb      	strb	r3, [r7, #31]
 800a006:	e10f      	b.n	800a228 <UART_SetConfig+0x348>
 800a008:	2310      	movs	r3, #16
 800a00a:	77fb      	strb	r3, [r7, #31]
 800a00c:	e10c      	b.n	800a228 <UART_SetConfig+0x348>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a68      	ldr	r2, [pc, #416]	@ (800a1b4 <UART_SetConfig+0x2d4>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d120      	bne.n	800a05a <UART_SetConfig+0x17a>
 800a018:	4b64      	ldr	r3, [pc, #400]	@ (800a1ac <UART_SetConfig+0x2cc>)
 800a01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a01e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a022:	2b30      	cmp	r3, #48	@ 0x30
 800a024:	d013      	beq.n	800a04e <UART_SetConfig+0x16e>
 800a026:	2b30      	cmp	r3, #48	@ 0x30
 800a028:	d814      	bhi.n	800a054 <UART_SetConfig+0x174>
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d009      	beq.n	800a042 <UART_SetConfig+0x162>
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d810      	bhi.n	800a054 <UART_SetConfig+0x174>
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <UART_SetConfig+0x15c>
 800a036:	2b10      	cmp	r3, #16
 800a038:	d006      	beq.n	800a048 <UART_SetConfig+0x168>
 800a03a:	e00b      	b.n	800a054 <UART_SetConfig+0x174>
 800a03c:	2300      	movs	r3, #0
 800a03e:	77fb      	strb	r3, [r7, #31]
 800a040:	e0f2      	b.n	800a228 <UART_SetConfig+0x348>
 800a042:	2302      	movs	r3, #2
 800a044:	77fb      	strb	r3, [r7, #31]
 800a046:	e0ef      	b.n	800a228 <UART_SetConfig+0x348>
 800a048:	2304      	movs	r3, #4
 800a04a:	77fb      	strb	r3, [r7, #31]
 800a04c:	e0ec      	b.n	800a228 <UART_SetConfig+0x348>
 800a04e:	2308      	movs	r3, #8
 800a050:	77fb      	strb	r3, [r7, #31]
 800a052:	e0e9      	b.n	800a228 <UART_SetConfig+0x348>
 800a054:	2310      	movs	r3, #16
 800a056:	77fb      	strb	r3, [r7, #31]
 800a058:	e0e6      	b.n	800a228 <UART_SetConfig+0x348>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a56      	ldr	r2, [pc, #344]	@ (800a1b8 <UART_SetConfig+0x2d8>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d120      	bne.n	800a0a6 <UART_SetConfig+0x1c6>
 800a064:	4b51      	ldr	r3, [pc, #324]	@ (800a1ac <UART_SetConfig+0x2cc>)
 800a066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a06a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a06e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a070:	d013      	beq.n	800a09a <UART_SetConfig+0x1ba>
 800a072:	2bc0      	cmp	r3, #192	@ 0xc0
 800a074:	d814      	bhi.n	800a0a0 <UART_SetConfig+0x1c0>
 800a076:	2b80      	cmp	r3, #128	@ 0x80
 800a078:	d009      	beq.n	800a08e <UART_SetConfig+0x1ae>
 800a07a:	2b80      	cmp	r3, #128	@ 0x80
 800a07c:	d810      	bhi.n	800a0a0 <UART_SetConfig+0x1c0>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <UART_SetConfig+0x1a8>
 800a082:	2b40      	cmp	r3, #64	@ 0x40
 800a084:	d006      	beq.n	800a094 <UART_SetConfig+0x1b4>
 800a086:	e00b      	b.n	800a0a0 <UART_SetConfig+0x1c0>
 800a088:	2300      	movs	r3, #0
 800a08a:	77fb      	strb	r3, [r7, #31]
 800a08c:	e0cc      	b.n	800a228 <UART_SetConfig+0x348>
 800a08e:	2302      	movs	r3, #2
 800a090:	77fb      	strb	r3, [r7, #31]
 800a092:	e0c9      	b.n	800a228 <UART_SetConfig+0x348>
 800a094:	2304      	movs	r3, #4
 800a096:	77fb      	strb	r3, [r7, #31]
 800a098:	e0c6      	b.n	800a228 <UART_SetConfig+0x348>
 800a09a:	2308      	movs	r3, #8
 800a09c:	77fb      	strb	r3, [r7, #31]
 800a09e:	e0c3      	b.n	800a228 <UART_SetConfig+0x348>
 800a0a0:	2310      	movs	r3, #16
 800a0a2:	77fb      	strb	r3, [r7, #31]
 800a0a4:	e0c0      	b.n	800a228 <UART_SetConfig+0x348>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a44      	ldr	r2, [pc, #272]	@ (800a1bc <UART_SetConfig+0x2dc>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d125      	bne.n	800a0fc <UART_SetConfig+0x21c>
 800a0b0:	4b3e      	ldr	r3, [pc, #248]	@ (800a1ac <UART_SetConfig+0x2cc>)
 800a0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0be:	d017      	beq.n	800a0f0 <UART_SetConfig+0x210>
 800a0c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0c4:	d817      	bhi.n	800a0f6 <UART_SetConfig+0x216>
 800a0c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0ca:	d00b      	beq.n	800a0e4 <UART_SetConfig+0x204>
 800a0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d0:	d811      	bhi.n	800a0f6 <UART_SetConfig+0x216>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d003      	beq.n	800a0de <UART_SetConfig+0x1fe>
 800a0d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0da:	d006      	beq.n	800a0ea <UART_SetConfig+0x20a>
 800a0dc:	e00b      	b.n	800a0f6 <UART_SetConfig+0x216>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	77fb      	strb	r3, [r7, #31]
 800a0e2:	e0a1      	b.n	800a228 <UART_SetConfig+0x348>
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	77fb      	strb	r3, [r7, #31]
 800a0e8:	e09e      	b.n	800a228 <UART_SetConfig+0x348>
 800a0ea:	2304      	movs	r3, #4
 800a0ec:	77fb      	strb	r3, [r7, #31]
 800a0ee:	e09b      	b.n	800a228 <UART_SetConfig+0x348>
 800a0f0:	2308      	movs	r3, #8
 800a0f2:	77fb      	strb	r3, [r7, #31]
 800a0f4:	e098      	b.n	800a228 <UART_SetConfig+0x348>
 800a0f6:	2310      	movs	r3, #16
 800a0f8:	77fb      	strb	r3, [r7, #31]
 800a0fa:	e095      	b.n	800a228 <UART_SetConfig+0x348>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a2f      	ldr	r2, [pc, #188]	@ (800a1c0 <UART_SetConfig+0x2e0>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d125      	bne.n	800a152 <UART_SetConfig+0x272>
 800a106:	4b29      	ldr	r3, [pc, #164]	@ (800a1ac <UART_SetConfig+0x2cc>)
 800a108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a10c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a110:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a114:	d017      	beq.n	800a146 <UART_SetConfig+0x266>
 800a116:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a11a:	d817      	bhi.n	800a14c <UART_SetConfig+0x26c>
 800a11c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a120:	d00b      	beq.n	800a13a <UART_SetConfig+0x25a>
 800a122:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a126:	d811      	bhi.n	800a14c <UART_SetConfig+0x26c>
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <UART_SetConfig+0x254>
 800a12c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a130:	d006      	beq.n	800a140 <UART_SetConfig+0x260>
 800a132:	e00b      	b.n	800a14c <UART_SetConfig+0x26c>
 800a134:	2301      	movs	r3, #1
 800a136:	77fb      	strb	r3, [r7, #31]
 800a138:	e076      	b.n	800a228 <UART_SetConfig+0x348>
 800a13a:	2302      	movs	r3, #2
 800a13c:	77fb      	strb	r3, [r7, #31]
 800a13e:	e073      	b.n	800a228 <UART_SetConfig+0x348>
 800a140:	2304      	movs	r3, #4
 800a142:	77fb      	strb	r3, [r7, #31]
 800a144:	e070      	b.n	800a228 <UART_SetConfig+0x348>
 800a146:	2308      	movs	r3, #8
 800a148:	77fb      	strb	r3, [r7, #31]
 800a14a:	e06d      	b.n	800a228 <UART_SetConfig+0x348>
 800a14c:	2310      	movs	r3, #16
 800a14e:	77fb      	strb	r3, [r7, #31]
 800a150:	e06a      	b.n	800a228 <UART_SetConfig+0x348>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c4 <UART_SetConfig+0x2e4>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d138      	bne.n	800a1ce <UART_SetConfig+0x2ee>
 800a15c:	4b13      	ldr	r3, [pc, #76]	@ (800a1ac <UART_SetConfig+0x2cc>)
 800a15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a162:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a166:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a16a:	d017      	beq.n	800a19c <UART_SetConfig+0x2bc>
 800a16c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a170:	d82a      	bhi.n	800a1c8 <UART_SetConfig+0x2e8>
 800a172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a176:	d00b      	beq.n	800a190 <UART_SetConfig+0x2b0>
 800a178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a17c:	d824      	bhi.n	800a1c8 <UART_SetConfig+0x2e8>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <UART_SetConfig+0x2aa>
 800a182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a186:	d006      	beq.n	800a196 <UART_SetConfig+0x2b6>
 800a188:	e01e      	b.n	800a1c8 <UART_SetConfig+0x2e8>
 800a18a:	2300      	movs	r3, #0
 800a18c:	77fb      	strb	r3, [r7, #31]
 800a18e:	e04b      	b.n	800a228 <UART_SetConfig+0x348>
 800a190:	2302      	movs	r3, #2
 800a192:	77fb      	strb	r3, [r7, #31]
 800a194:	e048      	b.n	800a228 <UART_SetConfig+0x348>
 800a196:	2304      	movs	r3, #4
 800a198:	77fb      	strb	r3, [r7, #31]
 800a19a:	e045      	b.n	800a228 <UART_SetConfig+0x348>
 800a19c:	2308      	movs	r3, #8
 800a19e:	77fb      	strb	r3, [r7, #31]
 800a1a0:	e042      	b.n	800a228 <UART_SetConfig+0x348>
 800a1a2:	bf00      	nop
 800a1a4:	efff69f3 	.word	0xefff69f3
 800a1a8:	40011000 	.word	0x40011000
 800a1ac:	40023800 	.word	0x40023800
 800a1b0:	40004400 	.word	0x40004400
 800a1b4:	40004800 	.word	0x40004800
 800a1b8:	40004c00 	.word	0x40004c00
 800a1bc:	40005000 	.word	0x40005000
 800a1c0:	40011400 	.word	0x40011400
 800a1c4:	40007800 	.word	0x40007800
 800a1c8:	2310      	movs	r3, #16
 800a1ca:	77fb      	strb	r3, [r7, #31]
 800a1cc:	e02c      	b.n	800a228 <UART_SetConfig+0x348>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a72      	ldr	r2, [pc, #456]	@ (800a39c <UART_SetConfig+0x4bc>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d125      	bne.n	800a224 <UART_SetConfig+0x344>
 800a1d8:	4b71      	ldr	r3, [pc, #452]	@ (800a3a0 <UART_SetConfig+0x4c0>)
 800a1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a1e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a1e6:	d017      	beq.n	800a218 <UART_SetConfig+0x338>
 800a1e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a1ec:	d817      	bhi.n	800a21e <UART_SetConfig+0x33e>
 800a1ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1f2:	d00b      	beq.n	800a20c <UART_SetConfig+0x32c>
 800a1f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1f8:	d811      	bhi.n	800a21e <UART_SetConfig+0x33e>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <UART_SetConfig+0x326>
 800a1fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a202:	d006      	beq.n	800a212 <UART_SetConfig+0x332>
 800a204:	e00b      	b.n	800a21e <UART_SetConfig+0x33e>
 800a206:	2300      	movs	r3, #0
 800a208:	77fb      	strb	r3, [r7, #31]
 800a20a:	e00d      	b.n	800a228 <UART_SetConfig+0x348>
 800a20c:	2302      	movs	r3, #2
 800a20e:	77fb      	strb	r3, [r7, #31]
 800a210:	e00a      	b.n	800a228 <UART_SetConfig+0x348>
 800a212:	2304      	movs	r3, #4
 800a214:	77fb      	strb	r3, [r7, #31]
 800a216:	e007      	b.n	800a228 <UART_SetConfig+0x348>
 800a218:	2308      	movs	r3, #8
 800a21a:	77fb      	strb	r3, [r7, #31]
 800a21c:	e004      	b.n	800a228 <UART_SetConfig+0x348>
 800a21e:	2310      	movs	r3, #16
 800a220:	77fb      	strb	r3, [r7, #31]
 800a222:	e001      	b.n	800a228 <UART_SetConfig+0x348>
 800a224:	2310      	movs	r3, #16
 800a226:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a230:	d15b      	bne.n	800a2ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a232:	7ffb      	ldrb	r3, [r7, #31]
 800a234:	2b08      	cmp	r3, #8
 800a236:	d828      	bhi.n	800a28a <UART_SetConfig+0x3aa>
 800a238:	a201      	add	r2, pc, #4	@ (adr r2, 800a240 <UART_SetConfig+0x360>)
 800a23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23e:	bf00      	nop
 800a240:	0800a265 	.word	0x0800a265
 800a244:	0800a26d 	.word	0x0800a26d
 800a248:	0800a275 	.word	0x0800a275
 800a24c:	0800a28b 	.word	0x0800a28b
 800a250:	0800a27b 	.word	0x0800a27b
 800a254:	0800a28b 	.word	0x0800a28b
 800a258:	0800a28b 	.word	0x0800a28b
 800a25c:	0800a28b 	.word	0x0800a28b
 800a260:	0800a283 	.word	0x0800a283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a264:	f7fd ffca 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 800a268:	61b8      	str	r0, [r7, #24]
        break;
 800a26a:	e013      	b.n	800a294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a26c:	f7fd ffda 	bl	8008224 <HAL_RCC_GetPCLK2Freq>
 800a270:	61b8      	str	r0, [r7, #24]
        break;
 800a272:	e00f      	b.n	800a294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a274:	4b4b      	ldr	r3, [pc, #300]	@ (800a3a4 <UART_SetConfig+0x4c4>)
 800a276:	61bb      	str	r3, [r7, #24]
        break;
 800a278:	e00c      	b.n	800a294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a27a:	f7fd feed 	bl	8008058 <HAL_RCC_GetSysClockFreq>
 800a27e:	61b8      	str	r0, [r7, #24]
        break;
 800a280:	e008      	b.n	800a294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a286:	61bb      	str	r3, [r7, #24]
        break;
 800a288:	e004      	b.n	800a294 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	77bb      	strb	r3, [r7, #30]
        break;
 800a292:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d074      	beq.n	800a384 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	005a      	lsls	r2, r3, #1
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	085b      	lsrs	r3, r3, #1
 800a2a4:	441a      	add	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2b0f      	cmp	r3, #15
 800a2b4:	d916      	bls.n	800a2e4 <UART_SetConfig+0x404>
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2bc:	d212      	bcs.n	800a2e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	f023 030f 	bic.w	r3, r3, #15
 800a2c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	085b      	lsrs	r3, r3, #1
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	89fb      	ldrh	r3, [r7, #14]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	89fa      	ldrh	r2, [r7, #14]
 800a2e0:	60da      	str	r2, [r3, #12]
 800a2e2:	e04f      	b.n	800a384 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	77bb      	strb	r3, [r7, #30]
 800a2e8:	e04c      	b.n	800a384 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2ea:	7ffb      	ldrb	r3, [r7, #31]
 800a2ec:	2b08      	cmp	r3, #8
 800a2ee:	d828      	bhi.n	800a342 <UART_SetConfig+0x462>
 800a2f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f8 <UART_SetConfig+0x418>)
 800a2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f6:	bf00      	nop
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a325 	.word	0x0800a325
 800a300:	0800a32d 	.word	0x0800a32d
 800a304:	0800a343 	.word	0x0800a343
 800a308:	0800a333 	.word	0x0800a333
 800a30c:	0800a343 	.word	0x0800a343
 800a310:	0800a343 	.word	0x0800a343
 800a314:	0800a343 	.word	0x0800a343
 800a318:	0800a33b 	.word	0x0800a33b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a31c:	f7fd ff6e 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 800a320:	61b8      	str	r0, [r7, #24]
        break;
 800a322:	e013      	b.n	800a34c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a324:	f7fd ff7e 	bl	8008224 <HAL_RCC_GetPCLK2Freq>
 800a328:	61b8      	str	r0, [r7, #24]
        break;
 800a32a:	e00f      	b.n	800a34c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a32c:	4b1d      	ldr	r3, [pc, #116]	@ (800a3a4 <UART_SetConfig+0x4c4>)
 800a32e:	61bb      	str	r3, [r7, #24]
        break;
 800a330:	e00c      	b.n	800a34c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a332:	f7fd fe91 	bl	8008058 <HAL_RCC_GetSysClockFreq>
 800a336:	61b8      	str	r0, [r7, #24]
        break;
 800a338:	e008      	b.n	800a34c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a33a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a33e:	61bb      	str	r3, [r7, #24]
        break;
 800a340:	e004      	b.n	800a34c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	77bb      	strb	r3, [r7, #30]
        break;
 800a34a:	bf00      	nop
    }

    if (pclk != 0U)
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d018      	beq.n	800a384 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	085a      	lsrs	r2, r3, #1
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	441a      	add	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	fbb2 f3f3 	udiv	r3, r2, r3
 800a364:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	2b0f      	cmp	r3, #15
 800a36a:	d909      	bls.n	800a380 <UART_SetConfig+0x4a0>
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a372:	d205      	bcs.n	800a380 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	b29a      	uxth	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60da      	str	r2, [r3, #12]
 800a37e:	e001      	b.n	800a384 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a390:	7fbb      	ldrb	r3, [r7, #30]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3720      	adds	r7, #32
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	40007c00 	.word	0x40007c00
 800a3a0:	40023800 	.word	0x40023800
 800a3a4:	00f42400 	.word	0x00f42400

0800a3a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f8:	f003 0304 	and.w	r3, r3, #4
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00a      	beq.n	800a416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	430a      	orrs	r2, r1
 800a414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41a:	f003 0308 	and.w	r3, r3, #8
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00a      	beq.n	800a438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	430a      	orrs	r2, r1
 800a436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43c:	f003 0310 	and.w	r3, r3, #16
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45e:	f003 0320 	and.w	r3, r3, #32
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	430a      	orrs	r2, r1
 800a47a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	d01a      	beq.n	800a4be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4a6:	d10a      	bne.n	800a4be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	605a      	str	r2, [r3, #4]
  }
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4fc:	f7fa f9e6 	bl	80048cc <HAL_GetTick>
 800a500:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0308 	and.w	r3, r3, #8
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d10e      	bne.n	800a52e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f81b 	bl	800a55a <UART_WaitOnFlagUntilTimeout>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e011      	b.n	800a552 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2220      	movs	r2, #32
 800a532:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2220      	movs	r2, #32
 800a538:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b09c      	sub	sp, #112	@ 0x70
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	603b      	str	r3, [r7, #0]
 800a566:	4613      	mov	r3, r2
 800a568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a56a:	e0a7      	b.n	800a6bc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a56c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a572:	f000 80a3 	beq.w	800a6bc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a576:	f7fa f9a9 	bl	80048cc <HAL_GetTick>
 800a57a:	4602      	mov	r2, r0
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a582:	429a      	cmp	r2, r3
 800a584:	d302      	bcc.n	800a58c <UART_WaitOnFlagUntilTimeout+0x32>
 800a586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d13f      	bne.n	800a60c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a594:	e853 3f00 	ldrex	r3, [r3]
 800a598:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a59a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a59c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a5a0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a5b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a5b2:	e841 2300 	strex	r3, r2, [r1]
 800a5b6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a5b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1e6      	bne.n	800a58c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3308      	adds	r3, #8
 800a5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c8:	e853 3f00 	ldrex	r3, [r3]
 800a5cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d0:	f023 0301 	bic.w	r3, r3, #1
 800a5d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3308      	adds	r3, #8
 800a5dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5de:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a5e0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a5ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e5      	bne.n	800a5be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e068      	b.n	800a6de <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0304 	and.w	r3, r3, #4
 800a616:	2b00      	cmp	r3, #0
 800a618:	d050      	beq.n	800a6bc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a628:	d148      	bne.n	800a6bc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a632:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a644:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a648:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a652:	637b      	str	r3, [r7, #52]	@ 0x34
 800a654:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e6      	bne.n	800a634 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3308      	adds	r3, #8
 800a66c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	613b      	str	r3, [r7, #16]
   return(result);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	f023 0301 	bic.w	r3, r3, #1
 800a67c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3308      	adds	r3, #8
 800a684:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a686:	623a      	str	r2, [r7, #32]
 800a688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	69f9      	ldr	r1, [r7, #28]
 800a68c:	6a3a      	ldr	r2, [r7, #32]
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	61bb      	str	r3, [r7, #24]
   return(result);
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e5      	bne.n	800a666 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2220      	movs	r2, #32
 800a69e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e010      	b.n	800a6de <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	69da      	ldr	r2, [r3, #28]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	bf0c      	ite	eq
 800a6cc:	2301      	moveq	r3, #1
 800a6ce:	2300      	movne	r3, #0
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	f43f af48 	beq.w	800a56c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3770      	adds	r7, #112	@ 0x70
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
	...

0800a6e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d121      	bne.n	800a73e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	4b27      	ldr	r3, [pc, #156]	@ (800a79c <FMC_SDRAM_Init+0xb4>)
 800a700:	4013      	ands	r3, r2
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	6851      	ldr	r1, [r2, #4]
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	6892      	ldr	r2, [r2, #8]
 800a70a:	4311      	orrs	r1, r2
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	68d2      	ldr	r2, [r2, #12]
 800a710:	4311      	orrs	r1, r2
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	6912      	ldr	r2, [r2, #16]
 800a716:	4311      	orrs	r1, r2
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	6952      	ldr	r2, [r2, #20]
 800a71c:	4311      	orrs	r1, r2
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	6992      	ldr	r2, [r2, #24]
 800a722:	4311      	orrs	r1, r2
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	69d2      	ldr	r2, [r2, #28]
 800a728:	4311      	orrs	r1, r2
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	6a12      	ldr	r2, [r2, #32]
 800a72e:	4311      	orrs	r1, r2
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a734:	430a      	orrs	r2, r1
 800a736:	431a      	orrs	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	e026      	b.n	800a78c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	69d9      	ldr	r1, [r3, #28]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	4319      	orrs	r1, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a754:	430b      	orrs	r3, r1
 800a756:	431a      	orrs	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	4b0e      	ldr	r3, [pc, #56]	@ (800a79c <FMC_SDRAM_Init+0xb4>)
 800a762:	4013      	ands	r3, r2
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	6851      	ldr	r1, [r2, #4]
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	6892      	ldr	r2, [r2, #8]
 800a76c:	4311      	orrs	r1, r2
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	68d2      	ldr	r2, [r2, #12]
 800a772:	4311      	orrs	r1, r2
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	6912      	ldr	r2, [r2, #16]
 800a778:	4311      	orrs	r1, r2
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	6952      	ldr	r2, [r2, #20]
 800a77e:	4311      	orrs	r1, r2
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	6992      	ldr	r2, [r2, #24]
 800a784:	430a      	orrs	r2, r1
 800a786:	431a      	orrs	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	ffff8000 	.word	0xffff8000

0800a7a0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d128      	bne.n	800a804 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	1e59      	subs	r1, r3, #1
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	011b      	lsls	r3, r3, #4
 800a7c8:	4319      	orrs	r1, r3
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	021b      	lsls	r3, r3, #8
 800a7d2:	4319      	orrs	r1, r3
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	031b      	lsls	r3, r3, #12
 800a7dc:	4319      	orrs	r1, r3
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	041b      	lsls	r3, r3, #16
 800a7e6:	4319      	orrs	r1, r3
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	051b      	lsls	r3, r3, #20
 800a7f0:	4319      	orrs	r1, r3
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	061b      	lsls	r3, r3, #24
 800a7fa:	430b      	orrs	r3, r1
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	609a      	str	r2, [r3, #8]
 800a802:	e02d      	b.n	800a860 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	689a      	ldr	r2, [r3, #8]
 800a808:	4b19      	ldr	r3, [pc, #100]	@ (800a870 <FMC_SDRAM_Timing_Init+0xd0>)
 800a80a:	4013      	ands	r3, r2
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	68d2      	ldr	r2, [r2, #12]
 800a810:	3a01      	subs	r2, #1
 800a812:	0311      	lsls	r1, r2, #12
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	6952      	ldr	r2, [r2, #20]
 800a818:	3a01      	subs	r2, #1
 800a81a:	0512      	lsls	r2, r2, #20
 800a81c:	430a      	orrs	r2, r1
 800a81e:	431a      	orrs	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	1e59      	subs	r1, r3, #1
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	3b01      	subs	r3, #1
 800a838:	011b      	lsls	r3, r3, #4
 800a83a:	4319      	orrs	r1, r3
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	3b01      	subs	r3, #1
 800a842:	021b      	lsls	r3, r3, #8
 800a844:	4319      	orrs	r1, r3
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	041b      	lsls	r3, r3, #16
 800a84e:	4319      	orrs	r1, r3
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	3b01      	subs	r3, #1
 800a856:	061b      	lsls	r3, r3, #24
 800a858:	430b      	orrs	r3, r1
 800a85a:	431a      	orrs	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	ff0f0fff 	.word	0xff0f0fff

0800a874 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	691a      	ldr	r2, [r3, #16]
 800a884:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b8 <FMC_SDRAM_SendCommand+0x44>)
 800a886:	4013      	ands	r3, r2
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	6811      	ldr	r1, [r2, #0]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	6852      	ldr	r2, [r2, #4]
 800a890:	4311      	orrs	r1, r2
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	6892      	ldr	r2, [r2, #8]
 800a896:	3a01      	subs	r2, #1
 800a898:	0152      	lsls	r2, r2, #5
 800a89a:	4311      	orrs	r1, r2
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	68d2      	ldr	r2, [r2, #12]
 800a8a0:	0252      	lsls	r2, r2, #9
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	431a      	orrs	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	ffc00000 	.word	0xffc00000

0800a8bc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	695a      	ldr	r2, [r3, #20]
 800a8ca:	4b07      	ldr	r3, [pc, #28]	@ (800a8e8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	0052      	lsls	r2, r2, #1
 800a8d2:	431a      	orrs	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	ffffc001 	.word	0xffffc001

0800a8ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a8fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8fe:	2b84      	cmp	r3, #132	@ 0x84
 800a900:	d005      	beq.n	800a90e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a902:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4413      	add	r3, r2
 800a90a:	3303      	adds	r3, #3
 800a90c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a90e:	68fb      	ldr	r3, [r7, #12]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a920:	f000 faee 	bl	800af00 <vTaskStartScheduler>
  
  return osOK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	bd80      	pop	{r7, pc}

0800a92a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a92a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a92c:	b089      	sub	sp, #36	@ 0x24
 800a92e:	af04      	add	r7, sp, #16
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	695b      	ldr	r3, [r3, #20]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d020      	beq.n	800a97e <osThreadCreate+0x54>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d01c      	beq.n	800a97e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685c      	ldr	r4, [r3, #4]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	691e      	ldr	r6, [r3, #16]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a956:	4618      	mov	r0, r3
 800a958:	f7ff ffc8 	bl	800a8ec <makeFreeRtosPriority>
 800a95c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a966:	9202      	str	r2, [sp, #8]
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	9100      	str	r1, [sp, #0]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	4632      	mov	r2, r6
 800a970:	4629      	mov	r1, r5
 800a972:	4620      	mov	r0, r4
 800a974:	f000 f8ed 	bl	800ab52 <xTaskCreateStatic>
 800a978:	4603      	mov	r3, r0
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	e01c      	b.n	800a9b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685c      	ldr	r4, [r3, #4]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a98a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff ffaa 	bl	800a8ec <makeFreeRtosPriority>
 800a998:	4602      	mov	r2, r0
 800a99a:	f107 030c 	add.w	r3, r7, #12
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	9200      	str	r2, [sp, #0]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	4632      	mov	r2, r6
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 f938 	bl	800ac1e <xTaskCreate>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d001      	beq.n	800a9b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	e000      	b.n	800a9ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d001      	beq.n	800a9d8 <osDelay+0x16>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	e000      	b.n	800a9da <osDelay+0x18>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fa58 	bl	800ae90 <vTaskDelay>
  
  return osOK;
 800a9e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f103 0208 	add.w	r2, r3, #8
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa02:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f103 0208 	add.w	r2, r3, #8
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f103 0208 	add.w	r2, r3, #8
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa1e:	bf00      	nop
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	689a      	ldr	r2, [r3, #8]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	601a      	str	r2, [r3, #0]
}
 800aa80:	bf00      	nop
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaa2:	d103      	bne.n	800aaac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	e00c      	b.n	800aac6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3308      	adds	r3, #8
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	e002      	b.n	800aaba <vListInsert+0x2e>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d2f6      	bcs.n	800aab4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	601a      	str	r2, [r3, #0]
}
 800aaf2:	bf00      	nop
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	6892      	ldr	r2, [r2, #8]
 800ab14:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	6852      	ldr	r2, [r2, #4]
 800ab1e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d103      	bne.n	800ab32 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	689a      	ldr	r2, [r3, #8]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	1e5a      	subs	r2, r3, #1
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b08e      	sub	sp, #56	@ 0x38
 800ab56:	af04      	add	r7, sp, #16
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	60b9      	str	r1, [r7, #8]
 800ab5c:	607a      	str	r2, [r7, #4]
 800ab5e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10d      	bne.n	800ab82 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6a:	b672      	cpsid	i
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	b662      	cpsie	i
 800ab7a:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab7c:	bf00      	nop
 800ab7e:	bf00      	nop
 800ab80:	e7fd      	b.n	800ab7e <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ab82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10d      	bne.n	800aba4 <xTaskCreateStatic+0x52>
	__asm volatile
 800ab88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8c:	b672      	cpsid	i
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	b662      	cpsie	i
 800ab9c:	61fb      	str	r3, [r7, #28]
}
 800ab9e:	bf00      	nop
 800aba0:	bf00      	nop
 800aba2:	e7fd      	b.n	800aba0 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aba4:	2354      	movs	r3, #84	@ 0x54
 800aba6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2b54      	cmp	r3, #84	@ 0x54
 800abac:	d00d      	beq.n	800abca <xTaskCreateStatic+0x78>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb2:	b672      	cpsid	i
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	b662      	cpsie	i
 800abc2:	61bb      	str	r3, [r7, #24]
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop
 800abc8:	e7fd      	b.n	800abc6 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d01e      	beq.n	800ac10 <xTaskCreateStatic+0xbe>
 800abd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01b      	beq.n	800ac10 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abda:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abe0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	2202      	movs	r2, #2
 800abe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abea:	2300      	movs	r3, #0
 800abec:	9303      	str	r3, [sp, #12]
 800abee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf0:	9302      	str	r3, [sp, #8]
 800abf2:	f107 0314 	add.w	r3, r7, #20
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f850 	bl	800aca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac0a:	f000 f8d7 	bl	800adbc <prvAddNewTaskToReadyList>
 800ac0e:	e001      	b.n	800ac14 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ac10:	2300      	movs	r3, #0
 800ac12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac14:	697b      	ldr	r3, [r7, #20]
	}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3728      	adds	r7, #40	@ 0x28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b08c      	sub	sp, #48	@ 0x30
 800ac22:	af04      	add	r7, sp, #16
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	603b      	str	r3, [r7, #0]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac2e:	88fb      	ldrh	r3, [r7, #6]
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 feca 	bl	800b9cc <pvPortMalloc>
 800ac38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00e      	beq.n	800ac5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac40:	2054      	movs	r0, #84	@ 0x54
 800ac42:	f000 fec3 	bl	800b9cc <pvPortMalloc>
 800ac46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d003      	beq.n	800ac56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac54:	e005      	b.n	800ac62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac56:	6978      	ldr	r0, [r7, #20]
 800ac58:	f000 ff86 	bl	800bb68 <vPortFree>
 800ac5c:	e001      	b.n	800ac62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d017      	beq.n	800ac98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac70:	88fa      	ldrh	r2, [r7, #6]
 800ac72:	2300      	movs	r3, #0
 800ac74:	9303      	str	r3, [sp, #12]
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	9302      	str	r3, [sp, #8]
 800ac7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	68b9      	ldr	r1, [r7, #8]
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f000 f80e 	bl	800aca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac8c:	69f8      	ldr	r0, [r7, #28]
 800ac8e:	f000 f895 	bl	800adbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac92:	2301      	movs	r3, #1
 800ac94:	61bb      	str	r3, [r7, #24]
 800ac96:	e002      	b.n	800ac9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
	}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3720      	adds	r7, #32
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acba:	6879      	ldr	r1, [r7, #4]
 800acbc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800acc0:	440b      	add	r3, r1
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	f023 0307 	bic.w	r3, r3, #7
 800acce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	f003 0307 	and.w	r3, r3, #7
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00d      	beq.n	800acf6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acde:	b672      	cpsid	i
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	b662      	cpsie	i
 800acee:	617b      	str	r3, [r7, #20]
}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop
 800acf4:	e7fd      	b.n	800acf2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01f      	beq.n	800ad3c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acfc:	2300      	movs	r3, #0
 800acfe:	61fb      	str	r3, [r7, #28]
 800ad00:	e012      	b.n	800ad28 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	4413      	add	r3, r2
 800ad08:	7819      	ldrb	r1, [r3, #0]
 800ad0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	4413      	add	r3, r2
 800ad10:	3334      	adds	r3, #52	@ 0x34
 800ad12:	460a      	mov	r2, r1
 800ad14:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d006      	beq.n	800ad30 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	3301      	adds	r3, #1
 800ad26:	61fb      	str	r3, [r7, #28]
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	2b0f      	cmp	r3, #15
 800ad2c:	d9e9      	bls.n	800ad02 <prvInitialiseNewTask+0x5a>
 800ad2e:	e000      	b.n	800ad32 <prvInitialiseNewTask+0x8a>
			{
				break;
 800ad30:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad3a:	e003      	b.n	800ad44 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad46:	2b06      	cmp	r3, #6
 800ad48:	d901      	bls.n	800ad4e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad4a:	2306      	movs	r3, #6
 800ad4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad52:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad58:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad62:	3304      	adds	r3, #4
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7ff fe60 	bl	800aa2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6c:	3318      	adds	r3, #24
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff fe5b 	bl	800aa2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7c:	f1c3 0207 	rsb	r2, r3, #7
 800ad80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad88:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	68f9      	ldr	r1, [r7, #12]
 800ad9c:	69b8      	ldr	r0, [r7, #24]
 800ad9e:	f000 fc1b 	bl	800b5d8 <pxPortInitialiseStack>
 800ada2:	4602      	mov	r2, r0
 800ada4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ada8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adb4:	bf00      	nop
 800adb6:	3720      	adds	r7, #32
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800adc4:	f000 fd1a 	bl	800b7fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800adc8:	4b2a      	ldr	r3, [pc, #168]	@ (800ae74 <prvAddNewTaskToReadyList+0xb8>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3301      	adds	r3, #1
 800adce:	4a29      	ldr	r2, [pc, #164]	@ (800ae74 <prvAddNewTaskToReadyList+0xb8>)
 800add0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800add2:	4b29      	ldr	r3, [pc, #164]	@ (800ae78 <prvAddNewTaskToReadyList+0xbc>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d109      	bne.n	800adee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adda:	4a27      	ldr	r2, [pc, #156]	@ (800ae78 <prvAddNewTaskToReadyList+0xbc>)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ade0:	4b24      	ldr	r3, [pc, #144]	@ (800ae74 <prvAddNewTaskToReadyList+0xb8>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d110      	bne.n	800ae0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ade8:	f000 fad0 	bl	800b38c <prvInitialiseTaskLists>
 800adec:	e00d      	b.n	800ae0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800adee:	4b23      	ldr	r3, [pc, #140]	@ (800ae7c <prvAddNewTaskToReadyList+0xc0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adf6:	4b20      	ldr	r3, [pc, #128]	@ (800ae78 <prvAddNewTaskToReadyList+0xbc>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d802      	bhi.n	800ae0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae04:	4a1c      	ldr	r2, [pc, #112]	@ (800ae78 <prvAddNewTaskToReadyList+0xbc>)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ae80 <prvAddNewTaskToReadyList+0xc4>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	4a1b      	ldr	r2, [pc, #108]	@ (800ae80 <prvAddNewTaskToReadyList+0xc4>)
 800ae12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae18:	2201      	movs	r2, #1
 800ae1a:	409a      	lsls	r2, r3
 800ae1c:	4b19      	ldr	r3, [pc, #100]	@ (800ae84 <prvAddNewTaskToReadyList+0xc8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	4a18      	ldr	r2, [pc, #96]	@ (800ae84 <prvAddNewTaskToReadyList+0xc8>)
 800ae24:	6013      	str	r3, [r2, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	4a15      	ldr	r2, [pc, #84]	@ (800ae88 <prvAddNewTaskToReadyList+0xcc>)
 800ae34:	441a      	add	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	f7ff fe01 	bl	800aa44 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae42:	f000 fd11 	bl	800b868 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae46:	4b0d      	ldr	r3, [pc, #52]	@ (800ae7c <prvAddNewTaskToReadyList+0xc0>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00e      	beq.n	800ae6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae4e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae78 <prvAddNewTaskToReadyList+0xbc>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d207      	bcs.n	800ae6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae8c <prvAddNewTaskToReadyList+0xd0>)
 800ae5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20000d70 	.word	0x20000d70
 800ae78:	20000c70 	.word	0x20000c70
 800ae7c:	20000d7c 	.word	0x20000d7c
 800ae80:	20000d8c 	.word	0x20000d8c
 800ae84:	20000d78 	.word	0x20000d78
 800ae88:	20000c74 	.word	0x20000c74
 800ae8c:	e000ed04 	.word	0xe000ed04

0800ae90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d01a      	beq.n	800aed8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aea2:	4b15      	ldr	r3, [pc, #84]	@ (800aef8 <vTaskDelay+0x68>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00d      	beq.n	800aec6 <vTaskDelay+0x36>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeae:	b672      	cpsid	i
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	b662      	cpsie	i
 800aebe:	60bb      	str	r3, [r7, #8]
}
 800aec0:	bf00      	nop
 800aec2:	bf00      	nop
 800aec4:	e7fd      	b.n	800aec2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800aec6:	f000 f881 	bl	800afcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aeca:	2100      	movs	r1, #0
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fb1d 	bl	800b50c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aed2:	f000 f889 	bl	800afe8 <xTaskResumeAll>
 800aed6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d107      	bne.n	800aeee <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800aede:	4b07      	ldr	r3, [pc, #28]	@ (800aefc <vTaskDelay+0x6c>)
 800aee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aeee:	bf00      	nop
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20000d98 	.word	0x20000d98
 800aefc:	e000ed04 	.word	0xe000ed04

0800af00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08a      	sub	sp, #40	@ 0x28
 800af04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af0e:	463a      	mov	r2, r7
 800af10:	1d39      	adds	r1, r7, #4
 800af12:	f107 0308 	add.w	r3, r7, #8
 800af16:	4618      	mov	r0, r3
 800af18:	f7f5 fe08 	bl	8000b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	9202      	str	r2, [sp, #8]
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	2300      	movs	r3, #0
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	2300      	movs	r3, #0
 800af2c:	460a      	mov	r2, r1
 800af2e:	4921      	ldr	r1, [pc, #132]	@ (800afb4 <vTaskStartScheduler+0xb4>)
 800af30:	4821      	ldr	r0, [pc, #132]	@ (800afb8 <vTaskStartScheduler+0xb8>)
 800af32:	f7ff fe0e 	bl	800ab52 <xTaskCreateStatic>
 800af36:	4603      	mov	r3, r0
 800af38:	4a20      	ldr	r2, [pc, #128]	@ (800afbc <vTaskStartScheduler+0xbc>)
 800af3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af3c:	4b1f      	ldr	r3, [pc, #124]	@ (800afbc <vTaskStartScheduler+0xbc>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af44:	2301      	movs	r3, #1
 800af46:	617b      	str	r3, [r7, #20]
 800af48:	e001      	b.n	800af4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d118      	bne.n	800af86 <vTaskStartScheduler+0x86>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af58:	b672      	cpsid	i
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	b662      	cpsie	i
 800af68:	613b      	str	r3, [r7, #16]
}
 800af6a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af6c:	4b14      	ldr	r3, [pc, #80]	@ (800afc0 <vTaskStartScheduler+0xc0>)
 800af6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af74:	4b13      	ldr	r3, [pc, #76]	@ (800afc4 <vTaskStartScheduler+0xc4>)
 800af76:	2201      	movs	r2, #1
 800af78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af7a:	4b13      	ldr	r3, [pc, #76]	@ (800afc8 <vTaskStartScheduler+0xc8>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af80:	f000 fbbe 	bl	800b700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af84:	e011      	b.n	800afaa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af8c:	d10d      	bne.n	800afaa <vTaskStartScheduler+0xaa>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af92:	b672      	cpsid	i
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	b662      	cpsie	i
 800afa2:	60fb      	str	r3, [r7, #12]
}
 800afa4:	bf00      	nop
 800afa6:	bf00      	nop
 800afa8:	e7fd      	b.n	800afa6 <vTaskStartScheduler+0xa6>
}
 800afaa:	bf00      	nop
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	0800c75c 	.word	0x0800c75c
 800afb8:	0800b35d 	.word	0x0800b35d
 800afbc:	20000d94 	.word	0x20000d94
 800afc0:	20000d90 	.word	0x20000d90
 800afc4:	20000d7c 	.word	0x20000d7c
 800afc8:	20000d74 	.word	0x20000d74

0800afcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afcc:	b480      	push	{r7}
 800afce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800afd0:	4b04      	ldr	r3, [pc, #16]	@ (800afe4 <vTaskSuspendAll+0x18>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	4a03      	ldr	r2, [pc, #12]	@ (800afe4 <vTaskSuspendAll+0x18>)
 800afd8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800afda:	bf00      	nop
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr
 800afe4:	20000d98 	.word	0x20000d98

0800afe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aff2:	2300      	movs	r3, #0
 800aff4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aff6:	4b43      	ldr	r3, [pc, #268]	@ (800b104 <xTaskResumeAll+0x11c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10d      	bne.n	800b01a <xTaskResumeAll+0x32>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b002:	b672      	cpsid	i
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	b662      	cpsie	i
 800b012:	603b      	str	r3, [r7, #0]
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop
 800b018:	e7fd      	b.n	800b016 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b01a:	f000 fbef 	bl	800b7fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b01e:	4b39      	ldr	r3, [pc, #228]	@ (800b104 <xTaskResumeAll+0x11c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	3b01      	subs	r3, #1
 800b024:	4a37      	ldr	r2, [pc, #220]	@ (800b104 <xTaskResumeAll+0x11c>)
 800b026:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b028:	4b36      	ldr	r3, [pc, #216]	@ (800b104 <xTaskResumeAll+0x11c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d161      	bne.n	800b0f4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b030:	4b35      	ldr	r3, [pc, #212]	@ (800b108 <xTaskResumeAll+0x120>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d05d      	beq.n	800b0f4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b038:	e02e      	b.n	800b098 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b03a:	4b34      	ldr	r3, [pc, #208]	@ (800b10c <xTaskResumeAll+0x124>)
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3318      	adds	r3, #24
 800b046:	4618      	mov	r0, r3
 800b048:	f7ff fd59 	bl	800aafe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	3304      	adds	r3, #4
 800b050:	4618      	mov	r0, r3
 800b052:	f7ff fd54 	bl	800aafe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05a:	2201      	movs	r2, #1
 800b05c:	409a      	lsls	r2, r3
 800b05e:	4b2c      	ldr	r3, [pc, #176]	@ (800b110 <xTaskResumeAll+0x128>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4313      	orrs	r3, r2
 800b064:	4a2a      	ldr	r2, [pc, #168]	@ (800b110 <xTaskResumeAll+0x128>)
 800b066:	6013      	str	r3, [r2, #0]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b06c:	4613      	mov	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4a27      	ldr	r2, [pc, #156]	@ (800b114 <xTaskResumeAll+0x12c>)
 800b076:	441a      	add	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3304      	adds	r3, #4
 800b07c:	4619      	mov	r1, r3
 800b07e:	4610      	mov	r0, r2
 800b080:	f7ff fce0 	bl	800aa44 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b088:	4b23      	ldr	r3, [pc, #140]	@ (800b118 <xTaskResumeAll+0x130>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b08e:	429a      	cmp	r2, r3
 800b090:	d302      	bcc.n	800b098 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b092:	4b22      	ldr	r3, [pc, #136]	@ (800b11c <xTaskResumeAll+0x134>)
 800b094:	2201      	movs	r2, #1
 800b096:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b098:	4b1c      	ldr	r3, [pc, #112]	@ (800b10c <xTaskResumeAll+0x124>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1cc      	bne.n	800b03a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0a6:	f000 fa11 	bl	800b4cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b0aa:	4b1d      	ldr	r3, [pc, #116]	@ (800b120 <xTaskResumeAll+0x138>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d010      	beq.n	800b0d8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0b6:	f000 f837 	bl	800b128 <xTaskIncrementTick>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b0c0:	4b16      	ldr	r3, [pc, #88]	@ (800b11c <xTaskResumeAll+0x134>)
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1f1      	bne.n	800b0b6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b0d2:	4b13      	ldr	r3, [pc, #76]	@ (800b120 <xTaskResumeAll+0x138>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0d8:	4b10      	ldr	r3, [pc, #64]	@ (800b11c <xTaskResumeAll+0x134>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d009      	beq.n	800b0f4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b124 <xTaskResumeAll+0x13c>)
 800b0e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0f4:	f000 fbb8 	bl	800b868 <vPortExitCritical>

	return xAlreadyYielded;
 800b0f8:	68bb      	ldr	r3, [r7, #8]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	20000d98 	.word	0x20000d98
 800b108:	20000d70 	.word	0x20000d70
 800b10c:	20000d30 	.word	0x20000d30
 800b110:	20000d78 	.word	0x20000d78
 800b114:	20000c74 	.word	0x20000c74
 800b118:	20000c70 	.word	0x20000c70
 800b11c:	20000d84 	.word	0x20000d84
 800b120:	20000d80 	.word	0x20000d80
 800b124:	e000ed04 	.word	0xe000ed04

0800b128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b12e:	2300      	movs	r3, #0
 800b130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b132:	4b50      	ldr	r3, [pc, #320]	@ (800b274 <xTaskIncrementTick+0x14c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	f040 808b 	bne.w	800b252 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b13c:	4b4e      	ldr	r3, [pc, #312]	@ (800b278 <xTaskIncrementTick+0x150>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3301      	adds	r3, #1
 800b142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b144:	4a4c      	ldr	r2, [pc, #304]	@ (800b278 <xTaskIncrementTick+0x150>)
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d123      	bne.n	800b198 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800b150:	4b4a      	ldr	r3, [pc, #296]	@ (800b27c <xTaskIncrementTick+0x154>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00d      	beq.n	800b176 <xTaskIncrementTick+0x4e>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15e:	b672      	cpsid	i
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	b662      	cpsie	i
 800b16e:	603b      	str	r3, [r7, #0]
}
 800b170:	bf00      	nop
 800b172:	bf00      	nop
 800b174:	e7fd      	b.n	800b172 <xTaskIncrementTick+0x4a>
 800b176:	4b41      	ldr	r3, [pc, #260]	@ (800b27c <xTaskIncrementTick+0x154>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	4b40      	ldr	r3, [pc, #256]	@ (800b280 <xTaskIncrementTick+0x158>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a3e      	ldr	r2, [pc, #248]	@ (800b27c <xTaskIncrementTick+0x154>)
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	4a3e      	ldr	r2, [pc, #248]	@ (800b280 <xTaskIncrementTick+0x158>)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6013      	str	r3, [r2, #0]
 800b18a:	4b3e      	ldr	r3, [pc, #248]	@ (800b284 <xTaskIncrementTick+0x15c>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3301      	adds	r3, #1
 800b190:	4a3c      	ldr	r2, [pc, #240]	@ (800b284 <xTaskIncrementTick+0x15c>)
 800b192:	6013      	str	r3, [r2, #0]
 800b194:	f000 f99a 	bl	800b4cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b198:	4b3b      	ldr	r3, [pc, #236]	@ (800b288 <xTaskIncrementTick+0x160>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d348      	bcc.n	800b234 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1a2:	4b36      	ldr	r3, [pc, #216]	@ (800b27c <xTaskIncrementTick+0x154>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d104      	bne.n	800b1b6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1ac:	4b36      	ldr	r3, [pc, #216]	@ (800b288 <xTaskIncrementTick+0x160>)
 800b1ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1b2:	601a      	str	r2, [r3, #0]
					break;
 800b1b4:	e03e      	b.n	800b234 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1b6:	4b31      	ldr	r3, [pc, #196]	@ (800b27c <xTaskIncrementTick+0x154>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d203      	bcs.n	800b1d6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1ce:	4a2e      	ldr	r2, [pc, #184]	@ (800b288 <xTaskIncrementTick+0x160>)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1d4:	e02e      	b.n	800b234 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff fc8f 	bl	800aafe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d004      	beq.n	800b1f2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	3318      	adds	r3, #24
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fc86 	bl	800aafe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	409a      	lsls	r2, r3
 800b1fa:	4b24      	ldr	r3, [pc, #144]	@ (800b28c <xTaskIncrementTick+0x164>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	4a22      	ldr	r2, [pc, #136]	@ (800b28c <xTaskIncrementTick+0x164>)
 800b202:	6013      	str	r3, [r2, #0]
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b208:	4613      	mov	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4a1f      	ldr	r2, [pc, #124]	@ (800b290 <xTaskIncrementTick+0x168>)
 800b212:	441a      	add	r2, r3
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	3304      	adds	r3, #4
 800b218:	4619      	mov	r1, r3
 800b21a:	4610      	mov	r0, r2
 800b21c:	f7ff fc12 	bl	800aa44 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b224:	4b1b      	ldr	r3, [pc, #108]	@ (800b294 <xTaskIncrementTick+0x16c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d3b9      	bcc.n	800b1a2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800b22e:	2301      	movs	r3, #1
 800b230:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b232:	e7b6      	b.n	800b1a2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b234:	4b17      	ldr	r3, [pc, #92]	@ (800b294 <xTaskIncrementTick+0x16c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b23a:	4915      	ldr	r1, [pc, #84]	@ (800b290 <xTaskIncrementTick+0x168>)
 800b23c:	4613      	mov	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	440b      	add	r3, r1
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d907      	bls.n	800b25c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b24c:	2301      	movs	r3, #1
 800b24e:	617b      	str	r3, [r7, #20]
 800b250:	e004      	b.n	800b25c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b252:	4b11      	ldr	r3, [pc, #68]	@ (800b298 <xTaskIncrementTick+0x170>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3301      	adds	r3, #1
 800b258:	4a0f      	ldr	r2, [pc, #60]	@ (800b298 <xTaskIncrementTick+0x170>)
 800b25a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b25c:	4b0f      	ldr	r3, [pc, #60]	@ (800b29c <xTaskIncrementTick+0x174>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b264:	2301      	movs	r3, #1
 800b266:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b268:	697b      	ldr	r3, [r7, #20]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20000d98 	.word	0x20000d98
 800b278:	20000d74 	.word	0x20000d74
 800b27c:	20000d28 	.word	0x20000d28
 800b280:	20000d2c 	.word	0x20000d2c
 800b284:	20000d88 	.word	0x20000d88
 800b288:	20000d90 	.word	0x20000d90
 800b28c:	20000d78 	.word	0x20000d78
 800b290:	20000c74 	.word	0x20000c74
 800b294:	20000c70 	.word	0x20000c70
 800b298:	20000d80 	.word	0x20000d80
 800b29c:	20000d84 	.word	0x20000d84

0800b2a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2a6:	4b28      	ldr	r3, [pc, #160]	@ (800b348 <vTaskSwitchContext+0xa8>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2ae:	4b27      	ldr	r3, [pc, #156]	@ (800b34c <vTaskSwitchContext+0xac>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b2b4:	e042      	b.n	800b33c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b2b6:	4b25      	ldr	r3, [pc, #148]	@ (800b34c <vTaskSwitchContext+0xac>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2bc:	4b24      	ldr	r3, [pc, #144]	@ (800b350 <vTaskSwitchContext+0xb0>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	fab3 f383 	clz	r3, r3
 800b2c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	f1c3 031f 	rsb	r3, r3, #31
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	4920      	ldr	r1, [pc, #128]	@ (800b354 <vTaskSwitchContext+0xb4>)
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	440b      	add	r3, r1
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10d      	bne.n	800b302 <vTaskSwitchContext+0x62>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ea:	b672      	cpsid	i
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	b662      	cpsie	i
 800b2fa:	607b      	str	r3, [r7, #4]
}
 800b2fc:	bf00      	nop
 800b2fe:	bf00      	nop
 800b300:	e7fd      	b.n	800b2fe <vTaskSwitchContext+0x5e>
 800b302:	697a      	ldr	r2, [r7, #20]
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4a11      	ldr	r2, [pc, #68]	@ (800b354 <vTaskSwitchContext+0xb4>)
 800b30e:	4413      	add	r3, r2
 800b310:	613b      	str	r3, [r7, #16]
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	685a      	ldr	r2, [r3, #4]
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	605a      	str	r2, [r3, #4]
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	3308      	adds	r3, #8
 800b324:	429a      	cmp	r2, r3
 800b326:	d104      	bne.n	800b332 <vTaskSwitchContext+0x92>
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	605a      	str	r2, [r3, #4]
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	4a07      	ldr	r2, [pc, #28]	@ (800b358 <vTaskSwitchContext+0xb8>)
 800b33a:	6013      	str	r3, [r2, #0]
}
 800b33c:	bf00      	nop
 800b33e:	371c      	adds	r7, #28
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	20000d98 	.word	0x20000d98
 800b34c:	20000d84 	.word	0x20000d84
 800b350:	20000d78 	.word	0x20000d78
 800b354:	20000c74 	.word	0x20000c74
 800b358:	20000c70 	.word	0x20000c70

0800b35c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b364:	f000 f852 	bl	800b40c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b368:	4b06      	ldr	r3, [pc, #24]	@ (800b384 <prvIdleTask+0x28>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d9f9      	bls.n	800b364 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b370:	4b05      	ldr	r3, [pc, #20]	@ (800b388 <prvIdleTask+0x2c>)
 800b372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b380:	e7f0      	b.n	800b364 <prvIdleTask+0x8>
 800b382:	bf00      	nop
 800b384:	20000c74 	.word	0x20000c74
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b392:	2300      	movs	r3, #0
 800b394:	607b      	str	r3, [r7, #4]
 800b396:	e00c      	b.n	800b3b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	4613      	mov	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4413      	add	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4a12      	ldr	r2, [pc, #72]	@ (800b3ec <prvInitialiseTaskLists+0x60>)
 800b3a4:	4413      	add	r3, r2
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7ff fb1f 	bl	800a9ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	607b      	str	r3, [r7, #4]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b06      	cmp	r3, #6
 800b3b6:	d9ef      	bls.n	800b398 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3b8:	480d      	ldr	r0, [pc, #52]	@ (800b3f0 <prvInitialiseTaskLists+0x64>)
 800b3ba:	f7ff fb16 	bl	800a9ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3be:	480d      	ldr	r0, [pc, #52]	@ (800b3f4 <prvInitialiseTaskLists+0x68>)
 800b3c0:	f7ff fb13 	bl	800a9ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3c4:	480c      	ldr	r0, [pc, #48]	@ (800b3f8 <prvInitialiseTaskLists+0x6c>)
 800b3c6:	f7ff fb10 	bl	800a9ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3ca:	480c      	ldr	r0, [pc, #48]	@ (800b3fc <prvInitialiseTaskLists+0x70>)
 800b3cc:	f7ff fb0d 	bl	800a9ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3d0:	480b      	ldr	r0, [pc, #44]	@ (800b400 <prvInitialiseTaskLists+0x74>)
 800b3d2:	f7ff fb0a 	bl	800a9ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b404 <prvInitialiseTaskLists+0x78>)
 800b3d8:	4a05      	ldr	r2, [pc, #20]	@ (800b3f0 <prvInitialiseTaskLists+0x64>)
 800b3da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b408 <prvInitialiseTaskLists+0x7c>)
 800b3de:	4a05      	ldr	r2, [pc, #20]	@ (800b3f4 <prvInitialiseTaskLists+0x68>)
 800b3e0:	601a      	str	r2, [r3, #0]
}
 800b3e2:	bf00      	nop
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20000c74 	.word	0x20000c74
 800b3f0:	20000d00 	.word	0x20000d00
 800b3f4:	20000d14 	.word	0x20000d14
 800b3f8:	20000d30 	.word	0x20000d30
 800b3fc:	20000d44 	.word	0x20000d44
 800b400:	20000d5c 	.word	0x20000d5c
 800b404:	20000d28 	.word	0x20000d28
 800b408:	20000d2c 	.word	0x20000d2c

0800b40c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b412:	e019      	b.n	800b448 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b414:	f000 f9f2 	bl	800b7fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b418:	4b10      	ldr	r3, [pc, #64]	@ (800b45c <prvCheckTasksWaitingTermination+0x50>)
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	3304      	adds	r3, #4
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fb6a 	bl	800aafe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b42a:	4b0d      	ldr	r3, [pc, #52]	@ (800b460 <prvCheckTasksWaitingTermination+0x54>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	3b01      	subs	r3, #1
 800b430:	4a0b      	ldr	r2, [pc, #44]	@ (800b460 <prvCheckTasksWaitingTermination+0x54>)
 800b432:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b434:	4b0b      	ldr	r3, [pc, #44]	@ (800b464 <prvCheckTasksWaitingTermination+0x58>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	3b01      	subs	r3, #1
 800b43a:	4a0a      	ldr	r2, [pc, #40]	@ (800b464 <prvCheckTasksWaitingTermination+0x58>)
 800b43c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b43e:	f000 fa13 	bl	800b868 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 f810 	bl	800b468 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b448:	4b06      	ldr	r3, [pc, #24]	@ (800b464 <prvCheckTasksWaitingTermination+0x58>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1e1      	bne.n	800b414 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b450:	bf00      	nop
 800b452:	bf00      	nop
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20000d44 	.word	0x20000d44
 800b460:	20000d70 	.word	0x20000d70
 800b464:	20000d58 	.word	0x20000d58

0800b468 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b476:	2b00      	cmp	r3, #0
 800b478:	d108      	bne.n	800b48c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 fb72 	bl	800bb68 <vPortFree>
				vPortFree( pxTCB );
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 fb6f 	bl	800bb68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b48a:	e01b      	b.n	800b4c4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b492:	2b01      	cmp	r3, #1
 800b494:	d103      	bne.n	800b49e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fb66 	bl	800bb68 <vPortFree>
	}
 800b49c:	e012      	b.n	800b4c4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d00d      	beq.n	800b4c4 <prvDeleteTCB+0x5c>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ac:	b672      	cpsid	i
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	b662      	cpsie	i
 800b4bc:	60fb      	str	r3, [r7, #12]
}
 800b4be:	bf00      	nop
 800b4c0:	bf00      	nop
 800b4c2:	e7fd      	b.n	800b4c0 <prvDeleteTCB+0x58>
	}
 800b4c4:	bf00      	nop
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b504 <prvResetNextTaskUnblockTime+0x38>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d104      	bne.n	800b4e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b508 <prvResetNextTaskUnblockTime+0x3c>)
 800b4de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b4e4:	e008      	b.n	800b4f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4e6:	4b07      	ldr	r3, [pc, #28]	@ (800b504 <prvResetNextTaskUnblockTime+0x38>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	4a04      	ldr	r2, [pc, #16]	@ (800b508 <prvResetNextTaskUnblockTime+0x3c>)
 800b4f6:	6013      	str	r3, [r2, #0]
}
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr
 800b504:	20000d28 	.word	0x20000d28
 800b508:	20000d90 	.word	0x20000d90

0800b50c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b516:	4b29      	ldr	r3, [pc, #164]	@ (800b5bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b51c:	4b28      	ldr	r3, [pc, #160]	@ (800b5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	3304      	adds	r3, #4
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff faeb 	bl	800aafe <uxListRemove>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10b      	bne.n	800b546 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b52e:	4b24      	ldr	r3, [pc, #144]	@ (800b5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b534:	2201      	movs	r2, #1
 800b536:	fa02 f303 	lsl.w	r3, r2, r3
 800b53a:	43da      	mvns	r2, r3
 800b53c:	4b21      	ldr	r3, [pc, #132]	@ (800b5c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4013      	ands	r3, r2
 800b542:	4a20      	ldr	r2, [pc, #128]	@ (800b5c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b544:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b54c:	d10a      	bne.n	800b564 <prvAddCurrentTaskToDelayedList+0x58>
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d007      	beq.n	800b564 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b554:	4b1a      	ldr	r3, [pc, #104]	@ (800b5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3304      	adds	r3, #4
 800b55a:	4619      	mov	r1, r3
 800b55c:	481a      	ldr	r0, [pc, #104]	@ (800b5c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b55e:	f7ff fa71 	bl	800aa44 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b562:	e026      	b.n	800b5b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4413      	add	r3, r2
 800b56a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b56c:	4b14      	ldr	r3, [pc, #80]	@ (800b5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d209      	bcs.n	800b590 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b57c:	4b13      	ldr	r3, [pc, #76]	@ (800b5cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	4b0f      	ldr	r3, [pc, #60]	@ (800b5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3304      	adds	r3, #4
 800b586:	4619      	mov	r1, r3
 800b588:	4610      	mov	r0, r2
 800b58a:	f7ff fa7f 	bl	800aa8c <vListInsert>
}
 800b58e:	e010      	b.n	800b5b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b590:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	4b0a      	ldr	r3, [pc, #40]	@ (800b5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3304      	adds	r3, #4
 800b59a:	4619      	mov	r1, r3
 800b59c:	4610      	mov	r0, r2
 800b59e:	f7ff fa75 	bl	800aa8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b5a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d202      	bcs.n	800b5b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b5ac:	4a09      	ldr	r2, [pc, #36]	@ (800b5d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	6013      	str	r3, [r2, #0]
}
 800b5b2:	bf00      	nop
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20000d74 	.word	0x20000d74
 800b5c0:	20000c70 	.word	0x20000c70
 800b5c4:	20000d78 	.word	0x20000d78
 800b5c8:	20000d5c 	.word	0x20000d5c
 800b5cc:	20000d2c 	.word	0x20000d2c
 800b5d0:	20000d28 	.word	0x20000d28
 800b5d4:	20000d90 	.word	0x20000d90

0800b5d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	3b04      	subs	r3, #4
 800b5e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b5f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3b04      	subs	r3, #4
 800b5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	f023 0201 	bic.w	r2, r3, #1
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	3b04      	subs	r3, #4
 800b606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b608:	4a0c      	ldr	r2, [pc, #48]	@ (800b63c <pxPortInitialiseStack+0x64>)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3b14      	subs	r3, #20
 800b612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3b04      	subs	r3, #4
 800b61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f06f 0202 	mvn.w	r2, #2
 800b626:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	3b20      	subs	r3, #32
 800b62c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b62e:	68fb      	ldr	r3, [r7, #12]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	0800b641 	.word	0x0800b641

0800b640 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b64a:	4b15      	ldr	r3, [pc, #84]	@ (800b6a0 <prvTaskExitError+0x60>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b652:	d00d      	beq.n	800b670 <prvTaskExitError+0x30>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b658:	b672      	cpsid	i
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	b662      	cpsie	i
 800b668:	60fb      	str	r3, [r7, #12]
}
 800b66a:	bf00      	nop
 800b66c:	bf00      	nop
 800b66e:	e7fd      	b.n	800b66c <prvTaskExitError+0x2c>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b674:	b672      	cpsid	i
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	b662      	cpsie	i
 800b684:	60bb      	str	r3, [r7, #8]
}
 800b686:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b688:	bf00      	nop
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d0fc      	beq.n	800b68a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b690:	bf00      	nop
 800b692:	bf00      	nop
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	20000048 	.word	0x20000048
	...

0800b6b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6b0:	4b07      	ldr	r3, [pc, #28]	@ (800b6d0 <pxCurrentTCBConst2>)
 800b6b2:	6819      	ldr	r1, [r3, #0]
 800b6b4:	6808      	ldr	r0, [r1, #0]
 800b6b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ba:	f380 8809 	msr	PSP, r0
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f04f 0000 	mov.w	r0, #0
 800b6c6:	f380 8811 	msr	BASEPRI, r0
 800b6ca:	4770      	bx	lr
 800b6cc:	f3af 8000 	nop.w

0800b6d0 <pxCurrentTCBConst2>:
 800b6d0:	20000c70 	.word	0x20000c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6d4:	bf00      	nop
 800b6d6:	bf00      	nop

0800b6d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6d8:	4808      	ldr	r0, [pc, #32]	@ (800b6fc <prvPortStartFirstTask+0x24>)
 800b6da:	6800      	ldr	r0, [r0, #0]
 800b6dc:	6800      	ldr	r0, [r0, #0]
 800b6de:	f380 8808 	msr	MSP, r0
 800b6e2:	f04f 0000 	mov.w	r0, #0
 800b6e6:	f380 8814 	msr	CONTROL, r0
 800b6ea:	b662      	cpsie	i
 800b6ec:	b661      	cpsie	f
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	df00      	svc	0
 800b6f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6fa:	bf00      	nop
 800b6fc:	e000ed08 	.word	0xe000ed08

0800b700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b706:	4b37      	ldr	r3, [pc, #220]	@ (800b7e4 <xPortStartScheduler+0xe4>)
 800b708:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	22ff      	movs	r2, #255	@ 0xff
 800b716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	4b2f      	ldr	r3, [pc, #188]	@ (800b7e8 <xPortStartScheduler+0xe8>)
 800b72c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b72e:	4b2f      	ldr	r3, [pc, #188]	@ (800b7ec <xPortStartScheduler+0xec>)
 800b730:	2207      	movs	r2, #7
 800b732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b734:	e009      	b.n	800b74a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b736:	4b2d      	ldr	r3, [pc, #180]	@ (800b7ec <xPortStartScheduler+0xec>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	4a2b      	ldr	r2, [pc, #172]	@ (800b7ec <xPortStartScheduler+0xec>)
 800b73e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	b2db      	uxtb	r3, r3
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	b2db      	uxtb	r3, r3
 800b748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b74a:	78fb      	ldrb	r3, [r7, #3]
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b752:	2b80      	cmp	r3, #128	@ 0x80
 800b754:	d0ef      	beq.n	800b736 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b756:	4b25      	ldr	r3, [pc, #148]	@ (800b7ec <xPortStartScheduler+0xec>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f1c3 0307 	rsb	r3, r3, #7
 800b75e:	2b04      	cmp	r3, #4
 800b760:	d00d      	beq.n	800b77e <xPortStartScheduler+0x7e>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b766:	b672      	cpsid	i
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	b662      	cpsie	i
 800b776:	60bb      	str	r3, [r7, #8]
}
 800b778:	bf00      	nop
 800b77a:	bf00      	nop
 800b77c:	e7fd      	b.n	800b77a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b77e:	4b1b      	ldr	r3, [pc, #108]	@ (800b7ec <xPortStartScheduler+0xec>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	021b      	lsls	r3, r3, #8
 800b784:	4a19      	ldr	r2, [pc, #100]	@ (800b7ec <xPortStartScheduler+0xec>)
 800b786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b788:	4b18      	ldr	r3, [pc, #96]	@ (800b7ec <xPortStartScheduler+0xec>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b790:	4a16      	ldr	r2, [pc, #88]	@ (800b7ec <xPortStartScheduler+0xec>)
 800b792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	b2da      	uxtb	r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b79c:	4b14      	ldr	r3, [pc, #80]	@ (800b7f0 <xPortStartScheduler+0xf0>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a13      	ldr	r2, [pc, #76]	@ (800b7f0 <xPortStartScheduler+0xf0>)
 800b7a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b7a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7a8:	4b11      	ldr	r3, [pc, #68]	@ (800b7f0 <xPortStartScheduler+0xf0>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a10      	ldr	r2, [pc, #64]	@ (800b7f0 <xPortStartScheduler+0xf0>)
 800b7ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b7b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7b4:	f000 f8dc 	bl	800b970 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7b8:	4b0e      	ldr	r3, [pc, #56]	@ (800b7f4 <xPortStartScheduler+0xf4>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7be:	f000 f8fb 	bl	800b9b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f8 <xPortStartScheduler+0xf8>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b7f8 <xPortStartScheduler+0xf8>)
 800b7c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b7cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7ce:	f7ff ff83 	bl	800b6d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7d2:	f7ff fd65 	bl	800b2a0 <vTaskSwitchContext>
	prvTaskExitError();
 800b7d6:	f7ff ff33 	bl	800b640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	e000e400 	.word	0xe000e400
 800b7e8:	20000d9c 	.word	0x20000d9c
 800b7ec:	20000da0 	.word	0x20000da0
 800b7f0:	e000ed20 	.word	0xe000ed20
 800b7f4:	20000048 	.word	0x20000048
 800b7f8:	e000ef34 	.word	0xe000ef34

0800b7fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b806:	b672      	cpsid	i
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	b662      	cpsie	i
 800b816:	607b      	str	r3, [r7, #4]
}
 800b818:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b81a:	4b11      	ldr	r3, [pc, #68]	@ (800b860 <vPortEnterCritical+0x64>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	3301      	adds	r3, #1
 800b820:	4a0f      	ldr	r2, [pc, #60]	@ (800b860 <vPortEnterCritical+0x64>)
 800b822:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b824:	4b0e      	ldr	r3, [pc, #56]	@ (800b860 <vPortEnterCritical+0x64>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d112      	bne.n	800b852 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b82c:	4b0d      	ldr	r3, [pc, #52]	@ (800b864 <vPortEnterCritical+0x68>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00d      	beq.n	800b852 <vPortEnterCritical+0x56>
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b83a:	b672      	cpsid	i
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	b662      	cpsie	i
 800b84a:	603b      	str	r3, [r7, #0]
}
 800b84c:	bf00      	nop
 800b84e:	bf00      	nop
 800b850:	e7fd      	b.n	800b84e <vPortEnterCritical+0x52>
	}
}
 800b852:	bf00      	nop
 800b854:	370c      	adds	r7, #12
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	20000048 	.word	0x20000048
 800b864:	e000ed04 	.word	0xe000ed04

0800b868 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b86e:	4b13      	ldr	r3, [pc, #76]	@ (800b8bc <vPortExitCritical+0x54>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d10d      	bne.n	800b892 <vPortExitCritical+0x2a>
	__asm volatile
 800b876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87a:	b672      	cpsid	i
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	b662      	cpsie	i
 800b88a:	607b      	str	r3, [r7, #4]
}
 800b88c:	bf00      	nop
 800b88e:	bf00      	nop
 800b890:	e7fd      	b.n	800b88e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b892:	4b0a      	ldr	r3, [pc, #40]	@ (800b8bc <vPortExitCritical+0x54>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3b01      	subs	r3, #1
 800b898:	4a08      	ldr	r2, [pc, #32]	@ (800b8bc <vPortExitCritical+0x54>)
 800b89a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b89c:	4b07      	ldr	r3, [pc, #28]	@ (800b8bc <vPortExitCritical+0x54>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d105      	bne.n	800b8b0 <vPortExitCritical+0x48>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b8ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	20000048 	.word	0x20000048

0800b8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8c0:	f3ef 8009 	mrs	r0, PSP
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	4b15      	ldr	r3, [pc, #84]	@ (800b920 <pxCurrentTCBConst>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	f01e 0f10 	tst.w	lr, #16
 800b8d0:	bf08      	it	eq
 800b8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8da:	6010      	str	r0, [r2, #0]
 800b8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b8e4:	b672      	cpsid	i
 800b8e6:	f380 8811 	msr	BASEPRI, r0
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	b662      	cpsie	i
 800b8f4:	f7ff fcd4 	bl	800b2a0 <vTaskSwitchContext>
 800b8f8:	f04f 0000 	mov.w	r0, #0
 800b8fc:	f380 8811 	msr	BASEPRI, r0
 800b900:	bc09      	pop	{r0, r3}
 800b902:	6819      	ldr	r1, [r3, #0]
 800b904:	6808      	ldr	r0, [r1, #0]
 800b906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90a:	f01e 0f10 	tst.w	lr, #16
 800b90e:	bf08      	it	eq
 800b910:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b914:	f380 8809 	msr	PSP, r0
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop

0800b920 <pxCurrentTCBConst>:
 800b920:	20000c70 	.word	0x20000c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop

0800b928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b932:	b672      	cpsid	i
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	b662      	cpsie	i
 800b942:	607b      	str	r3, [r7, #4]
}
 800b944:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b946:	f7ff fbef 	bl	800b128 <xTaskIncrementTick>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b950:	4b06      	ldr	r3, [pc, #24]	@ (800b96c <SysTick_Handler+0x44>)
 800b952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b956:	601a      	str	r2, [r3, #0]
 800b958:	2300      	movs	r3, #0
 800b95a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	f383 8811 	msr	BASEPRI, r3
}
 800b962:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b964:	bf00      	nop
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	e000ed04 	.word	0xe000ed04

0800b970 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b970:	b480      	push	{r7}
 800b972:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b974:	4b0b      	ldr	r3, [pc, #44]	@ (800b9a4 <vPortSetupTimerInterrupt+0x34>)
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b97a:	4b0b      	ldr	r3, [pc, #44]	@ (800b9a8 <vPortSetupTimerInterrupt+0x38>)
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b980:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ac <vPortSetupTimerInterrupt+0x3c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a0a      	ldr	r2, [pc, #40]	@ (800b9b0 <vPortSetupTimerInterrupt+0x40>)
 800b986:	fba2 2303 	umull	r2, r3, r2, r3
 800b98a:	099b      	lsrs	r3, r3, #6
 800b98c:	4a09      	ldr	r2, [pc, #36]	@ (800b9b4 <vPortSetupTimerInterrupt+0x44>)
 800b98e:	3b01      	subs	r3, #1
 800b990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b992:	4b04      	ldr	r3, [pc, #16]	@ (800b9a4 <vPortSetupTimerInterrupt+0x34>)
 800b994:	2207      	movs	r2, #7
 800b996:	601a      	str	r2, [r3, #0]
}
 800b998:	bf00      	nop
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	e000e010 	.word	0xe000e010
 800b9a8:	e000e018 	.word	0xe000e018
 800b9ac:	2000003c 	.word	0x2000003c
 800b9b0:	10624dd3 	.word	0x10624dd3
 800b9b4:	e000e014 	.word	0xe000e014

0800b9b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b9c8 <vPortEnableVFP+0x10>
 800b9bc:	6801      	ldr	r1, [r0, #0]
 800b9be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b9c2:	6001      	str	r1, [r0, #0]
 800b9c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9c6:	bf00      	nop
 800b9c8:	e000ed88 	.word	0xe000ed88

0800b9cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b08a      	sub	sp, #40	@ 0x28
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b9d8:	f7ff faf8 	bl	800afcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b9dc:	4b5d      	ldr	r3, [pc, #372]	@ (800bb54 <pvPortMalloc+0x188>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9e4:	f000 f920 	bl	800bc28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9e8:	4b5b      	ldr	r3, [pc, #364]	@ (800bb58 <pvPortMalloc+0x18c>)
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f040 8094 	bne.w	800bb1e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d020      	beq.n	800ba3e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800b9fc:	2208      	movs	r2, #8
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4413      	add	r3, r2
 800ba02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f003 0307 	and.w	r3, r3, #7
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d017      	beq.n	800ba3e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f023 0307 	bic.w	r3, r3, #7
 800ba14:	3308      	adds	r3, #8
 800ba16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f003 0307 	and.w	r3, r3, #7
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00d      	beq.n	800ba3e <pvPortMalloc+0x72>
	__asm volatile
 800ba22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba26:	b672      	cpsid	i
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	b662      	cpsie	i
 800ba36:	617b      	str	r3, [r7, #20]
}
 800ba38:	bf00      	nop
 800ba3a:	bf00      	nop
 800ba3c:	e7fd      	b.n	800ba3a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d06c      	beq.n	800bb1e <pvPortMalloc+0x152>
 800ba44:	4b45      	ldr	r3, [pc, #276]	@ (800bb5c <pvPortMalloc+0x190>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d867      	bhi.n	800bb1e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba4e:	4b44      	ldr	r3, [pc, #272]	@ (800bb60 <pvPortMalloc+0x194>)
 800ba50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba52:	4b43      	ldr	r3, [pc, #268]	@ (800bb60 <pvPortMalloc+0x194>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba58:	e004      	b.n	800ba64 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d903      	bls.n	800ba76 <pvPortMalloc+0xaa>
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1f1      	bne.n	800ba5a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba76:	4b37      	ldr	r3, [pc, #220]	@ (800bb54 <pvPortMalloc+0x188>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d04e      	beq.n	800bb1e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2208      	movs	r2, #8
 800ba86:	4413      	add	r3, r2
 800ba88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	1ad2      	subs	r2, r2, r3
 800ba9a:	2308      	movs	r3, #8
 800ba9c:	005b      	lsls	r3, r3, #1
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d922      	bls.n	800bae8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800baa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4413      	add	r3, r2
 800baa8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	f003 0307 	and.w	r3, r3, #7
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00d      	beq.n	800bad0 <pvPortMalloc+0x104>
	__asm volatile
 800bab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab8:	b672      	cpsid	i
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	b662      	cpsie	i
 800bac8:	613b      	str	r3, [r7, #16]
}
 800baca:	bf00      	nop
 800bacc:	bf00      	nop
 800bace:	e7fd      	b.n	800bacc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	1ad2      	subs	r2, r2, r3
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800badc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bae2:	69b8      	ldr	r0, [r7, #24]
 800bae4:	f000 f902 	bl	800bcec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bae8:	4b1c      	ldr	r3, [pc, #112]	@ (800bb5c <pvPortMalloc+0x190>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	4a1a      	ldr	r2, [pc, #104]	@ (800bb5c <pvPortMalloc+0x190>)
 800baf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800baf6:	4b19      	ldr	r3, [pc, #100]	@ (800bb5c <pvPortMalloc+0x190>)
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	4b1a      	ldr	r3, [pc, #104]	@ (800bb64 <pvPortMalloc+0x198>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d203      	bcs.n	800bb0a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb02:	4b16      	ldr	r3, [pc, #88]	@ (800bb5c <pvPortMalloc+0x190>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a17      	ldr	r2, [pc, #92]	@ (800bb64 <pvPortMalloc+0x198>)
 800bb08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0c:	685a      	ldr	r2, [r3, #4]
 800bb0e:	4b12      	ldr	r3, [pc, #72]	@ (800bb58 <pvPortMalloc+0x18c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	431a      	orrs	r2, r3
 800bb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb1e:	f7ff fa63 	bl	800afe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	f003 0307 	and.w	r3, r3, #7
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00d      	beq.n	800bb48 <pvPortMalloc+0x17c>
	__asm volatile
 800bb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb30:	b672      	cpsid	i
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	b662      	cpsie	i
 800bb40:	60fb      	str	r3, [r7, #12]
}
 800bb42:	bf00      	nop
 800bb44:	bf00      	nop
 800bb46:	e7fd      	b.n	800bb44 <pvPortMalloc+0x178>
	return pvReturn;
 800bb48:	69fb      	ldr	r3, [r7, #28]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3728      	adds	r7, #40	@ 0x28
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	200049ac 	.word	0x200049ac
 800bb58:	200049b8 	.word	0x200049b8
 800bb5c:	200049b0 	.word	0x200049b0
 800bb60:	200049a4 	.word	0x200049a4
 800bb64:	200049b4 	.word	0x200049b4

0800bb68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d04e      	beq.n	800bc18 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb7a:	2308      	movs	r3, #8
 800bb7c:	425b      	negs	r3, r3
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	4413      	add	r3, r2
 800bb82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	4b24      	ldr	r3, [pc, #144]	@ (800bc20 <vPortFree+0xb8>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4013      	ands	r3, r2
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10d      	bne.n	800bbb2 <vPortFree+0x4a>
	__asm volatile
 800bb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9a:	b672      	cpsid	i
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	b662      	cpsie	i
 800bbaa:	60fb      	str	r3, [r7, #12]
}
 800bbac:	bf00      	nop
 800bbae:	bf00      	nop
 800bbb0:	e7fd      	b.n	800bbae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00d      	beq.n	800bbd6 <vPortFree+0x6e>
	__asm volatile
 800bbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbbe:	b672      	cpsid	i
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	b662      	cpsie	i
 800bbce:	60bb      	str	r3, [r7, #8]
}
 800bbd0:	bf00      	nop
 800bbd2:	bf00      	nop
 800bbd4:	e7fd      	b.n	800bbd2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	685a      	ldr	r2, [r3, #4]
 800bbda:	4b11      	ldr	r3, [pc, #68]	@ (800bc20 <vPortFree+0xb8>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4013      	ands	r3, r2
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d019      	beq.n	800bc18 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d115      	bne.n	800bc18 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	4b0b      	ldr	r3, [pc, #44]	@ (800bc20 <vPortFree+0xb8>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	43db      	mvns	r3, r3
 800bbf6:	401a      	ands	r2, r3
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bbfc:	f7ff f9e6 	bl	800afcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	4b07      	ldr	r3, [pc, #28]	@ (800bc24 <vPortFree+0xbc>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4413      	add	r3, r2
 800bc0a:	4a06      	ldr	r2, [pc, #24]	@ (800bc24 <vPortFree+0xbc>)
 800bc0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc0e:	6938      	ldr	r0, [r7, #16]
 800bc10:	f000 f86c 	bl	800bcec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bc14:	f7ff f9e8 	bl	800afe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc18:	bf00      	nop
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	200049b8 	.word	0x200049b8
 800bc24:	200049b0 	.word	0x200049b0

0800bc28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc2e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bc32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc34:	4b27      	ldr	r3, [pc, #156]	@ (800bcd4 <prvHeapInit+0xac>)
 800bc36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f003 0307 	and.w	r3, r3, #7
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00c      	beq.n	800bc5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3307      	adds	r3, #7
 800bc46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f023 0307 	bic.w	r3, r3, #7
 800bc4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	4a1f      	ldr	r2, [pc, #124]	@ (800bcd4 <prvHeapInit+0xac>)
 800bc58:	4413      	add	r3, r2
 800bc5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc60:	4a1d      	ldr	r2, [pc, #116]	@ (800bcd8 <prvHeapInit+0xb0>)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc66:	4b1c      	ldr	r3, [pc, #112]	@ (800bcd8 <prvHeapInit+0xb0>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	4413      	add	r3, r2
 800bc72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc74:	2208      	movs	r2, #8
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	1a9b      	subs	r3, r3, r2
 800bc7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f023 0307 	bic.w	r3, r3, #7
 800bc82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	4a15      	ldr	r2, [pc, #84]	@ (800bcdc <prvHeapInit+0xb4>)
 800bc88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc8a:	4b14      	ldr	r3, [pc, #80]	@ (800bcdc <prvHeapInit+0xb4>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc92:	4b12      	ldr	r3, [pc, #72]	@ (800bcdc <prvHeapInit+0xb4>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2200      	movs	r2, #0
 800bc98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	1ad2      	subs	r2, r2, r3
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bca8:	4b0c      	ldr	r3, [pc, #48]	@ (800bcdc <prvHeapInit+0xb4>)
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	4a0a      	ldr	r2, [pc, #40]	@ (800bce0 <prvHeapInit+0xb8>)
 800bcb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	4a09      	ldr	r2, [pc, #36]	@ (800bce4 <prvHeapInit+0xbc>)
 800bcbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bcc0:	4b09      	ldr	r3, [pc, #36]	@ (800bce8 <prvHeapInit+0xc0>)
 800bcc2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bcc6:	601a      	str	r2, [r3, #0]
}
 800bcc8:	bf00      	nop
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	20000da4 	.word	0x20000da4
 800bcd8:	200049a4 	.word	0x200049a4
 800bcdc:	200049ac 	.word	0x200049ac
 800bce0:	200049b4 	.word	0x200049b4
 800bce4:	200049b0 	.word	0x200049b0
 800bce8:	200049b8 	.word	0x200049b8

0800bcec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcf4:	4b28      	ldr	r3, [pc, #160]	@ (800bd98 <prvInsertBlockIntoFreeList+0xac>)
 800bcf6:	60fb      	str	r3, [r7, #12]
 800bcf8:	e002      	b.n	800bd00 <prvInsertBlockIntoFreeList+0x14>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d8f7      	bhi.n	800bcfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	4413      	add	r3, r2
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d108      	bne.n	800bd2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	685a      	ldr	r2, [r3, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	441a      	add	r2, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	441a      	add	r2, r3
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d118      	bne.n	800bd74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	4b15      	ldr	r3, [pc, #84]	@ (800bd9c <prvInsertBlockIntoFreeList+0xb0>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d00d      	beq.n	800bd6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	685a      	ldr	r2, [r3, #4]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	441a      	add	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	601a      	str	r2, [r3, #0]
 800bd68:	e008      	b.n	800bd7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd6a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd9c <prvInsertBlockIntoFreeList+0xb0>)
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	e003      	b.n	800bd7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d002      	beq.n	800bd8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd8a:	bf00      	nop
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	200049a4 	.word	0x200049a4
 800bd9c:	200049ac 	.word	0x200049ac

0800bda0 <siprintf>:
 800bda0:	b40e      	push	{r1, r2, r3}
 800bda2:	b500      	push	{lr}
 800bda4:	b09c      	sub	sp, #112	@ 0x70
 800bda6:	ab1d      	add	r3, sp, #116	@ 0x74
 800bda8:	9002      	str	r0, [sp, #8]
 800bdaa:	9006      	str	r0, [sp, #24]
 800bdac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bdb0:	4809      	ldr	r0, [pc, #36]	@ (800bdd8 <siprintf+0x38>)
 800bdb2:	9107      	str	r1, [sp, #28]
 800bdb4:	9104      	str	r1, [sp, #16]
 800bdb6:	4909      	ldr	r1, [pc, #36]	@ (800bddc <siprintf+0x3c>)
 800bdb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdbc:	9105      	str	r1, [sp, #20]
 800bdbe:	6800      	ldr	r0, [r0, #0]
 800bdc0:	9301      	str	r3, [sp, #4]
 800bdc2:	a902      	add	r1, sp, #8
 800bdc4:	f000 f9a2 	bl	800c10c <_svfiprintf_r>
 800bdc8:	9b02      	ldr	r3, [sp, #8]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	701a      	strb	r2, [r3, #0]
 800bdce:	b01c      	add	sp, #112	@ 0x70
 800bdd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdd4:	b003      	add	sp, #12
 800bdd6:	4770      	bx	lr
 800bdd8:	2000004c 	.word	0x2000004c
 800bddc:	ffff0208 	.word	0xffff0208

0800bde0 <memset>:
 800bde0:	4402      	add	r2, r0
 800bde2:	4603      	mov	r3, r0
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d100      	bne.n	800bdea <memset+0xa>
 800bde8:	4770      	bx	lr
 800bdea:	f803 1b01 	strb.w	r1, [r3], #1
 800bdee:	e7f9      	b.n	800bde4 <memset+0x4>

0800bdf0 <__errno>:
 800bdf0:	4b01      	ldr	r3, [pc, #4]	@ (800bdf8 <__errno+0x8>)
 800bdf2:	6818      	ldr	r0, [r3, #0]
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	2000004c 	.word	0x2000004c

0800bdfc <__libc_init_array>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	4d0d      	ldr	r5, [pc, #52]	@ (800be34 <__libc_init_array+0x38>)
 800be00:	4c0d      	ldr	r4, [pc, #52]	@ (800be38 <__libc_init_array+0x3c>)
 800be02:	1b64      	subs	r4, r4, r5
 800be04:	10a4      	asrs	r4, r4, #2
 800be06:	2600      	movs	r6, #0
 800be08:	42a6      	cmp	r6, r4
 800be0a:	d109      	bne.n	800be20 <__libc_init_array+0x24>
 800be0c:	4d0b      	ldr	r5, [pc, #44]	@ (800be3c <__libc_init_array+0x40>)
 800be0e:	4c0c      	ldr	r4, [pc, #48]	@ (800be40 <__libc_init_array+0x44>)
 800be10:	f000 fc66 	bl	800c6e0 <_init>
 800be14:	1b64      	subs	r4, r4, r5
 800be16:	10a4      	asrs	r4, r4, #2
 800be18:	2600      	movs	r6, #0
 800be1a:	42a6      	cmp	r6, r4
 800be1c:	d105      	bne.n	800be2a <__libc_init_array+0x2e>
 800be1e:	bd70      	pop	{r4, r5, r6, pc}
 800be20:	f855 3b04 	ldr.w	r3, [r5], #4
 800be24:	4798      	blx	r3
 800be26:	3601      	adds	r6, #1
 800be28:	e7ee      	b.n	800be08 <__libc_init_array+0xc>
 800be2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be2e:	4798      	blx	r3
 800be30:	3601      	adds	r6, #1
 800be32:	e7f2      	b.n	800be1a <__libc_init_array+0x1e>
 800be34:	08010734 	.word	0x08010734
 800be38:	08010734 	.word	0x08010734
 800be3c:	08010734 	.word	0x08010734
 800be40:	08010738 	.word	0x08010738

0800be44 <__retarget_lock_acquire_recursive>:
 800be44:	4770      	bx	lr

0800be46 <__retarget_lock_release_recursive>:
 800be46:	4770      	bx	lr

0800be48 <memcpy>:
 800be48:	440a      	add	r2, r1
 800be4a:	4291      	cmp	r1, r2
 800be4c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800be50:	d100      	bne.n	800be54 <memcpy+0xc>
 800be52:	4770      	bx	lr
 800be54:	b510      	push	{r4, lr}
 800be56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be5e:	4291      	cmp	r1, r2
 800be60:	d1f9      	bne.n	800be56 <memcpy+0xe>
 800be62:	bd10      	pop	{r4, pc}

0800be64 <_free_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	4605      	mov	r5, r0
 800be68:	2900      	cmp	r1, #0
 800be6a:	d041      	beq.n	800bef0 <_free_r+0x8c>
 800be6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be70:	1f0c      	subs	r4, r1, #4
 800be72:	2b00      	cmp	r3, #0
 800be74:	bfb8      	it	lt
 800be76:	18e4      	addlt	r4, r4, r3
 800be78:	f000 f8e0 	bl	800c03c <__malloc_lock>
 800be7c:	4a1d      	ldr	r2, [pc, #116]	@ (800bef4 <_free_r+0x90>)
 800be7e:	6813      	ldr	r3, [r2, #0]
 800be80:	b933      	cbnz	r3, 800be90 <_free_r+0x2c>
 800be82:	6063      	str	r3, [r4, #4]
 800be84:	6014      	str	r4, [r2, #0]
 800be86:	4628      	mov	r0, r5
 800be88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be8c:	f000 b8dc 	b.w	800c048 <__malloc_unlock>
 800be90:	42a3      	cmp	r3, r4
 800be92:	d908      	bls.n	800bea6 <_free_r+0x42>
 800be94:	6820      	ldr	r0, [r4, #0]
 800be96:	1821      	adds	r1, r4, r0
 800be98:	428b      	cmp	r3, r1
 800be9a:	bf01      	itttt	eq
 800be9c:	6819      	ldreq	r1, [r3, #0]
 800be9e:	685b      	ldreq	r3, [r3, #4]
 800bea0:	1809      	addeq	r1, r1, r0
 800bea2:	6021      	streq	r1, [r4, #0]
 800bea4:	e7ed      	b.n	800be82 <_free_r+0x1e>
 800bea6:	461a      	mov	r2, r3
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	b10b      	cbz	r3, 800beb0 <_free_r+0x4c>
 800beac:	42a3      	cmp	r3, r4
 800beae:	d9fa      	bls.n	800bea6 <_free_r+0x42>
 800beb0:	6811      	ldr	r1, [r2, #0]
 800beb2:	1850      	adds	r0, r2, r1
 800beb4:	42a0      	cmp	r0, r4
 800beb6:	d10b      	bne.n	800bed0 <_free_r+0x6c>
 800beb8:	6820      	ldr	r0, [r4, #0]
 800beba:	4401      	add	r1, r0
 800bebc:	1850      	adds	r0, r2, r1
 800bebe:	4283      	cmp	r3, r0
 800bec0:	6011      	str	r1, [r2, #0]
 800bec2:	d1e0      	bne.n	800be86 <_free_r+0x22>
 800bec4:	6818      	ldr	r0, [r3, #0]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	6053      	str	r3, [r2, #4]
 800beca:	4408      	add	r0, r1
 800becc:	6010      	str	r0, [r2, #0]
 800bece:	e7da      	b.n	800be86 <_free_r+0x22>
 800bed0:	d902      	bls.n	800bed8 <_free_r+0x74>
 800bed2:	230c      	movs	r3, #12
 800bed4:	602b      	str	r3, [r5, #0]
 800bed6:	e7d6      	b.n	800be86 <_free_r+0x22>
 800bed8:	6820      	ldr	r0, [r4, #0]
 800beda:	1821      	adds	r1, r4, r0
 800bedc:	428b      	cmp	r3, r1
 800bede:	bf04      	itt	eq
 800bee0:	6819      	ldreq	r1, [r3, #0]
 800bee2:	685b      	ldreq	r3, [r3, #4]
 800bee4:	6063      	str	r3, [r4, #4]
 800bee6:	bf04      	itt	eq
 800bee8:	1809      	addeq	r1, r1, r0
 800beea:	6021      	streq	r1, [r4, #0]
 800beec:	6054      	str	r4, [r2, #4]
 800beee:	e7ca      	b.n	800be86 <_free_r+0x22>
 800bef0:	bd38      	pop	{r3, r4, r5, pc}
 800bef2:	bf00      	nop
 800bef4:	20004b00 	.word	0x20004b00

0800bef8 <sbrk_aligned>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	4e0f      	ldr	r6, [pc, #60]	@ (800bf38 <sbrk_aligned+0x40>)
 800befc:	460c      	mov	r4, r1
 800befe:	6831      	ldr	r1, [r6, #0]
 800bf00:	4605      	mov	r5, r0
 800bf02:	b911      	cbnz	r1, 800bf0a <sbrk_aligned+0x12>
 800bf04:	f000 fba6 	bl	800c654 <_sbrk_r>
 800bf08:	6030      	str	r0, [r6, #0]
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	f000 fba1 	bl	800c654 <_sbrk_r>
 800bf12:	1c43      	adds	r3, r0, #1
 800bf14:	d103      	bne.n	800bf1e <sbrk_aligned+0x26>
 800bf16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	bd70      	pop	{r4, r5, r6, pc}
 800bf1e:	1cc4      	adds	r4, r0, #3
 800bf20:	f024 0403 	bic.w	r4, r4, #3
 800bf24:	42a0      	cmp	r0, r4
 800bf26:	d0f8      	beq.n	800bf1a <sbrk_aligned+0x22>
 800bf28:	1a21      	subs	r1, r4, r0
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	f000 fb92 	bl	800c654 <_sbrk_r>
 800bf30:	3001      	adds	r0, #1
 800bf32:	d1f2      	bne.n	800bf1a <sbrk_aligned+0x22>
 800bf34:	e7ef      	b.n	800bf16 <sbrk_aligned+0x1e>
 800bf36:	bf00      	nop
 800bf38:	20004afc 	.word	0x20004afc

0800bf3c <_malloc_r>:
 800bf3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf40:	1ccd      	adds	r5, r1, #3
 800bf42:	f025 0503 	bic.w	r5, r5, #3
 800bf46:	3508      	adds	r5, #8
 800bf48:	2d0c      	cmp	r5, #12
 800bf4a:	bf38      	it	cc
 800bf4c:	250c      	movcc	r5, #12
 800bf4e:	2d00      	cmp	r5, #0
 800bf50:	4606      	mov	r6, r0
 800bf52:	db01      	blt.n	800bf58 <_malloc_r+0x1c>
 800bf54:	42a9      	cmp	r1, r5
 800bf56:	d904      	bls.n	800bf62 <_malloc_r+0x26>
 800bf58:	230c      	movs	r3, #12
 800bf5a:	6033      	str	r3, [r6, #0]
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c038 <_malloc_r+0xfc>
 800bf66:	f000 f869 	bl	800c03c <__malloc_lock>
 800bf6a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf6e:	461c      	mov	r4, r3
 800bf70:	bb44      	cbnz	r4, 800bfc4 <_malloc_r+0x88>
 800bf72:	4629      	mov	r1, r5
 800bf74:	4630      	mov	r0, r6
 800bf76:	f7ff ffbf 	bl	800bef8 <sbrk_aligned>
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	4604      	mov	r4, r0
 800bf7e:	d158      	bne.n	800c032 <_malloc_r+0xf6>
 800bf80:	f8d8 4000 	ldr.w	r4, [r8]
 800bf84:	4627      	mov	r7, r4
 800bf86:	2f00      	cmp	r7, #0
 800bf88:	d143      	bne.n	800c012 <_malloc_r+0xd6>
 800bf8a:	2c00      	cmp	r4, #0
 800bf8c:	d04b      	beq.n	800c026 <_malloc_r+0xea>
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	4639      	mov	r1, r7
 800bf92:	4630      	mov	r0, r6
 800bf94:	eb04 0903 	add.w	r9, r4, r3
 800bf98:	f000 fb5c 	bl	800c654 <_sbrk_r>
 800bf9c:	4581      	cmp	r9, r0
 800bf9e:	d142      	bne.n	800c026 <_malloc_r+0xea>
 800bfa0:	6821      	ldr	r1, [r4, #0]
 800bfa2:	1a6d      	subs	r5, r5, r1
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	f7ff ffa6 	bl	800bef8 <sbrk_aligned>
 800bfac:	3001      	adds	r0, #1
 800bfae:	d03a      	beq.n	800c026 <_malloc_r+0xea>
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	442b      	add	r3, r5
 800bfb4:	6023      	str	r3, [r4, #0]
 800bfb6:	f8d8 3000 	ldr.w	r3, [r8]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	bb62      	cbnz	r2, 800c018 <_malloc_r+0xdc>
 800bfbe:	f8c8 7000 	str.w	r7, [r8]
 800bfc2:	e00f      	b.n	800bfe4 <_malloc_r+0xa8>
 800bfc4:	6822      	ldr	r2, [r4, #0]
 800bfc6:	1b52      	subs	r2, r2, r5
 800bfc8:	d420      	bmi.n	800c00c <_malloc_r+0xd0>
 800bfca:	2a0b      	cmp	r2, #11
 800bfcc:	d917      	bls.n	800bffe <_malloc_r+0xc2>
 800bfce:	1961      	adds	r1, r4, r5
 800bfd0:	42a3      	cmp	r3, r4
 800bfd2:	6025      	str	r5, [r4, #0]
 800bfd4:	bf18      	it	ne
 800bfd6:	6059      	strne	r1, [r3, #4]
 800bfd8:	6863      	ldr	r3, [r4, #4]
 800bfda:	bf08      	it	eq
 800bfdc:	f8c8 1000 	streq.w	r1, [r8]
 800bfe0:	5162      	str	r2, [r4, r5]
 800bfe2:	604b      	str	r3, [r1, #4]
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	f000 f82f 	bl	800c048 <__malloc_unlock>
 800bfea:	f104 000b 	add.w	r0, r4, #11
 800bfee:	1d23      	adds	r3, r4, #4
 800bff0:	f020 0007 	bic.w	r0, r0, #7
 800bff4:	1ac2      	subs	r2, r0, r3
 800bff6:	bf1c      	itt	ne
 800bff8:	1a1b      	subne	r3, r3, r0
 800bffa:	50a3      	strne	r3, [r4, r2]
 800bffc:	e7af      	b.n	800bf5e <_malloc_r+0x22>
 800bffe:	6862      	ldr	r2, [r4, #4]
 800c000:	42a3      	cmp	r3, r4
 800c002:	bf0c      	ite	eq
 800c004:	f8c8 2000 	streq.w	r2, [r8]
 800c008:	605a      	strne	r2, [r3, #4]
 800c00a:	e7eb      	b.n	800bfe4 <_malloc_r+0xa8>
 800c00c:	4623      	mov	r3, r4
 800c00e:	6864      	ldr	r4, [r4, #4]
 800c010:	e7ae      	b.n	800bf70 <_malloc_r+0x34>
 800c012:	463c      	mov	r4, r7
 800c014:	687f      	ldr	r7, [r7, #4]
 800c016:	e7b6      	b.n	800bf86 <_malloc_r+0x4a>
 800c018:	461a      	mov	r2, r3
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	42a3      	cmp	r3, r4
 800c01e:	d1fb      	bne.n	800c018 <_malloc_r+0xdc>
 800c020:	2300      	movs	r3, #0
 800c022:	6053      	str	r3, [r2, #4]
 800c024:	e7de      	b.n	800bfe4 <_malloc_r+0xa8>
 800c026:	230c      	movs	r3, #12
 800c028:	6033      	str	r3, [r6, #0]
 800c02a:	4630      	mov	r0, r6
 800c02c:	f000 f80c 	bl	800c048 <__malloc_unlock>
 800c030:	e794      	b.n	800bf5c <_malloc_r+0x20>
 800c032:	6005      	str	r5, [r0, #0]
 800c034:	e7d6      	b.n	800bfe4 <_malloc_r+0xa8>
 800c036:	bf00      	nop
 800c038:	20004b00 	.word	0x20004b00

0800c03c <__malloc_lock>:
 800c03c:	4801      	ldr	r0, [pc, #4]	@ (800c044 <__malloc_lock+0x8>)
 800c03e:	f7ff bf01 	b.w	800be44 <__retarget_lock_acquire_recursive>
 800c042:	bf00      	nop
 800c044:	20004af8 	.word	0x20004af8

0800c048 <__malloc_unlock>:
 800c048:	4801      	ldr	r0, [pc, #4]	@ (800c050 <__malloc_unlock+0x8>)
 800c04a:	f7ff befc 	b.w	800be46 <__retarget_lock_release_recursive>
 800c04e:	bf00      	nop
 800c050:	20004af8 	.word	0x20004af8

0800c054 <__ssputs_r>:
 800c054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c058:	688e      	ldr	r6, [r1, #8]
 800c05a:	461f      	mov	r7, r3
 800c05c:	42be      	cmp	r6, r7
 800c05e:	680b      	ldr	r3, [r1, #0]
 800c060:	4682      	mov	sl, r0
 800c062:	460c      	mov	r4, r1
 800c064:	4690      	mov	r8, r2
 800c066:	d82d      	bhi.n	800c0c4 <__ssputs_r+0x70>
 800c068:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c06c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c070:	d026      	beq.n	800c0c0 <__ssputs_r+0x6c>
 800c072:	6965      	ldr	r5, [r4, #20]
 800c074:	6909      	ldr	r1, [r1, #16]
 800c076:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c07a:	eba3 0901 	sub.w	r9, r3, r1
 800c07e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c082:	1c7b      	adds	r3, r7, #1
 800c084:	444b      	add	r3, r9
 800c086:	106d      	asrs	r5, r5, #1
 800c088:	429d      	cmp	r5, r3
 800c08a:	bf38      	it	cc
 800c08c:	461d      	movcc	r5, r3
 800c08e:	0553      	lsls	r3, r2, #21
 800c090:	d527      	bpl.n	800c0e2 <__ssputs_r+0x8e>
 800c092:	4629      	mov	r1, r5
 800c094:	f7ff ff52 	bl	800bf3c <_malloc_r>
 800c098:	4606      	mov	r6, r0
 800c09a:	b360      	cbz	r0, 800c0f6 <__ssputs_r+0xa2>
 800c09c:	6921      	ldr	r1, [r4, #16]
 800c09e:	464a      	mov	r2, r9
 800c0a0:	f7ff fed2 	bl	800be48 <memcpy>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	6126      	str	r6, [r4, #16]
 800c0b2:	6165      	str	r5, [r4, #20]
 800c0b4:	444e      	add	r6, r9
 800c0b6:	eba5 0509 	sub.w	r5, r5, r9
 800c0ba:	6026      	str	r6, [r4, #0]
 800c0bc:	60a5      	str	r5, [r4, #8]
 800c0be:	463e      	mov	r6, r7
 800c0c0:	42be      	cmp	r6, r7
 800c0c2:	d900      	bls.n	800c0c6 <__ssputs_r+0x72>
 800c0c4:	463e      	mov	r6, r7
 800c0c6:	6820      	ldr	r0, [r4, #0]
 800c0c8:	4632      	mov	r2, r6
 800c0ca:	4641      	mov	r1, r8
 800c0cc:	f000 faa8 	bl	800c620 <memmove>
 800c0d0:	68a3      	ldr	r3, [r4, #8]
 800c0d2:	1b9b      	subs	r3, r3, r6
 800c0d4:	60a3      	str	r3, [r4, #8]
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	4433      	add	r3, r6
 800c0da:	6023      	str	r3, [r4, #0]
 800c0dc:	2000      	movs	r0, #0
 800c0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e2:	462a      	mov	r2, r5
 800c0e4:	f000 fac6 	bl	800c674 <_realloc_r>
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d1e0      	bne.n	800c0b0 <__ssputs_r+0x5c>
 800c0ee:	6921      	ldr	r1, [r4, #16]
 800c0f0:	4650      	mov	r0, sl
 800c0f2:	f7ff feb7 	bl	800be64 <_free_r>
 800c0f6:	230c      	movs	r3, #12
 800c0f8:	f8ca 3000 	str.w	r3, [sl]
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c102:	81a3      	strh	r3, [r4, #12]
 800c104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c108:	e7e9      	b.n	800c0de <__ssputs_r+0x8a>
	...

0800c10c <_svfiprintf_r>:
 800c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	4698      	mov	r8, r3
 800c112:	898b      	ldrh	r3, [r1, #12]
 800c114:	061b      	lsls	r3, r3, #24
 800c116:	b09d      	sub	sp, #116	@ 0x74
 800c118:	4607      	mov	r7, r0
 800c11a:	460d      	mov	r5, r1
 800c11c:	4614      	mov	r4, r2
 800c11e:	d510      	bpl.n	800c142 <_svfiprintf_r+0x36>
 800c120:	690b      	ldr	r3, [r1, #16]
 800c122:	b973      	cbnz	r3, 800c142 <_svfiprintf_r+0x36>
 800c124:	2140      	movs	r1, #64	@ 0x40
 800c126:	f7ff ff09 	bl	800bf3c <_malloc_r>
 800c12a:	6028      	str	r0, [r5, #0]
 800c12c:	6128      	str	r0, [r5, #16]
 800c12e:	b930      	cbnz	r0, 800c13e <_svfiprintf_r+0x32>
 800c130:	230c      	movs	r3, #12
 800c132:	603b      	str	r3, [r7, #0]
 800c134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c138:	b01d      	add	sp, #116	@ 0x74
 800c13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13e:	2340      	movs	r3, #64	@ 0x40
 800c140:	616b      	str	r3, [r5, #20]
 800c142:	2300      	movs	r3, #0
 800c144:	9309      	str	r3, [sp, #36]	@ 0x24
 800c146:	2320      	movs	r3, #32
 800c148:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c14c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c150:	2330      	movs	r3, #48	@ 0x30
 800c152:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c2f0 <_svfiprintf_r+0x1e4>
 800c156:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c15a:	f04f 0901 	mov.w	r9, #1
 800c15e:	4623      	mov	r3, r4
 800c160:	469a      	mov	sl, r3
 800c162:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c166:	b10a      	cbz	r2, 800c16c <_svfiprintf_r+0x60>
 800c168:	2a25      	cmp	r2, #37	@ 0x25
 800c16a:	d1f9      	bne.n	800c160 <_svfiprintf_r+0x54>
 800c16c:	ebba 0b04 	subs.w	fp, sl, r4
 800c170:	d00b      	beq.n	800c18a <_svfiprintf_r+0x7e>
 800c172:	465b      	mov	r3, fp
 800c174:	4622      	mov	r2, r4
 800c176:	4629      	mov	r1, r5
 800c178:	4638      	mov	r0, r7
 800c17a:	f7ff ff6b 	bl	800c054 <__ssputs_r>
 800c17e:	3001      	adds	r0, #1
 800c180:	f000 80a7 	beq.w	800c2d2 <_svfiprintf_r+0x1c6>
 800c184:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c186:	445a      	add	r2, fp
 800c188:	9209      	str	r2, [sp, #36]	@ 0x24
 800c18a:	f89a 3000 	ldrb.w	r3, [sl]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f000 809f 	beq.w	800c2d2 <_svfiprintf_r+0x1c6>
 800c194:	2300      	movs	r3, #0
 800c196:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c19a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c19e:	f10a 0a01 	add.w	sl, sl, #1
 800c1a2:	9304      	str	r3, [sp, #16]
 800c1a4:	9307      	str	r3, [sp, #28]
 800c1a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1ac:	4654      	mov	r4, sl
 800c1ae:	2205      	movs	r2, #5
 800c1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b4:	484e      	ldr	r0, [pc, #312]	@ (800c2f0 <_svfiprintf_r+0x1e4>)
 800c1b6:	f7f4 f82b 	bl	8000210 <memchr>
 800c1ba:	9a04      	ldr	r2, [sp, #16]
 800c1bc:	b9d8      	cbnz	r0, 800c1f6 <_svfiprintf_r+0xea>
 800c1be:	06d0      	lsls	r0, r2, #27
 800c1c0:	bf44      	itt	mi
 800c1c2:	2320      	movmi	r3, #32
 800c1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1c8:	0711      	lsls	r1, r2, #28
 800c1ca:	bf44      	itt	mi
 800c1cc:	232b      	movmi	r3, #43	@ 0x2b
 800c1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1d8:	d015      	beq.n	800c206 <_svfiprintf_r+0xfa>
 800c1da:	9a07      	ldr	r2, [sp, #28]
 800c1dc:	4654      	mov	r4, sl
 800c1de:	2000      	movs	r0, #0
 800c1e0:	f04f 0c0a 	mov.w	ip, #10
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ea:	3b30      	subs	r3, #48	@ 0x30
 800c1ec:	2b09      	cmp	r3, #9
 800c1ee:	d94b      	bls.n	800c288 <_svfiprintf_r+0x17c>
 800c1f0:	b1b0      	cbz	r0, 800c220 <_svfiprintf_r+0x114>
 800c1f2:	9207      	str	r2, [sp, #28]
 800c1f4:	e014      	b.n	800c220 <_svfiprintf_r+0x114>
 800c1f6:	eba0 0308 	sub.w	r3, r0, r8
 800c1fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c1fe:	4313      	orrs	r3, r2
 800c200:	9304      	str	r3, [sp, #16]
 800c202:	46a2      	mov	sl, r4
 800c204:	e7d2      	b.n	800c1ac <_svfiprintf_r+0xa0>
 800c206:	9b03      	ldr	r3, [sp, #12]
 800c208:	1d19      	adds	r1, r3, #4
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	9103      	str	r1, [sp, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bfbb      	ittet	lt
 800c212:	425b      	neglt	r3, r3
 800c214:	f042 0202 	orrlt.w	r2, r2, #2
 800c218:	9307      	strge	r3, [sp, #28]
 800c21a:	9307      	strlt	r3, [sp, #28]
 800c21c:	bfb8      	it	lt
 800c21e:	9204      	strlt	r2, [sp, #16]
 800c220:	7823      	ldrb	r3, [r4, #0]
 800c222:	2b2e      	cmp	r3, #46	@ 0x2e
 800c224:	d10a      	bne.n	800c23c <_svfiprintf_r+0x130>
 800c226:	7863      	ldrb	r3, [r4, #1]
 800c228:	2b2a      	cmp	r3, #42	@ 0x2a
 800c22a:	d132      	bne.n	800c292 <_svfiprintf_r+0x186>
 800c22c:	9b03      	ldr	r3, [sp, #12]
 800c22e:	1d1a      	adds	r2, r3, #4
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	9203      	str	r2, [sp, #12]
 800c234:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c238:	3402      	adds	r4, #2
 800c23a:	9305      	str	r3, [sp, #20]
 800c23c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c300 <_svfiprintf_r+0x1f4>
 800c240:	7821      	ldrb	r1, [r4, #0]
 800c242:	2203      	movs	r2, #3
 800c244:	4650      	mov	r0, sl
 800c246:	f7f3 ffe3 	bl	8000210 <memchr>
 800c24a:	b138      	cbz	r0, 800c25c <_svfiprintf_r+0x150>
 800c24c:	9b04      	ldr	r3, [sp, #16]
 800c24e:	eba0 000a 	sub.w	r0, r0, sl
 800c252:	2240      	movs	r2, #64	@ 0x40
 800c254:	4082      	lsls	r2, r0
 800c256:	4313      	orrs	r3, r2
 800c258:	3401      	adds	r4, #1
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c260:	4824      	ldr	r0, [pc, #144]	@ (800c2f4 <_svfiprintf_r+0x1e8>)
 800c262:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c266:	2206      	movs	r2, #6
 800c268:	f7f3 ffd2 	bl	8000210 <memchr>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d036      	beq.n	800c2de <_svfiprintf_r+0x1d2>
 800c270:	4b21      	ldr	r3, [pc, #132]	@ (800c2f8 <_svfiprintf_r+0x1ec>)
 800c272:	bb1b      	cbnz	r3, 800c2bc <_svfiprintf_r+0x1b0>
 800c274:	9b03      	ldr	r3, [sp, #12]
 800c276:	3307      	adds	r3, #7
 800c278:	f023 0307 	bic.w	r3, r3, #7
 800c27c:	3308      	adds	r3, #8
 800c27e:	9303      	str	r3, [sp, #12]
 800c280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c282:	4433      	add	r3, r6
 800c284:	9309      	str	r3, [sp, #36]	@ 0x24
 800c286:	e76a      	b.n	800c15e <_svfiprintf_r+0x52>
 800c288:	fb0c 3202 	mla	r2, ip, r2, r3
 800c28c:	460c      	mov	r4, r1
 800c28e:	2001      	movs	r0, #1
 800c290:	e7a8      	b.n	800c1e4 <_svfiprintf_r+0xd8>
 800c292:	2300      	movs	r3, #0
 800c294:	3401      	adds	r4, #1
 800c296:	9305      	str	r3, [sp, #20]
 800c298:	4619      	mov	r1, r3
 800c29a:	f04f 0c0a 	mov.w	ip, #10
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2a4:	3a30      	subs	r2, #48	@ 0x30
 800c2a6:	2a09      	cmp	r2, #9
 800c2a8:	d903      	bls.n	800c2b2 <_svfiprintf_r+0x1a6>
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d0c6      	beq.n	800c23c <_svfiprintf_r+0x130>
 800c2ae:	9105      	str	r1, [sp, #20]
 800c2b0:	e7c4      	b.n	800c23c <_svfiprintf_r+0x130>
 800c2b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e7f0      	b.n	800c29e <_svfiprintf_r+0x192>
 800c2bc:	ab03      	add	r3, sp, #12
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	462a      	mov	r2, r5
 800c2c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c2fc <_svfiprintf_r+0x1f0>)
 800c2c4:	a904      	add	r1, sp, #16
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	f3af 8000 	nop.w
 800c2cc:	1c42      	adds	r2, r0, #1
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	d1d6      	bne.n	800c280 <_svfiprintf_r+0x174>
 800c2d2:	89ab      	ldrh	r3, [r5, #12]
 800c2d4:	065b      	lsls	r3, r3, #25
 800c2d6:	f53f af2d 	bmi.w	800c134 <_svfiprintf_r+0x28>
 800c2da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2dc:	e72c      	b.n	800c138 <_svfiprintf_r+0x2c>
 800c2de:	ab03      	add	r3, sp, #12
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	462a      	mov	r2, r5
 800c2e4:	4b05      	ldr	r3, [pc, #20]	@ (800c2fc <_svfiprintf_r+0x1f0>)
 800c2e6:	a904      	add	r1, sp, #16
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f000 f879 	bl	800c3e0 <_printf_i>
 800c2ee:	e7ed      	b.n	800c2cc <_svfiprintf_r+0x1c0>
 800c2f0:	080106f8 	.word	0x080106f8
 800c2f4:	08010702 	.word	0x08010702
 800c2f8:	00000000 	.word	0x00000000
 800c2fc:	0800c055 	.word	0x0800c055
 800c300:	080106fe 	.word	0x080106fe

0800c304 <_printf_common>:
 800c304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c308:	4616      	mov	r6, r2
 800c30a:	4698      	mov	r8, r3
 800c30c:	688a      	ldr	r2, [r1, #8]
 800c30e:	690b      	ldr	r3, [r1, #16]
 800c310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c314:	4293      	cmp	r3, r2
 800c316:	bfb8      	it	lt
 800c318:	4613      	movlt	r3, r2
 800c31a:	6033      	str	r3, [r6, #0]
 800c31c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c320:	4607      	mov	r7, r0
 800c322:	460c      	mov	r4, r1
 800c324:	b10a      	cbz	r2, 800c32a <_printf_common+0x26>
 800c326:	3301      	adds	r3, #1
 800c328:	6033      	str	r3, [r6, #0]
 800c32a:	6823      	ldr	r3, [r4, #0]
 800c32c:	0699      	lsls	r1, r3, #26
 800c32e:	bf42      	ittt	mi
 800c330:	6833      	ldrmi	r3, [r6, #0]
 800c332:	3302      	addmi	r3, #2
 800c334:	6033      	strmi	r3, [r6, #0]
 800c336:	6825      	ldr	r5, [r4, #0]
 800c338:	f015 0506 	ands.w	r5, r5, #6
 800c33c:	d106      	bne.n	800c34c <_printf_common+0x48>
 800c33e:	f104 0a19 	add.w	sl, r4, #25
 800c342:	68e3      	ldr	r3, [r4, #12]
 800c344:	6832      	ldr	r2, [r6, #0]
 800c346:	1a9b      	subs	r3, r3, r2
 800c348:	42ab      	cmp	r3, r5
 800c34a:	dc26      	bgt.n	800c39a <_printf_common+0x96>
 800c34c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c350:	6822      	ldr	r2, [r4, #0]
 800c352:	3b00      	subs	r3, #0
 800c354:	bf18      	it	ne
 800c356:	2301      	movne	r3, #1
 800c358:	0692      	lsls	r2, r2, #26
 800c35a:	d42b      	bmi.n	800c3b4 <_printf_common+0xb0>
 800c35c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c360:	4641      	mov	r1, r8
 800c362:	4638      	mov	r0, r7
 800c364:	47c8      	blx	r9
 800c366:	3001      	adds	r0, #1
 800c368:	d01e      	beq.n	800c3a8 <_printf_common+0xa4>
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	6922      	ldr	r2, [r4, #16]
 800c36e:	f003 0306 	and.w	r3, r3, #6
 800c372:	2b04      	cmp	r3, #4
 800c374:	bf02      	ittt	eq
 800c376:	68e5      	ldreq	r5, [r4, #12]
 800c378:	6833      	ldreq	r3, [r6, #0]
 800c37a:	1aed      	subeq	r5, r5, r3
 800c37c:	68a3      	ldr	r3, [r4, #8]
 800c37e:	bf0c      	ite	eq
 800c380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c384:	2500      	movne	r5, #0
 800c386:	4293      	cmp	r3, r2
 800c388:	bfc4      	itt	gt
 800c38a:	1a9b      	subgt	r3, r3, r2
 800c38c:	18ed      	addgt	r5, r5, r3
 800c38e:	2600      	movs	r6, #0
 800c390:	341a      	adds	r4, #26
 800c392:	42b5      	cmp	r5, r6
 800c394:	d11a      	bne.n	800c3cc <_printf_common+0xc8>
 800c396:	2000      	movs	r0, #0
 800c398:	e008      	b.n	800c3ac <_printf_common+0xa8>
 800c39a:	2301      	movs	r3, #1
 800c39c:	4652      	mov	r2, sl
 800c39e:	4641      	mov	r1, r8
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	47c8      	blx	r9
 800c3a4:	3001      	adds	r0, #1
 800c3a6:	d103      	bne.n	800c3b0 <_printf_common+0xac>
 800c3a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b0:	3501      	adds	r5, #1
 800c3b2:	e7c6      	b.n	800c342 <_printf_common+0x3e>
 800c3b4:	18e1      	adds	r1, r4, r3
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	2030      	movs	r0, #48	@ 0x30
 800c3ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c3be:	4422      	add	r2, r4
 800c3c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c3c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c3c8:	3302      	adds	r3, #2
 800c3ca:	e7c7      	b.n	800c35c <_printf_common+0x58>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	4641      	mov	r1, r8
 800c3d2:	4638      	mov	r0, r7
 800c3d4:	47c8      	blx	r9
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	d0e6      	beq.n	800c3a8 <_printf_common+0xa4>
 800c3da:	3601      	adds	r6, #1
 800c3dc:	e7d9      	b.n	800c392 <_printf_common+0x8e>
	...

0800c3e0 <_printf_i>:
 800c3e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e4:	7e0f      	ldrb	r7, [r1, #24]
 800c3e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c3e8:	2f78      	cmp	r7, #120	@ 0x78
 800c3ea:	4691      	mov	r9, r2
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	469a      	mov	sl, r3
 800c3f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c3f6:	d807      	bhi.n	800c408 <_printf_i+0x28>
 800c3f8:	2f62      	cmp	r7, #98	@ 0x62
 800c3fa:	d80a      	bhi.n	800c412 <_printf_i+0x32>
 800c3fc:	2f00      	cmp	r7, #0
 800c3fe:	f000 80d2 	beq.w	800c5a6 <_printf_i+0x1c6>
 800c402:	2f58      	cmp	r7, #88	@ 0x58
 800c404:	f000 80b9 	beq.w	800c57a <_printf_i+0x19a>
 800c408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c40c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c410:	e03a      	b.n	800c488 <_printf_i+0xa8>
 800c412:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c416:	2b15      	cmp	r3, #21
 800c418:	d8f6      	bhi.n	800c408 <_printf_i+0x28>
 800c41a:	a101      	add	r1, pc, #4	@ (adr r1, 800c420 <_printf_i+0x40>)
 800c41c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c420:	0800c479 	.word	0x0800c479
 800c424:	0800c48d 	.word	0x0800c48d
 800c428:	0800c409 	.word	0x0800c409
 800c42c:	0800c409 	.word	0x0800c409
 800c430:	0800c409 	.word	0x0800c409
 800c434:	0800c409 	.word	0x0800c409
 800c438:	0800c48d 	.word	0x0800c48d
 800c43c:	0800c409 	.word	0x0800c409
 800c440:	0800c409 	.word	0x0800c409
 800c444:	0800c409 	.word	0x0800c409
 800c448:	0800c409 	.word	0x0800c409
 800c44c:	0800c58d 	.word	0x0800c58d
 800c450:	0800c4b7 	.word	0x0800c4b7
 800c454:	0800c547 	.word	0x0800c547
 800c458:	0800c409 	.word	0x0800c409
 800c45c:	0800c409 	.word	0x0800c409
 800c460:	0800c5af 	.word	0x0800c5af
 800c464:	0800c409 	.word	0x0800c409
 800c468:	0800c4b7 	.word	0x0800c4b7
 800c46c:	0800c409 	.word	0x0800c409
 800c470:	0800c409 	.word	0x0800c409
 800c474:	0800c54f 	.word	0x0800c54f
 800c478:	6833      	ldr	r3, [r6, #0]
 800c47a:	1d1a      	adds	r2, r3, #4
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	6032      	str	r2, [r6, #0]
 800c480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c484:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c488:	2301      	movs	r3, #1
 800c48a:	e09d      	b.n	800c5c8 <_printf_i+0x1e8>
 800c48c:	6833      	ldr	r3, [r6, #0]
 800c48e:	6820      	ldr	r0, [r4, #0]
 800c490:	1d19      	adds	r1, r3, #4
 800c492:	6031      	str	r1, [r6, #0]
 800c494:	0606      	lsls	r6, r0, #24
 800c496:	d501      	bpl.n	800c49c <_printf_i+0xbc>
 800c498:	681d      	ldr	r5, [r3, #0]
 800c49a:	e003      	b.n	800c4a4 <_printf_i+0xc4>
 800c49c:	0645      	lsls	r5, r0, #25
 800c49e:	d5fb      	bpl.n	800c498 <_printf_i+0xb8>
 800c4a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c4a4:	2d00      	cmp	r5, #0
 800c4a6:	da03      	bge.n	800c4b0 <_printf_i+0xd0>
 800c4a8:	232d      	movs	r3, #45	@ 0x2d
 800c4aa:	426d      	negs	r5, r5
 800c4ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4b0:	4859      	ldr	r0, [pc, #356]	@ (800c618 <_printf_i+0x238>)
 800c4b2:	230a      	movs	r3, #10
 800c4b4:	e011      	b.n	800c4da <_printf_i+0xfa>
 800c4b6:	6821      	ldr	r1, [r4, #0]
 800c4b8:	6833      	ldr	r3, [r6, #0]
 800c4ba:	0608      	lsls	r0, r1, #24
 800c4bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800c4c0:	d402      	bmi.n	800c4c8 <_printf_i+0xe8>
 800c4c2:	0649      	lsls	r1, r1, #25
 800c4c4:	bf48      	it	mi
 800c4c6:	b2ad      	uxthmi	r5, r5
 800c4c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c4ca:	4853      	ldr	r0, [pc, #332]	@ (800c618 <_printf_i+0x238>)
 800c4cc:	6033      	str	r3, [r6, #0]
 800c4ce:	bf14      	ite	ne
 800c4d0:	230a      	movne	r3, #10
 800c4d2:	2308      	moveq	r3, #8
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c4da:	6866      	ldr	r6, [r4, #4]
 800c4dc:	60a6      	str	r6, [r4, #8]
 800c4de:	2e00      	cmp	r6, #0
 800c4e0:	bfa2      	ittt	ge
 800c4e2:	6821      	ldrge	r1, [r4, #0]
 800c4e4:	f021 0104 	bicge.w	r1, r1, #4
 800c4e8:	6021      	strge	r1, [r4, #0]
 800c4ea:	b90d      	cbnz	r5, 800c4f0 <_printf_i+0x110>
 800c4ec:	2e00      	cmp	r6, #0
 800c4ee:	d04b      	beq.n	800c588 <_printf_i+0x1a8>
 800c4f0:	4616      	mov	r6, r2
 800c4f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c4f6:	fb03 5711 	mls	r7, r3, r1, r5
 800c4fa:	5dc7      	ldrb	r7, [r0, r7]
 800c4fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c500:	462f      	mov	r7, r5
 800c502:	42bb      	cmp	r3, r7
 800c504:	460d      	mov	r5, r1
 800c506:	d9f4      	bls.n	800c4f2 <_printf_i+0x112>
 800c508:	2b08      	cmp	r3, #8
 800c50a:	d10b      	bne.n	800c524 <_printf_i+0x144>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	07df      	lsls	r7, r3, #31
 800c510:	d508      	bpl.n	800c524 <_printf_i+0x144>
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	6861      	ldr	r1, [r4, #4]
 800c516:	4299      	cmp	r1, r3
 800c518:	bfde      	ittt	le
 800c51a:	2330      	movle	r3, #48	@ 0x30
 800c51c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c520:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c524:	1b92      	subs	r2, r2, r6
 800c526:	6122      	str	r2, [r4, #16]
 800c528:	f8cd a000 	str.w	sl, [sp]
 800c52c:	464b      	mov	r3, r9
 800c52e:	aa03      	add	r2, sp, #12
 800c530:	4621      	mov	r1, r4
 800c532:	4640      	mov	r0, r8
 800c534:	f7ff fee6 	bl	800c304 <_printf_common>
 800c538:	3001      	adds	r0, #1
 800c53a:	d14a      	bne.n	800c5d2 <_printf_i+0x1f2>
 800c53c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c540:	b004      	add	sp, #16
 800c542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	f043 0320 	orr.w	r3, r3, #32
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	4833      	ldr	r0, [pc, #204]	@ (800c61c <_printf_i+0x23c>)
 800c550:	2778      	movs	r7, #120	@ 0x78
 800c552:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	6831      	ldr	r1, [r6, #0]
 800c55a:	061f      	lsls	r7, r3, #24
 800c55c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c560:	d402      	bmi.n	800c568 <_printf_i+0x188>
 800c562:	065f      	lsls	r7, r3, #25
 800c564:	bf48      	it	mi
 800c566:	b2ad      	uxthmi	r5, r5
 800c568:	6031      	str	r1, [r6, #0]
 800c56a:	07d9      	lsls	r1, r3, #31
 800c56c:	bf44      	itt	mi
 800c56e:	f043 0320 	orrmi.w	r3, r3, #32
 800c572:	6023      	strmi	r3, [r4, #0]
 800c574:	b11d      	cbz	r5, 800c57e <_printf_i+0x19e>
 800c576:	2310      	movs	r3, #16
 800c578:	e7ac      	b.n	800c4d4 <_printf_i+0xf4>
 800c57a:	4827      	ldr	r0, [pc, #156]	@ (800c618 <_printf_i+0x238>)
 800c57c:	e7e9      	b.n	800c552 <_printf_i+0x172>
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	f023 0320 	bic.w	r3, r3, #32
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	e7f6      	b.n	800c576 <_printf_i+0x196>
 800c588:	4616      	mov	r6, r2
 800c58a:	e7bd      	b.n	800c508 <_printf_i+0x128>
 800c58c:	6833      	ldr	r3, [r6, #0]
 800c58e:	6825      	ldr	r5, [r4, #0]
 800c590:	6961      	ldr	r1, [r4, #20]
 800c592:	1d18      	adds	r0, r3, #4
 800c594:	6030      	str	r0, [r6, #0]
 800c596:	062e      	lsls	r6, r5, #24
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	d501      	bpl.n	800c5a0 <_printf_i+0x1c0>
 800c59c:	6019      	str	r1, [r3, #0]
 800c59e:	e002      	b.n	800c5a6 <_printf_i+0x1c6>
 800c5a0:	0668      	lsls	r0, r5, #25
 800c5a2:	d5fb      	bpl.n	800c59c <_printf_i+0x1bc>
 800c5a4:	8019      	strh	r1, [r3, #0]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	6123      	str	r3, [r4, #16]
 800c5aa:	4616      	mov	r6, r2
 800c5ac:	e7bc      	b.n	800c528 <_printf_i+0x148>
 800c5ae:	6833      	ldr	r3, [r6, #0]
 800c5b0:	1d1a      	adds	r2, r3, #4
 800c5b2:	6032      	str	r2, [r6, #0]
 800c5b4:	681e      	ldr	r6, [r3, #0]
 800c5b6:	6862      	ldr	r2, [r4, #4]
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f7f3 fe28 	bl	8000210 <memchr>
 800c5c0:	b108      	cbz	r0, 800c5c6 <_printf_i+0x1e6>
 800c5c2:	1b80      	subs	r0, r0, r6
 800c5c4:	6060      	str	r0, [r4, #4]
 800c5c6:	6863      	ldr	r3, [r4, #4]
 800c5c8:	6123      	str	r3, [r4, #16]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5d0:	e7aa      	b.n	800c528 <_printf_i+0x148>
 800c5d2:	6923      	ldr	r3, [r4, #16]
 800c5d4:	4632      	mov	r2, r6
 800c5d6:	4649      	mov	r1, r9
 800c5d8:	4640      	mov	r0, r8
 800c5da:	47d0      	blx	sl
 800c5dc:	3001      	adds	r0, #1
 800c5de:	d0ad      	beq.n	800c53c <_printf_i+0x15c>
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	079b      	lsls	r3, r3, #30
 800c5e4:	d413      	bmi.n	800c60e <_printf_i+0x22e>
 800c5e6:	68e0      	ldr	r0, [r4, #12]
 800c5e8:	9b03      	ldr	r3, [sp, #12]
 800c5ea:	4298      	cmp	r0, r3
 800c5ec:	bfb8      	it	lt
 800c5ee:	4618      	movlt	r0, r3
 800c5f0:	e7a6      	b.n	800c540 <_printf_i+0x160>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	4632      	mov	r2, r6
 800c5f6:	4649      	mov	r1, r9
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	47d0      	blx	sl
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	d09d      	beq.n	800c53c <_printf_i+0x15c>
 800c600:	3501      	adds	r5, #1
 800c602:	68e3      	ldr	r3, [r4, #12]
 800c604:	9903      	ldr	r1, [sp, #12]
 800c606:	1a5b      	subs	r3, r3, r1
 800c608:	42ab      	cmp	r3, r5
 800c60a:	dcf2      	bgt.n	800c5f2 <_printf_i+0x212>
 800c60c:	e7eb      	b.n	800c5e6 <_printf_i+0x206>
 800c60e:	2500      	movs	r5, #0
 800c610:	f104 0619 	add.w	r6, r4, #25
 800c614:	e7f5      	b.n	800c602 <_printf_i+0x222>
 800c616:	bf00      	nop
 800c618:	08010709 	.word	0x08010709
 800c61c:	0801071a 	.word	0x0801071a

0800c620 <memmove>:
 800c620:	4288      	cmp	r0, r1
 800c622:	b510      	push	{r4, lr}
 800c624:	eb01 0402 	add.w	r4, r1, r2
 800c628:	d902      	bls.n	800c630 <memmove+0x10>
 800c62a:	4284      	cmp	r4, r0
 800c62c:	4623      	mov	r3, r4
 800c62e:	d807      	bhi.n	800c640 <memmove+0x20>
 800c630:	1e43      	subs	r3, r0, #1
 800c632:	42a1      	cmp	r1, r4
 800c634:	d008      	beq.n	800c648 <memmove+0x28>
 800c636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c63a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c63e:	e7f8      	b.n	800c632 <memmove+0x12>
 800c640:	4402      	add	r2, r0
 800c642:	4601      	mov	r1, r0
 800c644:	428a      	cmp	r2, r1
 800c646:	d100      	bne.n	800c64a <memmove+0x2a>
 800c648:	bd10      	pop	{r4, pc}
 800c64a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c64e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c652:	e7f7      	b.n	800c644 <memmove+0x24>

0800c654 <_sbrk_r>:
 800c654:	b538      	push	{r3, r4, r5, lr}
 800c656:	4d06      	ldr	r5, [pc, #24]	@ (800c670 <_sbrk_r+0x1c>)
 800c658:	2300      	movs	r3, #0
 800c65a:	4604      	mov	r4, r0
 800c65c:	4608      	mov	r0, r1
 800c65e:	602b      	str	r3, [r5, #0]
 800c660:	f7f7 fcde 	bl	8004020 <_sbrk>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	d102      	bne.n	800c66e <_sbrk_r+0x1a>
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	b103      	cbz	r3, 800c66e <_sbrk_r+0x1a>
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	20004af4 	.word	0x20004af4

0800c674 <_realloc_r>:
 800c674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c678:	4680      	mov	r8, r0
 800c67a:	4615      	mov	r5, r2
 800c67c:	460c      	mov	r4, r1
 800c67e:	b921      	cbnz	r1, 800c68a <_realloc_r+0x16>
 800c680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c684:	4611      	mov	r1, r2
 800c686:	f7ff bc59 	b.w	800bf3c <_malloc_r>
 800c68a:	b92a      	cbnz	r2, 800c698 <_realloc_r+0x24>
 800c68c:	f7ff fbea 	bl	800be64 <_free_r>
 800c690:	2400      	movs	r4, #0
 800c692:	4620      	mov	r0, r4
 800c694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c698:	f000 f81a 	bl	800c6d0 <_malloc_usable_size_r>
 800c69c:	4285      	cmp	r5, r0
 800c69e:	4606      	mov	r6, r0
 800c6a0:	d802      	bhi.n	800c6a8 <_realloc_r+0x34>
 800c6a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c6a6:	d8f4      	bhi.n	800c692 <_realloc_r+0x1e>
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	4640      	mov	r0, r8
 800c6ac:	f7ff fc46 	bl	800bf3c <_malloc_r>
 800c6b0:	4607      	mov	r7, r0
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	d0ec      	beq.n	800c690 <_realloc_r+0x1c>
 800c6b6:	42b5      	cmp	r5, r6
 800c6b8:	462a      	mov	r2, r5
 800c6ba:	4621      	mov	r1, r4
 800c6bc:	bf28      	it	cs
 800c6be:	4632      	movcs	r2, r6
 800c6c0:	f7ff fbc2 	bl	800be48 <memcpy>
 800c6c4:	4621      	mov	r1, r4
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	f7ff fbcc 	bl	800be64 <_free_r>
 800c6cc:	463c      	mov	r4, r7
 800c6ce:	e7e0      	b.n	800c692 <_realloc_r+0x1e>

0800c6d0 <_malloc_usable_size_r>:
 800c6d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6d4:	1f18      	subs	r0, r3, #4
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	bfbc      	itt	lt
 800c6da:	580b      	ldrlt	r3, [r1, r0]
 800c6dc:	18c0      	addlt	r0, r0, r3
 800c6de:	4770      	bx	lr

0800c6e0 <_init>:
 800c6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e2:	bf00      	nop
 800c6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6e6:	bc08      	pop	{r3}
 800c6e8:	469e      	mov	lr, r3
 800c6ea:	4770      	bx	lr

0800c6ec <_fini>:
 800c6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ee:	bf00      	nop
 800c6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6f2:	bc08      	pop	{r3}
 800c6f4:	469e      	mov	lr, r3
 800c6f6:	4770      	bx	lr
